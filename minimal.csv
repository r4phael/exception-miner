,method_id,method_text
0,6f236ce7-c110-453c-af7c-e179f50a2d73,"    public void brew() {

    }
"
1,82d6e504-78f0-478d-9d31-9259a0c62ecc,"    void on();
"
2,7fd7946d-b9af-4814-99d4-cd3389cc8ccb,"    void off();
"
3,a43375bc-87d3-4e84-b887-5622fcd78ffe,"    boolean isHot();
"
4,60b70d87-6356-49e8-8412-fa9eef15e8d2,"    void pump();
"
5,9b4e9583-c105-4603-adb9-b78d4976f552,"    @Override public void pump() {

    }
"
6,91355a6d-08b9-4440-b22f-9948da8e496b,"    @Override public void run() {

    }
"
7,7096ff45-1412-436c-b490-e0be0b3b6651,"    public static void main(String[] args) {
    }
"
8,c97d46ea-36ae-48ba-9f84-01f204e532d1,"    @Override public void on() {

    }
"
9,d01adb08-168f-4884-a6f9-6bc144ca7d64,"    @Override public void off() {

    }
"
10,ef2b8fc8-3aa6-4c27-9c67-2b61079f6f8e,"    @Override public boolean isHot() {
        return false;
    }
"
11,bef2bd62-8cd1-41d6-8069-cd12db317abd,"    @Before
    public void setup() {
        // Here if you need it
    }
"
12,c57bc807-cb34-4e64-a6ed-f122035f1b8f,"    @Test
    public void pump_shouldPrintPumping_whenHeaterIsHot() {

    }
"
13,dbee4def-f583-442d-bdd5-2e3e555bf2e7,"    @Test
    public void pump_shouldNotPrintAnything_whenHeaterIsNotHot() {

    }
"
14,0b88d175-7cec-45b3-bc85-bc87f91841c3,"    @Test
    public void brew_shouldBrewCoffee() {

    }
"
15,43c4c0de-f8ef-41d0-a4ef-c0899b2d505a,"    @Before
    public void setup() {
        // Here if you need it
    }
"
16,269d62ab-eef9-46a4-bc85-a8b5c952af9a,"    @Test
    public void run_shouldBrewCoffee() {

    }
"
17,333fef89-c0ad-48b9-83c6-de41dbc6d28b,"    @Before
    public void setup() {
        // Here if you need it
    }
"
18,0f9c33db-ee56-464f-9744-8fd7d5ddf61a,"    @Test
    public void on_shouldPrintHeating() {

    }
"
19,ddde10e4-473e-446e-b096-515910b0f290,"    @Test
    public void isHot_shouldBeTrue_whenHeaterIsOn() {

    }
"
20,7323632c-e026-408c-82f7-f7b37a97657d,"    @Test
    public void isHot_shouldBeFalse_whenHeaterIsOff() {

    }
"
21,ab31e7d5-83d3-42a6-8456-54680b333c41,"    public String getLastPrintedStatement() {
        return outputStream.toString();
    }
"
22,0443160e-d8e7-490d-b0a2-aa18d54b3b74,"    @Before
    public void setupTestBase() {
        MockitoAnnotations.initMocks(this);

        outputStream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outputStream));
    }
"
23,d360b33c-2df6-45a5-bccf-1e1026e4f847,"    @After
    public void tearDownTestBase() {
        System.setOut(null);
    }
"
24,40402241-cff3-4356-809c-80344129f472,"	public static Hashtable<String, Team> parseTeams(Reader reader, Collection<Stat> stats) {
		
		CSVReader csvReader = new CSVReader(reader);
		return parseStats(csvReader, stats);
		
	}
"
25,9b98d618-eb43-4cbd-8170-59225acfc62f,"	private static Hashtable<String, Team> parseStats(CSVReader reader, Collection<Stat> stats) {
		
		Hashtable<String, Team> teams = new Hashtable<String, Team>();
		List<String[]> lines; 
		try {
			lines = reader.readAll();
		} catch (IOException e) {
			System.out.println(""Error reading the CSV file."");
			return null;
		}
		
		for (int i = 0; i < lines.size(); i++) {
			String[] tokens = lines.get(i);
			
			if (tokens.length == 1 && !tokens[0].trim().equals("""")) { 		// If this is a single token
				for (Stat stat : stats) { 				 				// Check all the stats
					if (stat.table.equals(tokens[0])) { 	    // And see if this table has that stat
						
						int j = i + 1;
						
						for (; j < lines.size(); j++)
							if (lines.get(j)[0].equalsIgnoreCase(""Rank""))
								break;
						
						String[] columnTitles = lines.get(j);
						int columnIndex = findColumnIndex(columnTitles, stat.column);
						
						j++;
						
						while (true) {
							String[] values = lines.get(j);
							if ((values.length == 1 && values[0].trim().length() == 0) ||
									values[0].equals(""Reclassifying""))
								break;
							
							Team team = getTeam(teams, values[1]);
							team.stats.put(stat.name, Double.parseDouble(values[columnIndex]));
							
							j += 1;
						}
					}
				}
			}
		}
				
		return teams;
		
	}
"
26,13c37b77-a5be-439c-85c6-f75ac272d156,"	private static Team getTeam(Hashtable<String, Team> teams, String name) {
		Team team = teams.get(name);
		if (team == null) {
			team = new Team(name);
			teams.put(name, team);
		}
		return team;
	}
"
27,31b3bab1-0c1e-4e3d-bf6e-e5ebcf729d4d,"	private static int findColumnIndex(String[] columns, String column) {
		for (int i = 0; i < columns.length; i++)
			if (columns[i].equals(column))
				return i;
		return -1;
	}
"
28,49df72d1-3e4d-4158-ba94-f6c9d20bf6d3,"		public Stat(String table, String column, String name) {
			this.table = table;
			this.column = column;
			this.name = name;
		}
"
29,60a04a1d-c4de-4e4b-b574-52999cc555b9,"		public String toString() {
			return name;
		}
"
30,00cc580a-ca1a-4cc7-9fd0-5799ce24f3aa,"	public static Round parseFirstRound(Reader reader, Hashtable<String, Team> teams) throws Exception {
		Round games = new Round();
		
		CSVReader csvReader = new CSVReader(reader);
		
		List<String[]> lines; 
		try {
			lines = csvReader.readAll();
		} catch (IOException e) {
			System.out.println(""Error reading the CSV file."");
			return null;
		}
		
		for (String[] tokens : lines) {
			if (tokens.length == 1 && tokens[0].trim().length() == 0)
				continue;
			
			Team[] gameTeams = new Team[2];
			gameTeams[0] = teams.get(tokens[0]);
			gameTeams[1] = teams.get(tokens[1]);
			
			if (gameTeams[0] == null)
				throw new Exception(""Team not found: "" + tokens[0]);
			
			if (gameTeams[1] == null)
				throw new Exception(""Team not found: "" + tokens[1]);
			
			if (tokens.length >= 4) {
				gameTeams[0].seed = Integer.parseInt(tokens[2]);
				gameTeams[1].seed = Integer.parseInt(tokens[3]);
			}
			
			for (int i = 0; i < 2; i++)
				if (gameTeams[i] == null)
					throw new Exception(""Team not found: "" + tokens[i]);
			
			Game game = new Game(gameTeams);
			game.name = String.format(""R0 G%d"", games.size());
			games.add(game);		
		}
		
		return games;
	}
"
31,ee4edce8-a08e-444f-88e6-d78c4ad6b13e,"	public static Hashtable<String, CompiledStat> compileStats(Vector<Stat> stats, Collection<Team> teams) {
		
		Vector<Team> teamVector = new Vector<Team>(teams);
		Hashtable<String, CompiledStat> compiledStats = new Hashtable<String, CompiledStat>();
		
		for (Stat stat : stats) {
			double[] values = new double[teams.size()];
			for (int i = 0; i < teams.size(); i++) {
				Team team = teamVector.get(i);
				values[i] = team.getStat(stat.name);
			}
			
			compiledStats.put(stat.name, new CompiledStat(stat.name, values));
		}
		
		return compiledStats;
		
	}
"
32,1cdd3745-7fe2-46a6-9bc7-4b5c74c6c9c8,"	public Tournament(Round firstRound, Hashtable<String, CompiledStat> compiledStats, Referee scoreable) {
		
		if (md5 == null) {
			try {
				md5 = MessageDigest.getInstance(""MD5"");
			} catch (NoSuchAlgorithmException e) {
				e.printStackTrace();
			}
		}
		
		this.compiledStats = compiledStats;
		this.scoreable = scoreable;
		
		Round duplicate = new Round();
		
		for (Game game : firstRound) {
			Game dupeGame = new Game(game.teams, scoreable);
			dupeGame.name = game.name;
			duplicate.add(dupeGame);
		}
		
		rounds.add(duplicate);
		appendNextRound(duplicate);
	}
"
33,74d2df0d-4146-4fcf-9dea-4eded8d0bacb,"	public void appendNextRound(Round round) {
		Round nextRound = new Round();
		rounds.add(nextRound);
		
		int roundNumber = rounds.indexOf(nextRound);
		int gameCount = 0;
		
		for (int i = 0; i < round.size(); i += 2) {
			Game newGame = new Game();
			newGame.referee = scoreable;
			
			Game[] previousGames = new Game[] { round.get(i), round.get(i + 1) };
			for (Game previousGame : previousGames)
				previousGame.nextGame = newGame;
			
			newGame.previousGames = previousGames;
			newGame.name = String.format(""R%d G%d"", roundNumber, gameCount);
			nextRound.add(newGame);
			gameCount++;
		}
		
		
		if (nextRound.size() == 1)
			return;
		
		appendNextRound(nextRound);
	}
"
34,361efa41-2cb0-47e8-acfa-031ed5e2c944,"	public Team play() {
		return play(rounds.get(0));
	}
"
35,a5f7b88a-ebeb-4a88-9e62-24ac403cf915,"	private Team play(Round round) {
		for (Game game : round) {
			game.compiledStats = compiledStats;
			Team winner = game.play();
			
			if (round.size() == 1)
				return winner;
			
			game.nextGame.addTeam(winner);
			
		}
	
		return play(rounds.get(rounds.indexOf(round) + 1));
	}
"
36,7f1367e5-1c2c-4b6c-b203-9785d84fa17f,"	public String toPrintableString() {
		StringBuilder builder = new StringBuilder();
		
		int maxNameLength = 0;
		for (Game game : rounds.get(0)) 
			maxNameLength = Math.max(Math.max(game.teams[0].toString().length(), game.teams[1].toString().length()), maxNameLength);
		
		int columnWidth = maxNameLength + COLUMN_PADDING +
			COLUMN_PREFIX_MARGIN + COLUMN_SUFFIX_MARGIN;
		
		for (int line = 0; line < PRINT_HEIGHT; line++) {
			for (int round = 0; round < rounds.size(); round++) {
				if (round == 0)
					builder.append(teamAt(line, round, columnWidth - COLUMN_PREFIX_MARGIN));
				else
					builder.append(teamAt(line, round, columnWidth));
			}
			builder.append(""\n"");
		}
			
		return builder.toString();
	}
"
37,1b162f83-837c-4368-aed3-f7a6f48dc971,"	private String teamAt(int line, int roundNumber, int columnWidth) {
		Round round = rounds.get(roundNumber);
		Team team = null;
		String teamName = """";
		int teamScore = 0;
		
		int linesPerGame = PRINT_HEIGHT / round.size();
		int lineGame = (int)Math.floor((double)line / (double)linesPerGame);
		
		int startLine = lineGame * linesPerGame;
		int bottomGameLine = startLine + linesPerGame / 2;
		int topGameLine = bottomGameLine - 1;
		
		Game game = round.get(lineGame);
		if (line == topGameLine) {
			team = game.teams[0];
			if (roundNumber > 0)
				teamName += ""\\ "";
			teamScore = (int)game.scores[0];
		} else if (line == bottomGameLine) {
			team = round.get(lineGame).teams[1];
			if (roundNumber > 0)
				teamName += ""/ "";
			teamScore = (int)game.scores[1];
		}
		
		if (team != null) {
			teamName += team.toString();
			teamName += String.format("" - %d"", teamScore);
			if (team == game.winner) {
				teamName += "" <"";
				if (game.winner.seed > game.loser.seed)
					teamName += ""<<"";
			}
		}
		
		int end = teamName.length() == 0 ? columnWidth - EMPTY_ROW_PULL * roundNumber : columnWidth; 
		for (int i = teamName.length(); i < end; i++)
			teamName += "" "";
		
		return teamName;
	}
"
38,aa6144fc-3d7b-476d-8710-fa95bd1ae604,"	public String toSummaryString() {

		StringWriter stringWriter = new StringWriter();
		CSVWriter writer = new CSVWriter(stringWriter);
		
		String[] columns = new String[0];
		
		for (Round round : rounds) {
			for (Game game : round) {
				for (int i = 0; i < 2; i++) {
					if (columns.length == 0) {
						if (game.summaryStats.size() == 0)
							return """";
						
						columns = game.summaryStats.toArray(columns);
						writer.writeNext(columns);
					}
					
					String[] values = new String[columns.length];
					
					for (int j = 0; j < values.length; j++)
						values[j] = game.summaries[i].get(columns[j]).toString();
					
					writer.writeNext(values);
				}
			}
		}

		
		return stringWriter.toString();
				
	}
"
39,b7abf633-88f0-4da4-a291-0dddd4967f90,"	public byte[] getHash() {		
		String id = this.rounds.toString();
		return md5.digest(id.getBytes());
	}
"
40,fcf9f5cf-e8f2-435f-9f9e-0c758337200c,"	public Team getWinner() {
		return rounds.lastElement().get(0).winner;
	}
"
41,0cc2f601-98fd-4b82-a71c-e45faafdaaed,"	public CompiledStat(String name, double[] values) {
		this.name = name;
		computeStats(values);
	}
"
42,e68e9a83-13d7-42f6-9f7f-9412b0f26091,"	private void computeStats(double[] values) {
		
		double sum = 0.0;
		
		min = values[0];
		max = values[0];
		
		for (double value : values) {
			sum += value;
			min = Math.min(min, value);
			max = Math.max(max, value);
		}
		
		mean = sum / (double)values.length;
		dev = calculateDev(values);
	}
"
43,ef71bb47-3449-4a6d-b87b-aea767c16460,"	private double calculateDev(double[] values) {
		return Math.pow(calculateVar(values), 0.5);
	}
"
44,1c2bbec3-9c8c-4ccd-a403-9d2b717e94f3,"	static double calculateVar(double[] values) {
		double total = 0.0;
		double sTotal = 0.0;
		double scalar = 1.0/(double)(values.length - 1);
		
		for (int i = 0; i < values.length; i++) {
			total += values[i];
			sTotal += Math.pow(values[i], 2);
		}
		
		return (scalar * (sTotal - (Math.pow(total, 2) / values.length)));
	}	
"
45,c8cf2002-49af-4839-af24-c993830e757d,"	public String toString() {
		return name;
	}
"
46,ccc3d7da-ee1a-47f4-97b7-63f28cd0ce9e,"	public Team play() {
		referee.playGame(this);
		return winner;
	}
"
47,0e9df48f-abac-4341-b361-ac452de405ab,"	public Game() {};
"
48,e3daea68-ddc9-4e73-9640-85419546491d,"	public Game(Team[] teams) {
		this.teams = teams;
	}
"
49,2d7e7694-8332-41e4-832c-8b012c2c8573,"	public Game(Team[] teams, Referee scoreable) {
		this(teams);
		this.referee = scoreable;
	}
"
50,81636b37-2c4b-473a-ad3e-e1ae53e75fd6,"	public void addTeam(Team team) {
		for (int i = 0; i < teams.length; i++) {
			if (teams[i] == null) {
				teams[i] = team;
				return;
			}
		}
	}
"
51,f07f4d3f-0f21-4aa6-a91d-128b4ea95a1c,"	public String toString() {
		return String.format(""%s (%s vs. %s)"", name, teams[0].toString(), teams[1].toString());
	}
"
52,e8362d9f-e866-444d-bd3b-e92c495e51db,"	public static void main(String[] args) throws Exception {
		
		if (args.length < 3 || args[0].isEmpty() || args[1].isEmpty() || args[2].isEmpty()) {
			System.out.println(""Too few arguments. Required arguments: [year] [men|women] [referee class name]"");
			return;
		}
		
		if (!args[1].equals(""men"") && !args[1].equals(""women"")) {
			System.out.println(""The second argument must be 'men' or 'women'."");
			return;
		}
		
		String year = args[0];
		String sex = args[1];
		String refereeClassName = args[2];
		
		Referee referee;
		try {
			referee = (Referee) Class.forName(""bracketeer.referees."" + refereeClassName).newInstance();
		} catch (Exception ex) {
			System.out.println(""The referee class '"" + refereeClassName + ""' was not found in the package bracketeer.referees. Check your capitalization and be sure to recompile."");
			return;			
		}
		
		Vector<Stat> stats = new Vector<Stat>();
		stats.add(new Stat(""Division IWon-Lost Percentage"", ""Pct"", ""Win %""));
		stats.add(new Stat(""Division IScoring Margin"", ""PPG"", ""PPG""));
		stats.add(new Stat(""Division IScoring Margin"", ""OPP PPG"", ""OPP PPG""));
		stats.add(new Stat(""Division IScoring Margin"", ""SCR MAR"", ""SCR MAR""));
		stats.add(new Stat(""Division IRebound Margin"", ""RPG"", ""RPG""));
		stats.add(new Stat(""Division IField-Goal Percentage"", ""FG%"", ""FG%""));
		stats.add(new Stat(""Division IField-Goal Percentage"", ""FGA"", ""FGA""));
		stats.add(new Stat(""Division IField-Goal Percentage Defense"", ""OPP FG"", ""OPP FG""));
		stats.add(new Stat(""Division IField-Goal Percentage Defense"", ""OPP FGA"", ""OPP FGA""));
		stats.add(new Stat(""Division IField-Goal Percentage Defense"", ""OPP FG%"", ""OPP FG%""));
		stats.add(new Stat(""Division IPersonal Fouls Per Game"", ""PFPG"", ""PFPG""));
		stats.add(new Stat(""Division IFree-Throw Percentage"", ""FT%"", ""FT%""));
		stats.add(new Stat(""Division IFree-Throw Percentage"", ""FTA"", ""FTA""));
		stats.add(new Stat(""Division IBlocked Shots Per Game"", ""BKPG"", ""BKPG""));
		stats.add(new Stat(""Division ISteals Per Game"", ""STPG"", ""STPG""));
		stats.add(new Stat(""Division ITurnovers Per Game"", ""TOPG"", ""TOPG""));
		stats.add(new Stat(""Division ITurnover Margin"", ""Opp TO"", ""OPP TOPG""));
		stats.add(new Stat(""Division IAssists Per Game"", ""APG"", ""APG""));
		stats.add(new Stat(""Division IThree Pt FG Defense"", ""Pct"", ""OPP 3FG%""));
		stats.add(new Stat(""Division IThree-Point Field-Goal Percentage"", ""3FG%"", ""3FG%""));
		stats.add(new Stat(""Division IThree-Point Field-Goal Percentage"", ""3FGA"", ""3FGA""));
		stats.add(new Stat(""Division IThree-Point Field-Goal Percentage"", ""GM"", ""GM""));
		
		if (args[1].equals(""women"")) {
			stats.add(new Stat(""Division ITurnover Margin"", ""Margin"", ""TO RATIO""));
		} else {
			stats.add(new Stat(""Division ITurnover Margin"", ""Ratio"", ""TO RATIO""));
		}
		
		String rankingsFileName = ""seasons/"" + year + ""/rankings_"" + sex + "".csv"";
		String firstRoundFileName = ""seasons/"" + year + ""/firstround_"" + sex + "".csv"";
		String outputFileName = ""results/"" + refereeClassName + "".csv"";
		
		new File(""results"").mkdir();
		
		Hashtable<String, Team> teams = Parser.parseTeams(new FileReader(rankingsFileName), stats);
		
		Round firstRound = Parser.parseFirstRound(new FileReader(firstRoundFileName), teams);
		
		Vector<Team> firstRoundTeams = new Vector<Team>();
		
		for (Game game : firstRound) {
			firstRoundTeams.add(game.teams[0]);
			firstRoundTeams.add(game.teams[1]);
		}
		
		//Hashtable<String, CompiledStat> compiledStats = Parser.compileStats(stats, firstRoundTeams);
		
		
		
		// To play one game:
		
		Tournament t = new Tournament(firstRound, null, referee);
		t.play();
		System.out.print(t.toPrintableString());
		
		FileWriter writer = new FileWriter(outputFileName);
		writer.write(t.toSummaryString());
		writer.close();
		
		// To play many games:
		
		/*Hashtable<String, Tournament> tourneys = new Hashtable<String, Tournament>();
		
		for (int i = 0 ; i < TRIALS; i++) {
			Tournament t = new Tournament(firstRound, compiledStats, scoreable);
			Team winner = t.play();
			
			winner.wins++;
			
			tourneys.put(new String(t.getHash()), t);
		}
		
		
		Vector<Team> sortedTeams = new Vector<Team>(teams.values());
		Collections.sort(sortedTeams, new TopWins());
		
		System.out.println(""\nSample bracket from the winningest team:\n"");

		for (Tournament t : tourneys.values()) {
			if (t.getWinner() == sortedTeams.firstElement()) {
				System.out.print(t.toPrintableString());
				break;
			}
		}

		System.out.printf(""\n%d tourneys were duplicates\n\n"", TRIALS - tourneys.size());		
		System.out.println(""Wins out of "" + TRIALS + "":\n"");
		
		for (Team team : sortedTeams)
			if (team.wins > 0)
				System.out.printf(""%s: %d\n"", team.toString(), team.wins);
		*/
	}
"
53,c1004516-cd05-41f1-95b1-f4f00725c7e8,"		public int compare(Team o1, Team o2) {
			if (o1.wins > o2.wins)
				return -1;
			else if (o1.wins < o2.wins)
				return 1;
			else
				return 0;
		}
"
54,d586efa1-f8ac-4cbc-ad23-691907eff0d3,"	public Team(String name) {
		this.name = name;
	}
"
55,ce89f39d-3fc1-4051-9ff6-4d4cd4ea9c9e,"	public Team(String name, int seed) {
		this.name = name;
		this.seed = seed;
	}
"
56,79ad7982-3f07-4051-8d56-4ccbcddea060,"	public String toString() {
		if (seed >= 10)
			return String.format(""%d %s"", seed, name);
		else if (seed > 0)
			return String.format("" %d %s"", seed, name);
		else
			return name;
	}
"
57,8a7303ef-6db8-4694-9914-812afea69afa,"	public Double getStat(String stat) {
		return this.stats.get(stat);
	}
"
58,d2c62349-a16e-417f-9596-fbea4ef9ad36,"	public void playGame(Game game) {
		
		game.summaries[0] = new Hashtable<String, String>();
		game.summaries[1] = new Hashtable<String, String>();
		
		game.summaryStats.add(""Game"");
		game.summaries[0].put(""Game"", game.name);
		game.summaries[1].put(""Game"", game.name);
		
		game.summaryStats.add(""Team"");		
		
		game.summaryStats.add(""BASE PTS"");
		game.summaryStats.add(""FG BONUS"");
		game.summaryStats.add(""WIN BONUS"");
		game.summaryStats.add(""TO PTS"");
		game.summaryStats.add(""TO PTS LOST"");
		game.summaryStats.add(""PF PTS"");
		game.summaryStats.add(""RB PTS"");
		game.summaryStats.add(""BLK PTS"");
		game.summaryStats.add(""PTS"");
		
		game.scores[0] = calculateScore(game.teams[0], game.teams[1], game.compiledStats, game.summaries[0]);
		game.scores[1] = calculateScore(game.teams[1], game.teams[0], game.compiledStats, game.summaries[1]);
	
		if (game.scores[0] > game.scores[1]) {
			game.winner = game.teams[0];
			game.loser = game.teams[1];
		} else {
			game.winner = game.teams[1];
			game.loser = game.teams[0];
		}
	}
"
59,0b55f556-618e-43c2-9d10-ca5d765e9b9e,"	private Double calculateScore(Team home, Team away,
			Hashtable<String, CompiledStat> compiledStats,
			Hashtable<String, String> summary) {
		
		// Base score (30% weight)
		Double basePts = 0.4 * (0.4 * home.getStat(""PPG"") + 0.6 * away.getStat(""OPP PPG""));
		Double pts = basePts;
		
		// Shooting bonus
		Double fgBonus = basePts * home.getStat(""FG%"") * 0.01;
		pts += fgBonus;
		
		// Win bonus (10% of the base points for 100%)
		Double winBonus = 0.1 * basePts * home.getStat(""Win %"") * 0.01;
		pts += winBonus;
		
		// Turnovers (gain 2 points for each out-turnover and lose 2 the same way)
		Double turnoverLostPoints = -2.0 * (home.getStat(""TOPG"") + away.getStat(""STPG""));
		pts += turnoverLostPoints;
		
		Double turnoverGainedPoints = 2.0 * (home.getStat(""STPG"") + away.getStat(""TOPG""));
		pts += turnoverGainedPoints;
		
		// Personal fouls (gain 2 points per PF at FT%)
		Double pfPts = 2 * home.getStat(""FT%"") * 0.01 * away.getStat(""PFPG""); 
		pts += pfPts;
		
		// Rebounds (gain 2 points for each out-rebound)
		Double reboundPts = 2.0 * (home.getStat(""RPG"") - away.getStat(""RPG""));
		pts += reboundPts;
		
		// Block (gain 2 points for each out-block)
		Double blockPts = 2.0 * (home.getStat(""BKPG"") - away.getStat(""BKPG""));
		pts += blockPts;
		
		// Summarize
		summary.put(""BASE PTS"", basePts.toString());
		summary.put(""FG BONUS"", fgBonus.toString());
		summary.put(""WIN BONUS"", winBonus.toString());
		summary.put(""TO PTS"", turnoverGainedPoints.toString());
		summary.put(""TO PTS LOST"", turnoverLostPoints.toString());
		summary.put(""PF PTS"", pfPts.toString());
		summary.put(""RB PTS"", reboundPts.toString());
		summary.put(""BLK PTS"", blockPts.toString());
		summary.put(""PTS"", pts.toString());
		summary.put(""Team"", home.toString());
		
		return pts;
		
	}
"
60,801c9cc5-df5b-4173-96d8-437aa36f267a,"	private double randomAbout(double range) {
		
		double sign = (Math.random()  - 0.5);
		sign = (sign < 0 ? -1 : 1);
		
		return sign * range;
		
	}
"
61,04e3c961-f70f-460d-8882-41d147ff9449,"	private double randomRange(double start, double end) {
		return Math.random() * (end - start) + start;
	}
"
62,d4bac56b-2ab5-4042-bff8-3159905a0206,"	public void playGame(Game game) {
		game.scores[0] = calculateScore(game.teams[0], game.teams[1], game.compiledStats);
		game.scores[1] = calculateScore(game.teams[1], game.teams[0], game.compiledStats);
	
		if (game.scores[0] > game.scores[1]) {
			game.winner = game.teams[0];
			game.loser = game.teams[1];
		} else {
			game.winner = game.teams[1];
			game.loser = game.teams[0];
		}
	}
"
63,e70fcb04-5a8a-480d-ae57-ce783514a2d8,"	private double calculateScore(Team home, Team away, Hashtable<String, CompiledStat> compiledStats) {
		// Base expected score
		double baseScore = (0.5) * (1.0 * home.getStat(""PPG"") + 1.0 * away.getStat(""OPP PPG"")) / 2.0;
		double score = baseScore + randomAbout(baseScore * VARIABILITY);
				
		// Give a bonus for having wins
		double winBonus = (0.4) * (home.getStat(""Win %""));
		score += winBonus + randomAbout(winBonus * VARIABILITY);
		
		// Decrease the score by the opponent's scoring margin
		double scoringMarginMargin = away.getStat(""SCR MAR"") - home.getStat(""SCR MAR""); 
		double scoringMarginPoints = 0.7 * scoringMarginMargin + randomAbout(scoringMarginMargin * VARIABILITY); 
		score -= scoringMarginPoints;
		
		// Turnovers
		double turnoverPoints = 0.4 * (home.getStat(""TOPG"") + away.getStat(""STPG""));
		score -= turnoverPoints * randomAbout(turnoverPoints * VARIABILITY);
		
		// Personal fouls
		double pfPoints = 1.5 * home.getStat(""FT%"") * 0.01 * away.getStat(""PFPG""); 
		score += pfPoints + randomAbout(pfPoints * VARIABILITY);
		
		double reboundDiff = home.getStat(""RPG"") - away.getStat(""RPG"");
		score += 1 * reboundDiff + randomAbout(reboundDiff * VARIABILITY);
		
		double opponentBlocks = 1 * away.getStat(""BKPG"");
		score -= opponentBlocks + randomAbout(opponentBlocks * VARIABILITY);
		
		return score;
	}
"
64,49bb829f-81c7-4a13-a4df-c9c5f4ec82fd,"	private double randomAbout(double range) {
		
		double sign = (Math.random()  - 0.5);
		sign = (sign < 0 ? -1 : 1);
		
		return sign * range;
		
	}
"
65,7bb57925-2082-4b4e-93cc-75de539726a2,"	public void playGame(Game game) {

		// Potential possession outcomes:
		// Made 2FG
		// Made 3FG
		// Missed 2FG
		// Missed 3FG
		// Offensive foul
		// Defensive foul
		// Turnover
		
		TeamStatus[] status = new TeamStatus[2];
		status[0] = new TeamStatus();
		status[1] = new TeamStatus();
		
		int timeLeft = SEC_PER_GAME; // 40 minutes
		int offenseTeamIndex = _rand.nextInt(1); // Tip-off
		
		while (true) {
			if (timeLeft < 0) break;
			Team offense = game.teams[offenseTeamIndex];
			Team defense = game.teams[(offenseTeamIndex + 1) % 2];
			TeamStatus offenseStatus = status[offenseTeamIndex];
			TeamStatus defenseStatus = status[(offenseTeamIndex + 1) % 2];
			
			int possessionLength = (int)constrain(gaussian(20, 5), 5, 35);
			boolean shotMade = false;
			
			// Call a timeout if opponent has too much momentum
			if (defenseStatus.momentum > 3 && offenseStatus.timeOuts > 0) {
				offenseStatus.timeOuts--;
				offenseStatus.momentum = 1;
				defenseStatus.momentum = 1;
			}
			
			double turnoverPercent = (offense.getStat(""TOPG"") + defense.getStat(""STPG"")) / 2.0 / POSS_PER_GAME;
			if (happens(turnoverPercent)) {
				// Turnover; no shot made
				possessionLength /= 2;
				
			} else {
				// Attempt a shot
				// First determine type of shot (FG or 3FG)
				int shotTypeSum, shotTypeValue;
				if (offense.getStat(""3FGA"") == null) {
					// Force FG
					shotTypeValue = 0;
					shotTypeSum = 1;
				} else {
					shotTypeSum = offense.getStat(""FGA"").intValue() + offense.getStat(""3FGA"").intValue();
					shotTypeValue = _rand.nextInt(shotTypeSum);
				}
				
				if (shotTypeValue < offense.getStat(""FGA"")) {
					// FG attempt
					for (int i = 0; i < offenseStatus.momentum / 2; i++) {
						double shotPercent = (offense.getStat(""FG%"") + defense.getStat(""OPP FG%"")) / 2.0 / 100.0;
						if (happens(shotPercent)) {
							// FG made
							offenseStatus.points += 2;
							offenseStatus.momentum += 1;
							defenseStatus.momentum = Math.max(1, defenseStatus.momentum - 1);
							shotMade = true;
							break;
						}
					}
				} else {
					// 3FG attempt
					for (int i = 0; i < offenseStatus.momentum / 2; i++) {
						double shotPercent = (offense.getStat(""3FG%"") + defense.getStat(""OPP 3FG%"")) / 2.0 / 100.0;
						if (happens(shotPercent)) {
							// 3FG made
							offenseStatus.points += 3;
							offenseStatus.momentum += 2;
							defenseStatus.momentum = Math.max(1, defenseStatus.momentum - 1);
							shotMade = true;
							break;
						}
					}
				}
			}
			
			if (!shotMade) {
				// Decrement momentum 
				offenseStatus.momentum = Math.max(1, offenseStatus.momentum - 1);
			}
			
			timeLeft -= possessionLength;
			
			if (timeLeft <= HALFTIME && timeLeft + possessionLength >= HALFTIME) {
				// Halftime!
				offenseStatus.timeOuts = 5;
				offenseStatus.momentum = 1;
				offenseStatus.halfFouls = 0;
				defenseStatus.timeOuts = 5;
				defenseStatus.momentum = 1;
				defenseStatus.halfFouls = 0;
			}
			
			offenseTeamIndex = (offenseTeamIndex + 1) % 2;
		}
		
		game.scores[0] = status[0].points;
		game.scores[1] = status[1].points;
			
		//playPossession(timeLeft, status, startingTeam);
		
		if (game.scores[0] > game.scores[1]) {
			game.winner = game.teams[0];
			game.loser = game.teams[1];
		} else {
			game.winner = game.teams[1];
			game.loser = game.teams[0];
		}
	}
"
66,bd49039d-fe8b-42a4-b540-0fe7c4db548d,"	private double gaussian(double mean, double stdDev) {
		return _rand.nextGaussian() * stdDev + mean;
	}
"
67,316e2b8f-e376-4b5a-afcd-7315236a32f7,"	private double constrain(double value, double min, double max) {
		if (value < min) return min;
		if (value > max) return max;
		return value;
	}
"
68,87430e5d-3bbd-42fe-aa14-a6a015b4cab1,"	private boolean happens(double percent) {
		// percent ranges from 0 to 1
		return _rand.nextDouble() < percent;
	}
"
69,f12d36c7-2326-47b6-9ab8-00a370a03338,"	public void playGame(Game game);
"
70,8b891c45-0683-4522-a69b-e3bd85944730,"    public CSVReader(Reader reader) {
        this(reader, DEFAULT_SEPARATOR);
    }
"
71,8938cb11-569e-4231-b451-3411b6e1a462,"    public CSVReader(Reader reader, char separator) {
        this(reader, separator, DEFAULT_QUOTE_CHARACTER);
    }
"
72,67c53d6c-d868-4ab6-a953-a6899a64e9e2,"    public CSVReader(Reader reader, char separator, char quotechar) {
        this(reader, separator, quotechar, DEFAULT_SKIP_LINES);
    }
"
73,82428d1e-4b1b-4698-9875-3a3c45173bfc,"    public CSVReader(Reader reader, char separator, char quotechar, int line) {
        this.br = new BufferedReader(reader);
        this.separator = separator;
        this.quotechar = quotechar;
        this.skipLines = line;
    }
"
74,8dad8a77-e00c-4065-912e-3b3077300365,"    public List readAll() throws IOException {

        List allElements = new ArrayList();
        while (hasNext) {
            String[] nextLineAsTokens = readNext();
            if (nextLineAsTokens != null)
                allElements.add(nextLineAsTokens);
        }
        return allElements;

    }
"
75,6e6d5bf6-dc61-4879-a123-dfc34687fda1,"    public String[] readNext() throws IOException {

        String nextLine = getNextLine();
        return hasNext ? parseLine(nextLine) : null;
    }
"
76,1e09b27b-dbd2-4227-98e3-27f26cefb5f9,"    private String getNextLine() throws IOException {
    	if (!this.linesSkiped) {
            for (int i = 0; i < skipLines; i++) {
                br.readLine();
            }
            this.linesSkiped = true;
        }
        String nextLine = br.readLine();
        if (nextLine == null) {
            hasNext = false;
        }
        return hasNext ? nextLine : null;
    }
"
77,e1855207-da1f-4266-ae2b-17cc89ac6c3f,"    private String[] parseLine(String nextLine) throws IOException {

        if (nextLine == null) {
            return null;
        }

        List tokensOnThisLine = new ArrayList();
        StringBuffer sb = new StringBuffer();
        boolean inQuotes = false;
        do {
        	if (inQuotes) {
                // continuing a quoted section, reappend newline
                sb.append(""\n"");
                nextLine = getNextLine();
                if (nextLine == null)
                    break;
            }
            for (int i = 0; i < nextLine.length(); i++) {

                char c = nextLine.charAt(i);
                if (c == quotechar) {
                	// this gets complex... the quote may end a quoted block, or escape another quote.
                	// do a 1-char lookahead:
                	if( inQuotes  // we are in quotes, therefore there can be escaped quotes in here.
                	    && nextLine.length() > (i+1)  // there is indeed another character to check.
                	    && nextLine.charAt(i+1) == quotechar ){ // ..and that char. is a quote also.
                		// we have two quote chars in a row == one quote char, so consume them both and
                		// put one on the token. we do *not* exit the quoted text.
                		sb.append(nextLine.charAt(i+1));
                		i++;
                	}else{
                		inQuotes = !inQuotes;
                		// the tricky case of an embedded quote in the middle: a,bc""d""ef,g
                		if(i>2 //not on the begining of the line
                				&& nextLine.charAt(i-1) != this.separator //not at the begining of an escape sequence 
                				&& nextLine.length()>(i+1) &&
                				nextLine.charAt(i+1) != this.separator //not at the	end of an escape sequence
                		){
                			sb.append(c);
                		}
                	}
                } else if (c == separator && !inQuotes) {
                    tokensOnThisLine.add(sb.toString());
                    sb = new StringBuffer(); // start work on next token
                } else {
                    sb.append(c);
                }
            }
        } while (inQuotes);
        tokensOnThisLine.add(sb.toString());
        return (String[]) tokensOnThisLine.toArray(new String[0]);

    }
"
78,22818b98-f3cf-420f-9313-a354baba46e1,"    public void close() throws IOException{
    	br.close();
    }
"
79,37f4c1ea-7224-4499-9edb-3082506a42ff,"    public CSVWriter(Writer writer) {
        this(writer, DEFAULT_SEPARATOR);
    }
"
80,014ba124-b5eb-4bb8-8fe0-06c7850e8279,"    public CSVWriter(Writer writer, char separator) {
        this(writer, separator, DEFAULT_QUOTE_CHARACTER);
    }
"
81,a6a2b5fe-3b3c-41c3-ac2d-6881a338d83c,"    public CSVWriter(Writer writer, char separator, char quotechar) {
    	this(writer, separator, quotechar, DEFAULT_ESCAPE_CHARACTER);
    }
"
82,280b3078-3b46-4e09-92c4-b81d34cde6c1,"    public CSVWriter(Writer writer, char separator, char quotechar, char escapechar) {
        this(writer, separator, quotechar, escapechar, DEFAULT_LINE_END);
    }
"
83,2fe681f1-5670-431d-87f5-442107e9c1be,"    public CSVWriter(Writer writer, char separator, char quotechar, String lineEnd) {
        this(writer, separator, quotechar, DEFAULT_ESCAPE_CHARACTER, lineEnd);
    }   
"
84,03bb1243-5dbc-412f-8296-1c204c1602ba,"    public CSVWriter(Writer writer, char separator, char quotechar, char escapechar, String lineEnd) {
        this.rawWriter = writer;
        this.pw = new PrintWriter(writer);
        this.separator = separator;
        this.quotechar = quotechar;
        this.escapechar = escapechar;
        this.lineEnd = lineEnd;
    }
"
85,76e68560-8d8b-4268-9bd2-5c7ea8842925,"    public void writeAll(List allLines)  {

        for (Iterator iter = allLines.iterator(); iter.hasNext();) {
            String[] nextLine = (String[]) iter.next();
            writeNext(nextLine);
        }

    }
"
86,8a2f292d-179b-4018-83d4-8351be6ddf8b,"    protected void writeColumnNames(ResultSetMetaData metadata)
    	throws SQLException {
    	
    	int columnCount =  metadata.getColumnCount();
    	
    	String[] nextLine = new String[columnCount];
		for (int i = 0; i < columnCount; i++) {
			nextLine[i] = metadata.getColumnName(i + 1);
		}
    	writeNext(nextLine);
    }
"
87,eeed4cf8-ec15-4c13-a8fe-e669d9a6aff1,"    public void writeAll(java.sql.ResultSet rs, boolean includeColumnNames)  throws SQLException, IOException {
    	
    	ResultSetMetaData metadata = rs.getMetaData();
    	
    	
    	if (includeColumnNames) {
			writeColumnNames(metadata);
		}

    	int columnCount =  metadata.getColumnCount();
    	
    	while (rs.next())
    	{
        	String[] nextLine = new String[columnCount];
        	
        	for (int i = 0; i < columnCount; i++) {
				nextLine[i] = getColumnValue(rs, metadata.getColumnType(i + 1), i + 1);
			}
        	
    		writeNext(nextLine);
    	}
    }
"
88,157223fe-acb3-4c3a-bf4b-71544fe962d6,"    private static String getColumnValue(ResultSet rs, int colType, int colIndex)
    		throws SQLException, IOException {

    	String value = """";
    	
		switch (colType)
		{
			case Types.BIT:
				Object bit = rs.getObject(colIndex);
				if (bit != null) {
					value = String.valueOf(bit);
				}
			break;
			case Types.BOOLEAN:
				boolean b = rs.getBoolean(colIndex);
				if (!rs.wasNull()) {
					value = Boolean.valueOf(b).toString();
				}
			break;
			case Types.CLOB:
				Clob c = rs.getClob(colIndex);
				if (c != null) {
					value = read(c);
				}
			break;
			case Types.BIGINT:
			case Types.DECIMAL:
			case Types.DOUBLE:
			case Types.FLOAT:
			case Types.REAL:
			case Types.NUMERIC:
				BigDecimal bd = rs.getBigDecimal(colIndex);
				if (bd != null) {
					value = """" + bd.doubleValue();
				}
			break;
			case Types.INTEGER:
			case Types.TINYINT:
			case Types.SMALLINT:
				int intValue = rs.getInt(colIndex);
				if (!rs.wasNull()) {
					value = """" + intValue;
				}
			break;
			case Types.JAVA_OBJECT:
				Object obj = rs.getObject(colIndex);
				if (obj != null) {
					value = String.valueOf(obj);
				}
			break;
			case Types.DATE:
				java.sql.Date date = rs.getDate(colIndex);
				if (date != null) {
					value = DATE_FORMATTER.format(date);;
				}
			break;
			case Types.TIME:
				Time t = rs.getTime(colIndex);
				if (t != null) {
					value = t.toString();
				}
			break;
			case Types.TIMESTAMP:
				Timestamp tstamp = rs.getTimestamp(colIndex);
				if (tstamp != null) {
					value = TIMESTAMP_FORMATTER.format(tstamp);
				}
			break;
			case Types.LONGVARCHAR:
			case Types.VARCHAR:
			case Types.CHAR:
				value = rs.getString(colIndex);
			break;
			default:
				value = """";
		}

		
		if (value == null)
		{
			value = """";
		}
		
		return value;
    	
    }
"
89,f8ada4b7-3f98-44f0-ac79-1e1259194620,"	private static String read(Clob c) throws SQLException, IOException
	{
		StringBuffer sb = new StringBuffer( (int) c.length());
		Reader r = c.getCharacterStream();
		char[] cbuf = new char[2048];
		int n = 0;
		while ((n = r.read(cbuf, 0, cbuf.length)) != -1) {
			if (n > 0) {
				sb.append(cbuf, 0, n);
			}
		}
		return sb.toString();
	}
"
90,a040ad75-4dc0-4b31-a955-ff1db6a32678,"    public void writeNext(String[] nextLine) {
    	
    	if (nextLine == null)
    		return;
    	
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < nextLine.length; i++) {

            if (i != 0) {
                sb.append(separator);
            }

            String nextElement = nextLine[i];
            if (nextElement == null)
                continue;
            if (quotechar !=  NO_QUOTE_CHARACTER)
            	sb.append(quotechar);
            for (int j = 0; j < nextElement.length(); j++) {
                char nextChar = nextElement.charAt(j);
                if (escapechar != NO_ESCAPE_CHARACTER && nextChar == quotechar) {
                	sb.append(escapechar).append(nextChar);
                } else if (escapechar != NO_ESCAPE_CHARACTER && nextChar == escapechar) {
                	sb.append(escapechar).append(nextChar);
                } else {
                    sb.append(nextChar);
                }
            }
            if (quotechar != NO_QUOTE_CHARACTER)
            	sb.append(quotechar);
        }
        
        sb.append(lineEnd);
        pw.write(sb.toString());

    }
"
91,b3da4eb3-ea19-41c5-bf76-f471ea491a41,"    public void flush() throws IOException {

        pw.flush();

    } 
"
92,0fe3a83d-9eee-475b-8203-cdd9bc96e4a4,"    public void close() throws IOException {
        pw.flush();
        pw.close();
        rawWriter.close();
    }
"
93,afd74622-642b-4b1d-b011-2d285973cc36,"	public void test_tilt_line_left() {
		int[] expected = null;
		int[] old = null;
		int[] after = null;
		Game2048Core processer = new Game2048Core();

		old = new int[] { 0, 0, 2, 2 };
		after = processer.tilt_line_left(old);
		expected = new int[] { 2, 2, 0, 0 };
		if (GameUtil.compareExpectToActualLine(expected, after)) {
			GameUtil.printLine(old, """", after, expected, GameUtil.PASSED);
		} else {
			GameUtil.printLine(old, """", after, expected, GameUtil.FAILED);
			fail();
		}

		old = new int[] { 0, 0, 0, 2 };
		after = processer.tilt_line_left(old);
		expected = new int[] { 2, 0, 0, 0 };
		if (GameUtil.compareExpectToActualLine(expected, after)) {
			GameUtil.printLine(old, """", after, expected, GameUtil.PASSED);
		} else {
			GameUtil.printLine(old, """", after, expected, GameUtil.FAILED);
			fail();
		}

		old = new int[] { 2, 0, 0, 2 };
		after = processer.tilt_line_left(old);
		expected = new int[] { 2, 2, 0, 0 };
		if (GameUtil.compareExpectToActualLine(expected, after)) {
			GameUtil.printLine(old, """", after, expected, GameUtil.PASSED);
		} else {
			GameUtil.printLine(old, """", after, expected, GameUtil.FAILED);
			fail();
		}

		old = new int[] { 2, 0, 0, 0 };
		after = processer.tilt_line_left(old);
		expected = new int[] { 2, 0, 0, 0 };
		if (GameUtil.compareExpectToActualLine(expected, after)) {
			GameUtil.printLine(old, """", after, expected, GameUtil.PASSED);
		} else {
			GameUtil.printLine(old, """", after, expected, GameUtil.FAILED);
			fail();
		}
	}
"
94,b297cba1-fadd-4d9f-8816-7bfe429007e5,"	public void test_combine_tiles() {
		int[] expected = null;
		int[] old = null;
		Game2048Core processer = new Game2048Core();

		old = new int[] { 1, 1, 0, 0 };
		int after[] = processer.combine_tiles(old);
		expected = new int[] { 2, 0, 0, 0 };

		if (GameUtil.compareExpectToActualLine(expected, after)) {
			GameUtil.printLine(old, ""after combine_line_left became"", after,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printLine(old, ""after combine_line_left became"", after,
					expected, GameUtil.FAILED);
			fail();
		}

		old = new int[] { 1, 1, 1, 0 };
		after = processer.combine_tiles(old);
		expected = new int[] { 2, 1, 0, 0 };
		if (GameUtil.compareExpectToActualLine(expected, after)) {
			GameUtil.printLine(old, ""after combine_line_left became"", after,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printLine(old, ""after combine_line_left became"", after,
					expected, GameUtil.FAILED);
			fail();
		}

		old = new int[] { 1, 1, 1, 1 };
		after = processer.combine_tiles(old);
		expected = new int[] { 2, 2, 0, 0 };
		if (GameUtil.compareExpectToActualLine(expected, after)) {
			GameUtil.printLine(old, ""after combine_line_left became"", after,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printLine(old, ""after combine_line_left became"", after,
					expected, GameUtil.FAILED);
			fail();
		}

		old = new int[] { 1, 2, 3, 4 };
		after = processer.combine_tiles(old);
		expected = new int[] { 1, 2, 3, 4 };
		if (GameUtil.compareExpectToActualLine(expected, after)) {
			GameUtil.printLine(old, ""after combine_line_left became"", after,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printLine(old, ""after combine_line_left became"", after,
					expected, GameUtil.FAILED);
			fail();
		}

		old = new int[] { 1, 2, 3, 3 };
		after = processer.combine_tiles(old);
		expected = new int[] { 1, 2, 6, 0 };
		if (GameUtil.compareExpectToActualLine(expected, after)) {
			GameUtil.printLine(old, ""after combine_line_left became"", after,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printLine(old, ""after combine_line_left became"", after,
					expected, GameUtil.FAILED);
			fail();
		}

		old = new int[] { 1, 2, 2, 3 };
		after = processer.combine_tiles(old);
		expected = new int[] { 1, 4, 3, 0 };
		if (GameUtil.compareExpectToActualLine(expected, after)) {
			GameUtil.printLine(old, ""after combine_line_left became"", after,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printLine(old, ""after combine_line_left became"", after,
					expected, GameUtil.FAILED);
			fail();
		}
	}
"
95,9adcde4d-5eb7-4fd5-8794-5d52eecbc484,"	private boolean line_vector_test(int i1, int i2, int i3, int i4,
			String msg, int o1, int o2, int o3, int o4) {
		Game2048Core processer = new Game2048Core();
		int list[] = { i1, i2, i3, i4 };
		if (null != msg) {
			System.out.print(msg);
		} else {
			System.out.print("" Tilting ""
					+ GameUtil.convertLineToTxtWithSep(i1, i2, i3, i4)
					+ "" left yields ""
					+ GameUtil.convertLineToTxtWithSep(o1, o2, o3, o4));
		}
		list = processer.tilt_line_left_combine(new int[] { i1, i2, i3, i4 });

		if ((list[0] != o1) || (list[1] != o2) || (list[2] != o3)
				|| (list[3] != o4)) {

			System.out.println("" FAILED: ""
					+ GameUtil.convertLineToTxtWithSep(i1, i2, i3, i4)
					+ "" became "" + GameUtil.convertLineToTxtWithSep(list)
					+ "" instead of ""
					+ GameUtil.convertLineToTxtWithSep(o1, o2, o3, o4));

			return false;
		}
		System.out.println("" - PASSED."");
		return true;
	}
"
96,c305f4a1-f4f7-4a64-b494-d25f207fa74f,"	public void test_tilt_left() {
		boolean e = true;
		e &= line_vector_test(0, 0, 0, 0, ""Empty list is empty after shift"", 0,
				0, 0, 0);
		e &= line_vector_test(1, 0, 0, 0,
				""Value on left stays on left after shift"", 1, 0, 0, 0);
		e &= line_vector_test(0, 0, 0, 1,
				""Value on right shifts to left edge after shift"", 1, 0, 0, 0);
		e &= line_vector_test(0, 0, 1, 0,
				""Value in middle shifts to left edge after shift"", 1, 0, 0, 0);
		e &= line_vector_test(1, 2, 4, 8, ""Distinct values don't combine"", 1,
				2, 4, 8);
		e &= line_vector_test(1, 1, 1, 1, ""Combinations don't cascade"", 2, 2,
				0, 0);
		e &= line_vector_test(0, 0, 1, 1, null, 2, 0, 0, 0);
		e &= line_vector_test(4, 0, 1, 1, null, 4, 2, 0, 0);
		e &= line_vector_test(2, 0, 1, 1, null, 2, 2, 0, 0);

		assertTrue(e);

	}
"
97,0918f7e2-3f60-4dff-89d8-3419d96e77c1,"	public void test_rotate_clockWise_90degree(){
		Game2048Core processer = new Game2048Core();
		int[][] in = null;
		int[][] out = null;
		int[][] expected = new int[][] {
		           { 2, 0, 2, 2 }, 
		           { 0, 0, 0, 0 }, 
		           { 0, 2, 0, 0 },
		           { 0, 2, 0, 2 }
		          };
		
		in = new int[][] {
				           { 2, 0, 0, 2 }, 
				           { 2, 0, 0, 0 }, 
				           { 0, 0, 2, 2 },
				           { 2, 0, 0, 0 }
				          };
		out=processer.rotate_clockWise_90degree(in);
		
		if (GameUtil.compareExpectToActualBoard(expected, out)) {
			GameUtil.printBoard(in, ""after rotate board clockwise 90 degree became"", out,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printBoard(in, ""after rotate board clockwise 90 degree became"", out,
					expected, GameUtil.FAILED);
			fail();
		}
	}
"
98,0f240cfd-50f6-4a6b-ab56-3af047004d09,"	public void test_rotate_clockWise_180degree(){
		Game2048Core processer = new Game2048Core();
		int[][] in = null;
		int[][] out = null;
		in = new int[][] {
				           { 2, 0, 0, 2 }, 
				           { 2, 0, 0, 0 }, 
				           { 0, 0, 2, 2 },
				           { 2, 0, 0, 0 }
				          };
		
		int[][] expected = new int[][] {
		           { 0, 0, 0, 2 }, 
		           { 2, 2, 0, 0 }, 
		           { 0, 0, 0, 2 },
		           { 2, 0, 0, 2 }
		          };
		
		out=processer.rotate_clockWise_180degree(in);
		
		if (GameUtil.compareExpectToActualBoard(expected, out)) {
			GameUtil.printBoard(in, ""after rotate board clockwise 180 degree became"", out,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printBoard(in, ""after rotate board clockwise 180 degree became"", out,
					expected, GameUtil.FAILED);
			fail();
		}
	}
"
99,9e80ab59-f6f1-4591-ae9c-c7716113201f,"	public void test_rotate_clockWise_270degree(){
		Game2048Core processer = new Game2048Core();
		int[][] in = null;
		int[][] out = null;
		in = new int[][] {
				           { 2, 0, 0, 2 }, 
				           { 2, 0, 0, 0 }, 
				           { 0, 0, 2, 2 },
				           { 2, 0, 0, 0 }
				          };
		
		int[][] expected = new int[][] {
		           { 2, 0, 2, 0 }, 
		           { 0, 0, 2, 0 }, 
		           { 0, 0, 0, 0 },
		           { 2, 2, 0, 2 }
		          };
		
		out=processer.rotate_clockWise_270degree(in);
		
		if (GameUtil.compareExpectToActualBoard(expected, out)) {
			GameUtil.printBoard(in, ""after rotate board clockwise 270 degree became"", out,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printBoard(in, ""after rotate board clockwise 270 degree became"", out,
					expected, GameUtil.FAILED);
			fail();
		}
	}
"
100,df3ef361-4f02-46e2-af6a-88b96dbce308,"	public void test_tilt_board_left() {
		Game2048Core processer = new Game2048Core();
		int[][] in = null;
		int[][] out = null;
		int[][] expected = null;

		in = new int[][] { { 2, 0, 0, 2 }, 
				           { 2, 0, 0, 0 },
				           { 0, 0, 2, 2 },
				           { 2, 0, 0, 0 } 
				          };
		out = processer.tilt_board_left(in);
		expected = new int[][] { { 4, 0, 0, 0 }, 
				                 { 2, 0, 0, 0 },
				                 { 4, 0, 0, 0 }, 
				                 { 2, 0, 0, 0 } };
		if (GameUtil.compareExpectToActualBoard(expected, out)) {
			GameUtil.printBoard(in, ""after tilt board left became"", out,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printBoard(in, ""after tilt board left became"", out,
					expected, GameUtil.FAILED);
			fail();
		}

		in = new int[][] { { 2, 2, 0, 2 }, 
				           { 0, 0, 0, 2 }, 
				           { 0, 0, 2, 2 },
				           { 2, 4, 6, 8 } 
				          };
		expected = new int[][] {  { 4, 2, 0, 0 }, 
				                  { 2, 0, 0, 0 },
				                  { 4, 0, 0, 0 }, 
				                  { 2, 4, 6, 8 } };
		out = processer.tilt_board_left(in);
		if (GameUtil.compareExpectToActualBoard(expected, out)) {
			GameUtil.printBoard(in, ""after tilt board left became"", out,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printBoard(in, ""after tilt board left became"", out,
					expected, GameUtil.FAILED);
			fail();
		}
		
		
		in = new int[][] { { 0, 0, 0, 2 }, 
				           { 0, 2, 0, 2 }, 
				           { 2, 4, 2, 2 },
				           { 2, 4, 6, 8 } };
		expected = new int[][] { { 2, 0, 0, 0 }, 
				                 { 4, 0, 0, 0 },
				                 { 2, 4, 4, 0 }, 
				                 { 2, 4, 6, 8 } };
		out = processer.tilt_board_left(in);
		if (GameUtil.compareExpectToActualBoard(expected, out)) {
			GameUtil.printBoard(in, ""after tilt board left became"", out,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printBoard(in, ""after tilt board left became"", out,
					expected, GameUtil.FAILED);
			fail();
		}

	}
"
101,f93228e9-5990-4e03-a32c-ebe37be9b7d2,"	public void test_tilt_board_up() {
		Game2048Core processer = new Game2048Core();
		int[][] in = null;
		int[][] out = null;
		int[][] expected = null;

		in = new int[][] { { 2, 0, 0, 2 }, 
				           { 2, 0, 0, 0 },
				           { 0, 0, 2, 2 },
				           { 2, 0, 0, 0 } 
				          };
		out = processer.tilt_board_up(in);
		expected = new int[][] { { 4, 0, 2, 4 }, 
				                 { 2, 0, 0, 0 },
				                 { 0, 0, 0, 0 }, 
				                 { 0, 0, 0, 0 } };
		if (GameUtil.compareExpectToActualBoard(expected, out)) {
			GameUtil.printBoard(in, ""after tilt board up became"", out,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printBoard(in, ""after tilt board up became"", out,
					expected, GameUtil.FAILED);
			fail();
		}
		
		
		in = new int[][] { { 2, 2, 2, 0 }, 
		                   { 2, 0, 4, 0 },
		                   { 4, 0, 2, 2 },
		                   { 2, 2, 0, 4 } 
		                 };
        out = processer.tilt_board_up(in);
        expected = new int[][] { { 4, 4, 2, 2 }, 
		                         { 4, 0, 4, 4 },
		                         { 2, 0, 2, 0 }, 
		                         { 0, 0, 0, 0 } };
		if (GameUtil.compareExpectToActualBoard(expected, out)) {
			GameUtil.printBoard(in, ""after tilt board up became"", out,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printBoard(in, ""after tilt board up became"", out,
					expected, GameUtil.FAILED);
			fail();
        }
	}
"
102,f90fb870-b7b3-4b37-adc8-b8e5d68df68c,"    public void test_tilt_board_right(){
    	
    	Game2048Core processer = new Game2048Core();
		int[][] in = null;
		int[][] out = null;
		int[][] expected = null;

		in = new int[][] { { 2, 0, 0, 2 }, 
				           { 2, 0, 0, 0 },
				           { 0, 0, 2, 2 },
				           { 2, 0, 0, 0 } 
				          };
		out = processer.tilt_board_right(in);
		expected = new int[][] { { 0, 0, 0, 4 }, 
				                 { 0, 0, 0, 2 },
				                 { 0, 0, 0, 4 }, 
				                 { 0, 0, 0, 2 } };
		if (GameUtil.compareExpectToActualBoard(expected, out)) {
			GameUtil.printBoard(in, ""after tilt board right became"", out,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printBoard(in, ""after tilt board right became"", out,
					expected, GameUtil.FAILED);
			fail();
		}
		
		
		in = new int[][] { { 2, 2, 2, 0 }, 
		                   { 2, 0, 4, 0 },
		                   { 4, 0, 2, 2 },
		                   { 2, 2, 0, 4 } 
		                 };
        out = processer.tilt_board_right(in);
        expected = new int[][] { { 0, 0, 2, 4 }, 
		                         { 0, 0, 2, 4 },
		                         { 0, 0, 4, 4 }, 
		                         { 0, 0, 4, 4 } };
		if (GameUtil.compareExpectToActualBoard(expected, out)) {
			GameUtil.printBoard(in, ""after tilt board right became"", out,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printBoard(in, ""after tilt board right became"", out,
					expected, GameUtil.FAILED);
			fail();
        }
    	
    }
"
103,e251f8a2-2d37-498e-906f-87e914bdd7b3,"    public void test_tilt_board_down(){
    	Game2048Core processer = new Game2048Core();
		int[][] in = null;
		int[][] out = null;
		int[][] expected = null;

		in = new int[][] { { 2, 0, 0, 2 }, 
				           { 2, 0, 0, 0 },
				           { 0, 0, 2, 2 },
				           { 2, 0, 0, 0 } 
				          };
		out = processer.tilt_board_down(in);
		expected = new int[][] { { 0, 0, 0, 0 }, 
				                 { 0, 0, 0, 0 },
				                 { 2, 0, 0, 0 }, 
				                 { 4, 0, 2, 4 } };
		if (GameUtil.compareExpectToActualBoard(expected, out)) {
			GameUtil.printBoard(in, ""after tilt board down became"", out,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printBoard(in, ""after tilt board down became"", out,
					expected, GameUtil.FAILED);
			fail();
		}
		
		
		in = new int[][] { { 2, 2, 2, 0 }, 
		                   { 2, 0, 4, 0 },
		                   { 4, 0, 2, 2 },
		                   { 2, 2, 0, 4 } 
		                 };
        out = processer.tilt_board_down(in);
        expected = new int[][] { { 0, 0, 0, 0 }, 
		                         { 4, 0, 2, 0 },
		                         { 4, 0, 4, 2 }, 
		                         { 2, 4, 2, 4 } };
		if (GameUtil.compareExpectToActualBoard(expected, out)) {
			GameUtil.printBoard(in, ""after tilt board down became"", out,
					expected, GameUtil.PASSED);
		} else {
			GameUtil.printBoard(in, ""after tilt board down became"", out,
					expected, GameUtil.FAILED);
			fail();
        }
    	
    }
"
104,4c31971c-15f5-476a-8d42-64ac179efe39,"	public void test_getNumber() {
			// x, y is the first element.
		int x = 0, y = 0;
		gameCore.resetGame();
		int value = gameCore.getNumber(x, y);
		if (value < 0) {
			fail();
		}
		// y out of boundary
		x = 0;
		y = 5;
		value = gameCore.getNumber(x, y);
		assertEquals(-1, value);
		// x out of boundary
		x = 5;
		y = 0;
		value = gameCore.getNumber(x, y);
		assertEquals(-1, value);

		// x and y within ROWS and COLS range
		x = 2;
		y = 3;
		value = gameCore.getNumber(x, y);
		if (value < 0) {
			fail();
		}
	}
"
105,b93e48d0-74eb-4b23-be49-ad6397979c71,"    		public void test_resetGame(){
		gameCore.resetGame();
		int[][] board = gameCore.getBoard();
		int emptyNo = GameUtil.snapshotEmptySpots(board).size();
		assertEquals(GameUtil.ROWS*GameUtil.COLS-2,emptyNo);
		assertTrue(gameCore.canMove());
		assertFalse(gameCore.lose());
		assertFalse(gameCore.win());
	}
"
106,ef0762d6-5e97-46f0-b939-e8d02eca2bbb,"	public void test_tilt_board_left(){
		int[][] partialExpected = null;
		
		int[][] mockBoards = {
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0}
		};
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_left();
		int[][]after = gameCore.getBoard();
		assertTrue(GameUtil.compareExpectToActualBoard(mockBoards, after));
		
		
		 mockBoards = new int[][]{
				{1,0,0,0},
				{1,0,0,0},
				{1,0,0,0},
				{1,0,0,0}
		};
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_left();
		after = gameCore.getBoard();
		assertTrue(GameUtil.compareExpectToActualBoard(mockBoards, after));
		
		
		mockBoards = new int[][]{
					{1,0,2,0},
					{1,0,2,0},
					{1,0,2,0},
					{1,0,2,0}
			};
		 
		partialExpected= new int[][]{
				    {1,2,0,0},
					{1,2,0,0},
					{1,2,0,0},
					{1,2,0,0}
		  };
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_left();
		after = gameCore.getBoard();
		assertEquals(partialExpected[0][0],after[0][0]);
		assertEquals(partialExpected[0][1],after[0][1]);
		assertEquals(partialExpected[1][0],after[1][0]);
		assertEquals(partialExpected[1][1],after[1][1]);
		assertEquals(partialExpected[2][0],after[2][0]);
		assertEquals(partialExpected[2][1],after[2][1]);
		assertEquals(partialExpected[3][0],after[3][0]);
		assertEquals(partialExpected[3][1],after[3][1]);		
		
		 int SumOfRest = after[0][2]+after[0][3]
		              		                + after[1][2]+after[1][3]
		              		                + after[2][2]+after[2][3]
		              		                + after[3][2]+after[3][3];
		 if(SumOfRest==0){
		  	  fail();
		 }
		
	
		mockBoards = new int[][]{
						{1,0,0,2},
						{1,0,0,2},
						{1,0,0,2},
						{1,0,0,2}
				};
			 
		partialExpected= new int[][]{
					    {1,2,0,0},
						{1,2,0,0},
						{1,2,0,0},
						{1,2,0,0}
			  };
		gameCore.setBoard(mockBoards);
	    gameCore.tilt_board_left();
		after = gameCore.getBoard();
		assertEquals(partialExpected[0][0],after[0][0]);
		assertEquals(partialExpected[0][1],after[0][1]);
		assertEquals(partialExpected[1][0],after[1][0]);
		assertEquals(partialExpected[1][1],after[1][1]);
		assertEquals(partialExpected[2][0],after[2][0]);
		assertEquals(partialExpected[2][1],after[2][1]);
		assertEquals(partialExpected[3][0],after[3][0]);
		assertEquals(partialExpected[3][1],after[3][1]);		
		
		 SumOfRest = after[0][2]+after[0][3]
		              		                + after[1][2]+after[1][3]
		              		                + after[2][2]+after[2][3]
		              		                + after[3][2]+after[3][3];
		 if(SumOfRest==0){
		  	  fail();
		 }
		
		
		mockBoards = new int[][]{
					{1,2,3,4},
					{1,2,3,4},
					{1,2,3,4},
					{1,2,3,4}
			};
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_left();
		after = gameCore.getBoard();
		assertTrue(GameUtil.compareExpectToActualBoard(mockBoards, after));
			
			
		 mockBoards = new int[][]{
						{1,1,1,1},
						{1,1,1,1},
						{1,1,1,1},
						{1,1,1,1}
				};
		  
		 partialExpected= new int[][]{
				    {2,2,0,0},
					{2,2,0,0},
					{2,2,0,0},
					{2,2,0,0}
		  };
		  gameCore.setBoard(mockBoards);
		  gameCore.tilt_board_left();
		  after = gameCore.getBoard();
		  
		  assertEquals(partialExpected[0][0],after[0][0]);
		  assertEquals(partialExpected[0][1],after[0][1]);
		  assertEquals(partialExpected[1][0],after[1][0]);
		  assertEquals(partialExpected[1][1],after[1][1]);
		  assertEquals(partialExpected[2][0],after[2][0]);
		  assertEquals(partialExpected[2][1],after[2][1]);
		  assertEquals(partialExpected[3][0],after[3][0]);
		  assertEquals(partialExpected[3][1],after[3][1]);		
		  
		  SumOfRest = after[0][2]+after[0][3]
		                + after[1][2]+after[1][3]
		                + after[2][2]+after[2][3]
		                + after[3][2]+after[3][3];
		  if(SumOfRest==0){
			  fail();
		  }
	}
"
107,ea5e89cc-2761-4aae-bd66-e196ecdf9fb4,"		public void test_tilt_board_up(){
		gameCore.resetGame();
		
		int[][] mockBoards = {
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0}
		};
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_up();
		int[][]after = gameCore.getBoard();
		assertTrue(GameUtil.compareExpectToActualBoard(mockBoards, after));
		
		
		 mockBoards = new int[][]{
				{1,1,1,1},
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0}
		};
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_up();
		after = gameCore.getBoard();
		assertTrue(GameUtil.compareExpectToActualBoard(mockBoards, after));
		
		
		mockBoards = new int[][]{
					{1,1,1,1},
					{0,0,0,0},
					{2,2,2,2},
					{0,0,0,0}
			};
		 
		
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_up();
		after = gameCore.getBoard();
		assertEquals(1,after[0][0]);
		assertEquals(1,after[0][1]);
		assertEquals(1,after[0][2]);
		assertEquals(1,after[0][3]);
		assertEquals(2,after[1][0]);
		assertEquals(2,after[1][1]);
		assertEquals(2,after[1][2]);
		assertEquals(2,after[1][3]);		
		  
		int SumOfRest = after[2][0]+after[2][1]
		                + after[2][2]+after[2][3]
		                + after[3][0]+after[3][1]
		                + after[3][2]+after[3][3];
		if(SumOfRest==0){
			  fail();
		}
	
		
		
		mockBoards = new int[][]{
						{1,1,1,1},
						{0,0,0,0},
						{0,0,0,0},
						{2,2,2,2}
				};
		
		gameCore.setBoard(mockBoards);
	    gameCore.tilt_board_up();
		after = gameCore.getBoard();
		assertEquals(1,after[0][0]);
		assertEquals(1,after[0][1]);
		assertEquals(1,after[0][2]);
		assertEquals(1,after[0][3]);
		assertEquals(2,after[1][0]);
		assertEquals(2,after[1][1]);
		assertEquals(2,after[1][2]);
		assertEquals(2,after[1][3]);		
		  
		SumOfRest = after[2][0]+after[2][1]
		          + after[2][2]+after[2][3]
		          + after[3][0]+after[3][1]
		          + after[3][2]+after[3][3];
		
		if(SumOfRest==0){
			  fail();
		}	
		
		
		mockBoards = new int[][]{
					{1,1,1,1},
					{2,2,2,2},
					{3,3,3,3},
					{4,4,4,4}
			};
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_up();
		after = gameCore.getBoard();
		assertTrue(GameUtil.compareExpectToActualBoard(mockBoards, after));
			
			
		 mockBoards = new int[][]{
						{1,1,1,1},
						{1,1,1,1},
						{1,1,1,1},
						{1,1,1,1}
				};
		  
		
		  gameCore.setBoard(mockBoards);
		  gameCore.tilt_board_up();
		  after = gameCore.getBoard();
		  
		  assertEquals(2,after[0][0]);
		  assertEquals(2,after[0][1]);
		  assertEquals(2,after[0][2]);
		  assertEquals(2,after[0][3]);
		  assertEquals(2,after[1][0]);
		  assertEquals(2,after[1][1]);
		  assertEquals(2,after[1][2]);
		  assertEquals(2,after[1][3]);		
		  
		  SumOfRest = after[2][0]+after[2][1]
		              + after[2][2]+after[2][3]
		              + after[3][0]+after[3][1]
		              + after[3][2]+after[3][3];
		                 		
		  if(SumOfRest==0){
			  fail();
		  }
	}
"
108,bc80440e-9605-4c92-8f46-9c445711764c,"public void test_tilt_board_right(){
		gameCore.resetGame();
		
		int[][] mockBoards = {
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0}
		};
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_right();
		int[][]after = gameCore.getBoard();
		assertTrue(GameUtil.compareExpectToActualBoard(mockBoards, after));
		
		
		 mockBoards = new int[][]{
				{0,0,0,1},
				{0,0,0,1},
				{0,0,0,1},
				{0,0,0,1}
		};
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_right();
		after = gameCore.getBoard();
		assertTrue(GameUtil.compareExpectToActualBoard(mockBoards, after));
		
		
		mockBoards = new int[][]{
					{0,2,0,1},
					{0,2,0,1},
					{0,2,0,1},
					{0,2,0,1}
			};
		 
		
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_right();
		after = gameCore.getBoard();
		assertEquals(1,after[0][3]);
		assertEquals(1,after[1][3]);
		assertEquals(1,after[2][3]);
		assertEquals(1,after[3][3]);
		assertEquals(2,after[0][2]);
		assertEquals(2,after[1][2]);
		assertEquals(2,after[2][2]);
		assertEquals(2,after[2][2]);		
		  
		int SumOfRest = after[0][0]+after[0][1]
		                + after[1][0]+after[1][1]
		                + after[2][0]+after[2][1]
		                + after[3][0]+after[3][1];
		if(SumOfRest==0){
			  fail();
		}
	
		
		
		mockBoards = new int[][]{
						{2,0,0,1},
						{2,0,0,1},
						{2,0,0,1},
						{2,0,0,1}
				};
		
		gameCore.setBoard(mockBoards);
	    gameCore.tilt_board_right();
		after = gameCore.getBoard();
		assertEquals(1,after[0][3]);
		assertEquals(1,after[1][3]);
		assertEquals(1,after[2][3]);
		assertEquals(1,after[3][3]);
		assertEquals(2,after[0][2]);
		assertEquals(2,after[1][2]);
		assertEquals(2,after[2][2]);
		assertEquals(2,after[2][2]);		
		  
		SumOfRest = after[0][0]+after[0][1]
		                + after[1][0]+after[1][1]
		                + after[2][0]+after[2][1]
		                + after[3][0]+after[3][1];
		if(SumOfRest==0){
			  fail();
		}
		
		
		mockBoards = new int[][]{
					{4,3,2,1},
					{4,3,2,1},
					{4,3,2,1},
					{4,3,2,1}
			};
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_right();
		after = gameCore.getBoard();
		assertTrue(GameUtil.compareExpectToActualBoard(mockBoards, after));
			
			
		 mockBoards = new int[][]{
						{1,1,1,1},
						{1,1,1,1},
						{1,1,1,1},
						{1,1,1,1}
				};
		  
		
		  gameCore.setBoard(mockBoards);
		  gameCore.tilt_board_right();
		  after = gameCore.getBoard();
		  
			assertEquals(2,after[0][3]);
			assertEquals(2,after[1][3]);
			assertEquals(2,after[2][3]);
			assertEquals(2,after[3][3]);
			assertEquals(2,after[0][2]);
			assertEquals(2,after[1][2]);
			assertEquals(2,after[2][2]);
			assertEquals(2,after[2][2]);		
			  
			SumOfRest = after[0][0]+after[0][1]
			                + after[1][0]+after[1][1]
			                + after[2][0]+after[2][1]
			                + after[3][0]+after[3][1];
			if(SumOfRest==0){
				  fail();
			}
	}
"
109,98f5ab7d-5faf-4a37-99f0-0ca8e5ffb016,"public void test_tilt_board_down(){
		gameCore.resetGame();
		
		int[][] mockBoards = {
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0}
		};
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_down();
		int[][]after = gameCore.getBoard();
		assertTrue(GameUtil.compareExpectToActualBoard(mockBoards, after));
		
		
		 mockBoards = new int[][]{
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0},
				{1,1,1,1}
		};
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_down();
		after = gameCore.getBoard();
		assertTrue(GameUtil.compareExpectToActualBoard(mockBoards, after));
		
		
		mockBoards = new int[][]{
					{1,1,1,1},
					{0,0,0,0},
					{2,2,2,2},
					{0,0,0,0}
			};
		 
		
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_down();
		after = gameCore.getBoard();
		assertEquals(1,after[2][0]);
		assertEquals(1,after[2][1]);
		assertEquals(1,after[2][2]);
		assertEquals(1,after[2][3]);
		assertEquals(2,after[3][0]);
		assertEquals(2,after[3][1]);
		assertEquals(2,after[3][2]);
		assertEquals(2,after[3][3]);		
		  
		int SumOfRest = after[0][0]+after[0][1]
		                + after[0][2]+after[0][3]
		                + after[1][0]+after[1][1]
		                + after[1][2]+after[1][3];
		if(SumOfRest==0){
			  fail();
		}
	
		
		
		mockBoards = new int[][]{
						{1,1,1,1},
						{0,0,0,0},
						{0,0,0,0},
						{2,2,2,2}
				};
		
		gameCore.setBoard(mockBoards);
	    gameCore.tilt_board_down();
		after = gameCore.getBoard();
		assertEquals(1,after[2][0]);
		assertEquals(1,after[2][1]);
		assertEquals(1,after[2][2]);
		assertEquals(1,after[2][3]);
		assertEquals(2,after[3][0]);
		assertEquals(2,after[3][1]);
		assertEquals(2,after[3][2]);
		assertEquals(2,after[3][3]);		
		  
		SumOfRest = after[0][0]+after[0][1]
		                + after[0][2]+after[0][3]
		                + after[1][0]+after[1][1]
		                + after[1][2]+after[1][3];
		
		if(SumOfRest==0){
			  fail();
		}	
		
		
		mockBoards = new int[][]{
					{1,1,1,1},
					{2,2,2,2},
					{3,3,3,3},
					{4,4,4,4}
			};
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_down();
		after = gameCore.getBoard();
		assertTrue(GameUtil.compareExpectToActualBoard(mockBoards, after));
			
			
		 mockBoards = new int[][]{
						{1,1,1,1},
						{1,1,1,1},
						{1,1,1,1},
						{1,1,1,1}
				};
		  
		
		  gameCore.setBoard(mockBoards);
		  gameCore.tilt_board_down();
		  after = gameCore.getBoard();
		  
			assertEquals(2,after[2][0]);
			assertEquals(2,after[2][1]);
			assertEquals(2,after[2][2]);
			assertEquals(2,after[2][3]);
			assertEquals(2,after[3][0]);
			assertEquals(2,after[3][1]);
			assertEquals(2,after[3][2]);
			assertEquals(2,after[3][3]);	
			  
			SumOfRest = after[0][0]+after[0][1]
			                + after[0][2]+after[0][3]
			                + after[1][0]+after[1][1]
			                + after[1][2]+after[1][3];
		                 		
		  if(SumOfRest==0){
			  fail();
		  }
	}
"
110,5807d2b1-07bb-4765-b96a-58b6c24a990e,"    public void test_markGameLose(){
    	
    	gameCore.markGameLose();
    	assertFalse(gameCore.win());
    	assertTrue(gameCore.lose());
    } public void test_canMove(){
"
111,ccdf06ef-1853-4356-9752-316101830fc3,"    } public void test_canMove(){
    	
    	int[][] mockBoards = {
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0}
		};
		gameCore.setBoard(mockBoards);
		assertTrue(gameCore.canMove());
    	
		
		mockBoards = new int[][]{
				{0,1,1,0},
				{0,1,1,0},
				{0,1,0,0},
				{0,1,0,0}
		};
		gameCore.setBoard(mockBoards);
		assertTrue(gameCore.canMove());
    	mockBoards = new int[][]{
				{1,1,1,1},
				{1,1,1,1},
				{1,1,1,1},
				{1,1,1,1}
		};
		gameCore.setBoard(mockBoards);
		assertTrue(gameCore.canMove());
		
		mockBoards = new int[][]{
				{2,2,1,1},
				{2,2,1,1},
				{2,2,1,1},
				{2,2,1,1}
		};
		gameCore.setBoard(mockBoards);
		assertTrue(gameCore.canMove());
		
		
		mockBoards = new int[][]{
				{2,3,1,0},
				{7,6,5,4},
				{2,3,1,6},
				{6,5,4,1}
		};
		gameCore.setBoard(mockBoards);
		assertFalse(gameCore.canMove());
		}
"
112,c589bcc3-104b-45bb-9c6a-2ee2fde626fb,"    public void  test_lose(){
    	gameCore.resetGame();
    	assertFalse(gameCore.lose());
    	
    	gameCore.markGameLose();
    	assertTrue(gameCore.lose());
    	
    }
"
113,80c4d1c1-13f0-4122-a9ab-afcb7c1e846c,"     public void test_score(){
    	
    	int[][] mockBoards = {
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0},
				{0,0,0,0}
		};
    	gameCore.resetGame();
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_left();
		assertEquals(0,gameCore.score());
		
		 mockBoards = new int[][]{
				{1,1,1,1},
				{0,0,0,0},
				{2,2,2,2},
				{0,0,0,0}
		};
		gameCore.resetGame();
		gameCore.setBoard(mockBoards);
		gameCore.tilt_board_left();
		assertEquals(12,gameCore.score());
		
		 	 mockBoards = new int[][]{
					{1,0,0,0},
					{2,0,0,0},
					{2,0,0,0},
					{2,0,0,0}
			};
		 gameCore.resetGame();
		 gameCore.setBoard(mockBoards);
		 gameCore.tilt_board_left();
		 assertEquals(0,gameCore.score());
			
			
		 mockBoards = new int[][]{
					{1,2,3,4},
					{2,3,3,3},
					{2,2,2,2},
					{2,3,3,3}
		  };
		 gameCore.resetGame();
		 gameCore.setBoard(mockBoards);
		 gameCore.tilt_board_left();
		 assertEquals(20,gameCore.score());		

}
"
114,89fe035d-9767-46b5-8a54-06df7e382229,"	public static void main(String[] args) {
		Result result = JUnitCore.runClasses(TestGame2048.class,WhiteBoxTestGame2048.class);
		for (Failure failure : result.getFailures()) {
			System.out.println(failure.toString());
		}
	}
"
115,8fed5230-779d-4f3a-a118-027aa1570415,"	public Tile() {
		this(0);
	}
"
116,a4b8d384-fe4f-4fe6-aad1-fa3b085d76bf,"	public Tile(int num) {
		value = num;
	}
"
117,1f3f9868-dca7-4671-ab86-09cae0bef8a9,"	public Color getForeground() {
		return value < 16 ? new Color(0x776e65) : new Color(0xf9f6f2);
	}
"
118,16dd0122-5e1e-456a-bfbc-bbf1c1a76e8d,"	public Color getBackground() {
		switch (value) {
		case 2:
			return new Color(0xeee4da);
		case 4:
			return new Color(0xede0c8);
		case 8:
			return new Color(0xf2b179);
		case 16:
			return new Color(0xf59563);
		case 32:
			return new Color(0xf67c5f);
		case 64:
			return new Color(0xf65e3b);
		case 128:
			return new Color(0xedcf72);
		case 256:
			return new Color(0xedcc61);
		case 512:
			return new Color(0xedc850);
		case 1024:
			return new Color(0xedc53f);
		case 2048:
			return new Color(0xedc22e);
		}
		return new Color(0xcdc1b4);
	}
"
119,c51ebd20-1489-4acc-a4e5-613f4f9a3d6c,"	public void tilt_board_left();
"
120,aab3a6f0-5ede-491c-817f-2e664fb28595,"	public int score();
"
121,7b7e221b-5b34-41d6-bedc-6f69cbd8522c,"	public void resetGame();
"
122,6f85c214-01c1-4cba-8b4d-a55795f6796b,"	public void tilt_board_right();
"
123,978a27dc-f696-4873-b433-dc31a320db45,"	public void tilt_board_down();
"
124,e658190b-e6ac-4426-b264-baecc7a42038,"	public void tilt_board_up();
"
125,4f069094-b2ba-4dd7-8539-1c18b634f02b,"	public int getNumber(int x, int y);
"
126,8af1d605-0a85-4bbe-b60a-4cb2292be236,"	public void markGameLose();
"
127,53c24b5f-ab00-4446-99cc-c4cc9121e33f,"	public boolean lose();
"
128,cee0c73e-c387-4da3-8294-bac95af5f009,"	public boolean win();
"
129,e8484fe1-23f2-49ff-9663-e9b3762dea39,"	public boolean canMove();
"
130,11b21de3-a2b1-4931-a223-1a35b2089794,"	public int[][] getBoard();
"
131,64ca1509-3d93-4173-9b0c-622b5dd72ede,"	public void setBoard(int[][] board);
"
132,ccf1a79b-7353-46b6-9847-77cfd656b24a,"	public Game2048Board() {
		processer = new Game2048Core();
		setFocusable(true);
		addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
					processer.resetGame();
				}
				if (!processer.canMove()) {
					processer.markGameLose();
				}

				if (!processer.win() && !processer.lose()) {
					switch (e.getKeyCode()) {
					case KeyEvent.VK_LEFT:
						processer.tilt_board_left();
						break;
					case KeyEvent.VK_RIGHT:
						processer.tilt_board_right();
						break;
					case KeyEvent.VK_DOWN:
						processer.tilt_board_down();
						break;
					case KeyEvent.VK_UP:
						processer.tilt_board_up();
						break;
					}
				}

				if (!processer.win() && !processer.canMove()) {
					processer.markGameLose();
				}

				repaint();
			}
		});
		processer.resetGame();
	}
"
133,40f01401-5727-4e2a-be33-0228c97a42e2,"			@Override
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
					processer.resetGame();
				}
				if (!processer.canMove()) {
					processer.markGameLose();
				}

				if (!processer.win() && !processer.lose()) {
					switch (e.getKeyCode()) {
					case KeyEvent.VK_LEFT:
						processer.tilt_board_left();
						break;
					case KeyEvent.VK_RIGHT:
						processer.tilt_board_right();
						break;
					case KeyEvent.VK_DOWN:
						processer.tilt_board_down();
						break;
					case KeyEvent.VK_UP:
						processer.tilt_board_up();
						break;
					}
				}

				if (!processer.win() && !processer.canMove()) {
					processer.markGameLose();
				}

				repaint();
			}
"
134,f128708c-a229-440b-b84a-97cca53ed99f,"	@Override
	public void paint(Graphics g) {
		super.paint(g);
		g.setColor(BG_COLOR);
		g.fillRect(0, 0, this.getSize().width, this.getSize().height);
		for (int y = 0; y < GameUtil.COLS; y++) {
			for (int x = 0; x < GameUtil.COLS; x++) {
				drawTile(g, new Tile(processer.getNumber(y, x)), x, y);
			}
		}
	}
"
135,88889379-9616-4c3d-8a7a-7d310ae54db3,"	private void drawTile(Graphics g2, Tile tile, int x, int y) {
		if (tile == null) {
			return;
		}
		Graphics2D g = ((Graphics2D) g2);
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);
		g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,
				RenderingHints.VALUE_STROKE_NORMALIZE);
		int value = tile.value;
		int xOffset = offsetCoors(x);
		int yOffset = offsetCoors(y);
		g.setColor(tile.getBackground());
		g.fillRoundRect(xOffset, yOffset, TILE_SIZE, TILE_SIZE, 14, 14);
		g.setColor(tile.getForeground());
		final int size = value < 100 ? 36 : value < 1000 ? 32 : 24;
		final Font font = new Font(FONT_NAME, Font.BOLD, size);
		g.setFont(font);

		String s = String.valueOf(value);
		final FontMetrics fm = getFontMetrics(font);

		final int w = fm.stringWidth(s);
		final int h = -(int) fm.getLineMetrics(s, g).getBaselineOffsets()[2];

		if (value != 0)
			g.drawString(s, xOffset + (TILE_SIZE - w) / 2, yOffset + TILE_SIZE
					- (TILE_SIZE - h) / 2 - 2);

		if (processer.win() || processer.lose()) {
			g.setColor(new Color(255, 255, 255, 30));
			g.fillRect(0, 0, getWidth(), getHeight());
			g.setColor(new Color(78, 139, 202));
			g.setFont(new Font(FONT_NAME, Font.BOLD, 48));
			if (processer.win()) {
				g.drawString(""You won!"", 68, 150);
			}
			if (processer.lose()) {
				g.drawString(""Game over!"", 50, 130);
				g.drawString(""You lose!"", 64, 200);
			}
			if (processer.win() || processer.lose()) {
				g.setFont(new Font(FONT_NAME, Font.PLAIN, 16));
				g.setColor(new Color(128, 128, 128, 128));
				g.drawString(""Press ESC to play again"", 80, getHeight() - 40);
			}
		}
		g.setFont(new Font(FONT_NAME, Font.PLAIN, 18));
		g.drawString(""Score: "" + processer.score(), 200, 365);

	}
"
136,4dbacad7-b730-48c1-a087-a7eb9a363f01,"	private static int offsetCoors(int arg) {
		return arg * (TILES_MARGIN + TILE_SIZE) + TILES_MARGIN;
	}
"
137,66212c41-c4f0-4a53-9eeb-94dde09e9db9,"	public int[] tilt_line_left(int[] oldLine) {
		ArrayList<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < ROWS; i++) {
			if (oldLine[i] != 0) {
				list.add(new Integer(oldLine[i]));
			}
		}
		if (list.size() == 0) {
			return oldLine;
		} else {
			int[] after = new int[COLS];

			for (int i = 0; i < list.size(); i++) {
				after[i] = list.get(i).intValue();
			}
			return after;
		}
	}
"
138,acfeea76-8816-49ea-b34c-d7459e27e6da,"	public int[] combine_tiles(int[] oldline) {
		int j = 0;
		int[] after = new int[COLS];
		for (int i = 0; i < COLS && oldline[i] > 0; i++) {
			int value = oldline[i];
			if (i < COLS - 1 && oldline[i] == oldline[i + 1]) {
				value *= 2;
				// Calculate score here.
				score += value;
				after[j] = value;
				i++;
			} else {
				after[j] = oldline[i];

			}
			j++;
		}

		return after;
	}
"
139,aa891795-8088-40fb-b6c2-e8c731f35c9b,"	public int[] tilt_line_left_combine(int[] oldline) {
		return combine_tiles(tilt_line_left(oldline));
	}
"
140,f700ae79-7654-4343-95b7-97edefa18329,"	public int[][] tilt_board_left(int[][] old) {
		int[][] after = new int[ROWS][COLS];
		for (int i = 0; i < COLS; i++) {
			int[] line = tilt_line_left_combine(old[i]);
			System.arraycopy(line, 0, after[i], 0, COLS);
		}
		return after;
	}
"
141,e5cda5f5-d1a1-43d3-ac93-c72111ccd536,"	public int[][] tilt_board_up(int[][] old) {
		int[][] temp = rotate_clockWise_270degree(old);
		int[][] temp2 = tilt_board_left(temp);
		return rotate_clockWise_90degree(temp2);
	}
"
142,f092c8c8-7e35-487a-9651-47c33674d030,"	public int[][] tilt_board_down(int[][] old) {
		int[][] temp = rotate_clockWise_90degree(old);
		int[][] temp2 = tilt_board_left(temp);
		return rotate_clockWise_270degree(temp2);
	}
"
143,96448b1b-c43a-4f78-acc0-54439b7f2b9c,"	public int[][] tilt_board_right(int[][] old) {
		int[][] temp = rotate_clockWise_180degree(old);
		int[][] temp2 = tilt_board_left(temp);
		return rotate_clockWise_180degree(temp2);
	}
"
144,66f5eb07-b0be-4bf8-92fb-43aab1267a27,"	public int[][] rotate_clockWise_90degree(int[][] old) {
		if (old == null) {
			return null;
		}
		int ROWS = old.length;
		int COLS = old[0].length;
		int[][] temp = new int[ROWS][COLS];

		int dst = ROWS - 1;
		// rotate the matrix clockwise 90 degree.
		for (int i = 0; i < ROWS; i++, dst--) {
			for (int j = 0; j < COLS; j++) {
				temp[j][dst] = old[i][j];
			}
		}

		return temp;
	}
"
145,2868b852-e505-4584-bdfe-81f6317ecde2,"	public int[][] rotate_clockWise_180degree(int[][] old) {
		return rotate_clockWise_90degree(rotate_clockWise_90degree(old));
	}
"
146,30c8a77a-1781-4f1f-95e4-aa5853725a20,"	public int[][] rotate_clockWise_270degree(int[][] old) {
		return rotate_clockWise_90degree(rotate_clockWise_90degree(rotate_clockWise_90degree(old)));
	}
"
147,321c2315-962f-4125-9c1a-26f98325e92a,"	private boolean isBoardFull() {
		for (int i = 0; i < ROWS; i++) {
			for (int j = 0; j < COLS; j++) {
				if (tiles[i][i] == 0) {
					return false;
				}
			}
		}
		return true;
	}
"
148,9b96366f-10a2-4432-8c7e-28453f9e0a11,"	public boolean canMove() {
		if (!isBoardFull()) {
			return true;
		}
		for (int x = 0; x < ROWS; x++) {
			for (int y = 0; y < COLS; y++) {
				if ((x < 3 && tiles[x][y] == tiles[x + 1][y])
						|| ((y < 3) && tiles[x][y] == tiles[x][y + 1])) {
					return true;
				}
			}
		}
		return false;
	}
"
149,d72ffa51-c1e7-4f13-90f5-9343acd8841b,"	public int getNumber(int x, int y) {
		if (x < 0 || x >= ROWS || y < 0 || y >= COLS) {
			return -1;
		}
		return tiles[x][y];
	}
"
150,3289f013-f11b-449b-a21a-4f895ad819b0,"	public void resetGame() {
		lose = false;
		score=0;
		tiles = new int[ROWS][COLS];
		addANumber();
		addANumber();
	}
"
151,312aff17-1999-444f-aedf-dbeb0d29a338,"	private void addANumber() {
		if (!isBoardFull()) {
			ArrayList<String> emptySpots = GameUtil.snapshotEmptySpots(tiles);
			int index = (int) (Math.random() * emptySpots.size())
					% emptySpots.size();
			String emptyLocation = emptySpots.get(index);

			int x = Integer.parseInt(emptyLocation.substring(0, 1));
			int y = Integer.parseInt(emptyLocation.substring(2, 3));
			tiles[x][y] = Math.random() < 0.9 ? 2 : 4;
		}
	}
"
152,ae6fc0ff-87d8-4e7b-9d8f-9a76fd6a2583,"	public void tilt_board_down() {
		int[][] tempTiles = tilt_board_down(tiles);
		boolean needed = !GameUtil.compare(tempTiles, tiles);
		tiles = tempTiles;

		if (needed) {
			addANumber();
		}

	}
"
153,3f776118-0f48-40b5-a4a0-69b1c677313b,"	public void tilt_board_left() {
		int[][] tempTiles = tilt_board_left(tiles);
		boolean needed = !GameUtil.compare(tempTiles, tiles);
		tiles = tempTiles;
		if (needed) {
			addANumber();
		}

	}
"
154,199dd232-407b-4608-91b8-e098b140130a,"	public void tilt_board_right() {
		int[][] tempTiles = tilt_board_right(tiles);
		boolean needed = !GameUtil.compare(tempTiles, tiles);
		tiles = tempTiles;
		if (needed) {
			addANumber();
		}

	}
"
155,68698944-d37d-42c5-98dc-ec52924c5576,"	public void tilt_board_up() {
		int[][] tempTiles = tilt_board_up(tiles);
		boolean needed = !GameUtil.compare(tempTiles, tiles);
		tiles = tempTiles;
		if (needed) {
			addANumber();
		}

	}
"
156,3ae152b9-4ae3-4dc7-b1df-bb13299f9230,"	public void markGameLose() {
		lose = true;

	}
"
157,760ad083-71b9-43d6-87f1-152f82eb62f0,"	public boolean win() {
		return score() == GameUtil.WINPOINTS_2048;
	}
"
158,d5211f90-2a3d-41e6-8ac2-d576b799b573,"	public boolean lose() {
		return lose;
	}
"
159,003497b1-c1b5-47d0-a7b7-4e35450a69dc,"	public int[][] getBoard() {
		return tiles;
	}
"
160,cebd2c93-e3a5-414e-b9fb-d17deca7794a,"	public void setBoard(int[][] tiles) {
		this.tiles = tiles;
	}
"
161,f78c8bdf-ab41-4fcc-9809-0dafacdec58a,"	public int score() {
		return score;
	}
"
162,9a821b6c-4f31-4161-b5a3-7845d6e52c02,"	public static void main(String[] args) {
		JFrame game = new JFrame();
		game.setTitle(""2048 Game"");
		game.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		game.setSize(340, 400);
		game.setResizable(false);

		game.add(new Game2048Board());

		game.setLocationRelativeTo(null);
		game.setVisible(true);
	}
"
163,c6b8b48c-f073-4e73-bfab-4092157db363,"	public static boolean compareExpectToActualLine(int[] expected, int[] actual) {
		if (expected == null || actual == null
				|| expected.length != actual.length) {
			return false;
		}
		for (int i = 0; i < expected.length; i++) {
			if (expected[i] != actual[i]) {
				return false;
			}
		}
		return true;
	}
"
164,1c5efb0f-3729-41d6-acde-171d8fde5dac,"	public static void printLine(int[] old, String message, int[] after,
			int[] expected, String status) {
		if (message == null || """".equalsIgnoreCase(message)) {
			message = "" after tilt_line_left became "";
		}
		String expectedStr = "" and the expected is "";
		System.out.println(convertLineToTxtWithSep(old) + message
				+ GameUtil.convertLineToTxtWithSep(after) + expectedStr
				+ GameUtil.convertLineToTxtWithSep(expected) + status);
	}
"
165,771d16cf-ab5b-407c-870d-5f08adebf681,"	public static String convertLineToTxtWithSep(int[] value) {
		if (value == null || value.length < 4) {
			return """";
		}

		String txt = ""{"" + value[0] + SEP + value[1] + SEP + value[2] + SEP
				+ value[3] + ""}"";
		return txt;
	}
"
166,38f7cd32-d3f4-47c2-85f2-ccac9d1dd28b,"	public static String convertLineToTxtWithSep(int i1, int i2, int i3, int i4) {
		String txt = ""{"" + i1 + SEP + i2 + SEP + i3 + SEP + i4 + ""}"";
		return txt;
	}
"
167,d3ef0cc2-d072-42d9-8c05-a3898bf03fd8,"	public static ArrayList<String> snapshotEmptySpots(int[][] tiles) {
		ArrayList<String> emptySpots = new ArrayList<String>();
		for (int x = 0; x < ROWS; x++) {
			for (int y = 0; y < COLS; y++) {
				if (tiles[x][y] == 0) {
					emptySpots.add(x + "","" + y);
				}
			}
		}
		return emptySpots;
	}
"
168,5b9b6242-84e6-4234-9e47-3283be7d44c6,"	private static boolean compareLine(int[] line1, int[] line2){
		if(line1 == line2){
			return true;
		}
		if(line1.length!=line2.length){
			return false;
		}
		
		for(int i=0;i<line1.length;i++){
			if(line1[i]!=line2[i]){
				return false;
			}
		}
		return true;
	}
"
169,9ba1bc96-04a6-4d00-aea7-976ff7868862,"	public static boolean compare(int[][] tempTiles, int[][] tiles2) {
        if(tempTiles==null || tiles2==null){
        	return true;
        }
        for(int i=0;i<ROWS;i++){
        	if(!compareLine(tempTiles[i],tiles2[i])){
        		return false;
        	}
        }
		return true;
	}
"
170,aca18ae0-c9f3-4334-a66b-7519e221daa2,"	public static boolean compareExpectToActualBoard(int[][] expected,
			int[][] actual) {
		for (int i = 0; i < expected.length; i++) {
			if (!compareExpectToActualLine(expected[i], actual[i])) {
				return false;
			}
		}
		return true;
	}
"
171,1549dd70-15e6-4f48-8a6e-a5a689223fd3,"	public static void printBoard(int[][] old, String message, int[][] after,
			int[][] expected, String status) {
		String expectedStr = "" and the expected:"";
		if (message == null || """".equals(message)) {
			message = ""after tilt board let became"";
		}
		StringBuffer bufer = new StringBuffer();
		bufer.append(""\n"");
		for (int i = 0; i < ROWS; i++) {
			bufer.append(convertLineToTxtWithSepForBoardPrint(old[i])).append(
					"" "");
			if (i < ROWS - 1) {
				for (int j = 0; j < message.length(); j++) {
					bufer.append("" "");
				}
			} else {
				bufer.append(message);
			}

			bufer.append("" "").append(
					convertLineToTxtWithSepForBoardPrint(after[i]));

			if (i < ROWS - 1) {
				for (int j = 0; j < expectedStr.length(); j++) {
					bufer.append("" "");
				}

			} else {
				bufer.append(expectedStr);
			}
			bufer.append(convertLineToTxtWithSepForBoardPrint(expected[i]))
					.append(""\n"");
		}
		bufer.append(status);
		System.out.println(bufer.toString());
	}
"
172,c8e08bdb-e799-4caa-a7e0-f81dcf6596ac,"	private static String convertLineToTxtWithSepForBoardPrint(int[] value) {
		if (value == null || value.length < 4) {
			return """";
		}

		String txt = ""|"" + value[0] + SEP + value[1] + SEP + value[2] + SEP
				+ value[3] + ""|"";
		return txt;
	}
"
173,317747d6-cade-45e0-b9da-8c89a1c1e40b,"    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);
        System.out.println(""Ingrese un día de la semana (número): "");
        int v = scanner.nextInt();
        String dia;
        
        switch(v)
        {
            case 1:
                dia = ""Lunes"";
                break;
            case 2:
                dia = ""Martes"";
                break;
            case 3:
                dia = ""Miercoles"";
                break;
            case 4:
                dia = ""Jueves"";
                break;    
            case 5:
                dia = ""Viernes"";
                break;
            case 6:
                dia = ""Sábado"";
                break;
            case 7:
                dia = ""Domingo"";
                break;
            default:
                dia = ""Día incorrecto... El valor debe ser entre 1 y 7"";                
        }
        System.out.println(dia);
    }
"
174,401615ed-205a-426b-b489-082386a5dfab,"    public static void main(String[] args)
    {
        Scanner scanner = new Scanner (System.in);
        
        System.out.print(""Ingrese su edad: "");
        int edad = scanner.nextInt();
        
        if (edad>=21)
        {
            System.out.println(""Usted es mayor de edad"");
        }
        else
        {
            System.out.println(""Usted es menor de edad"");
        }
    }
"
175,223c9afb-51f5-4ab3-b652-59de48a75d85,"    public static void main (String[] args)
    {
        Scanner scanner = new Scanner (System.in);
        //leo el valor de n
        int n = scanner.nextInt();
        int i = 1;
        while (i <= n)
        {
            //muestro el valor de i
            System.out.println(i);
            
            //incremento el valor de i
            i++;
        }
    }
"
176,586fe2ad-f4b6-4ec9-8e18-c4636126588f,"    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int i = 1;
        do {
            System.out.println(i);
            i++;
        } while ( i <= n );
    }
"
177,66d6e638-3b34-4233-8ecd-b150f878bda1,"    public static void main(String[] args)
    {    
        Scanner scanner = new Scanner(System.in);
    
        System.out.print(""Ingrese un valor: "");

        int v = scanner.nextInt();
    
        //obtener el resto de dividir v por 2
        int resto = v % 2;
    
        // Para preguntar por igual utilizaremos ==
        if (resto == 0)
        {
            System.out.println(v+"" es Par"");
        }
        else
        {
            System.out.println(v+"" es Impar"");
        }   
        
        //Utilizando un if in-line
        String mssg = (resto == 0) ? ""es Par"": ""es Impar"";
        
        //Muestro el resultado
        System.out.println(mssg);
    }    
"
178,21219630-a337-4ade-808a-9a981353aad1,"    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);
        
        //Mensaje para el usuario
        System.out.println(""Ingrese nombre edad altura: "");
        
        //Leemos el nombre
        String nom = scanner.next();
        
        //Leemos la edad
        int edad = scanner.nextInt();
        
        //Leemos la altura
        double altura = scanner.nextDouble();
        
        //Mostramos los datos por consola
        System.out.println(""Nombre: ""+nom+"" Edad: ""+edad+"" Altura: ""+altura);
    }
"
179,03242cb8-2ade-4b91-aaa2-27c89b88bf30,"    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        for(int i=1;i<=n;i++)
        {
            System.out.println(i);
        }
    }
"
180,08ec8336-007e-43fe-b1be-608c4467503c,"    public static void main(String[] args)
    {
        //define un array de 10 enteros
        int arr[] = new int[10];
        
        // usa el scanner para leer por teclado
        Scanner scanner = new Scanner(System.in);
        
        //leo el primer valor
        System.out.println(""Ingrese un valor (0=>fin): "");
        int v = scanner.nextInt();
        
        int i = 0;
        
        // mientras v sea distinto de cero AND i sea menor que 10
        while( v != 0 && i<10)
        {
            //asigna v en arr[i] y luego incrementa el valor de i
            arr[i++] = v ;
            
            //leo el siguiente valor
        System.out.println(""Ingrese un valor (0=>fin): "");
        v = scanner.nextInt();        
        }
        
        //recorro el array mostrando su contenido
        for(int j=0;j<i;j++)
        {
            System.out.println(arr[j]);
        }
    }
"
181,46777dcb-2547-48fb-8584-72f2c78ebe88,"    public static void main(String[] args)
    {
        String dias[] = {""Lunes"",""Martes"",""Miercoles"",""Jueves"",""Viernes"",""Sabado"",""Domingo""};
        Scanner scanner = new Scanner(System.in);
        System.out.println(""Ingrese un día de la semana (número): "");
        int v = scanner.nextInt();
        
        if (v <= dias.length)
        {
            System.out.println(dias[v-1]);            
        } else {
            System.out.println(""Día incorrecto..."");
        }
    }
"
182,afd299fb-7787-4b9a-a576-cdbcc2d455c1,"    public static void main(String[] args)
    {
        Fecha f = new Fecha();
        f.setDia(2);
        f.setMes(10);
        f.setAnio(1970);
        
        System.out.println(""Dia=""+f.getDia());
        System.out.println(""Mes=""+f.getMes());
        System.out.println(""Anio""+f.getAnio());
        System.out.println(f);
    }
"
183,95c8b6bf-eebc-4b08-a4f8-23e064bfadb4,"    public String toString()
    {
        return dia+""/""+mes+""/""+anio;
    }
"
184,ee006100-ccb3-4916-930a-bf2b355bac0f,"    public Fecha(String s)
    {
        int pos1=s.indexOf('/');
        int pos2=s.lastIndexOf('/');
        String sDia=s.substring(0,pos1);
        dia = Integer.parseInt(sDia);
        
        String sMes=s.substring(pos1+1,pos2);
        mes = Integer.parseInt(sMes);
        
        String sAnio = s.substring(pos2+1);
        anio = Integer.parseInt(sAnio);
    }
"
185,37be7a54-4351-450b-8b8c-71025c84ed73,"    public Fecha()
    {
        
    }
"
186,ac6659b9-774a-4f54-b633-736eaeead2f6,"    public Fecha(int d, int m, int a)
    {
        dia = d;
        mes = m;
        anio = a;
    }
"
187,8cb18878-86f1-46f2-818a-c8d7bba5bc87,"    public int getDia()
    {
        return dia;
    }
"
188,9c7adfc0-ad13-4c9f-a6bc-6e762ef24bc2,"    public void setDia (int dia)
    {
        this.dia = dia;
    }
"
189,77b4d243-076b-4db0-bbb8-7ac76e9e8d28,"    public int getMes()
    {
        return mes;
    }
"
190,849d6cfe-ddfb-4678-8a8b-fbe8a2a8180f,"    public void setMes(int mes)
    {
        this.mes = mes;
    }
"
191,d18416fe-af8f-4497-b6d3-0413d1d882fa,"    public int getAnio()
    {
        return anio;
    }
"
192,7ed5c318-0353-406b-829d-df8086ba63b6,"    public void setAnio(int anio)
    {
        this.anio = anio;
    }
"
193,7513d7b0-5295-4a10-864f-81eea6b68304,"    private int fechaToDias()
    {
        return anio*360+mes*30+dia;
    }
"
194,3967e528-060f-4b0e-aa52-b39d29f29880,"    private void diasToFecha(int i)
    {
        anio = (int)i/360;
        int resto = i % 360;
        mes = (int) resto/30;
        dia = resto % 30;
        if (dia == 0 )
        {
            dia = 30;
            anio--;
        }
        if (mes == 0)
        {
            mes=12;
            anio--;
        }
    }
"
195,b0fc53d7-faa9-4fbc-a4c6-f0bcf994c86e,"    public void addDias(int d)
    {
        int sum = fechaToDias()+d;
        diasToFecha(sum);
    }
"
196,c00ca15c-bb08-4076-9722-fc64521b50a5,"        public boolean equals(Object o)
    {
        Fecha otra = (Fecha)o;
        return (dia==otra.dia) && (mes==otra.mes) && (anio==otra.anio);                
    }
"
197,f87a88a8-a3f3-4049-9e82-62da949de0c7,"    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);
        System.out.println(""Ingrese la fecha (dd/mm/aaaa): "");
        String sFecha = scanner.next();
        Fecha f = new Fecha(sFecha);
        System.out.println(""La Fecha ingresada es:""+f);
        System.out.println(""Ingrese días a sumar(pueden ser negativos)"");
        int diasSum = scanner.nextInt();
        f.addDias(diasSum);
        System.out.println(""Sumando ""+diasSum+"" días, queda: ""+f);
    }
"
198,9a7cb834-dda5-414a-b93d-d457645e0520,"    @Override
    public void onEvent(CalculateNumbersEvent event, long sequence, boolean endOfBatch) throws Exception {
        CalculatedNumber fibonacciValue = event.getFibonacciValue();
        CalculatedNumber factorialValue = event.getFactorialValue();
        fibonacciValue.setBinaryRepresentation(Long.toBinaryString(fibonacciValue.getValue()));
        factorialValue.setBinaryRepresentation(Long.toBinaryString(fibonacciValue.getValue()));
    }
"
199,b088d6a0-cfd3-46a0-b889-7ecb99c86047,"    @Override
    public void onEvent(CalculateNumbersEvent event, long sequence, boolean endOfBatch) throws Exception {
        CalculatedNumber fibonacciValue = event.getFibonacciValue();
        CalculatedNumber factorialValue = event.getFactorialValue();
        fibonacciValue.setHexRepresentation(Long.toHexString(fibonacciValue.getValue()));
        factorialValue.setHexRepresentation(Long.toHexString(factorialValue.getValue()));
    }
"
200,acaea77c-5a29-445e-b9c8-d823b58deb98,"    public static void main(String[] args) {
        Disruptor<CalculateNumbersEvent> disruptor = new Disruptor<CalculateNumbersEvent>(CalculateNumbersEvent.EVENT_FACTORY, createExecutor(),
                new SingleThreadedClaimStrategy(RING_SIZE),
                new SleepingWaitStrategy());
        disruptor.handleEventsWith(new FactorialCalculator(), new FibonacciCalculator())
                .then(new HexRepresentationCalculator(), new BinaryRepresentationCalculator())
                .then(new EventOutputHandler());
        RingBuffer<CalculateNumbersEvent> ringBuffer = disruptor.start();


        // Publishers claim events in sequence
        long sequence = ringBuffer.next();
        CalculateNumbersEvent event = ringBuffer.get(sequence);

        event.setValue(5);

        // make the event available to EventProcessors
        ringBuffer.publish(sequence);

        disruptor.publishEvent(new EventTranslator<CalculateNumbersEvent>() {
            @Override
            public void translateTo(CalculateNumbersEvent event, long sequence) {
                event.setFired(new Date());
            }
        });
    }
"
201,7af262c5-7665-44e4-b1de-8c2e0ce77bbb,"            @Override
            public void translateTo(CalculateNumbersEvent event, long sequence) {
                event.setFired(new Date());
            }
"
202,6c2e0be3-1d6e-4bd5-8cf4-fdae56f8b914,"    private static Executor createExecutor() {
        return Executors.newSingleThreadExecutor();
    }
"
203,5954d046-dda3-449d-80d3-a4700c210823,"    public long getValue() {
        return value;
    }
"
204,727b4310-abe5-4eaf-b2ec-60ac8df8d4aa,"    public void setValue(final long value) {
        this.value = value;
    }
"
205,be0813a6-a9c7-47db-bb9b-f87e8d63ca32,"        public ValueEvent newInstance() {
            return new ValueEvent();
        }
"
206,7850ca45-468e-476f-b040-2656814afd86,"    @Override
    public void onEvent(CalculateNumbersEvent event, long sequence, boolean endOfBatch) throws Exception {
        long value = event.getValue();
        long result = factorial(value);
        event.setFactorialValue(new CalculatedNumber(result));
    }
"
207,f5925f6e-3ebd-4bde-b287-0d7ee426a02d,"    private long factorial(long n) {
        long result = 1;
        for(int i = 2; i < n; i++){
            result *= i;
        }
        return result;
    }
"
208,c3f308b5-7b31-4039-b25b-3d58e6f915e0,"    public Date getFired() {
        return fired;
    }
"
209,7d1897dc-ddbe-4ef4-80ca-604a5337dba5,"    public void setFired(Date fired) {
        this.fired = fired;
    }
"
210,958831ad-27e0-4d83-8e01-0d7eea51950a,"    public long getValue() {
        return value;
    }
"
211,4bf463e7-5feb-46f2-99e8-2f8dd999c99b,"    public void setValue(long value) {
        this.value = value;
    }
"
212,02d2ea35-bbac-40ec-b547-338aef6ade1c,"    public CalculatedNumber getFibonacciValue() {
        return fibonacciValue;
    }
"
213,537213d0-a643-465e-b6f9-a4c4fa869e82,"    public void setFibonacciValue(CalculatedNumber fibonacciValue) {
        this.fibonacciValue = fibonacciValue;
    }
"
214,c429d5f9-4907-4dcb-a733-e633bc29396f,"    public CalculatedNumber getFactorialValue() {
        return factorialValue;
    }
"
215,67a81b68-8ae1-4907-9d71-73b78c1a33a9,"    public void setFactorialValue(CalculatedNumber factorialValue) {
        this.factorialValue = factorialValue;
    }
"
216,f2151996-bd46-4824-9dfd-5aaf84b9a5f0,"        public CalculateNumbersEvent newInstance() {
            return new CalculateNumbersEvent();
        }
"
217,15afe3ee-9d99-4606-beb9-662449f7b408,"    @Override
    public String toString() {
        return ""CalculateNumbersEvent{"" +
                ""fired="" + fired +
                "", value="" + value +
                "", fibonacciValue="" + fibonacciValue +
                "", factorialValue="" + factorialValue +
                '}';
    }
"
218,f96d1dbf-a9f5-4bae-8b4c-2bea019c83bd,"    @Override
    public void onEvent(CalculateNumbersEvent event, long sequence, boolean endOfBatch) throws Exception {
        System.out.println(event.toString());
    }
"
219,4d0bfe16-04a6-4aaa-b63b-6de2d366f57d,"    @Override
    public void onEvent(CalculateNumbersEvent event, long sequence, boolean endOfBatch) throws Exception {
        long value = event.getValue();
        long result = fibonacci(value);
        event.setFibonacciValue(new CalculatedNumber(result));
    }
"
220,56646af1-0537-441e-aaac-b68303f6854e,"    private long fibonacci(long n) {
        if (n <= 1) return n;
        else return fibonacci(n - 1) + fibonacci(n - 2);
    }
"
221,fb50908d-127f-4bfa-9345-326b35dd639e,"    public CalculatedNumber(long value) {
        this.value = value;
    }
"
222,8db7401b-4bf1-4bcd-934b-e092e3130546,"    public String getBinaryRepresentation() {
        return binaryRepresentation;
    }
"
223,938810ad-0871-4e1b-b1d8-76aebe4a0b83,"    public void setBinaryRepresentation(String binaryRepresentation) {
        this.binaryRepresentation = binaryRepresentation;
    }
"
224,a38c9452-7e67-4813-a7e0-d5faad16114e,"    public String getHexRepresentation() {
        return hexRepresentation;
    }
"
225,a54d2167-4d3b-4781-aa08-8243262c6302,"    public void setHexRepresentation(String hexRepresentation) {
        this.hexRepresentation = hexRepresentation;
    }
"
226,4017a0c7-0c62-448f-bd29-0b98e6e3153f,"    public long getValue() {
        return value;
    }
"
227,460477a2-c2bf-40a2-a668-eca6f9004670,"    @Override
    public String toString() {
        return ""CalculatedNumber{"" +
                ""binaryRepresentation='"" + binaryRepresentation + '\'' +
                "", hexRepresentation='"" + hexRepresentation + '\'' +
                '}';
    }
"
228,769eccfc-193c-4f77-8c97-ba65da8070a3,"    public int closer(int i, int target, int step){
        
        
        if(Math.abs(target-i) <= step ){ return target; }
        
        if(i < target){
            return i + step;
        } else if(i > target){
            return i - step;
        } else {
            return target;
        }
        
    }
"
229,9385a83f-4bab-4bac-88c1-741910c9c570,"    public UtilTest() {
    }
"
230,980abda4-9ed2-4678-8109-d8fa7f5d3b77,"    @Test
    public void testDrawString() {
        
        assertTrue(closer(10, 5, 1) == 9);
        assertTrue(closer(10, 5, 2) == 8);
        assertTrue(closer(-10, 5, 1) == -9);
        assertTrue(closer(-10, 5, 2) == -8);
        assertTrue(closer(1, 2, 5) == 2);
        assertTrue(closer(-1, 1, 1) == 0);
        assertTrue(closer(0, 0, 1) == 0);
        
    }
"
231,cf379a29-ef6e-4201-bfa9-7cc914a69612,"    public Player(int x, int y) {
        this.x = x;
        this.y = y;
        tex = tx.getTexture(""assets/dude.png"");
        this.q = new Quad(x, y, tex);
        
    }
"
232,f1032e2f-1fbc-4a8b-8b63-b699bcd22310,"    public int[] getForce() {
        return force;
    }
"
233,9f4a7cbb-d082-4fab-9858-b5e94d818d42,"    public void addForce(int x, int y) {
        this.force[0] += x;
        this.force[1] += y;
    }
"
234,cbf46113-b703-4dc0-a9de-582fade2d004,"    public void setDirection(int direction){
        
        if(direction == LEFT){
            this.tex = tx.getTexture(""assets/dudeLeft.png"");
        } else {
            this.tex = tx.getTexture(""assets/dude.png"");
        }
        
    }
"
235,69bdd1eb-9f59-4212-b78d-2753fc1c8543,"    @Override
    public void draw() {
        q.setPos(x, y);
        q.setTexture(tex);
        q.draw();
    }
"
236,f24a98de-3cc2-4e6b-9a24-95d59f7f0640,"    public int lock(int i, int min, int max){
        if(i > max){ i = max; } else if(i < min){ i = min; }
        return i;
    }
"
237,8daa867a-6072-423b-89d3-6179f8130a0a,"    public int closer(int i, int target, int step){
        
        
        if(Math.abs(target-i) <= step ){ return target; }
        
        if(i < target){
            return i + step;
        } else if(i > target){
            return i - step;
        } else {
            return target;
        }
        
    }
"
238,5c5d30a1-790a-48fc-9c81-e041d1c800b6,"    public boolean isAirbourne(){
        return force[1] > 0;
    }
"
239,55f62d30-1e1a-4b48-9386-ba806b3cc60b,"    @Override
    public void tick(State gamestate) {
        
        this.force[0] = lock(this.force[0], -20, 20);
        this.force[1] = lock(this.force[1], -50, 50);
        
        // x
        
        if(this.force[0] > 0){
        
            // moving in positive x
            
            this.x += this.force[0];

            Entity xBlocker = gamestate.blockingEntity(this);

            if(xBlocker != null){
                int borderInset = (int)(int)this.getBounds().getMinX()-x;
                this.x = (int)xBlocker.getBounds().getMinX()-(int)this.getBounds().getWidth()-borderInset;
            }
        
        } else if(this.force[0] < 0){
            
            // moving in negative x
            
            this.x += this.force[0];

            Entity xBlocker = gamestate.blockingEntity(this);

            if(xBlocker != null){
                int borderInset = (int)this.getBounds().getMinX() - x;
                this.x = (int)xBlocker.getBounds().getMaxX() - borderInset;
            }
            
        }
        
        // y
        
        if(this.force[1] > 0){
        
            this.y += this.force[1];

            if(gamestate.blockingEntity(this) != null){
                this.y -= this.force[1];
            }
        
        } else if(this.force[1] < 0){
            
            this.y += this.force[1];
            
            Entity xBlocker = gamestate.blockingEntity(this);

            if(xBlocker != null){
                this.y = (int)xBlocker.getBounds().getMaxY();
            }
            
            if(gamestate.blockingEntity(this) != null){
                this.y -= this.force[1];
            }
            
        }
        
        // friction & gravity
        force[0] = closer(force[0], 0, 2);
        force[1] = closer(force[1], -40, 2);
        
        // bounding
        
        if(this.y <= 0){
            this.y = 0;
        }
        
    }
"
240,c3fa2c28-10b0-4d40-9626-f7172762b25a,"    @Override
    public Rectangle getBounds() {
        return new Rectangle(x+15, y, 64-30, 57);
    }
"
241,5f18cc5c-6d3b-4e33-b96e-aa602c1a04a0,"    public int getX(){ return x; }
"
242,c977c522-ba05-4afb-a876-781c9c5b9d0f,"    public int getY(){ return y; }
"
243,b23a3d53-9b16-4ac2-834c-bd01ec2d10a9,"    public Rectangle getBounds();
"
244,d6303859-042f-4b7f-bc67-a3c256d6b68c,"    public void tick(State gamestate);
"
245,53a52b3f-e37f-4660-8147-36ad5a06e969,"    public void draw();
"
246,d1406c48-ba99-49da-998d-b820106676ca,"    public Mock(int x, int y) {
        this.x = x;
        this.y = y;
        tex = tx.getTexture(""assets/sand.png"");
        this.q = new Quad(x, y, tex);
    }
"
247,077a973a-0a64-4bd7-ba5c-b130dabc0809,"    @Override
    public void draw() {
        q.draw();
    }
"
248,46d271f8-1b31-4383-82ec-3bd82ad268e0,"    @Override
    public void tick(State gamestate) {
        
        
    }
"
249,bd2ddec7-344a-474e-9ae0-96cca70c01e5,"    @Override
    public Rectangle getBounds() {
        return new Rectangle(x, y, 64, 64);
    }
"
250,7ab45ad5-903f-43fb-b84a-8c2b4ebf82b8,"    public void draw();
"
251,859babfd-ab92-49e9-a542-0589f84800dc,"    public Quad(float x, float y, Texture tex){
        this.x = x;
        this.y = y;
        this.tex = tex;
    }
"
252,6ac70b71-4d30-41bd-9960-39753cfbc48f,"    public void setPos(int x, int y){
        this.x = x;
        this.y = y;
    }
"
253,7809b2f0-3ab3-40ac-b42c-6aa8a8f663a0,"    public void setTexture(Texture t){
        this.tex = t;
    }
"
254,418c8e14-8786-47a1-b96b-98f8dcaf2dcb,"    @Override
    public void draw(){

        if(this.tex != null){
            tex.bind();
        }

        GL11.glPushMatrix();
        
        GL11.glTranslatef(x, y, 0);
        
        GL11.glBegin(GL11.GL_QUADS);
        
        GL11.glTexCoord2f(0, 1);
        GL11.glVertex2f(0, 0);
        
        GL11.glTexCoord2f(1, 1);
        GL11.glVertex2f(64, 0);
        
        GL11.glTexCoord2f(1, 0);
        GL11.glVertex2f(64, 64);
        
        GL11.glTexCoord2f(0, 0);
        GL11.glVertex2f(0, 64);
        
        GL11.glEnd();
        
        GL11.glPopMatrix();
    }
"
255,9c06221d-25a3-4d52-9438-28f44cb5d92e,"    public IsoGrid(){
        
        TextureLoader tx = new TextureLoader();
        
        Texture testTex = tx.getTexture(""assets/iso_grass.png"");
        Texture testTex2 = tx.getTexture(""assets/iso_grass2.png"");
        Texture flowers = tx.getTexture(""assets/iso_grass3.png"");
        Texture flower = tx.getTexture(""assets/iso_grass4.png"");
        Texture mushroom = tx.getTexture(""assets/iso_grass5.png"");
        Texture clump = tx.getTexture(""assets/iso_grass6.png"");
        
        Texture tex = null;
        
        for(int y = 0; y < 50; y++){
            for(int x = 0; x < 20; x++){
                
                if(rnd.nextInt(100) > 98 ){
                    
                    if(rnd.nextInt(100) > 70){
                        tex = mushroom;
                    } else {
                        tex = flowers;
                    }
                    
                    
                } else if(rnd.nextInt(100) > 95 ){
                    if(rnd.nextInt(100) > 70){
                        tex = clump;
                    } else {
                        tex = flower;
                    }
                } else if(rnd.nextInt(100) > 60 ){
                    tex = testTex2;
                } else {
                    tex = testTex;
                }
                
                if(y % 2 == 0.0){
                    Drawable q = new IsoQuad(x*64, (y*16), tex);
                    pipe.add(q);
                } else {
                    Drawable q = new IsoQuad((x*64)+32, (y*16), tex);
                    pipe.add(q);
                }
            }
        }
    }
"
256,816ab206-2fcc-4272-b8cb-05df7a95e059,"    @Override
    public void draw() {
        
        for(Drawable d : pipe){
            d.draw();
        }

    }
"
257,5bea537b-4716-436b-b760-edd8ee036a23,"    public static void drawString(int x, int y, String text){

        int tilesize = 16;

        for(int i = 0; i < text.length(); ++i){
            String character = """" + text.charAt(i);

            TextTile tile = alphabetmap.get(character.toUpperCase());

            if(tile == null){
                tile = alphabetmap.get(""?"");
            }

            tile.setPosition(i * tilesize, y);
            tile.draw();
        }

    }
"
258,2f6f1311-e350-421f-8795-22771ca8054c,"    public TextTile(int row, int col, Texture t){
        this.x = 0;
        this.y = 0;
        this.row = row;
        this.col = col;
        this.tex = t;
    }
"
259,cf17165e-f3d5-470e-8422-df774b4e6b0f,"    public void setPosition(int x, int y){
        this.x = x;
        this.y = y;
    }
"
260,3c91ce0d-7b1f-4914-84a4-a1b6b1c7999a,"    @Override
    public void draw(){
        
        if(this.tex != null){
            tex.bind();
        }
        
        GL11.glPushMatrix();
        GL11.glTranslatef(x, y, 0);
        GL11.glBegin(GL11.GL_QUADS);
        float dist = 1f / numtiles;
        
        float tileSize=16f;
        
        GL11.glTexCoord2f(col*dist, dist*(row+1));
        GL11.glVertex2f(0, 0);
        GL11.glTexCoord2f(dist+(col*dist), dist*(row+1));
        GL11.glVertex2f(tileSize, 0);
        GL11.glTexCoord2f(dist+(col*dist), dist*row);
        GL11.glVertex2f(tileSize, tileSize);
        GL11.glTexCoord2f(col*dist, dist*row);
        GL11.glVertex2f(0, tileSize);
        GL11.glEnd();
        GL11.glPopMatrix();
    }
"
261,81bbaba0-7aba-4592-a9bb-ecb64597a07c,"    public IsoQuad(float x, float y, Texture tex){
        this.x = x;
        this.y = y;
        this.tex = tex;
    }
"
262,822e7100-00a8-42a5-bae1-5285fc75855c,"    public void draw(){

        if(this.tex != null){
            tex.bind();
        }

        GL11.glPushMatrix();
        
        GL11.glTranslatef(x, y, 0);
        
        GL11.glBegin(GL11.GL_QUADS);
        
        GL11.glTexCoord2f(0, 1);
        GL11.glVertex2f(0, 0);
        
        GL11.glTexCoord2f(1, 1);
        GL11.glVertex2f(64, 0);
        
        GL11.glTexCoord2f(1, 0);
        GL11.glVertex2f(64, 32);
        
        GL11.glTexCoord2f(0, 0);
        GL11.glVertex2f(0, 32);
        
        GL11.glEnd();
        
        GL11.glPopMatrix();
    }
"
263,0ca6cc02-a379-4601-b8ef-3e04e9c86e1e,"    public static boolean isIn(Rectangle r, int pointX, int pointY){
        return r.contains(pointX, pointY);
    }
"
264,d7b889b5-6654-4b09-8492-bbfc6268f7b4,"    public Texture(int target, int textureID) {
        this.target = target;
        this.textureID = textureID;
    }
"
265,6cdb2d10-846a-49da-800e-0ed852919704,"    public void bind() {
        
        if(currentlyBoundTexture != textureID){
            glBindTexture(target, textureID);
            currentlyBoundTexture = textureID;
        }
    }
"
266,6d749e50-3df8-4a4a-92c5-47d115c4fc07,"    public void setHeight(int height) {
        this.height = height;
        setHeight();
    }
"
267,f1b1092f-ffd1-41ea-a6a0-3f44df73067b,"    public void setWidth(int width) {
        this.width = width;
        setWidth();
    }
"
268,09231bfb-f17f-4088-a3f1-c5848864b5f7,"    public int getImageHeight() {
        return height;
    }
"
269,92d61ea5-1cf3-4b79-b925-0a6701e29290,"    public int getImageWidth() {
        return width;
    }
"
270,6f884571-51fc-4744-99c6-523144ad2d3a,"    public float getHeight() {
        return heightRatio;
    }
"
271,4b0f80fb-9fb4-4b07-a187-5752cea6c248,"    public float getWidth() {
        return widthRatio;
    }
"
272,a19e2c87-9bd5-4523-bb3f-478aa696b18c,"    public void setTextureHeight(int texHeight) {
        this.texHeight = texHeight;
        setHeight();
    }
"
273,f28ae038-6fe6-4b11-96cd-b24227a197ad,"    public void setTextureWidth(int texWidth) {
        this.texWidth = texWidth;
        setWidth();
    }
"
274,41035c33-8813-461f-ba7d-77b17b250c56,"    private void setHeight() {
        if (texHeight != 0) {
            heightRatio = ((float) height) / texHeight;
        }
    }
"
275,351448a1-5a27-4ced-a4e7-5a7575b7fe6e,"    private void setWidth() {
        if (texWidth != 0) {
            widthRatio = ((float) width) / texWidth;
        }
    }
"
276,d9c016bd-1cd9-40ea-997e-9c30dac7dd41,"    public Engine(){
        
        try {
            
            Display.setDisplayMode(new DisplayMode(800,600));
            Display.create();
            
            GL11.glMatrixMode(GL11.GL_PROJECTION);
            GL11.glLoadIdentity();
            GL11.glOrtho(0, 800, 0, 600, 1, -1);
            GL11.glMatrixMode(GL11.GL_MODELVIEW);
            
        } catch (LWJGLException e) {
            throw new RuntimeException(e);
        }
        
    }
"
277,d19a6d5e-296a-43c0-a83e-3fbee36aefb3,"    public void start() {

        GL11.glEnable(GL11.GL_TEXTURE_2D);
        GL11.glDisable(GL11.GL_DEPTH_TEST);
        GL11.glDisable(GL11.GL_LIGHTING);
        GL11.glEnable(GL11.GL_BLEND);
        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
        
        // init
        
        gameState.setPlayer(new Player(0, 0));
        gameState.getEntities().add(new Mock(200, 0));
        
        // game loop
        
        while (!Display.isCloseRequested()) {
            
            Date d = new Date();
            long startTime = d.getTime();
            
            draw();
            update();
            handleInput();
            
            d = new Date();
            long endTime = d.getTime();
            
            try{ Thread.sleep(33 - (endTime-startTime)); } catch(Exception e){  }
            
        }
        
        Display.destroy();
    }
"
278,e79aad0b-f92e-40fe-8058-13aa8133c1d5,"    private void update(){
        for(Entity e : gameState.getEntities()){
            e.tick(gameState);
        }
    }
"
279,4536009d-387d-4960-81aa-b85390a4b2f1,"    private void draw(){

        // Clear the screen and depth buffer
        GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
        GL11.glMatrixMode(GL11.GL_MODELVIEW);
        GL11.glLoadIdentity();
        
        GL11.glScalef(scale, scale, scale);
        GL11.glTranslatef(-camerax, -cameray, 0);
        
        // draw shit here

        for(Entity e : gameState.getEntities()){
            e.draw();
        }
        
        primitives.Util.drawString(10, 560, ""pos   "" + gameState.getPlayer().getX() + "" "" + gameState.getPlayer().getY());
        primitives.Util.drawString(10, 540, ""force "" + gameState.getPlayer().getForce()[0] + "" "" + gameState.getPlayer().getForce()[1]);

        Display.update();
        
    }
"
280,94843f9d-7ba5-40f7-9c2e-6d264e1152a9,"    public void handleInput(){
        
        // mouse stuff apparently
        
        if(Mouse.isButtonDown(0)){
            
            System.out.println(String.format(""Screen: %s/%s"", Mouse.getX(), Mouse.getY()));
            System.out.println(String.format(""World : %s/%s"", Mouse.getX()+camerax, Mouse.getY()+cameray));
            
            gameState.getEntities().add(new Mock(Mouse.getX(), Mouse.getY()));
            
            
        }
        
        // handle movement keys
        
        float increment = 7.0f;

        if (Keyboard.isKeyDown(Keyboard.KEY_LEFT)) {
            // todo
            camerax -= increment;
        } 
        
        if (Keyboard.isKeyDown(Keyboard.KEY_RIGHT)) {
            camerax += increment;
        } 
        
        if (Keyboard.isKeyDown(Keyboard.KEY_DOWN)) {
            cameray -= increment;
        } 
        
        if (Keyboard.isKeyDown(Keyboard.KEY_UP)) {
            cameray += increment;
        } 
        
        if (Keyboard.isKeyDown(Keyboard.KEY_Q)) {
            scale -= 0.1;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_E)) {
            scale += 0.1;
        }
        
        if (Keyboard.isKeyDown(Keyboard.KEY_C  )) {
            System.out.println(String.format(""Mouse: %s/%s"", Mouse.getX(), Mouse.getY()));
            System.out.println(String.format(""Camera: %s/%s"", camerax, cameray));
        }
        
        if (Keyboard.isKeyDown(Keyboard.KEY_SPACE) && gameState.getPlayer().isAirbourne() == false) {
            gameState.getPlayer().addForce(0, 20);
        } 
        
        if (Keyboard.isKeyDown(Keyboard.KEY_D  )) {
            gameState.getPlayer().setDirection(Player.RIGHT);
            gameState.getPlayer().addForce(3, 0);
        } 
        
        if (Keyboard.isKeyDown(Keyboard.KEY_A)) {
            gameState.getPlayer().setDirection(Player.LEFT);
            gameState.getPlayer().addForce(-8, 0);
        } 
        
    }
"
281,cdd508d1-4fb7-4073-a208-177d5ac138b8,"    public State() {
        
    }
"
282,3a12a89c-4ff0-471f-83e4-0ebc6f144384,"    public TextureLoader getLoader() {
        return loader;
    }
"
283,beb94dda-3dbf-48e0-a1b3-9ab84831ca3b,"    public List<Entity> getEntities() {
        return entities;
    }
"
284,b6d1e322-c336-4a48-ab88-e5b2bbddcb70,"    public void setPlayer(Player p){
        this.player = p;
        this.entities.add(p);
    }
"
285,d9949729-ee54-4551-80be-090a7113a403,"    public Player getPlayer(){
        return this.player;
    }
"
286,cecbf423-e783-4d17-986f-07509fc84e08,"    public boolean blocking(Entity a){
        
        for(Entity ent : entities){
            if(a != ent && a.getBounds().intersects(ent.getBounds())){
                return true;
            }
        }
        
        return false;
        
    }
"
287,3d4c7d7f-cd8a-467c-ab66-b8666824e3cd,"    public Entity blockingEntity(Entity a){
        
        for(Entity ent : entities){
            if(a != ent && a.getBounds().intersects(ent.getBounds())){
                return ent;
            }
        }
        
        return null;
        
    }
"
288,e632854f-899f-4399-b1ee-76ff5b2bbbb5,"    public static void main(String[] args) {

        Engine e = new Engine();
        e.start();
        
    }
"
289,c0163276-fc76-428b-9144-08fb7cf87c3c,"    public TextureLoader() {
        
        glAlphaColorModel = new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),
                                            new int[] {8,8,8,8},
                                            true,
                                            false,
                                            ComponentColorModel.TRANSLUCENT,
                                            DataBuffer.TYPE_BYTE);

        glColorModel = new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),
                                            new int[] {8,8,8,0},
                                            false,
                                            false,
                                            ComponentColorModel.OPAQUE,
                                            DataBuffer.TYPE_BYTE);
    }
"
290,aead00b1-7ed8-4bb4-af67-fd631e7142ef,"    private int createTextureID() {
      glGenTextures(textureIDBuffer);
      return textureIDBuffer.get(0);
    }
"
291,d4cff87c-6a2b-4565-a200-6dd3c52b7fe0,"    public Texture getTexture(String resourceName){
        
        Texture tex = table.get(resourceName);

        if (tex != null) {
            return tex;
        }

        try{
            tex = getTexture(resourceName, GL_TEXTURE_2D, GL_RGBA, GL_LINEAR, GL_LINEAR);
        } catch(Exception e){
            throw new RuntimeException(e);
        }

        table.put(resourceName,tex);

        return tex;
    }
"
292,53b9de31-b38b-4654-a233-1a80f2fb1bae,"    public Texture getTexture(String resourceName,
                              int target,
                              int dstPixelFormat,
                              int minFilter,
                              int magFilter) throws IOException {
        int srcPixelFormat;

        // create the texture ID for this texture
        int textureID = createTextureID();
        Texture texture = new Texture(target,textureID);

        // bind this texture
        glBindTexture(target, textureID);

        BufferedImage bufferedImage = loadImage(resourceName);
        texture.setWidth(bufferedImage.getWidth());
        texture.setHeight(bufferedImage.getHeight());

        if (bufferedImage.getColorModel().hasAlpha()) {
            srcPixelFormat = GL_RGBA;
        } else {
            srcPixelFormat = GL_RGB;
        }

        // convert that image into a byte buffer of texture data
        ByteBuffer textureBuffer = convertImageData(bufferedImage,texture);

        if (target == GL_TEXTURE_2D) {
            glTexParameteri(target, GL_TEXTURE_MIN_FILTER, minFilter);
            glTexParameteri(target, GL_TEXTURE_MAG_FILTER, magFilter);
        }

        // produce a texture from the byte buffer
        glTexImage2D(target,
                      0,
                      dstPixelFormat,
                      get2Fold(bufferedImage.getWidth()),
                      get2Fold(bufferedImage.getHeight()),
                      0,
                      srcPixelFormat,
                      GL_UNSIGNED_BYTE,
                      textureBuffer );

        return texture;
    }
"
293,eb246eed-0c49-4ea4-b70f-371c41270f6e,"    private static int get2Fold(int fold) {
        int ret = 2;
        while (ret < fold) {
            ret *= 2;
        }
        return ret;
    }
"
294,6b5bdeb8-7c3c-4e23-ba49-8feef9828401,"    private ByteBuffer convertImageData(BufferedImage bufferedImage,Texture texture) {
        ByteBuffer imageBuffer;
        WritableRaster raster;
        BufferedImage texImage;

        int texWidth = 2;
        int texHeight = 2;

        // find the closest power of 2 for the width and height
        // of the produced texture
        while (texWidth < bufferedImage.getWidth()) {
            texWidth *= 2;
        }
        while (texHeight < bufferedImage.getHeight()) {
            texHeight *= 2;
        }

        texture.setTextureHeight(texHeight);
        texture.setTextureWidth(texWidth);

        // create a raster that can be used by OpenGL as a source
        // for a texture
        if (bufferedImage.getColorModel().hasAlpha()) {
            raster = Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,texWidth,texHeight,4,null);
            texImage = new BufferedImage(glAlphaColorModel,raster,false,new Hashtable());
        } else {
            raster = Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,texWidth,texHeight,3,null);
            texImage = new BufferedImage(glColorModel,raster,false,new Hashtable());
        }

        // copy the source image into the produced image
        Graphics g = texImage.getGraphics();
        g.setColor(new Color(0f,0f,0f,0f));
        g.fillRect(0,0,texWidth,texHeight);
        g.drawImage(bufferedImage,0,0,null);

        // build a byte buffer from the temporary image
        // that be used by OpenGL to produce a texture.
        byte[] data = ((DataBufferByte) texImage.getRaster().getDataBuffer()).getData();

        imageBuffer = ByteBuffer.allocateDirect(data.length);
        imageBuffer.order(ByteOrder.nativeOrder());
        imageBuffer.put(data, 0, data.length);
        imageBuffer.flip();

        return imageBuffer;
    }
"
295,fee8daaa-60ad-43cc-ae00-c1b71ae0f80a,"    private BufferedImage loadImage(String ref) throws IOException {
        
        URL url = TextureLoader.class.getClassLoader().getResource(ref);

        if (url == null) {
            throw new IOException(""Cannot find: "" + ref);
        }
        
        Image img = new ImageIcon(url).getImage();
        BufferedImage bufferedImage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);
        Graphics g = bufferedImage.getGraphics();
        g.drawImage(img, 0, 0, null);
        g.dispose();

        return bufferedImage;
    }
"
296,57151bca-484d-4644-8185-18da417921f0,"    public ListOfTasks() {
        taskList = new ArrayList<Task>();
    }
"
297,7da66d0e-4fa6-4435-8c66-25c79780c175,"    public ArrayList<Task> getTaskList() {
        return taskList;
    }
"
298,2f9daaa5-f6bd-40ff-a480-61e09b0ba9db,"    public void addTask(Task newTask) {
        taskList.add(newTask);
    }
"
299,f2ceaae4-37a2-45a0-a98f-6c078fad6c59,"    public void removeTask(Task task) {
        taskList.remove(task);
    }
"
300,6c703b6b-d733-4704-9848-ba509874f805,"    public void removeTaskIndex(int taskIndex) {
        taskList.remove(taskIndex);
    }
"
301,5240a8e0-da5e-4bca-9a91-35ed6b105e51,"    public void clearTasks() {
        taskList.clear();
    }
"
302,2915508a-d6a2-4e2e-966b-ba0f21c5d383,"    public Task getTask(int taskIndex) {
        Task chosenTask = taskList.get(taskIndex);
        return chosenTask;
    }
"
303,f43279d0-443f-4b45-8752-18b965d25e97,"    public int lengthOfTaskList() {
        int length = taskList.size();
        return length;
    }
"
304,ffd060f6-5c45-4e7d-b02a-83492613bbc1,"    public TextInput() {
        stringScanner = new Scanner(System.in);
        intScanner = new Scanner(System.in);
        boolScanner = new Scanner(System.in);
        finished = false;
    }
"
305,96a8756d-d97a-463f-8906-28b6608ae880,"    public void inputName() {
        System.out.println(""Enter the name of the task:\n"");
        name = stringScanner.nextLine();
    }
"
306,7387f6a5-0e53-4cce-8394-e84b5ddf9d6a,"    public void inputTaskNum() {
        System.out.println(""Enter the number of the task:\n"");
        taskNum = intScanner.nextInt();
    }
"
307,481934a1-456b-4329-83ab-9906f32a0724,"    public void inputParentNum() {
        System.out.println(""Enter the parent of the task, or 0 if it doesn't have one:\n"");
        parentNum = intScanner.nextInt();
    }
"
308,0030d688-d56c-40c2-9efd-a848948cd4c7,"    public void inputNumOfDays() {
        System.out.println(""Enter the number of days to complete the task:\n"");
        numOfDays = intScanner.nextInt();
    }
"
309,23460044-7d8e-4dfc-881d-25260603ad80,"    public void inputFinished() {
        System.out.println(""Have You finished? Enter true or false:\n"");
        finished = boolScanner.nextBoolean();
    }
"
310,5473b61a-0fc4-4aea-9433-8dbac39c08b9,"    public String getName() {
        return name;
    }
"
311,0a056845-aba5-494d-8f15-9188b5a5fea5,"    public int getTaskNum() {
        return taskNum;
    }
"
312,99ccfd3d-7a63-4df0-85e4-e889f051be70,"    public int getParentNum() {
        return parentNum;
    }
"
313,679d6f7c-b38e-4c0a-a5ab-b9f19dea320e,"    public int getNumOfDays() {
        return numOfDays;
    }
"
314,a3becf1c-9b96-4137-a8f5-b9a49a0a18ca,"    public boolean getFinished() {
        return finished;
    }
"
315,5db563f0-a7ee-4e93-beca-9b76946cfab4,"    public void inputTask() {
        
        inputName();
        
        inputTaskNum();
        
        inputParentNum();
        
        inputNumOfDays();
        
        inputFinished();
    }
"
316,ecf99882-15eb-4ad7-a60c-cffea9c8ff95,"    public TestGraphics() {
        
        super(""Pert Chart"");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        taskList = new ListOfTasks(); 
        
        //Create the gui window
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        getContentPane().add(mainPanel);
        
        JPanel graphicsPanel = new JPanel();
        
        //Create the graphics canvas
        GWindow window = new GWindow();
        mainPanel.add(window.getCanvas(), BorderLayout.CENTER);
        
        //Create scene
        scene = new GScene(window, ""scene"");
        
        double w0[] = {0.0, 1500.0, 0.0};
        double w1[] = {1500.0, 1500.0, 0.0};
        double w2[] = {0.0, 0.0, 0.0};
        scene.setWorldExtent(w0, w1, w2);
        scene.shouldZoomOnResize(false);
        
        
        GStyle style = new GStyle();
        style.setForegroundColor(Color.BLUE);
        style.setBackgroundColor(new Color (255, 255, 255));
        style.setFont(new Font(""Dialog"", Font.BOLD, 10));
        scene.setStyle(style);
        

        TextInput input = new TextInput();
        while(input.getFinished() == false) {
            input.inputTaskNum();
            input.inputParentNum();
            input.inputFinished();
            Task parentTask = null;
            int parentCounter = 0;
            double xPosition = 300;
            
            //Checks if this is the first task. If it is it's xCoordinates
            //get set a position of 200 rather than 500.
            /*
            if(taskList.lengthOfTaskList() == 0) {
                xPosition = 200;
            }
            */
                
            for(Task task : taskList.getTaskList()) {
                if(task.getTaskNumber() == input.getParentNum()) {
                    parentTask = task;
                    //xPosition = xPosition + parentTask.getXPosition() + 200;
                }
                if(task.getParent() == parentTask) {
                    parentCounter++;
                }
            }
            double yPosition = 500 + parentCounter * 300;
            taskList.addTask(new Task(""name"", input.getTaskNum(), 2, ""startDate"", ""endDate"", scene, parentTask, xPosition, yPosition));
        }

        
        /*
        Task task1 = new Task(""task1"", 1, 2, ""startDate"", ""endDate"", scene, null, 200, 500);
        Task task2 = new Task(""task2"", 2, 2, ""startDate"", ""endDate"", scene, task1, 200, 500);
        Task task3 = new Task(""task3"", 3, 2, ""startDate"", ""endDate"", scene, task2, 200, 500);
        Task task4 = new Task(""task4"", 4, 2, ""startDate"", ""endDate"", scene, task2, 200, 500);
       
       */
        pack();
        setSize (new Dimension(500, 500));
        
        
        setVisible(true);
        
    }
"
317,e2840cc9-d14a-4512-b57f-83f22f82140c,"    public static void main(String[] args) {
        new Start();
    }
"
318,1380f842-1a06-49c9-a4ec-d56325f1c66d,"    public Start() {
        
        super(""Pert Chart"");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        //will need to change this **********************
        taskList = new ListOfTasks();
        
        //Create the gui window
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        getContentPane().add(mainPanel);
        
        JPanel graphicsPanel = new JPanel();
        
        //Create the graphics canvas
        GWindow window = new GWindow();
        mainPanel.add(window.getCanvas(), BorderLayout.CENTER);
        
        //Create scene
        scene = new GScene(window, ""scene"");
        
        double w0[] = {0.0, 1500.0, 0.0};
        double w1[] = {1500.0, 1500.0, 0.0};
        double w2[] = {0.0, 0.0, 0.0};
        scene.setWorldExtent(w0, w1, w2);
        scene.shouldZoomOnResize(false);
        
        
        GStyle style = new GStyle();
        style.setForegroundColor(Color.BLUE);
        style.setBackgroundColor(new Color (255, 255, 255));
        style.setFont(new Font(""Dialog"", Font.BOLD, 10));
        scene.setStyle(style);
        
        
        //Gets the input from the user then creates the Task objects and also
        //adds them to the taskList.
        TextInput input = new TextInput();
        while(input.getFinished() == false) {
            input.inputTask();
            Task parentTask = null;
            int parentCounter = 0;
            double xPosition = 400;
            
            //Checks to see if this is the first task. If it is xPosition is 
            //set to 200.
            if(taskList.lengthOfTaskList() == 0) {
                xPosition = 200;
            }
            
            //Loops through the taskList field
            for(Task task : taskList.getTaskList()) {
                //Checks if there is a task with a task number matching the input
                //parent task number. If there is parentTask is set to that task.
                if(task.getTaskNumber() == input.getParentNum()) {
                    parentTask = task;
                }
                //Checks to see if there is already tasks with the same parent.
                //If there is the parentCounter variable is incremented.
                if(task.getParent() == parentTask) {
                    parentCounter++;
                }
            }
            
            //The yPosition is determined on how many children a parentTask has.
            //This is done using the previous parentCounter variable.
            double yPosition = 500 + parentCounter * 300;
            taskList.addTask(new Task(input.getName(), input.getTaskNum(), input.getNumOfDays(), ""startDate"", ""endDate"", scene, parentTask, xPosition, yPosition));
        }

        //Checks if more than 3 tasks have been created, if they have it changes
        //the size of the scene world extent.
        //********* this may need to be change to reflect the y axis.
        if(taskList.lengthOfTaskList() > 3) {
            double newSize = 1500 + taskList.lengthOfTaskList() * 500;
            double we0[] = {0.0, newSize, 0.0};
            double we1[] = {newSize, newSize, 0.0};
            double we2[] = {0.0, 0.0, 0.0};
            scene.setWorldExtent(we0, we1, we2);
        }
        
        pack();
        setSize (new Dimension(500, 500));
        
        /*
         * Checks if more than 3 tasks have been created, if they have it changes
         * the size of the scene world extent.
         */
        
        setVisible(true);
        
    }
"
319,1b3ae729-897b-410e-8e5a-0bbca705f92d,"    public Task() {
        
    }
"
320,c1e6a930-552a-43c6-9a1e-a5cf395b4c31,"    public Task(String name, int taskNumber, int numberOfDays,
                String startDate, String endDate, GScene scene, Task parent, double xPosition, double yPosition) {
        
        this.name = name;
        this.taskNumber = taskNumber;
        this.numberOfDays = numberOfDays;
        this.startDate = startDate;
        this.endDate = endDate;
        this.parent = parent;
        
        this.yPosition = yPosition;
        xSize = 200;
        ySize = 200;
        
        line = new GSegment();
        addSegment(line);
        
        square = new GSegment();
        addSegment(square);
        
        setStyle(new GStyle());
        //maybe change this and remove the scene field.
        if(parent == null) {
            scene.add(this);
            this.xPosition = xPosition;
        }
        else {
            parent.add(this);
            this.xPosition = parent.getXPosition() + xPosition;
        }

        updateText();
    }
"
321,a3cacd4a-c848-45d3-9531-960a2aea1e7b,"    public String getName() {
        return name;
    }
"
322,058eb502-3d61-4f0e-b6bd-27376619b61e,"    public int getTaskNumber() {
        return taskNumber;
    }
"
323,41e1a511-9495-4da7-868c-916fc8e88a53,"    public int getNumberOfDays() {
        return numberOfDays;
    }
"
324,4640dfe1-393b-4379-bbb1-af62dadedf89,"    public String getStartDate() {
        return startDate;
    }
"
325,a3b15d2d-85c8-4268-b1ec-be40a4c7660a,"    public String getEndDate() {
        return endDate;
    }
"
326,87fec9a6-42c8-4e3d-8b8e-05910a838d64,"    public double getXPosition() {
        return xPosition;
    }
"
327,e12dc0bd-aa6b-43d7-b9e1-85693979328f,"    public double getYPosition() {
        return yPosition;
    }
"
328,186f7a28-1ddc-41d2-ac9f-9e2c0da6235c,"    public double getXSize() {
        return xSize;
    }
"
329,505bc8c1-9a0e-477c-9db8-a31c2e67fb19,"    public double getYSize() {
        return ySize;
    }
"
330,7fe50f38-3f14-4385-8cd1-85e694cf7b97,"    public void updateText() {
        
        GText textName = new GText(name, GPosition.TOP);
        
        Integer num;
        num = taskNumber;
        GText textTaskNum = new GText(num.toString(), GPosition.TOP);
        
        num = numberOfDays;
        GText textNumOfDays = new GText(num.toString(), GPosition.TOP);
        
        GText textStart = new GText(startDate, GPosition.TOP);
        GText textEnd = new GText(endDate, GPosition.TOP);
        
        square.addText(textName);
        square.addText(textTaskNum);
        square.addText(textNumOfDays);
        square.addText(textStart);
        square.addText(textEnd);

    }
"
331,250a880a-3651-458b-a01b-e1d1b607cb8e,"    public void draw() {
        if(parent != null) {
            line.setGeometry(parent.getXPosition() + 200, parent.getYPosition() + 100, xPosition, yPosition + 100);
        }
        
        square.setGeometryXy(Geometry.createRectangle(xPosition, yPosition, xSize, ySize));
    }
"
332,cf8e0983-2b7e-4093-8121-f007b1597c2d,"	public void addInstance(String line) {
		if (instances == null) {
			instances = new ArrayList<Instance>();
		}
		Instance instance = new Instance();
		
		String[] splitline = line.split(DELIMITER);
		for(int i = 0; i < splitline.length - 1; i ++)
			instance.addAttribute(splitline[i]);
		instance.setLabel(splitline[splitline.length - 1]);
		
		instances.add(instance);
	}
"
333,c21c3c9f-a3f0-4435-97a6-5e001f5298e9,"	public void addAttribute(String i) {
		if (attributes == null) {
			attributes = new ArrayList<String>();
		}
		attributes.add(i);
	}
"
334,911ad28b-f583-487a-9b7f-88af6dc72b02,"	public void setLabel(String _label) {
		label = _label;
	}
"
335,d2f7fad6-aec3-4179-9f41-a8874a75254f,"		private Category(String name, Type type) {
			this.name = name;
			this.type = type;
		}
"
336,97dae526-c340-42fe-9e80-c79b4bb93c46,"		public String toString() {
			return name;
		}
"
337,6f50830a-838a-4fa2-a33c-40b419f38ce2,"		public String getName() {
			return name;
		}
"
338,414e34ff-efd9-414d-be71-e98ed61ca482,"		public Type getType() {
			return type;
		}
"
339,970005eb-0cb5-4aea-8cc8-a3ebe46dce63,"		public static Attribute.Category getAttribute(int index) {
			return values()[index];
		}
"
340,7da1d83e-8201-49d6-b09d-6626cbbdb4de,"	public Attribute(int index) {
		this.index = index;
		this.category = Category.getAttribute(index);
	}
"
341,d7245cc2-8470-4eac-921c-9a0793b8a05e,"	public void addValue(String value) {
		values.add(value);
	}
"
342,a3b4852f-b47b-48f5-be0c-7f2003e26be5,"	public static void main(String[] args) {
		 if (args.length != 4) {
			 System.out.println(""usage: java HW2 <modeFlag> <trainFilename> "" +
			 		""<tuneFilename> <testFilename>"");
			 System.exit(-1);
		 }
		 
		 /*
		  * mode 1 : create a decision tree using the training set, then print 
		  *      	   the tree and the prediction accuracy on the test set
		  *      2 : create a decision tree using the training set, prune using 
		  *        	   the tuning set, then print the tree and prediction accuracy 
		  *        	   on the test set
		  */
		 int mode = Integer.parseInt(args[0]);
		 if (mode < 1 || mode > 2) {
			 System.out.println(""Error: modeFlag must be an integer 1 or 2"");
			 System.exit(-1);
		 }
		 
		 // Turn text into array
		 // Only create the sets that we intend to use
		 DataSet trainSet = null, tuneSet = null, testSet = null;

		 trainSet = createDataSet(args[1], mode);
		 testSet = createDataSet(args[3], mode);
		 if(mode > 1)
			 tuneSet = createDataSet(args[2], mode);
		 
		 // Create decision tree
		 DecisionTree tree = null;
		 if (mode == 1) {
			 tree = new DecisionTreeImpl(trainSet);
		 } else {
			 if(tuneSet == null) {
				 System.out.println(""Empty tuning set"");
				 System.exit(-1);
			 }
			 tree = new DecisionTreeImpl(trainSet, tuneSet);
		 }

		 // print the tree and calculate accuracy
		 tree.print();
		 calcTestAccuracy(testSet, tree.classify(testSet));
	}
"
343,3153cbce-35ec-4228-be47-60edb0e0b5ef,"	private static DataSet createDataSet(String file, int modeFlag) {
		DataSet set = new DataSet();
		BufferedReader in;
		try {
			in = new BufferedReader(new FileReader(file));
			while (in.ready()) { 
				String line = in.readLine(); 
					set.addInstance(line);
			}
			in.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(-1);
		} 
		
		return set;
	}
"
344,e79793ca-7560-4888-bb9c-49a69021b877,"	private static void calcTestAccuracy(DataSet test, String[] results) {
		
		if(results == null) {
			 System.out.println(""Error in calculating accuracy: "" +
			 		""You must implement the classify method"");
			 System.exit(-1);
		}
		
		List<Instance> testInsList = test.instances;
		if(testInsList.size() == 0) {
			System.out.println(""Error: Size of test set is 0"");
			System.exit(-1);
		}
		if(testInsList.size() > results.length) {
			System.out.println(""Error: The number of predictions is inconsistant "" +
					""with the number of instances in test set, please check it"");
			System.exit(-1);
		}
		
		int correct = 0, total = testInsList.size();
		for(int i = 0; i < testInsList.size(); i ++)
			if(testInsList.get(i).label.equals(results[i]))
				correct ++;
		
		System.out.println(""Prediction accuracy on the test set is: "" 
				+ String.format(""%.5f"", correct * 1.0 / total));
		return;
	}
"
345,0a655ea5-2da9-4269-8416-58b1dabb1c73,"	NumericalInternalDecTreeNode(String _label, Attribute _attribute,
			String _parentAttributeValue, List<DecTreeNode> _children, double _midpoint) {
		super(_label, _attribute, _parentAttributeValue, _children);
		this.midpoint = _midpoint;
	}
"
346,b645638f-e875-490d-b302-a7ff322965d9,"	public String classify(Instance example) {
		String childExampleAttributeValue = example.attributes.get(attribute.index);
		if(Attribute.Type.NUMERICAL.equals(attribute.category.getType())) {
			for (DecTreeNode childNode : children) {
				if(""A"".equals(childNode.parentAttributeValue) == (Integer.parseInt(childExampleAttributeValue) < midpoint)) {
					if(childNode instanceof InternalDecTreeNode) {
						return ((InternalDecTreeNode)childNode).classify(example);
					} else {
						return childNode.label;
					}
				}
			}
		} 
		return label;
	}
"
347,e74a015e-8c5a-472b-9346-929d50e212fe,"	DecisionTreeImpl() {
		// no code necessary
		// this is void purposefully
	}
"
348,976d57d7-87d9-409a-88c7-9b0365d4d3e5,"	DecisionTreeImpl(DataSet train) {
		if (train == null || train.instances == null
				|| train.instances.isEmpty()) {
			return;
		}
		List<Attribute> attributes = new ArrayList<Attribute>();
		for (Instance instance : train.instances) {
			for (int i = 0; i < instance.attributes.size(); i++) {
				if (i > attributes.size() - 1) {
					attributes.add(new Attribute(i));
				}
				attributes.get(i).addValue(instance.attributes.get(i));
			}
		}

		root = trainTree(train.instances, attributes, train.instances, ""Root"");
	}
"
349,0efd0a51-66a6-4db6-ae41-e60c7da52efb,"	DecisionTreeImpl(DataSet train, DataSet tune) {
		this(train);
		prune(tune);
	}
"
350,8354a960-87ee-441e-8a08-507563dd1b4b,"	private DecTreeNode trainTree(List<Instance> examples,
			List<Attribute> attributes, List<Instance> parentExamples,
			String parentAttributeValue) {
		if (examples.isEmpty()) {
			return new LeafDecTreeNode(plurality(parentExamples), parentAttributeValue);
		} else if(attributes.isEmpty() || sameLabel(examples)) {
			return new LeafDecTreeNode(plurality(examples), parentAttributeValue);
		} else {
			Attribute importantAttribute = importance(attributes, examples);
			//System.out.println(""Winning Attribute: ""+importantAttribute.category.getName());
			List<Attribute> childAttributes = new ArrayList<Attribute>(
					attributes);
			childAttributes.remove(importantAttribute);
			
			if (Attribute.Type.NUMERICAL.equals(importantAttribute.category.getType())) {
				double midpoint = midpoint(examples, importantAttribute.index);				
				
				List<Instance> positiveChildExamples = new ArrayList<Instance>(), negativeChildExamples = new ArrayList<Instance>();
				for (Instance example : examples) {
					if(Integer.parseInt(example.attributes.get(importantAttribute.index)) > midpoint) {
						positiveChildExamples.add(example);
					} else {
						negativeChildExamples.add(example);
					}					
				}
				
				List<DecTreeNode> children = new ArrayList<DecTreeNode>();
				children.add(trainTree(negativeChildExamples,
						childAttributes, examples, ""A""));
				children.add(trainTree(positiveChildExamples,
						childAttributes, examples, ""B""));				
				
				return new NumericalInternalDecTreeNode(plurality(examples), importantAttribute, parentAttributeValue, children, midpoint);
			} else {
				Map<String, List<Instance>> childExamples = new LinkedHashMap<String, List<Instance>>();
				for (Instance example : examples) {
					String importantAttributeValue = example.attributes
							.get(importantAttribute.index);
					List<Instance> childExample = childExamples
							.get(importantAttributeValue);
					if (childExample == null) {
						childExample = new ArrayList<Instance>();
						childExamples.put(importantAttributeValue, childExample);
					}
					childExample.add(example);
				}
				
				List<DecTreeNode> children = new ArrayList<DecTreeNode>();
				for (String attribute : importantAttribute.values) {
					List<Instance> childExamplesForAttribute = childExamples.get(attribute);
					if(childExamplesForAttribute == null) {
						childExamplesForAttribute = new ArrayList<Instance>();
					}
					children.add(trainTree(childExamplesForAttribute,
							childAttributes, examples, attribute));
				}
				return new InternalDecTreeNode(plurality(examples), importantAttribute, parentAttributeValue, children);
			}
		}
	}
"
351,34a10d5e-55a2-449d-8262-a82bbb0aeeb8,"	private String plurality(List<Instance> examples) {
		Map<String, Integer> scores = new LinkedHashMap<String, Integer>();
		for (Instance instance : examples) {
			Integer score = scores.get(instance.label);
			if (score == null) {
				score = 0;
			}
			scores.put(instance.label, score + 1);
		}
		if(scores.isEmpty()) {
			return ""1"";
		} else if (scores.size() == 1) {
			return scores.keySet().iterator().next();
		} else {
			int winningScore = Integer.MIN_VALUE;
			String winner = null;
			for (String label : scores.keySet()) {
				if (!label.equals(winner)) {
					int score = scores.get(label);
					if (winningScore == score) {
						if (label.compareToIgnoreCase(winner) < 0) {
							winner = label;
						}
					} else if (winningScore < score) {
						winner = label;
						winningScore = score;
					}
				}
			}
			return winner;
		}
	}
"
352,8dd9b644-18ca-409c-9ed2-b81332300c21,"	private Attribute importance(List<Attribute> attributes,
			List<Instance> examples) {
		double winningEntropy = Double.NEGATIVE_INFINITY;
		Attribute winningAttribute = null;

		// Calculate H(Credit)
		double givenCredit = 0;
		for (Instance example : examples) {
			if (""1"".equals(example.label)) {
				givenCredit++;
			}
		}
		double creditEntropy = booleanEntropy(givenCredit / examples.size());
		System.out.println(""H(Credit) = "" + creditEntropy);

		for (int i = 0; i < attributes.size(); i++) {
			Attribute attribute = attributes.get(i);

			// Use these LinkedHashMaps to add up probabilities for
			// attributes both given credit and without
			Map<String, Double> attributeScore = new LinkedHashMap<String, Double>(
					attribute.values.size());
			Map<String, Double> attributeScoreGivenCredit = new LinkedHashMap<String, Double>(
					attribute.values.size());
			int examplesWithCredit = 0;

			if (Attribute.Type.NUMERICAL.equals(attribute.category.getType())) {
				double midpoint = midpoint(examples, attribute.index);
				
				List<Instance> examplesGivenCredits = new ArrayList<Instance>();
				for (int j = 0; j < examples.size(); j++) {
					Instance example = examples.get(j);
					if (""1"".equals(example.label)) {
						examplesGivenCredits.add(example);
					}
				}				
				double midpointGivenCredits = midpoint(examplesGivenCredits, attribute.index);
				
				for (int j = 0; j < examples.size(); j++) {
					Instance example = examples.get(j);
					int value = Integer.parseInt(example.attributes.get(i));
					String larger = String.valueOf(value > midpoint);
					Double score = attributeScore.get(larger);
					if (score == null) {
						score = 0.0;
					}
					attributeScore.put(larger, score + 1);

					if (""1"".equals(example.label)) {
						String largerGivenCredit = String.valueOf(value > midpointGivenCredits);
						Double scoreGivenCredit = attributeScoreGivenCredit
								.get(largerGivenCredit);
						if (scoreGivenCredit == null) {
							scoreGivenCredit = 0.0;
						}
						attributeScoreGivenCredit.put(largerGivenCredit,
								scoreGivenCredit + 1);
						examplesWithCredit++;
					}
				}
			} else {
				for (int j = 0; j < examples.size(); j++) {
					Instance example = examples.get(j);
					String value = example.attributes.get(i);
					Double score = attributeScore.get(value);
					if (score == null) {
						score = 0.0;
					}
					attributeScore.put(value, score + 1);

					if (""1"".equals(example.label)) {
						Double scoreGivenCredit = attributeScoreGivenCredit
								.get(value);
						if (scoreGivenCredit == null) {
							scoreGivenCredit = 0.0;
						}
						attributeScoreGivenCredit.put(value,
								scoreGivenCredit + 1);
						examplesWithCredit++;
					}
				}
			}

			// Calculate H(Credit|Attribute)
			double attributeEntropy = 0;
			for (String value : attributeScore.keySet()) {
				Double score = attributeScore.get(value);
				Double scoreGivenCredit = attributeScoreGivenCredit.get(value);
				if (score != null && scoreGivenCredit != null && score != 0
						&& scoreGivenCredit != 0) {
					attributeEntropy += (score / examples.size() * booleanEntropy(scoreGivenCredit
							/ examplesWithCredit));
				}
			}

			// Calculate I(Credit;Attribute) = H(Credit) - H(Credit|Attribute)
			double totalEntropy = creditEntropy - attributeEntropy;
			System.out.println(""I(Credit;"" + attribute.category.getName()	+ "") = "" + totalEntropy);
			if (totalEntropy >= winningEntropy) {
				winningEntropy = totalEntropy;
				winningAttribute = attribute;
			}

		}
		return winningAttribute;
	}
"
353,b94d0c6c-d01a-40ac-9848-b7e83f1877ce,"	private double booleanEntropy(double q) {
		if (q <= 0 || q >= 1) {
			return 0;
		}
		return -(((q * Math.log(q)) / LOG_OF_2) + (((1 - q) * Math.log(1 - q)) / LOG_OF_2));
	}
"
354,1df623f7-b7ef-477f-8657-9555c243bf63,"	private boolean sameLabel(List<Instance> examples) {
		if (examples == null || examples.isEmpty()) {
			return true;
		}
		boolean positive = ""1"".equals(examples.get(0).label);
		for (Instance instance : examples) {
			if ((""2"".equals(instance.label) && positive)
					|| (""1"".equals(instance.label) && !positive)) {
				return false;
			}
		}
		return true;
	}
"
355,d69e5b4f-6b54-4db0-a03a-f477e5d7fe3c,"	private double midpoint(List<Instance> examples, int attributeIndex) {
		if (examples == null || examples.isEmpty()) {
			return 0.0;
		}
		double max = Double.NEGATIVE_INFINITY, min = Double.POSITIVE_INFINITY;
		for (Instance instance : examples) {
			int attribute = Integer.parseInt(instance.attributes
					.get(attributeIndex));
			if (attribute > max) {
				max = attribute;
			}
			if (attribute < min) {
				min = attribute;
			}
		}
		return 0.5 * (max + min);
	}
"
356,961e2a60-d4fe-4afa-9412-01c3b2070ea1,"	@Override
	/**
	 * Evaluates the learned decision tree on a test set.
	 * @return the label predictions for each test instance 
	 * 	according to the order in data set list
	 */
	public String[] classify(DataSet test) {
		String[] classification = new String[test.instances.size()];
		for (int i = 0; i < test.instances.size(); i++) {
			Instance example = test.instances.get(i);
			if(root instanceof InternalDecTreeNode) {
				classification[i] = ((InternalDecTreeNode)root).classify(example);
			} else {
				classification[i] = root.label; 
			}
		}
		return classification;
	}
"
357,f04c2c81-7753-4fcd-a4c9-d3b8b1c7103b,"	private void prune(DataSet tune) {
		double originalAccuracy = calcTestAccuracy(tune, classify(tune));
//		System.out.println(""Original Accuracy: ""+originalAccuracy);
		// Can't really go about pruning if the root isn't internal
		if(root instanceof InternalDecTreeNode) {			
			InternalDecTreeNode nodeToPrune = null, parentNodeToPrune = null;			
			double maxAccuracy = originalAccuracy;
			
			InternalDecTreeNode savedInternalNode = (InternalDecTreeNode) root;
			LeafDecTreeNode prunedLeafNode = new LeafDecTreeNode(savedInternalNode.label, savedInternalNode.parentAttributeValue);
			
			// Test pruning the root node
			root = prunedLeafNode;
			// Calculate the test accuracy with this node pruned
			double accuracy = calcTestAccuracy(tune, classify(tune));
//			System.out.println(""Prune Accuracy: ""+accuracy);
			if(accuracy >= maxAccuracy) {
				maxAccuracy = accuracy;
				nodeToPrune = (InternalDecTreeNode)savedInternalNode;				
			}			
			
			// Return tree back to original state
			root = savedInternalNode;
			
			// Do a BFS search to determine which node to prune
			Queue<InternalDecTreeNode> queue = new LinkedList<InternalDecTreeNode>();
			queue.add((InternalDecTreeNode)root);
			while(!queue.isEmpty()) {
				InternalDecTreeNode internalNode = queue.remove();
				for (int i = 0; i < internalNode.children.size(); i++) {
					DecTreeNode child = internalNode.children.get(i);
					if(child instanceof InternalDecTreeNode) {
						// Calculate the test accuracy with this node pruned
						savedInternalNode = (InternalDecTreeNode) child;
						prunedLeafNode = new LeafDecTreeNode(savedInternalNode.label, savedInternalNode.parentAttributeValue);
						
						internalNode.removeChild(child);						
						internalNode.addChild(prunedLeafNode);
						
						accuracy = calcTestAccuracy(tune, classify(tune));
//						System.out.println(""Prune Accuracy: ""+accuracy);
						if(accuracy >= maxAccuracy) {
							maxAccuracy = accuracy;
							nodeToPrune = savedInternalNode;
							parentNodeToPrune = internalNode;
						}
						
						internalNode.removeChild(prunedLeafNode);
						internalNode.returnChild(i, child);
						
						queue.add(savedInternalNode);
					}
				}
			}
			
			// Prune the node if it's better than original accuracy
			if(nodeToPrune != null && maxAccuracy > originalAccuracy) {
				if(parentNodeToPrune != null) {
					parentNodeToPrune.removeChild(nodeToPrune);
					parentNodeToPrune.addChild(new LeafDecTreeNode(nodeToPrune.label, nodeToPrune.parentAttributeValue));

					// Keep pruning until we can't get better accuracy than current
					prune(tune);
				} else {
					root = new LeafDecTreeNode(nodeToPrune.label, nodeToPrune.parentAttributeValue);
				}
			} 
		}
	}
"
358,08ecfd9b-d185-46f7-8588-1039899d47d4,"	private double calcTestAccuracy(DataSet test, String[] results) {
		List<Instance> testInsList = test.instances;
		int correct = 0, total = testInsList.size();
		for(int i = 0; i < testInsList.size(); i ++)
			if(testInsList.get(i).label.equals(results[i]))
				correct ++;
		
		return correct * 1.0 / total;
	}
"
359,065e4c79-fa42-4635-9955-77a82ce55b35,"	@Override
	/**
	 * Prints the tree in specified format. It is recommended, but not
	 * necessary, that you use the print method of DecTreeNode.
	 * 
	 * Example:
	 * Root {Existing checking account?}
	 *   A11 (2)
	 *   A12 {Foreign worker?}
	 *     A71 {Credit Amount?}
	 *       A (1)
	 *       B (2)
	 *     A72 (1)
	 *   A13 (1)
	 *   A14 (1)
	 *         
	 */
	public void print() {
		root.print(0);
	}
"
360,cbc9c4ce-33ff-4642-8292-97cd65007c7e,"	InternalDecTreeNode(String _label, Attribute _attribute, String _parentAttributeValue, List<DecTreeNode> _children) {
		super(_label, _attribute.category.getName(), _parentAttributeValue, false);
		this.attribute = _attribute;
		this.children = _children;
	}
"
361,13464270-d0b4-4b72-ad33-45aba4296306,"	public void returnChild(int index, DecTreeNode child) {
		children.add(index, child);
	}
"
362,0dbf0a0a-e90b-4cb8-a1eb-816f4f82a593,"	public void removeChild(DecTreeNode child) {
		children.remove(child);
	}
"
363,8d1751f2-907f-4d82-b605-df0a523c277d,"	public String classify(Instance example) {
		String childExampleAttributeValue = example.attributes.get(attribute.index);
		for (DecTreeNode childNode : children) {
			if(childExampleAttributeValue.equals(childNode.parentAttributeValue)) {
				if(childNode instanceof InternalDecTreeNode) {
					return ((InternalDecTreeNode)childNode).classify(example);
				} else {
					return childNode.label;
				}					
			}
		}
		return label;
	}
"
364,5d21ee14-2354-4898-8e9a-0f3417540314,"	DecTreeNode(String _label, String _attribute, String _parentAttributeValue, boolean _terminal) {
		label = _label;
		attribute = _attribute;
		parentAttributeValue = _parentAttributeValue;
		terminal = _terminal;
		if (_terminal) {
			children = null;
		} else {
			children = new ArrayList<DecTreeNode>();
		}
	}
"
365,b38ce7fc-7411-4f67-ad81-48834da1e93f,"	public void addChild(DecTreeNode child) {
		if (children != null) {
			children.add(child);
		}
	}
"
366,563df8b4-d9fd-4b5a-805d-e9d3c7c1bc39,"	public void print(int k) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < k; i++) {
			sb.append(""    "");
		}
		sb.append(parentAttributeValue);
		if (terminal) {
			sb.append("" ("" + label + "")"");
			System.out.println(sb.toString());
		} else {
			sb.append("" {"" + attribute + ""?}"");
			System.out.println(sb.toString());
			for(DecTreeNode child: children) {
				child.print(k+1);
			}
		}
	}
"
367,9056d0f5-26fd-4c51-8b86-96d4a5dc678b,"	LeafDecTreeNode(String _label, String _parentAttributeValue) {
		super(_label, """", _parentAttributeValue, true);
	}
"
368,caf4d6fa-9407-481b-8ee6-cd77d1c8ae29,"	abstract public String[] classify(DataSet testSet);
"
369,e62244cd-327a-46e5-9d58-d00f23d2746b,"	abstract public void print();
"
370,8ac4f7ed-874d-47e7-8c60-1ec61c7beca5,"	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder(""\tGame State:\n"");
		sb.append(""\t\thand: "" + Arrays.toString(hand) + ""\n"");
		if (card > 0) sb.append(""\t\tcard: "" + card + ""\n"");
		sb.append(""\t\thand_id: "" + hand_id + ""\n"");
		sb.append(""\t\tgame_id: "" + game_id + ""\n"");
		sb.append(""\t\tyour_tricks: "" + your_tricks + ""\n"");
		sb.append(""\t\ttheir_tricks: "" + their_tricks + ""\n"");
		sb.append(""\t\tcan_challenge: "" + can_challenge + ""\n"");
		sb.append(""\t\tin_challenge: "" + in_challenge + ""\n"");
		sb.append(""\t\ttotal_tricks: "" + total_tricks + ""\n"");
		sb.append(""\t\tyour_points: "" + your_points + ""\n"");
		sb.append(""\t\topponent_id: "" + opponent_id + ""\n"");
		sb.append(""\t\ttheir_points: "" + their_points + ""\n"");
		sb.append(""\t\tplayer_number: "" + player_number + ""\n"");
		return sb.toString();
	}
"
371,06b43218-d6d4-48e4-a4a1-b4aa30e351b0,"	public Response(String type) {
		this.type = type;
	}
"
372,cd1d3134-49fb-4d35-8084-096f99be9743,"	public Response(String type, int card) {
		this.type = type;
		this.card = new Integer(card);
	}
"
373,796295e1-626e-4d9d-80e8-e47013e67f06,"	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder(""\tResponse:\n"");
		sb.append(""\t\ttype: "" + type + ""\n"");
		return sb.toString();
	}
"
374,0a0f6d1c-e9bf-4481-a0ac-b24682506119,"	public OfferChallengeMessage(int request_id) {
		super(request_id);
		response = new Response(""offer_challenge"");
	}
"
375,f4a0a891-be85-4848-ad69-08bbc3fc18b2,"	@Override
	public String toString() {
		return ""Offer Challenge\n"";
	}
"
376,ef120fd6-df38-4213-8524-73b2fe02dbac,"	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder(""Greeting Message:\n"");
		sb.append(""\tteam_id: "" + team_id + ""\n"");
		sb.append(""\tsark: "" + sark + ""\n"");
		return sb.toString();
	}
"
377,be552a70-e489-44b4-b7c3-8ec43464375f,"	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder(""Result Message:\n"");
		sb.append(result.toString());
		sb.append(""\tyour_player_num: "" + your_player_num + ""\n"");
		return sb.toString();
	}
"
378,1f1d9b99-8cb8-4efb-befd-cef99c388f00,"	public AcceptChallengeMessage(int request_id) {
		super(request_id);
		response = new Response(""accept_challenge"");
	}
"
379,051db5d5-70aa-46fe-aa95-235089935ff2,"	@Override
	public String toString() {
		return ""Accept Challenge\n"";
	}
"
380,a4cbdd30-5e22-4c15-af73-cafb43e074c7,"	public PlayCardMessage(int request_id, int card) {
		super(request_id);
		response = new Response(""play_card"", card);
	}
"
381,f2fdea95-2db6-459b-9816-efbf8f2fbcb3,"	@Override
	public String toString() {
		return ""Play Card "" + response.card + ""\n"";
	}
"
382,b7fe5720-f8b2-44fe-87d8-48e098969149,"	public PlayerMessage(int request_id) {
		this.request_id = request_id;
		type = ""move"";
	}
"
383,9b135137-f3a1-4b61-be7b-9e9a9d4ba5bc,"	@Override
	public abstract String toString();
"
384,1bece1bd-feb4-4842-aabe-d3b4191fc6d3,"	public RejectChallengeMessage(int request_id) {
		super(request_id);
		response = new Response(""reject_challenge"");
	}
"
385,ca09cd44-8683-4bb4-b858-a15f604aa1f4,"	@Override
	public String toString() {
		return ""Reject Challenge\n"";
	}
"
386,28656569-3ba1-4ec3-bcf9-5d25103a0a17,"	@Override
	public abstract String toString();
"
387,a7505640-a2e8-43dc-9d11-4f08195fc478,"	public ContestBot(String host, int port) {
		this.host = host;
		this.port = port;
	}
"
388,2d66032f-2e66-4bea-bb5d-b536c08434c0,"		void onReceiveResult(Status status, ResultMessage r){
			if ( r.result.type.equals(""trick_won"")) {
				if ( r.result.by == r.your_player_num ) winTime++;
				else loseTime++;
				theirLastCard = r.result.card;
				totalTime++;
			}
			if ( r.result.type.equals(""trick_tied"")) {
				tiedTime++;
				theirLastCard = myLastCard;
				totalTime++;
			}
			if ( r.result.type.equals(""hand_done"") ) {
				winTime = 0;
				loseTime = 0;
				totalTime = 0;
				tiedTime = 0;
//				strategy = 0;
				myLastCard = -1;
				theirLastCard = -1;
			}
		}
"
389,43e9797c-f20d-48ea-98c1-e5632cdba883,"		int onReceiveRequest(Status status, MoveMessage m){
			int index = -1;
			int hand[] = m.state.hand;
			int their_card = m.state.card;
			sort(hand);
			if(m.state.total_tricks==0&&m.state.in_challenge==false&&m.state.card>0
				&& winTime < 9){
				double prob = 0.6 + ( hand[2] - 10 ) * 0.2;
				if ( prob > Math.random()) return 9999;
				//return 9999;
			}
			
			if(their_card<=0){
				if (winTime == 1&&loseTime == 1&&tiedTime ==0){
					return hand.length-1;
				}
				//in this round, I play first.
				if (totalTime == 0 ) {
					int idx=-1;
					for(int i=0;i<hand.length;i++){
						if(hand[i]<10){
							idx = i;
							break;
						}
					}
					index = 2>idx?2:idx;
				}
				else if(totalTime == 1){
					index = 2;
				}
				else {
					index = secondBigger(hand);
				}
				
				if ( tiedTime == 0 ) {
					if ( winTime == 1 && loseTime == 2)	index = 0;
				}
				else {
					if ( loseTime >= 1 ) index = 0;
				}
				
			}
			else{
				theirLastCard = their_card;
				if((m.state.card>hand[hand.length-1])&&((m.state.card-hand[hand.length-1])>6)){
					index = hand.length-1;
				}
				else if((findCard(hand,m.state.card)==hand.length-1||
						findCard(hand,m.state.card)==hand.length-2)
						&&(m.state.card<=4)){
					index = findCard(hand,m.state.card);
				}
				else{
				index = minBigger(hand,m.state.card);
				}
				//in this round,they play first.
			}
			
//			if ( index < 0 || index >= hand.length ) {
//				System.err.println(""W:"" + winTime + "" L:"" + loseTime + "" T:"" + tiedTime);
//				System.err.println(""Hand: "");
//				for ( int x : hand ) {
//					System.err.print(x + "" "");
//				}
//				
//				System.err.println(""\nIndex:"" + index + ""\n"");
//			}
			myLastCard = hand[index];
			//return hand[0];
			if ( index >= hand.length ) {
				System.err.println(""W:"" + winTime + "" L:"" + loseTime + "" T:"" + tiedTime);
				System.err.println(""Hand: "");
				for ( int x : hand ) {
					System.err.print(x + "" "");
				}
				
				System.err.println(""\nIndex:"" + index + ""\n"");
				return 0;
			}
			return index;
		}
"
390,7000c5cf-19b5-43f2-9c51-d8fb62909fe5,"	private int findCard(int[] hand, int card){
		int index = -3;
		for(int i=0;i<hand.length;i++){
			if(hand[i]==card){
				index = i;
				break;	
			}
		}
		return index;
	}
"
391,4731fbfe-0623-4dd5-8f5d-93c34a00d146,"	private void run() {
		dm = new DecisionMaker();
		status = new Status();
		while (true) {
			// just reconnect upon any failure
			try {
				JsonSocket sock = new JsonSocket(host, port);
				try {
					sock.connect();
				}
				catch (IOException e) {
					throw new Exception(""Error establishing connection to server: "" + e.toString());
				}

				while (true) {
					Message message = sock.getMessage();

					PlayerMessage response = handleMessage(message);

					if (response != null) {
						sock.sendMessage(response);
					}
				}
			}
			catch (Exception e) {
				System.err.println(""Error: "" + e.toString());
				e.printStackTrace();
				System.err.println(""Reconnecting in "" + RECONNECT_TIMEOUT + ""s"");
				try {
					Thread.sleep(RECONNECT_TIMEOUT * 1000);
				}
				catch (InterruptedException ex) {}
			}
		}
	}
"
392,345c90ca-7f88-4824-aed9-c49bf8d8e293,"	public PlayerMessage handleMessage(Message message) {
		if (message.type.equals(""request"")) {
			MoveMessage m = (MoveMessage)message;
			if (game_id != m.state.game_id) {
				game_id = m.state.game_id;
//				System.out.println(""new game "" + game_id);
				if ( opponent != m.state.opponent_id) {
					if ( totalGames != 0 ) {
						double wonRatio = 1.0 * wonGames / totalGames;
						System.out.println(opponent + "" --- "" + String.format(""%.2f"", wonRatio)
								+ ""(W:"" + wonGames + "" T:"" + totalGames + "")"");
					}
					totalGames = 0;
					wonGames = 0;
					opponent = m.state.opponent_id;
				}
			}

//			System.out.println(m.toString());

			if (m.request.equals(""request_card"")) {
				boolean shouldPlay = (! m.state.can_challenge || isChanllenge(m) == false);
//				shouldPlay = shouldPlay || (strategy == 1 && totalTime <=1);
				if ( shouldPlay ) {
					//int i = (int)(Math.random() * m.state.hand.length);
					int i = dm.onReceiveRequest(status, m);
					//////////////
					if(i==9999){
					OfferChallengeMessage challenge = new OfferChallengeMessage(m.request_id);
					return challenge;
					}
					//////////////
					int[] hand = m.state.hand;
					sort(hand);
					PlayCardMessage card = new PlayCardMessage(m.request_id,hand[i]);
//					System.out.println(card.toString());
					return card;
				}
				else {
					OfferChallengeMessage challenge = new OfferChallengeMessage(m.request_id);
//					System.out.println(challenge.toString());
					return challenge;
				}
			}
			else if (m.request.equals(""challenge_offered"")) {
				PlayerMessage response;
				if(acceptChallenge(m)){
					response = new AcceptChallengeMessage(m.request_id);
				}
				else{
					response = new RejectChallengeMessage(m.request_id);
				}
//				System.out.println(response.toString());
				return response;
			}
		}
		else if (message.type.equals(""result"")) {
			ResultMessage r = (ResultMessage)message;
			if ( r.result.type.equals(""game_won"") ) {
				if ( r.result.by == r.your_player_num ) wonGames++;
				totalGames++;
				//System.out.println(""Won ratio: "" + (double)wonGames/totalGames);
			}
//				System.out.println(r.toString());
			dm.onReceiveResult(status, r);
		}
		else if (message.type.equals(""error"")) {
			ErrorMessage e = (ErrorMessage)message;
			System.err.println(""Error: "" + e.message);

			// need to register IP address on the contest server
			if (e.seen_host != null) {
				System.exit(1);
			}
		}
		return null;
	}
"
393,8cccf6b2-b5dc-4117-9ad6-e2a59006647b,"	public static void main(String[] args) {
		if (args.length < 2) {
			System.err.println(""Usage: java -jar ContestBot.jar <HOST> <PORT>"");
			System.exit(1);
		}

		String host = args[0];
		Integer port = Integer.parseInt(args[1]);

		ContestBot cb = new ContestBot(host, port);
		cb.run();
	}
"
394,f224a533-b0a9-4d69-aa2e-3b07e4aadccc,"	public boolean isChanllenge(MoveMessage m){
		
		if(haveLostHand(m)){
			return false;
		}
		
		if (haveWinHand(m)) {
			return true;
		}
//		if(isHandBig(m.state.hand)>0){
//			return true;
//		}
//		else if(m.state.their_points>8){
//			return true;
//		}
		
		return activeChallenge(m.state.hand, winTime, loseTime, m.state.their_points, m.state.your_points);
//		return true;
	}
"
395,93162f5e-3a31-4d2b-acc2-93becf954ab4,"	public boolean haveLostHand(MoveMessage m){
		if((m.state.your_tricks<m.state.their_tricks)
				&&(Math.abs(m.state.their_tricks-m.state.your_tricks)>(5-m.state.total_tricks) )){
			return true;
		}
		return false;
	}
"
396,19ceedf9-8108-4a17-af3e-e84d411fe0b4,"	public boolean haveWinHand(MoveMessage m){
		if((m.state.your_tricks>m.state.their_tricks)
				&&(Math.abs(m.state.their_tricks-m.state.your_tricks)>(5-m.state.total_tricks) )){
			return true;
		}
		return false;
	}
"
397,931a1457-cd3b-40c4-a834-df0a639d5311,"	public boolean acceptChallenge(MoveMessage m){
		if(haveWinHand(m)){
			return true;
		}
		else if(haveLostHand(m)){
			return false;
		}
		return passiveChallenge(m.state.hand, winTime, loseTime, m.state.their_points, m.state.your_points);
//		return true;
	}
"
398,ba8f52c8-b458-4d0b-a104-a1f3ffcc5e33,"	public int myHandQuality(int[] hand,int hid){
		for (int i=0;i<hand.length;i++){
			if(hand[i]==13){
				return 1;
			}
		}
		return 0;
	}
"
399,d31968ac-cd84-492f-95f4-fcc87a3c17fd,"	public int isHandBig(int[] hand){
		int sum = 0;
		for(int i=0;i<hand.length;i++){
			sum+=hand[i];
		}
		
		if((sum/hand.length)>=8){
			return 1;
		}
		return 0;
	}
"
400,cbc06297-b7eb-4aae-8d8b-8b187baddf56,"	public  int[] sort(int[] hand){
		int tmp;
		for(int i=0;i<hand.length;i++){
			for(int j=hand.length-1;j>i;j--){
				if(hand[j]>hand[j-1]){
					tmp = hand[j];
					hand[j] = hand[j-1];
					hand[j-1] = tmp;
				}
			}
		}
		return hand;
	}
"
401,4eea6ce5-defc-474c-9806-253eebe27c56,"	public int minBigger(int [] hand, int card){
		int index = -1;
		for(int i=0;i<hand.length;i++){
			if(hand[i]>card){
				index = i;
			}
		}
		if(index>=0){
			return index;
		}
		return hand.length-1;
	}
"
402,f1cf1d28-9b79-401e-b0af-6ccaf27e1bbf,"	public int secondBigger(int [] hand){
		if(hand.length==0){
			return -1;
		}
		if(hand.length<=2){
			return 0;
		}
		else{
			return 1;
		}
	}
"
403,3b455519-0de6-476b-bf26-57514b041bb5,"	public boolean activeChallenge(int[] hand, int win, int lose, int theirPoint, int ourPoint){
//		System.out.println(""Active: Win:"" + winTime + "" Lose:"" + loseTime + "" Tied:"" + tiedTime);

		double p = 0.0;
		double base = 0.4;
		if ( theirPoint >= 9 ) {
			return true;
		}
		if ( ourPoint >= 9 ) {
			return false;
		}
		
		sort(hand);
		if ( tiedTime == 0 ) {
			if(win==0 && lose==0){
				int sum = hand[0] + hand[1] + hand[2];
				int boulder = 33;
				if ( hand[0] >= 10 && hand[1] >= 10 && hand[2] >= 10
						&& sum >= boulder) {
					base = 0.4;
					p = base + (sum - boulder) * 0.20; 

//					if ( p >= 1.0 ) strategy = 1;
				}
//				return false;
			}
			else if ( win == 1 && lose == 0 ) {
				int sum = hand[0] + hand[1];
				int boulder = 20;
				int decrement = 0;
				if ( theirLastCard > 0 && theirLastCard < 6 ) {
					decrement  = 6 - theirLastCard;
				}
				if ( sum - decrement >= boulder ) {
					base = 0.5;
					p = base + (sum - boulder) * 0.1;
				}
			}
			else if ( win == 0 && lose == 1 ) {
//				if ( hand.length != 4) {
//					System.err.println(""W:"" + winTime + "" L:"" + loseTime + "" T:"" + tiedTime + ""\n"");
//					System.err.println(""Hand: "");
//					for ( int x : hand ) {
//						System.err.print(x + "" "");
//					}
//				}
				if ( hand.length != 4 ) {
					System.err.println(""W:"" + winTime + "" L:"" + loseTime + "" T:"" + tiedTime + ""\n"");
					System.err.println(""Hand: "");
					for ( int x : hand ) {
						System.err.print(x + "" "");
					}
					System.err.println(""\n"");
					return false;
				}
				int sum = hand[0] + hand[1] + hand[2];
				int boulder = 30;
				if ( sum >= boulder ) {
					base = 0.3;
					p = base + (sum - boulder) * 0.1;
				}
			}
			else if ( win == 2 && lose == 0 ) {
				int sum = hand[0];
				if ( sum == 13 ) {	// must win
					return true;
				}
				int boulder = 10;
				if ( sum >= boulder ) {
					base = 0.5;
					p = base + (sum - boulder) * 0.2;
				}
			}
			else if ( win == 0 && lose == 2 ) {
				if ( hand.length != 3 ) {
					System.err.println(""W:"" + winTime + "" L:"" + loseTime + "" T:"" + tiedTime + ""\n"");
					System.err.println(""Hand: "");
					for ( int x : hand ) {
						System.err.print(x + "" "");
					}
					System.err.println(""\n"");
					return false;
				}
				int sum = hand[0] + hand[1] + hand[2];
				int boulder = 33;
				if ( sum >= boulder ) {
					base = 0.8;
					p = base + (sum - boulder) * 0.2;

				}
			}
			else if ( win == 1 && lose == 1) {
				int sum = hand[0] + hand[1];
				int boulder = 22;
				if ( sum >= boulder ) {
					base = 0.4;
					p = base + (sum - boulder) * 0.1;
				}
			}
			else if ( win == 2 && lose == 1) {
				int sum = hand[0];
				if ( sum == 13 ) {	// must win
					return true;
				}
				else {
					return false;
				}
			}
			else if ( win == 1 && lose == 2) {
//				if ( hand.length != 2) {
//					System.err.println(""W:"" + winTime + "" L:"" + loseTime + "" T:"" + tiedTime + ""\n"");
//					System.err.println(""Hand: "");
//					for ( int x : hand ) {
//						System.err.print(x + "" "");
//					}
//				}
				if ( hand.length != 2) {
					System.err.println(""W:"" + winTime + "" L:"" + loseTime + "" T:"" + tiedTime + ""\n"");
					System.err.println(""Hand: "");
					for ( int x : hand ) {
						System.err.print(x + "" "");
					}
					System.err.println(""\n"");
					return false;
				}
				int sum = hand[0] + hand[1];
				int boulder = 24;
				if ( sum >= boulder ) {
					base = 0.8;
					p = base + (sum - boulder) * 0.2;
				}
			}
			else if ( win == 2 && lose == 2) {
				int sum = hand[0];
				if ( sum == 13 ) {	// must win
					return true;
				}
				int boulder = 11;
				if ( sum >= boulder ) {
					base = 0.6;
					p = base + (sum - boulder) * 0.4;
				}
			}
		}
		else if ( tiedTime == 1 ) {
			if(win==0 && lose==0){
				int sum = hand[0] + hand[1] + hand[2];
				int boulder = 32;
				if ( sum >= boulder) {
					base = 0.4;
					p = base + (sum - boulder) * 0.20; 

//					if ( p >= 1.0 ) strategy = 1;
				}
			}
			else if ( win == 1 && lose == 0 ) {
				int sum = hand[0];
				if ( sum == 13 ) {	// must win
					return true;
				}
				int boulder = 11;
				int decrement = 0;
				if ( theirLastCard > 0 && theirLastCard < 6 ) {
					decrement  = 6 - theirLastCard;
				}
				if ( sum - decrement >= boulder ) {
					base = 0.5;
					p = base + (sum - boulder) * 0.1;
				}
			}
			else if ( win == 0 && lose == 1 ) {
				int sum = hand[0] + hand[1] + hand[2];
				int boulder = 30;
				if ( sum >= boulder ) {
					base = 0.5;
					p = base + (sum - boulder) * 0.1;
				}
			}
			else if ( win == 1 && lose == 1) {
				int sum = hand[0] + hand[1];
				int boulder = 23;
				if ( sum >= boulder ) {
					base = 0.8;
					p = base + (sum - boulder) * 0.1;
				}
			}
			else if ( win == 2) {
				return true;
			}
			else if ( lose == 2 ) {
				return false;
			}
		}
		else if ( tiedTime == 2 ) {
			if(win==0 && lose==0){
				int sum = hand[0] + hand[1];
				int boulder = 23;
				if ( sum >= boulder) {
					base = 0.8;
					p = base + (sum - boulder) * 0.10; 
				}
			}
			else if ( win == 1 && lose == 0 ) {
				int sum = hand[0];
				if ( sum == 13 ) {	// must win
					return true;
				}
				int boulder = 11;
				int decrement = 0;
				if ( theirLastCard > 0 && theirLastCard < 6 ) {
					decrement  = 6 - theirLastCard;
				}
				if ( sum - decrement >= boulder ) {
					base = 0.5;
					p = base + (sum - boulder) * 0.1;
				}
			}
			else if ( win == 0 && lose == 1 ) {
				int sum = hand[0] + hand[1];
				int boulder = 34;
				if ( sum >= boulder ) {
					return true;
				}
			}
			else if ( win == 1 && lose == 1) {
				return false;
			}
		}
		else if ( tiedTime == 3 ) {
			if(win==0 && lose==0){
				int sum = hand[0] + hand[1];
				int boulder = 23;
				if ( sum >= boulder) {
					base = 0.8;
					p = base + (sum - boulder) * 0.10; 
				}
			}
			else if ( win == 1 && lose == 0 ) {
				return true;
			}
			else if ( win == 0 && lose == 1 ) {
				return false;
			}
		}
		else if ( tiedTime == 4 ) {
			if( win == 0 && lose == 0 ) {
				int sum = hand[0];
				if ( sum == 13 ) return true;
				else return false;
			}
		}
		
		return (p > Math.random()) ? true : false;
		
	}
"
404,cf0a5925-d02d-40fa-abb0-1a12820cb7a0,"	public boolean passiveChallenge(int[] hand, int win, int lose, int theirPoint, int ourPoint){
//		System.out.println(""Passive: Win:"" + winTime + "" Lose:"" + loseTime + "" Tied:"" + tiedTime);
		double p = 0.0;
		double base = 0.4;
		
//		return true;
		if ( theirPoint >= 9 ) {
			return true;
		}
		sort(hand);
		if ( tiedTime == 0 ) {
			if(win==0 && lose==0){
				int sum = hand[0] + hand[1] + hand[2];
				if ( ourPoint < 9 ) {
					int boulder = 33;
					if ( hand[0] >= 10 && hand[1] >= 10 && hand[2] >= 10
							&& sum >= boulder) {
						base = 0.4;
						p = base + (sum - boulder) * 0.1; 
						p = p * 0.8;
					}
				}
				else if ( ourPoint == 9 ) {
					int boulder = 30;

					if ( hand[0] >= 10 && hand[1] >= 10 && hand[2] >= 10 ) {
						base = 0.4;
						p = base + (sum - boulder) * 0.1;
					}
					if ( hand[0] >= 13 && hand[1] >= 13 && hand[3] >= 7 ) {
						boulder = 33;
						base = 0.4;
						p = base + (sum - boulder) * 0.2;
					}
				}
			}
			else if ( win == 1 && lose == 0 ) {
				int sum = hand[0] + hand[1];
				int boulder = 23;
				if ( sum >= boulder ) {
					base = 0.5;
					p = base + (sum - boulder) * 0.1;

					p = p*1.1;
				}
			}
			else if ( win == 0 && lose == 1 ) {
				int sum = hand[0] + hand[1] + hand[2];
				int boulder = 35;
				if ( sum >= boulder ) {
					base = 0.8;
					p = base + (sum - boulder) * 0.1;

					p = p*0.9;
				}
			}
			else if ( win == 1 && lose == 1) {
				int sum = hand[0] + hand[1];
				int boulder = 23;
				if ( sum >= boulder ) {
					base = 0.7;
					p = base + (sum - boulder) * 0.1;
				}
			}
			else if ( win == 2 && lose == 0 ) {
				int sum = hand[0];
				if ( sum == 13 ) {	// must win
					return true;
				}
				int boulder = 5;
				if ( sum >= boulder ) {
					base = 0.5;
					p = base + (sum - boulder) * 0.2;
				}
			}
			else if ( win == 0 && lose == 2 ) {
				int sum = hand[0] + hand[1] + hand[2];
				int boulder = 36;
				if ( sum >= boulder ) {
					base = 0.8;
					p = base + (sum - boulder) * 0.1;

				}
			}
			else if ( win == 2 && lose == 1) {
				int sum = hand[0];
				if ( sum == 13 ) {	// must win
					return true;
				}
				
				int boulder = 11;
				if ( sum >= boulder ) {
					base = 0.5;
					p = base + (sum - boulder) * 0.25;
				}
			}
			else if ( win == 1 && lose == 2) {
				int sum = hand[0] + hand[1];
				int boulder = 23;
				if ( sum >= boulder ) {
					base = 0.5;
					p = base + (sum - boulder) * 0.2;

					p = p*0.9;
				}
			}
			else if ( win == 2 && lose == 2) {
				int sum = hand[0];
				if ( sum == 13 ) {	// must win
					return true;
				}
				else {
					return false;
				}
			}
		} 
		else if ( tiedTime == 1 ) {
			if(win==0 && lose==0){
				int sum = hand[0] + hand[1] + hand[2];
				if ( ourPoint < 9 ) {
					int boulder = 30;
					if ( sum >= boulder) {
						base = 0.4;
						p = base + (sum - boulder) * 0.1; 
						p = p * 0.8;
					}
				}

				else if ( ourPoint == 9 ) {
					int boulder = 30;

					if ( hand[0] >= 10 && hand[1] >= 10 && hand[2] >= 10 ) {
						base = 0.4;
						p = base + (sum - boulder) * 0.1;
					}
					if ( hand[0] >= 13 && hand[1] >= 13 && hand[3] >= 7 ) {
						boulder = 33;
						base = 0.4;
						p = base + (sum - boulder) * 0.2;
					}
				}
			}
			else if ( win == 1 && lose == 0 ) {
				int sum = hand[0] + hand[1];
				int boulder = 22;
				if ( sum >= boulder ) {
					base = 0.5;
					p = base + (sum - boulder) * 0.1;

					p = p*1.1;
				}
			}
			else if ( win == 0 && lose == 1 ) {
				int sum = hand[0] + hand[1] + hand[2];
				int boulder = 33;
				if ( sum >= boulder ) {
					base = 0.7;
					p = base + (sum - boulder) * 0.1;

					p = p*0.9;
				}
			}
			else if ( win == 1 && lose == 1) {
				int sum = hand[0] + hand[1];
				int boulder = 24;
				if ( sum >= boulder ) {
					base = 0.8;
					p = base + (sum - boulder) * 0.1;
				}
			}
			else if ( win == 2 ) {
				return true;
			}
			else if ( lose == 2 ) {
				return false;
			}
		}
		else if ( tiedTime == 2 ) {
			if(win==0 && lose==0){
				int sum = hand[0] + hand[1];
				int boulder = 23;
				
				if (ourPoint >= 9) {
					if ( hand[0] >= 10 && hand[1] >= 10 ) {
						base = 0.5;
						p = base + (sum - boulder) * 0.1;
					}
				}
				else {
					if ( sum >= boulder) {
						base = 0.7;
						p = base + (sum - boulder) * 0.1; 
						p = p * 0.8;
					}
				}

				if ( ourPoint < 9 ) {
					if ( sum >= boulder) {
						base = 0.7;
						p = base + (sum - boulder) * 0.1; 
						p = p * 0.8;
					}
				}
				else if ( ourPoint == 9 ) {
					if ( hand[0] >= 13 && hand[1] >= 10 ) {
						boulder = 33;
						base = 0.4;
						p = base + (sum - boulder) * 0.2;
					}
				}
				
			}
			else if ( win == 1 && lose == 0 ) {
				int sum = hand[0];
				if ( sum == 13 ) {
					return true;
				}
				else {
					return false;
				}
			}
			else if ( win == 0 && lose == 1 ) {
				int sum = hand[0] + hand[1];
				int boulder = 36;
				if ( sum >= boulder ) {
					base = 0.8;
					p = base + (sum - boulder) * 0.1;

					p = p*0.9;
				}
			}
			else if ( win == 1 && lose == 1) {
				int sum = hand[0];
				if ( sum == 13 ) {
					return true;
				}
				else {
					return false;
				}
			}
		}
		else if ( tiedTime == 3 ) {
			int sum = hand[0];
			if ( sum == 13 ) return true;
			else return false;
		}
		return (p > Math.random()) ? true : false; 
	}
"
405,6a4506b1-780c-4547-8455-df9b21cd8603,"	public JsonSocket(String host, int port) {
		this.host = host;
		this.port = port;
	}
"
406,26c80513-ba50-4506-896a-7a218266cae9,"	public void connect() throws IOException {
		sock = new Socket(host, port);
		// disable nagle's algorithm to prevent latency on small packets
		sock.setTcpNoDelay(true);
		reader = new DataInputStream(sock.getInputStream());
		writer = new DataOutputStream(sock.getOutputStream());
	}
"
407,e8cc11cf-5bc9-4eab-9184-e812092817c0,"	public Message getMessage() throws Exception {
		String jsonMessage = """";

		try {
			int payloadLen = reader.readInt();
			byte[] jsonArr = new byte[payloadLen];
			if (reader.read(jsonArr) < 1) {
				throw new Exception(""server response was truncated"");
			}
			jsonMessage = new String(jsonArr);
		}
		catch (Exception e) {
			System.err.println(""Error reading response from server: "" + e.toString());
			throw e;
		}

		Message message = MessageFactory.getServerMessage(jsonMessage);
		return message;
	}
"
408,f09e04aa-f663-4b7a-a133-17558a88358a,"	public void sendMessage(PlayerMessage response) throws IOException {
		String json = MessageFactory.getPlayerMessage(response);

		try {
			byte[] jsonArr = json.getBytes(""US-ASCII"");
			writer.writeInt(jsonArr.length);
			writer.write(jsonArr);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			throw e;
		}
	}
"
409,5fee685e-1c71-44ca-872c-b9ac34576d16,"	public static Message getServerMessage(String jsonMessage) {
		JsonParser parser = new JsonParser();
		JsonObject obj = parser.parse(jsonMessage).getAsJsonObject();
		String type = gson.fromJson(obj.get(""type""), String.class);

		if (type.equals(""greetings_program"")) {
			return gson.fromJson(jsonMessage, GreetingMessage.class);
		}
		else if (type.equals(""request"")) {
			return gson.fromJson(jsonMessage, MoveMessage.class);
		}
		else if (type.equals(""result"")) {
			return gson.fromJson(jsonMessage, ResultMessage.class);
		}
		else if (type.equals(""error"")) {
			return gson.fromJson(jsonMessage, ErrorMessage.class);
		}
		else {
			ErrorMessage err = new ErrorMessage();
			err.message = ""Unknown response type ["" + type + ""] from server"";
			return err;
		}
	}
"
410,7224d1eb-907d-4739-9c59-532e2b419bc8,"	public static String getPlayerMessage(PlayerMessage response) {
		return gson.toJson(response);
	}
"
411,cd50352c-38a4-46dc-96f4-9a5445d5aba4,"	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder(""Move Message:\n"");
		sb.append(""\trequest: "" + request + ""\n"");
		sb.append(""\trequest_id: "" + request_id + ""\n"");
		sb.append(""\tremaining: "" + remaining + ""\n"");
		sb.append(state);
		return sb.toString();
	}
"
412,0627cbf2-b450-403b-bb80-3e4fdabb2f2d,"	@Override
	public String toString() {
		return ""Error: "" + message + ""\n"";
	}
"
413,d0ae0d8e-a102-4de9-b473-b264c01312d0,"	public static int resultType(String type) {
		return resType.get(type);
	}
"
414,b381f796-0f18-45d5-a185-d5ca98c87e85,"	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder(""\ttype: "" + type + ""\n"");
		if (by != null)     sb.append(""\tby: "" + by + ""\n"");
		if (reason != null) sb.append(""\treason: "" + reason + ""\n"");
		if (card != null)   sb.append(""\tcard: "" + card + "" (last card played)\n"");
		return sb.toString();
	}
"
415,eb1904e4-4517-4730-ac0b-fd48e25e333e,"    public PercentageDiscount(final double percent) {
        this.setPercentRate(percent);
    }
"
416,4bc0311d-00f0-42f1-b595-1667eee41dfc,"    public void setPercentRate(final double percent) {
        percentRate = percent;
    }
"
417,186957bc-cc32-48e6-b861-1fd35a29aa37,"    public double getPercentRate() {
        return percentRate;
    }
"
418,1d045ce7-f9c2-493b-917b-c456bf90f232,"    @Override
    public double getDiscount(double qty, double price) {
        return (qty * price * percentRate);
    }
"
419,6d227cc3-82cc-450e-b909-fb6090c66121,"    @Override
    public double getAmountAfterDiscount(double qty, double price) {
        return (qty * price) - getDiscount(qty, price);
    }
"
420,3b668062-2a06-44c5-8d2f-e8b709611328,"    public abstract Product findProduct(String itemId);
"
421,77fe2557-4bda-406a-8bcd-75df283ecba2,"    public abstract void retrieveProduct(double qty);
"
422,1b6fe182-2cd8-4e70-a3a8-983776626671,"    @Override
    public double getDiscount(double qty, double price) {
        double discount = 0;
        if(qty >= minQty){
            discount = (int)(qty / minQty) * price;
        }
        
        return discount;
    }
"
423,19092c04-90d4-49fb-9de4-49ad064a4c26,"    @Override
    public double getAmountAfterDiscount(double qty, double price) {
        return (qty * price) - getDiscount(qty, price);
    }
"
424,cefd6ee9-229c-43a8-a0d2-4676d574f065,"    public Receipt() {
        lineItems = new LineItem[1];
    }
"
425,d5771fd0-a193-4210-90d8-f4ed1646d04f,"    public LineItem createLineItem(String itemId, double qty) {
        lineItems[0].findLineItemProduct(itemId);
        lineItems[0].generateLineItem(qty);
        return lineItems[0];
    }
"
426,3605f5c6-6a29-457a-b592-793b006e28d4,"    private void addToArray(final LineItem item) {
        LineItem[] tempItems = new LineItem[lineItems.length + 1];
        System.arraycopy(lineItems, 0, tempItems, 0, lineItems.length);
        tempItems[lineItems.length] = item;
        lineItems = tempItems;
    }
"
427,136378e2-c7c3-4bdf-802a-59d5a87a0fdb,"    public static void main(String[] args) {
        
        Receipt receipt1 = new Receipt();
        receipt1.addToArray(receipt1.createLineItem(""135792"", 1));

//        Receipt receipt1 = new Receipt();
//        receipt1.createLineItem(""135792"", 1);
//        receipt1.createLineItem(""234567"", 3);

    }
"
428,d84999e4-f15d-4478-8f3d-94ef85e7c085,"    public LineItem[] getLineItems() {
        return lineItems;
    }
"
429,8a232db7-4773-42c4-bc5e-c52b0d7102cc,"    public void setLineItems(LineItem[] lineItems) {
        this.lineItems = lineItems;
    }
"
430,9203fccd-4d4c-4b13-9556-15a4beea1ebe,"    public Product(final String id, final String description, 
                                   final double price, final DiscountStrategy discountStrategy) {
        this.setItemId(id);
        this.setDescription(description);
        this.setPrice(price);
        this.setDiscountStrategy(discountStrategy);
    }
"
431,538c1c28-3eb5-46e0-aaac-9ba9285c74b0,"    public void setItemId(final String id) {
        this.itemId = id;
    }
"
432,099a9832-db1d-4fbc-a2e7-0056cea26e2c,"    public void setDescription(final String description) {
        this.description = description;
    }
"
433,e30a6264-dc6a-48f5-8c4f-4a83d0814b53,"    public void setPrice(final double price) {
        this.price = price;
    }
"
434,d3a1f222-8421-4bc5-8c77-c85a0b51f50a,"    public void setDiscountStrategy(final DiscountStrategy discountStrategy) {
        this.discountStrategy = discountStrategy;
    }
"
435,958d39f1-a0ab-4a39-8f8b-3b391c337211,"    public String getItemId() {
        return itemId;
    }
"
436,afbccac2-dbb4-439a-935f-a504627fd80f,"    public String getDescription() {
        return description;
    }
"
437,c2ae290b-3a82-4695-a039-e76d9f7077a8,"    public double getPrice() {
        return price;
    }
"
438,560c5062-2ff6-4516-9f57-bf32952dab19,"    public DiscountStrategy discountStrategy() {
        return discountStrategy;
    }
"
439,a494da5a-a0ff-478c-af91-9c29883cd93d,"    public void generateDiscount(final double qty) {
        double discount = discountStrategy.getDiscount(qty, price);
        System.out.print(""   "" + formatter.format(discount));
    }
"
440,d6205ada-92be-42d4-9fee-a28fdd5d1881,"    public void generateAmountAfterDiscount(final double qty) {
        double amount = discountStrategy.getAmountAfterDiscount(qty, price);
        System.out.print(""   "" + formatter.format(amount) + ""\n"");
    }
"
441,c4feb2e4-4101-4cbb-bd8d-4fcd2249c37e,"    @Override
    public Product findProduct(String itemId) {
        for(Product p: products){
            if(itemId.equals(p.getItemId())) {
                product = p;
                break;
            }
        }
        
        return product;
    }
"
442,4987d236-276d-425f-83a3-bc1460e63f86,"    @Override
    public final void retrieveProduct(double qty) {
        System.out.print(product.getItemId());
        System.out.print(""   "" + product.getDescription());
        System.out.print(""   "" + product.getPrice());
        product.generateDiscount(qty);
        product.generateAmountAfterDiscount(qty);
        
    }
"
443,c92613dd-4577-45a3-b584-304e15a4c251,"    public FixedAmountDiscount(double discount) {
        this.setAmountDiscount(discount);
    }
"
444,fb8dc11d-a4c1-42f2-bb60-4ebe0fdce407,"    public void setAmountDiscount(double discount) {
        if(discount == 0.0) {
            throw new IllegalArgumentException(""error: amountDiscount must be greater than zero"");
        }
       
        this.amountDiscount = discount;
    }
"
445,2b6eb4dd-1a34-4580-9c6a-ca23cba4a84e,"    public double getAmountDiscount() {
        return amountDiscount;
    }
"
446,c501cd5b-af69-48bb-bd42-8d9faafc14e4,"    @Override
    public double getDiscount(double qty, double price) {
        return (qty * price) - (qty * price - (qty * amountDiscount));
    }
"
447,c7dd6435-4711-4cb1-b38e-53c6aebe21ca,"    @Override
    public double getAmountAfterDiscount(double qty, double price) {
        return (qty * price) - (qty * amountDiscount); 
    }
"
448,0a146613-9498-4a16-8cf0-f2172980aab9,"    public abstract double getDiscount(double qty, double price);
"
449,64727d88-9bec-4756-8fad-b67a61f5e6a6,"    public abstract double getAmountAfterDiscount(double qty, double price);
"
450,46ee7ab5-3fe7-4da6-b373-bef5f742418b,"    public LineItem(DataStorageStrategy dataStorage) {
        this.setDataStorage(dataStorage);
    }
"
451,be9447bd-d599-4504-9756-e36bca0e306f,"    public void setDataStorage(DataStorageStrategy dataStorage) {
        this.dataStorage = dataStorage;
    }
"
452,bce8dda6-e78d-4981-bfc9-71f6a20e5a25,"    public DataStorageStrategy getDataStorage() {
        return dataStorage;
    }
"
453,5a293f4a-d9d7-49ad-b760-dc0bc5ef95ee,"    public void findLineItemProduct(String itemId) {
        dataStorage.findProduct(itemId);
    }
"
454,217ccab7-7122-49fd-8a77-9f04b402c291,"    public void generateLineItem(double qty) {
        dataStorage.retrieveProduct(qty);
    }
"
455,1b51de59-919b-4c67-8145-9b9a6025bd61,"    @Override
    public double getDiscount(double qty, double price) {
        return 0;
    }
"
456,e016fe90-b9d7-4493-b2c9-76f58db1181d,"    @Override
    public double getAmountAfterDiscount(double qty, double price) {
        return qty * price;
    }
"
457,48602c1c-8e47-4601-9064-f3fec2a14c73,"    public static void main(String[] args) {
        IImageDownload imageDownloader = new ImageDownloader();
//        IImageStore imageStore = new StoreFileDbFS();
//
//        byte[] image = imageDownloader
//                .getImageFromSite(""http://liberaldead.com/blog/wp-content/uploads/marveluniverse.jpg"");
        List<String> images = imageDownloader.getImagesList(""http://showusyourass.tumblr.com/"");

        BufferedOutputStream bufferedWriter = null;
        int i = 0;
        try {
            for (String image : images) {
                System.out.println(""Downloading ""+image);
                bufferedWriter = new BufferedOutputStream(new FileOutputStream(
                        ""/Users/admin/Downloads/zjava/"" + i + ""_"" + image.substring(image.length() - 4, image.length())));
                bufferedWriter.write(imageDownloader.getImageFromSite(image));
                bufferedWriter.close();
                i++;
                System.out.println(""Downloading ""+image+"" complete"");
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println(""That's it"");
    }
"
458,d921e20f-70c2-461a-898d-8f616d7eda5b,"    public static void main(String[] args) {
//        ([a-z\-_0-9\/\:\.]*\.(jpg|jpeg|png|gif))/i
//        Pattern MY_PATTERN = Pattern.compile(""(.*.[jpg|gif])"");
        Pattern MY_PATTERN = Pattern.compile(""(http:[A-Za-z0-9_\\./]*\\.[jpg|jpeg|png|gif]{3,4})"");
//        Matcher m =
//                MY_PATTERN.matcher(""<a src=\""http:va_sya/pequacomasdasdwwqskaasdhdppp.jpg\""></a><b>http://vasyapetu.com/asdasdwwqska/asdhd/tttt.gif</b>"");
//        while (m.find()) {
//            String s = m.group(1);
//            System.out.println(s);
//        }

		try {
			String pageStr = readPage(new URL(
					""http://showusyourass.tumblr.com/""));
			Matcher m = MY_PATTERN.matcher(pageStr);
			while (m.find()) {
				String s = m.group(1);
				System.out.println(s);
			}
            System.out.println(""______________"");
            System.out.println(pageStr);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
    }
"
459,69537813-87dd-447f-acce-019fdd4166e2,"    private static String readPage(URL url) throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        HttpGet request = new HttpGet(url.toURI());
        HttpResponse response = client.execute(request);
        Reader reader = null;
        try {
            reader = new InputStreamReader(response.getEntity().getContent());
            StringBuffer sb = new StringBuffer();
            int read;
            char[] cbuf = new char[1024];
            while ((read = reader.read(cbuf)) != -1) {
                sb.append(cbuf, 0, read);
            }
            return sb.toString();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
"
460,35b05177-ad7b-4eb2-9bf7-51e1b3771a7e,"	@Override
	public void putImageFile(String dir, String fileName, Date date) {
		DAOFactory factory = DAOFactory.getDAOFactory(1);
		SiteDAO sitedao = factory.getSiteDAO();
		
		Site site = new Site();
		site.setSiteName(""google.com"");
		sitedao.insertCustomer(site);
	}
"
461,9c5c2d81-458d-4d66-ae08-dc7581a278a5,"	private PostgreSQLPooledConnection() {
	}
"
462,31d17f58-7de4-4b6d-8abe-1adea065423f,"	public static PGPoolingDataSource getInstance() {
		if (source == null) {
			synchronized (PostgreSQLPooledConnection.class) {
				if (source == null) {
					source = new PGPoolingDataSource();
					source.setDataSourceName(""PGSQLDataSource"");
					source.setServerName(""localhost"");
					source.setDatabaseName(""postgres"");
					source.setUser(""postgres"");
					source.setPassword(""123456"");
					source.setMaxConnections(20);
				}
			}
		}
		return source;
	}
"
463,fecc839d-99e9-43cc-808f-6c8b28099ea9,"	public Connection getConnection(Boolean commit) {
		try {
			conn = PostgreSQLPooledConnection.getInstance().getConnection();
			if (commit)
				conn.setAutoCommit(true);
			else
				conn.setAutoCommit(false);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return conn;
	}
"
464,93b8ac22-ac72-4204-baef-1de98a364a30,"	public void closeConnection() {
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
"
465,a66612ec-c92d-44d5-9820-f39545b62012,"	public ImageProperties() {
	}
"
466,c3ae1267-d7df-459d-a1e8-26eccb2f32fe,"	public ImageProperties(Integer id, Date date, String fileName, String type,
			String path, Site linkTo) {
		super();
		this.id = id;
		this.date = date;
		this.fileName = fileName;
		this.type = type;
		this.path = path;
		this.linkTo = linkTo;
	}
"
467,ef6f02c5-60a3-4e1d-be3d-c09f1860794f,"	public Integer getId() {
		return id;
	}
"
468,00bc6a11-aa4c-47d0-ae42-a7a66090c64c,"	public void setId(Integer id) {
		this.id = id;
	}
"
469,b48581c2-a327-41ad-99c4-6fed13f1b988,"	public Date getDate() {
		return date;
	}
"
470,f868ecfb-d97c-4a8e-be8f-aa6e0caf0b67,"	public void setDate(Date date) {
		this.date = date;
	}
"
471,c613e19e-c4d9-4b64-bf5c-3546850f845a,"	public String getFileName() {
		return fileName;
	}
"
472,d1767c53-a6e4-46a4-843f-d0fbc1bd05a2,"	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
"
473,badc6b47-c7e0-4bcc-b351-59e9ced925cd,"	public String getType() {
		return type;
	}
"
474,38f6ef82-8608-48d6-8d33-5e4b983e313f,"	public void setType(String type) {
		this.type = type;
	}
"
475,8e1c8352-6b11-4299-8d74-cd87be2f794a,"	public String getPath() {
		return path;
	}
"
476,63e93dc2-9a38-4ffb-821e-63b62f3d84bd,"	public void setPath(String path) {
		this.path = path;
	}
"
477,96c2b59a-f5d4-44c5-aa1b-6d999ff2a62a,"	public Site getLinkTo() {
		return linkTo;
	}
"
478,55e34670-0fb7-445d-8cae-f912717aa881,"	public void setLinkTo(Site linkTo) {
		this.linkTo = linkTo;
	}
"
479,794928af-ba24-4c40-992e-8365bc42cf99,"	public Site() {
		images = new ArrayList<ImageProperties>();
	}
"
480,86d20c8e-b8bd-4bf3-b61f-0097ac6a5355,"	public Site(Integer id, String siteName) {
		super();
		this.id = id;
		this.siteName = siteName;
		images = new ArrayList<ImageProperties>();
	}
"
481,8031c7c2-3ea6-4e5d-ab18-3826f25f1076,"	public Integer getId() {
		return id;
	}
"
482,0ea54a55-6f8e-441a-b276-faf77ec3a818,"	public void setId(Integer id) {
		this.id = id;
	}
"
483,54c1055f-5112-418e-b349-894e92ccf6cf,"	public String getSiteName() {
		return siteName;
	}
"
484,25a055b2-1e90-436e-84f6-e93d90c6d927,"	public void setSiteName(String siteName) {
		this.siteName = siteName;
	}
"
485,a6c313ea-988f-46c8-baf7-3048ea9b4cb4,"	public List<ImageProperties> getImages() {
		return images;
	}
"
486,bab9e67d-dd05-417c-88af-9a059ae2da05,"	public void setImages(List<ImageProperties> images) {
		this.images = images;
	}
"
487,fdc65df9-c2a9-4d5f-bdd7-b2173745c32f,"	  public int insertCustomer(T site);
"
488,c8cbd82a-86e8-47ae-9c6b-a79b63d64ea8,"	@Override
	public int insertCustomer(Site site) {
		Connection con = conn.getConnection(true);
		try {
			PreparedStatement ps = con.prepareStatement(""insert into public.site values (?,?)"");
			ps.setInt(1, site.getId());
			ps.setString(2, site.getSiteName());
			ps.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return 0;
	}
"
489,4844bee6-a8f5-4f15-9bb5-76eed4915f57,"	  public int insertCustomer(Site site);
"
490,79447a1a-1115-46f5-9155-06c58c716fac,"	@Override
	public SiteDAO getSiteDAO() {
		return new PostgreSiteDAO();
	}
"
491,72bdd90a-89f8-42d7-b2fc-b579dbda7907,"	@Override
	public ImagePropertyDAO getImagePropertyDAO() {
		// TODO Auto-generated method stub
		return null;
	}
"
492,d1bbc2c0-fec9-4cf7-836d-1ef55fdc6e7e,"	public abstract SiteDAO getSiteDAO();
"
493,814656cf-4fe6-4848-a5a8-9b24caa87b8b,"	public abstract ImagePropertyDAO getImagePropertyDAO();
"
494,0b4dedb5-5b4a-4af7-abd3-daadd0b211ee,"	public static DAOFactory getDAOFactory(int whichFactory) {
		switch (whichFactory) {
		case POSTGRESQL:
			return new PostgreDAOFactory();
		default:
			return null;
		}
	}
"
495,d4894b62-f8b7-48af-a2fc-37dee5e390ad,"    @Override
    public byte[] getImageFromSite(String url) {
        URL siteUrl = null;
        ByteArrayOutputStream out = null;
        InputStream in = null;
        byte[] response = null;
        try {
            siteUrl = new URL(url);
            in = new BufferedInputStream(siteUrl.openStream());
            out = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            int n = 0;
            while (-1 != (n = in.read(buf))) {
                out.write(buf, 0, n);
            }
            response = out.toByteArray();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (out != null)
                    out.close();
                if (in != null)
                    in.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return response;
    }
"
496,77767f50-75aa-4e58-bf3d-3f63d16bd02e,"    @Override
    public List<String> getImagesList(String url) {
        ArrayList<String> imgList = new ArrayList<String>();
        try {
            String pageStr = readPage(new URL(url));
            Matcher m = imagePattern.matcher(pageStr);
            while (m.find()) {
                imgList.add(m.group(1));
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return imgList;
    }
"
497,ea026f19-6787-45f6-b3ff-721c23ed581c,"    private String readPage(URL url) throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        HttpGet request = new HttpGet(url.toURI());
        HttpResponse response = client.execute(request);
        Reader reader = null;
        try {
            reader = new InputStreamReader(response.getEntity().getContent());
            StringBuffer sb = new StringBuffer();
            int read;
            char[] cbuf = new char[1024];
            while ((read = reader.read(cbuf)) != -1) {
                sb.append(cbuf, 0, read);
            }
            return sb.toString();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
"
498,7f8e6ed9-40dc-4ac2-93e0-012ccf26fc78,"	public byte[] getImageFromSite(String url);
"
499,b863257a-ff44-4358-a682-d8e88a189f99,"    public List<String> getImagesList(String url);
"
500,2996baa2-f919-4152-a7e9-e7f8ed0c8740,"	public void putImageFile(String dir, String fileName, Date date);
"
501,249edbaf-7d8b-459d-ae0a-1a6011694dff,"	public ChatClient(String host, int port) {
		this.host= host;
		this.port = port;
	}
"
502,55bfe86b-bbb0-4568-b301-8a4e6b8f2b0c,"	public ChatClient(ServiceInfo si){
		this.si = si;
		this.host = si.getHost();
		this.port = si.getPort();
	}
"
503,fee349e4-a984-4f01-9b68-10e52cb4226e,"	public ChatClient() {
		;
	}
"
504,d65ea93c-1e7e-469e-9515-4ed4981c32eb,"	public void connect() {
		try {
			Debug.print(""I'm client, start to connect to host:""+host);
			Socket skt = new Socket(host, port);
			Debug.print(""Connected"");

			RSA rsa = new RSA();
			rsa.setN(this.n);
			rsa.setE(this.e);
			
			InputStreamReader isr = new InputStreamReader(System.in);			

			String publicKey = ""(""+this.e+"" ""+this.n+"")"";
			System.out.println(""Encoding with""+publicKey);
			
			while(true) {
				char c = (char)isr.read();
				String toSend = """";
				if(c == '\n'){
					toSend = ""\n"";
				}else{
					toSend = rsa.getcypher(c+"""");
					System.out.println(c+"" is encoded to ""+toSend);
				}
				for(int i = 0; i < toSend.length(); i++){
					skt.getOutputStream().write(toSend.charAt(i));
				}
				
			}
			
		} catch(ConnectException e){
			System.err.println(""starter haven't started listening yet!!!\n please give server input info and run again!!!"");
		}catch (IOException e) {
			System.err.println(""Connect error"");
			e.printStackTrace();
		}
	}
"
505,3ec1c12e-1c5d-4020-94d0-73fe558fab75,"	public void run(){
		this.connect();
	}
"
506,e8a4a5a8-14e7-428d-bc79-e40b2d562a00,"	public long getN() {
		return n;
	}
"
507,7e5896c1-16dd-47ba-9304-a81b16901ffc,"	public void setN(long n) {
		this.n = n;
	}
"
508,e0bab9d1-c40c-4238-bce0-a241fe76b7f3,"	public long getE() {
		return e;
	}
"
509,bd805744-7b63-45bb-8cfe-195f6919be67,"	public void setE(long e) {
		this.e = e;
	}
"
510,69f9de3b-d486-4acb-99c0-e95421887ec3,"	public Chat() {		
	}
"
511,d4a55a0a-a04c-4826-9a8d-28300197c9f1,"	public void mode1(int port) {
		System.out.println(""I'm starter!!"");

		Debug.print(""mode1"");
		cs = new ChatServer(port);
		cs.setMode(ChatServer.SERVICE_MODE.STARTER);

		cs.start();
		
	}
"
512,aebf0c30-41eb-465d-9c41-2e7d2cf5219b,"	public void mode2(int port, String host) {
		System.out.println(""I'm follower!!"");
		cs = new ChatServer();
		cs.setMode(ChatServer.SERVICE_MODE.FOLLOWER);
		cc = new ChatClient(host, port);
		cs.setClient(cc);
		cs.start();
		
	}
"
513,b132b784-ae32-4c0b-a769-40eacd1be16e,"	public static void main(String[] args) {
		Chat ch = new Chat();
		

		if(args.length == 1) {
			int port = Integer.parseInt(args[0]);
			ch.mode1(port);
		}else if(args.length == 2){
			Debug.print(args[0]);
			Debug.print(args[1]);

			int port = Integer.parseInt(args[0]);
			String host = args[1];
			ch.mode2(port, host);
		}
		else{
			System.out.println(""usage: java chat <port num> [<host name>]"");
			System.exit(0);
		}
			
		}
"
514,8707668f-8928-498e-891c-7b17000511ce,"    Key(long n, long e){
        this.RSA_N = n;
        this.encryptKey = e;
    }
"
515,8f0d4ea2-ff9a-4e29-9d11-2255c5cc628e,"    public void setM(long m) {
        this.RSA_M = m;
    }
"
516,45bb4f81-e9c7-4d1c-a0b7-d48e53cd0b9f,"    public long getM() {
        return this.RSA_M;
    }
"
517,d01a1e11-624f-4534-b3cd-bfd5eab923b1,"    public void setDecryptKey(long d) {
        this.decryptKey = d;
    }
"
518,a91cb55b-fe76-4b60-accf-190d745bb20c,"    public long getEncryptKey() {
        return this.encryptKey;
    }
"
519,7ff2e3df-70e1-4560-bcc1-8107a1c56d3c,"    public void setEncryptKey(long encryptKey) {
        this.encryptKey = encryptKey;
    }
"
520,b5895567-c637-4cb2-ae9a-fe010a0a17cc,"    public long getDecryptKey() {
        return this.decryptKey;
    }
"
521,1af43377-ea7f-4170-8e88-7931c7703bf9,"	public static void print(String s) {
		if(DEBUG) {
			
			System.out.println(""debug:""+s);
		}
	}
"
522,cdf532af-8611-4261-8de1-33ee3afcd476,"	ServiceInfo(){
		;
	}
"
523,4325f5e0-f123-4fcf-8c18-48badc07fb74,"	public synchronized String getHost() {
		if(host == null || host.length() == 0) {
			try {
				this.wait();
			} catch (InterruptedException e) {
				Debug.print(""wait exception!!"");
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return host;
	}
"
524,6998f76d-25ac-4f7d-9077-19baa19eb678,"	public synchronized void setInfo(String host, int port) {
		this.port = port;
		this.host = host;
		this.notifyAll();
	}
"
525,3ffae740-622d-4281-8aca-db8102454c21,"	public synchronized int getPort() {
		if(port == 0) {
			try {
				wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return port;
	}
"
526,82e69823-507d-4d5c-8794-ff71868e2193,"	public RSA(){
		this(15, 20, false);
	}
"
527,58f6fa6b-f52b-4a16-9fc0-a35589c9c183,"	public RSA(long a, long b ,boolean fix){
		if(fix){
			this.a = a;
			this.b = b;
		}else{
			this.a = prime(a);
			this.b = prime(b);
		}
		
		n = this.a * this.b;
		m = (this.a - 1)*(this.b - 1);
		e = coprime(m);
		d = modulo_inverse(e, m);
		
		Debug.print(""n is ""+n);
		Debug.print(""m is ""+m);
		Debug.print(""e is ""+e);
		Debug.print(""d is ""+d);

	}
"
528,e726a902-a3cf-4019-9e73-ef74529da490,"	public long crack(long input){
		long root = (long) Math.sqrt((double)input);
		for(long i = 2; i < root; i++){
			if(input % i == 0){
				return input / i;
			}
		}
		return 0;
	}
"
529,e1faeb17-231d-452e-bbd3-5fb7c02c56ed,"	public String getcypher(String input){
		StringBuffer output = new StringBuffer();
		for(int i = 0; i < input.length(); i++){
			output.append(endecrypt(input.charAt(i), e, n));
			output.append(' ');
		}
		return output.toString();
	}
"
530,4d14909d-2383-406c-8a7e-2471801683aa,"	public String decypher(String input){
		String[] cyphers = input.split("" "");
		StringBuffer sb = new StringBuffer();
		for(int i= 0; i < cyphers.length; i++){
			long num = Long.parseLong(cyphers[i]);
			long temp = endecrypt(num, d, n);
			Debug.print(""temp is:""+temp);
			char c = (char)temp;
			sb.append(c);
		}
		return sb.toString();
	}
"
531,795e817c-173b-4487-9553-b34ae85118b1,"	public long prime(long n){
		long start = 2;
		n--;
		while(n > 0){
			start++;
			if(isPrime(start)){
				n --;
			}
			
		}
		return start;
	}
"
532,b0bc07b7-593a-4bbc-95b9-9f3460593289,"	public static boolean isPrime(long a){
		long root = (long) Math.sqrt((double)a);
		for(int i = 2; i <= root; i++){
			if(a % i == 0){
				return false;
			}
			
		}
		return true;
		
	}
"
533,1c616d24-9ec2-467f-8fb4-68be38ac96ca,"	public long endecrypt(long msg, long key, long c){
		Debug.print(msg+"" key:""+key+""c:""+c);
		return modulo(msg, key, c);
	}
"
534,3f600774-7e6e-4172-87df-8866db949b3d,"	public static long coprime(long x){
		long a = Math.abs(new Random().nextLong()) % x;
//		a = Math.abs(a);
		if(a == 0){
			a++;
		}
		while(GCD(a, x) != 1){
			a = Math.abs(new Random().nextLong()) % x;
//			a = Math.abs(a);
		}
		return a;
	}
"
535,e202be46-1ef7-47e9-ac9b-73ee799e568c,"	public static long GCD(long a, long b){
		if(b > a){
			long c = b; 
			b = a;
			a = c;
		}
		if(b == 0){
			return a;
		}else{
			return GCD(b, a % b);
		}
	}
"
536,41459d9a-7694-4168-899a-dc7b8aab9c58,"	public static long modulo(long a, long b, long c){
		BigInteger biA = new BigInteger(a+"""");
		BigInteger biB = new BigInteger(b+"""");
		BigInteger biC = new BigInteger(c+"""");
		
		return biA.modPow(biB, biC).longValue();
		
	}
"
537,cdda3454-74ad-427d-8435-46bdadef3dcd,"	public static long modulo_inverse(long base, long m){
		long orgM = m;
		long orgBase = base;
		long gcd = GCD(base, m);
		long x = 0;
		long lastX = 1;
		long y = 1;
		long lastY = 0;
		long quotient, tempM,tempX,tempY;
		while(m != 0){
			quotient = base / m;
			tempM = m;
			m = base % m;
			base = tempM;
			tempX = x;
			x = lastX - (quotient * x);
			lastX = tempX;
			tempY = y;
			y = lastY - quotient * y;
			lastY = tempY;
		}
		if(gcd > 1){
			return 0;
		}else{
			Debug.print(""lastX:""+lastX+""lastY""+lastY);
			if(lastX > 0){
				return lastX % orgM;
			}else{
				return orgM+(lastX % orgM);
			}
		}
	}
"
538,afb69c5a-d1c2-4a87-80b1-57189315d92f,"	public long getA() {
		return a;
	}
"
539,5e630d7b-e696-4f10-9fed-64d00f70b451,"	public void setA(long a) {
		this.a = a;
	}
"
540,94e9d72c-db0b-4e06-8631-dbe11e373049,"	public long getB() {
		return b;
	}
"
541,3bbc7faa-328c-4e22-bb83-9e42d52b4e01,"	public void setB(long b) {
		this.b = b;
	}
"
542,665fd4af-9520-445a-a217-22b795a9d710,"	public long getN() {
		return n;
	}
"
543,96e714e2-8bff-46df-bc54-3e703ef3b80a,"	public void setN(long n) {
		this.n = n;
	}
"
544,5c6cf616-a980-437a-9464-c2c6ca576623,"	public long getE() {
		return e;
	}
"
545,3ccf688e-32ea-4ca4-800f-31fbd2426ac0,"	public void setE(long e) {
		this.e = e;
	}
"
546,82730f74-1360-4697-8279-7a79ce954819,"	public long getM() {
		return m;
	}
"
547,076db8e7-0dae-47be-b9f3-4f20f624e24f,"	public void setM(long m) {
		this.m = m;
	}
"
548,da4879d2-b133-4867-8a45-28ec28a61d6a,"	public long getD() {
		return d;
	}
"
549,e36d3d19-3745-44bb-a161-fdb2d3b3a371,"	public void setD(long d) {
		this.d = d;
	}
"
550,300dcc21-be40-4bcf-8051-391e94409763,"    @Test
    public void test() {
        r = new Random();
        RSA rsa = new RSA();
       //System.out.println(""P:"" +p +""Q:""+ q);
       BruteForce bruteForce = new BruteForce(rsa.n,rsa.e);
       Key k = bruteForce.bruteForceCrack();
       System.out.println(""RSA-E:""+ rsa.e + ""RSA_N:""+ rsa.n + ""RSA_M"" + rsa.m);
       System.out.println(""D:"" + k.getDecryptKey());
       
    }
"
551,4268a429-876d-4a64-9827-41038e73d0dd,"	public ChatServer() {
		this(DEFAULT_PORT);
	}
"
552,83a84f2a-74d4-49b3-abaa-7bf4ef75b037,"	public ChatServer(int port) {
		this.port = port;
	}
"
553,71dc1dcf-4a3f-4e1c-a1e3-bde53e113003,"	public void launch() {
		try {
			//input own a and b, not fix mode
			System.out.println(""Please input a to find ath prime"");
			Scanner s = new Scanner(System.in);
			int a = s.nextInt();
			System.out.println(""Please input b to find bth prime"");
			int b = s.nextInt();
			if(a <=6){
				a +=  6;
				System.out.println(""Input too small, auto shifted;"");
			}
			if(b <= 6){
				b += 6;
				System.out.println(""Input too small, auto shifted;"");
			}
			RSA geRSA = new RSA(a, b, false);
			System.out.println(""Your public key n is ""+geRSA.getN()+"" and e is ""+geRSA.getE());
			
			
			
			// input other's n and e
			System.out.println(""Please input the other people's n"");
			n = s.nextInt();
			System.out.println(""n is ""+n);
			System.out.println(""Please input e"");
			e = s.nextInt();
			System.out.println(""e is ""+e);
			
			if(mode == ChatServer.SERVICE_MODE.FOLLOWER){
				client.setN(n);
				client.setE(e);
				client.start();
			}
			
			ServerSocket sskt = new ServerSocket(this.port);
			System.out.println(""Listener start listen!"");
			Socket skt = sskt.accept();

			
			//inputstream:
			InputStream its = skt.getInputStream();
			System.out.println(""Connection formed"");

			if(mode == ChatServer.SERVICE_MODE.STARTER){
				String host = skt.getInetAddress().getHostAddress();
				client = new ChatClient(host, DEFAULT_PORT);
				client.setN(n);
				client.setE(e);
				client.start();
			}

			InputStreamReader isr = new InputStreamReader(its);
			BufferedReader br= new BufferedReader(isr);
			String line = br.readLine();

			while(true) {
				String decypher = geRSA.decypher(line);
				if(decypher.equals("".bye"") || decypher.equals(""quit"")){
					break;
				}
				System.out.print(""Received: "");
				System.out.println(geRSA.decypher(line));
				
				line = br.readLine();
				if(line == null){
					System.out.println(""Connection broken, auto quit"");
					break;
				}
			}
			
			System.out.println(""Exit..."");
			client.interrupt();
			System.exit(0);

		} catch (IOException e) {
			System.err.println(""Server Socket error"");
			e.printStackTrace();
		}
	}
"
554,8b99cb3e-15ba-47a2-9166-147a635268bd,"	public void run() {
		this.launch();
	}
"
555,7c843f89-5a90-4736-a384-1e142674c2b0,"	public SERVICE_MODE getMode() {
		return mode;
	}
"
556,171f7b1b-8395-4947-ba38-cbaddc59c813,"	public void setMode(SERVICE_MODE mode) {
		this.mode = mode;
	}
"
557,a09a3605-bcdb-405a-8bb6-6f0040d87bef,"	public long getN() {
		return n;
	}
"
558,a1c80ed1-fd0a-418c-8e88-c034e362d319,"	public void setN(long n) {
		this.n = n;
	}
"
559,a2bd6f53-5da3-478e-ba63-70413a0717cd,"	public long getE() {
		return e;
	}
"
560,4adfbbca-77f1-4b64-97de-cfedd9aaaed9,"	public void setE(long e) {
		this.e = e;
	}
"
561,d3476201-0887-4b9a-8f86-c5b03754bf9e,"	public ChatClient getClient() {
		return client;
	}
"
562,640b60b6-0752-4da6-a353-68b34c96c8fe,"	public void setClient(ChatClient client) {
		this.client = client;
	}
"
563,177261b6-e5ed-4b1d-8d01-738b8214b0f9,"    BruteForce(long n, long e){
        this.n = n;
        this.e = e;
    }
"
564,83447019-3f9f-44e4-a6e7-08c35abf39a5,"    private boolean isPrime() {
        
        for(long i = 2; i < Math.sqrt(n);++i) {
            if(n%i == 0) return false;
        }
       return true;
    }
"
565,67d9a7ce-c670-4b9b-9fa1-52d826b549f8,"    public Key bruteForceCrack() {
        
        if(isPrime()) {
            return null;
        }
        else {
            crackedKey = new Key(this.n,this.e);
            factorizeN();
            return crackedKey;
        }
    }
"
566,71e0008e-f406-45c7-acb1-490d905ad008,"    private void factorizeN() {
        for(long i = 2; i < Math.sqrt(n);++i) {
            if(n%i == 0) {
                long factor1 = i;
                long factor2 = n/i;
                crackedKey.setM((factor1 - 1) * (factor2 - 1));
                crackedKey.setDecryptKey(modulo_inverse(this.e,crackedKey.getM()));
                break;
            }
        }
    }
"
567,79c884c9-22e1-4193-9df2-b15669a519e8,"    private long GCD(long a, long b){
        if(b > a){
            long c = b; 
            b = a;
            a = c;
        }
        if(b == 0){
            return a;
        }else{
            return GCD(b, a % b);
        }
    }
"
568,3fd7209f-6a5a-4e29-bd43-36fa80ecad4c,"    private long modulo_inverse(long base, long m){
        long orgM = m;
        long orgBase = base;
        long gcd = GCD(base, m);
        long x = 0;
        long lastX = 1;
        long y = 1;
        long lastY = 0;
        long quotient, tempM,tempX,tempY;
        while(m != 0){
            quotient = base / m;
            tempM = m;
            m = base % m;
            base = tempM;
            tempX = x;
            x = lastX - (quotient * x);
            lastX = tempX;
            tempY = y;
            y = lastY - quotient * y;
            lastY = tempY;
        }
        if(gcd > 1){
            return 0;
        }else{
            Debug.print(""lastX:""+lastX+""lastY""+lastY);
            if(lastX > 0){
                return lastX % orgM;
            }else{
                return orgM+(lastX % orgM);
            }
        }
    }
"
569,7f973358-9aba-4315-a373-9981b3e194b1,"    public static void main(String[] args) {
        
        
        Scanner sc = new Scanner(System.in);
        System.out.print(""Please enter the public key number(n):"");
        long input_n = sc.nextLong();
        System.out.println();
        System.out.print(""Please enter the public key value(e):"");
        long input_e = sc.nextLong();
        System.out.println();
        BruteForce bf = new BruteForce(input_n,input_e);
        Key k = bf.bruteForceCrack();
        if(k == null) {
            System.out.println(""The input key pair in not factorizable"");
        }
        else {
            System.out.println(""The private key(d,m) pair for the input is (""+ k.getDecryptKey() + "","" + k.getM()+"")"");
        }
        while(true){
        	System.out.println(""please input encrypt number:"");
            long input = sc.nextLong();
            int letter = (int)RSA.modulo(input, k.getDecryptKey(), input_n);
            System.out.println(""decrypt result is:""+letter);
            System.out.println(""letter is:""+(char)letter);

        }
        
        
        
    }
"
570,829b1fdc-2da1-440f-9292-7726a9d600f8,"	@Test
	public void testRSA() {
		fail(""Not yet implemented"");
	}
"
571,dd4eb337-05a5-4b64-b851-ef7bd313dc44,"	@Test
	public void testRSAIntInt() {
		fail(""Not yet implemented"");
	}
"
572,1e5c6870-1de3-4bdf-87dc-c31a70d27e18,"	@Test
	public void testGetcypher() {
		RSA rsa = new RSA(400, 200, false);
		Debug.print(""""+rsa.a);
		Debug.print(""""+rsa.b);
		Debug.print(""e:""+rsa.e);
		Debug.print(""n:""+rsa.n);

//		System.out.println(rsa.isPrime(4));
//		System.out.println(rsa.prime(5));
//		System.out.println(rsa.modulo_inverse(343, 557));
//		System.out.println(rsa.d);
//		System.out.println(rsa.modulo(97, 731, 1288));
//		System.out.println(rsa.decypher(rsa.getcypher(""thi is bad"")));
		System.out.print(rsa.crack(3033191));
		
	}
"
573,81cd6d2a-5cbb-49a4-900e-a44792f62dd6,"	@Test
	public void testPrime() {
		Scanner s = new Scanner(System.in)
		;
	}
"
574,f90101b7-f10e-4034-975d-3d2035e637f2,"	@Test
	public void testIsPrime() {
		fail(""Not yet implemented"");
	}
"
575,3d9db7f3-c9d0-4f70-841f-9a92bce3a11a,"	@Test
	public void testEndecrypt() {
		fail(""Not yet implemented"");
	}
"
576,25bc9489-48e5-4f61-a483-f9216299b8d1,"	@Test
	public void testCoprime() {
		fail(""Not yet implemented"");
	}
"
577,fc452489-6849-47fa-a930-d318b81d6f21,"	@Test
	public void testGCD() {
		fail(""Not yet implemented"");
	}
"
578,a2e06513-ee33-4cde-bdb7-ccb079855ce0,"	@Test
	public void testModulo() {
		fail(""Not yet implemented"");
	}
"
579,c70f1fff-ef4a-44f2-a04d-ad623e7fbc23,"	@Test
	public void testModulo_inverse() {
		fail(""Not yet implemented"");
	}
"
580,68fdb823-bb56-4adc-a04a-bef06d1731ea,"	public static void main(String args[]) throws IOException {
		String[] queyString = new String[]{""mondego"", ""machine%20learning"", ""software%20engineering"",
				""security"", ""student%20affairs"", ""Crista%20Lopes"", ""REST"", ""computer%20games"", ""information%20retrieval""};
		String noOfResults = ""8"";
		for(String query : queyString) {
			URL url = new URL(
					""https://ajax.googleapis.com/ajax/services/search/web?v=1.0&""
							+ ""q=""+ query +""%20site:ics.uci.edu&userip=USERS-IP-ADDRESS&rsz="" + noOfResults);
			URLConnection connection = url.openConnection();
			connection.addRequestProperty(""Referer"", ""http://www.ics.uci.edu/"");

			String line;
			StringBuilder builder = new StringBuilder();
			BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			while((line = reader.readLine()) != null) {
				builder.append(line);
			}

			JSONObject json = new JSONObject(builder.toString());
			// System.out.println(json);

			JSONArray jsonArray = json.getJSONObject(""responseData"").getJSONArray(""results"");

			System.out.println(""=========================================="");

			System.out.println();
			System.out.println(""-------------------------------------"");
			System.out.println(""Query String: "" + query.replace(""%20"", "" ""));
			System.out.println(""-------------------------------------"");
			System.out.println();

			for(int i=0; i<jsonArray.length(); i++) {
				JSONObject o = (JSONObject) jsonArray.get(i);
				System.out.println(""Title: "" + o.get(""titleNoFormatting""));
				System.out.println(""URL: "" + o.get(""url""));
				// System.out.println(""Content: "" + o.get(""content""));
				System.out.println();
				System.out.println();
			}
			System.out.println(""=========================================="");
		}
	}
"
581,cb9e2e4f-8915-4eda-ae65-4b0fd45b8579,"	public static void main(String[] args) {
		int noOfEntries = 5;

		// Before Optimization

		// Crista Lopes
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 100, 99, 98, 33, 5 });*/

		// mondego
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 4, 3, 6 });*/

		// software engineering
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 23, 12, 19, 21, 8 });*/

		// security
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 2, 54, 58, 21, 30 });*/

		// Machine learning
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 56, 32, 62 });*/

		// information retrieval
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 1, 2, 4, 10, 5 });*/

		// student affairs
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 100, 99, 98, 97, 96 });*/

		// graduate courses
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 92, 96, 100, 90, 50 });*/

		// computer games
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 100, 99, 98, 97, 96 });*/

		// rest
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] {99, 100, 73, 20, 22 });*/


		// ---------------------------------------------------
		// After Optimization

		// Crista Lopes
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 5, 4, 3, 1, 8 });*/

		// mondego
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 2, 1, 3, 6, 8 });*/

		// software engineering
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 23, 12, 19, 21, 8 });*/

		// security
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 2, 54, 58, 21, 30 });*/

		// Machine learning
		List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 56, 32, 62 });

		// information retrieval
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 1, 2, 4, 10, 5 });*/

		// student affairs
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 3, 2, 37, 10, 8 });*/

		// graduate courses
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 3, 7, 8, 10, 12 });*/

		// computer games
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 3, 1, 77, 16, 37 });*/

		// rest
		/*List<Integer> googleOrder = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5 });
		List<Integer> luceneOrder = Arrays.asList(new Integer[] { 6, 100, 48, 50, 2 });*/


		double ndcgValue = evaluateNDCG(luceneOrder, googleOrder, noOfEntries);
		System.out.println(1/ndcgValue);
	}
"
582,c13dcdec-82d8-4b93-ab28-9c636e4a3b38,"	public static double evaluateNDCG(List<Integer> urls, List<Integer> googleOrder, int noOfEntries) {
		double luceneUrlDCG = computeDCG(urls, googleOrder, noOfEntries);
		double idealDCG = computeDCG(googleOrder, googleOrder, noOfEntries);
		double normalized = luceneUrlDCG / idealDCG;
		return normalized;
	}
"
583,188ae96c-b756-49ee-af5e-2e0675e6e6fd,"	private static double computeDCG(List<Integer> urls, List<Integer> googleOrder, int noOfEntries) {
		double gain = 0;
		double logTwo = Math.log(2);
		int rank = 0;
		for (int i = 0; i < noOfEntries; i++) {
			Integer item = googleOrder.get(i);
			Integer val = urls.get(item-1);
			rank++;
			if(rank < 2) {
				gain += val;
			} else {
				gain += val * logTwo / Math.log(rank);
			}
		}
		return gain;
	}
"
584,82fe1c17-ee2c-4808-9093-8b61ef2446c4,"	IRIndexer(String indexDir) throws IOException {
		FSDirectory dir = FSDirectory.open(new File(indexDir));
		IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_40, analyzer);
		writer = new IndexWriter(dir, config);
	}
"
585,f4973759-2a42-4b1d-b064-b86c9ff6114c,"	public static void main(String[] args) throws IOException {

		// Reading the Stop Words
		String swLine = null;
		File swFile = new File(""src/ir/assignments/UtilFiles/StopWords"");
		BufferedReader swInputBR =  new BufferedReader(new FileReader(swFile));
		while (( swLine = swInputBR.readLine()) != null) {
			stopWords.add(swLine.trim());
		}
		swInputBR.close();
		System.out.println(""Enter the path where the index will be created:"");
		String indexLocation = null;
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String s = br.readLine();   
		IRIndexer indexer = null;
		try {
			indexLocation = s;
			indexer = new IRIndexer(s);
		} catch (Exception ex) {
			System.out.println(""Cannot create index..."" + ex.getMessage());
			System.exit(-1);
		}

		try {
			System.out.println(""Enter the full path of the file to add into the index"");
			s = br.readLine();
			//try to add file into the index
			indexer.indexFileOrDirectory(s);
		} catch (Exception e) {
			System.out.println(""Error indexing "" + s + "" : "" + e.getMessage());
		}

		indexer.closeIndex();
	}
"
586,fc511e79-d169-44cf-971b-3240a81b5d95,"	public void indexFileOrDirectory(String fileName) throws IOException, InterruptedException {
		int j=1;
		addFiles(new File(fileName));
		int originalNumDocs = writer.numDocs();
		for (File f : queue) {
			j=1;
			Document doc = new Document();
			Scanner scanner = new Scanner(f);
			StringBuilder builder = new StringBuilder();
			String docId = """", url = """", path = """", parentURL = """";
			String title = """", h1 = """", h2 = """", h3 = """";
			String bold = """", strong = """", em = """", anchorText = """", parsedData = """";
			ArrayList<String> tempArrList = new ArrayList<String>();
			while (scanner.hasNextLine()) {
				String currLine = scanner.nextLine();
				if(j==1) {
					docId = currLine;
					j++;
					System.out.println(""docId: "" + currLine);
				} else if(j==2) {
					url = currLine;
					j++;
					System.out.println(""URL: "" + currLine);
				} else if(j==3) {
					path = currLine;
					j++;
					System.out.println(""Path: "" + currLine);
				} else if(j==4) {
					parentURL = currLine;
					j++;
					System.out.println(""docParent URL: "" + currLine);
				} else if(j==5) {
					title = currLine;
					j++;
					System.out.println(""Title: "" + currLine);
				} else if(j==6) {
					h1 = currLine;
					j++;
					System.out.println(""h1: "" + currLine);
				} else if(j==7) {
					h2 = currLine;
					j++;
					System.out.println(""h2: "" + currLine);
				} else if(j==8) {
					h3 = currLine;
					j++;
					System.out.println(""h3: "" + currLine);
				} else if(j==9) {
					bold = currLine;
					j++;
					System.out.println(""Bold: "" + currLine);
				} else if(j==10) {
					strong = currLine;
					j++;
					System.out.println(""String: "" + currLine);
				} else if(j==11) {
					em = currLine;
					j++;
					System.out.println(""Em: "" + currLine);
				} else if(j==12) {
					anchorText = currLine;
					j++;
					System.out.println(""AnchorText: "" + currLine);
				} else if(j==13) {
					parsedData = currLine;
					j++;
					tempArrList = Utilities.removeStopWords(Arrays.asList(parsedData), stopWords);
					for (String string : tempArrList) {
						builder.append(string + "" "");
					}
					System.out.println(""Parsed Data: "" + currLine);
				} 
			}
			
			// Adding the title to the index
			Field titleField = new TextField(""title"",title,Field.Store.YES); titleField.setBoost(9.1f); doc.add(titleField);
			Field h1Field = new TextField(""h1"",h1,Field.Store.YES); h1Field.setBoost(50f); doc.add(h1Field);
			Field h2Field = new TextField(""h2"",h2,Field.Store.YES); h2Field.setBoost(35f); doc.add(h2Field);
			Field h3Field = new TextField(""h3"",h3,Field.Store.YES); h3Field.setBoost(25f); doc.add(h3Field);
			Field boldField = new TextField(""bold"",bold,Field.Store.YES); boldField.setBoost(17f); doc.add(boldField);
			Field strongField = new TextField(""strong"",strong,Field.Store.YES); strongField.setBoost(17f); doc.add(strongField);
			Field emField = new TextField(""em"",em,Field.Store.YES); emField.setBoost(20f); doc.add(emField);
			Field anchorTxtField = new TextField(""anchortxt"",anchorText,Field.Store.YES); anchorTxtField.setBoost(25f); doc.add(anchorTxtField);
			Field parsedDataField = new TextField(""parseddata"",builder.toString(),Field.Store.YES); parsedDataField.setBoost(75f); doc.add(parsedDataField);

			doc.add(new StringField(""filename"",url,Field.Store.YES));
			writer.addDocument(doc);
			System.out.println(""Added: "" + f);
			scanner.close();
		}
		int newNumDocs = writer.numDocs();
		System.out.println("""");
		System.out.println(""************************"");
		System.out.println((newNumDocs - originalNumDocs) + "" documents added."");
		System.out.println(""************************"");
		queue.clear();
	}
"
587,ebd744e0-926b-47d8-afa4-076d6417d614,"	public static int nthOccurrence(String str, char c, int n) {
		int pos = str.indexOf(c, 0);
		while (n-- > 0 && pos != -1)
			pos = str.indexOf(c, pos+1);
		return pos;
	}
"
588,3ed2b208-8958-4d8f-bbc1-065795bfb943,"	private void addFiles(File file) {
		if (!file.exists()) {
			System.out.println(file + "" does not exist."");
		}
		if (file.isDirectory()) {
			for (File f : file.listFiles()) {
				addFiles(f);
			}
		} else {
			queue.add(file);
		}
	}
"
589,f80dde9b-19a1-46ff-825f-33db0810514b,"	public void closeIndex() throws IOException {
		writer.close();
	}
"
590,61dcbc84-19c1-460a-bea7-7a4c6938dddb,"	public SearchResults() {
		jObject = new JSONObject();
	}
"
591,0647d978-8b66-4aa2-a3a3-f39222a2ced8,"	public JSONObject getSearchJSONObject() {
		return jObject;
	}
"
592,aa4ae7af-b09c-4353-becb-1315272309e2,"	@SuppressWarnings(""null"")
	public static void main(String[] args) throws ParseException, CorruptIndexException, IOException {
		JSONArray jSearchObjectArray = new JSONArray();
		JSONObject finaljSearchObject = new JSONObject();
		StandardAnalyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);
		String queryString = ""crista lopes"";
		StringTokenizer st = new StringTokenizer(queryString);
		String token = null;
		int j = 1;
		BooleanQuery query = new BooleanQuery();
		while(st.hasMoreTokens()) {
			token = st.nextToken();
			TermQuery titleTerm = new TermQuery(new Term(""title"",token)); 
			titleTerm.setBoost(80.0f);
			TermQuery contentsTerm = new TermQuery(new Term(""parseddata"",token)); 
			contentsTerm.setBoost(190.0f);
			TermQuery anchorTerm = new TermQuery(new Term(""anchortxt"",token));
			anchorTerm.setBoost(25.0f);

			TermQuery boldTerm = new TermQuery(new Term(""bold"",token)); 
			boldTerm.setBoost(55.0f);
			TermQuery strongTerm = new TermQuery(new Term(""strong"",token)); 
			strongTerm.setBoost(60.0f);
			TermQuery emTerm = new TermQuery(new Term(""em"",token)); 
			emTerm.setBoost(65.0f);
			query.add(titleTerm, Occur.SHOULD);
			query.add(contentsTerm, Occur.SHOULD);
			query.add(anchorTerm, Occur.SHOULD);

			query.add(boldTerm, Occur.SHOULD);
			query.add(strongTerm, Occur.SHOULD);
			query.add(emTerm, Occur.SHOULD);
			++j;
		}
		//Query query = new QueryParser(Version.LUCENE_40, ""contents"", analyzer).parse(queryString);
		int hitsPerPage = 100;
		File indexDirectory = new File(""C:\\IR_Archieve\\index"");
		IndexReader reader = DirectoryReader.open(FSDirectory.open(indexDirectory));
		IndexSearcher searcher = new IndexSearcher(reader);
		TopScoreDocCollector collector = TopScoreDocCollector.create(hitsPerPage, true);
		searcher.search(query, collector);
		ScoreDoc[] hits = collector.topDocs().scoreDocs;

		System.out.println(""Found "" + hits.length + "" hits."");
		for(int i=0;i<hits.length;i++) {
			JSONObject jSearchObject = new JSONObject();
			int docId = hits[i].doc;
			Document d = searcher.doc(docId);
			try {
				System.out.println((i + 1) + "". "" + ""\t"" + d.get(""filename"") + ""\t"" + d.get(""title"") + ""\t :: "" + d.get(""parseddata"").substring(100, 150));
			} catch(Exception e) {}
			jSearchObject.put(""URL"",d.get(""filename""));
			jSearchObject.put(""Title"",d.get(""title""));
			jSearchObject.put(""Anchor"",d.get(""anchor""));
			jSearchObject.put(""Contents"",d.get(""contents""));
			jSearchObjectArray.put(i,jSearchObject);
		}

		System.out.println(jSearchObjectArray.length());
		finaljSearchObject.put(""Results"",jSearchObjectArray);
		System.out.println(finaljSearchObject.get(""Results""));
	}
"
593,f3e6e892-0eba-4b35-8556-057f0c26a80b,"	public static void main(String[] args) throws Exception {
		//CrawlController controller = new CrawlController(""/data/crawl/root"");
		crawl(""http://www.ics.uci.edu/"");
	}
"
594,7d5dfd5b-a31e-441e-aca9-9baa911b3b14,"	public static void crawl(String seedURL) throws Exception {

		//CrawlController controller = new CrawlController(""/data/crawl/root"");

		long startTime = System.currentTimeMillis();


		String crawlStorageFolder = ""C:\\IR\\"";
		int numberOfCrawlers = 8;
		CrawlConfig config = new CrawlConfig();
		config.setCrawlStorageFolder(crawlStorageFolder);

		// * Instantiate the controller for this crawl.

		PageFetcher pageFetcher = new PageFetcher(config);
		RobotstxtConfig robotstxtConfig = new RobotstxtConfig();
		RobotstxtServer robotstxtServer = new RobotstxtServer(robotstxtConfig, pageFetcher);
		CrawlController controller = new CrawlController(config, pageFetcher, robotstxtServer);

		String userAgentString = ""UCI IR Crawler 84568218_15289486"";
		config.setUserAgentString(userAgentString);

		config.setPolitenessDelay(300);

		// * You can set the maximum crawl depth here. The default value is -1 for
		// * unlimited depth

		config.setMaxDepthOfCrawling(-1);
		config.setConnectionTimeout(1000);


		// * You can set the maximum number of pages to crawl. The default value
		// * is -1 for unlimited number of pages

		config.setMaxPagesToFetch(-1);


		// * For each crawl, you need to add some seed urls. These are the first
		// * URLs that are fetched and then the crawler starts following links
		// * which are found in these pages


		// controller.addSeed(""http://www.ics.uci.edu/~welling/"");
		// controller.addSeed(""http://ics.uci.edu/~lopes/"");
		controller.addSeed(seedURL); 

		// * Start the crawl. This is a blocking operation, meaning that your code
		// * will reach the line after this only when crawling is finished.

		controller.start(BasicCrawler.class, numberOfCrawlers);

		long endTime = System.currentTimeMillis();

		System.out.println(""Total Time: "" + (endTime - startTime));


	}
"
595,d0d80130-56fa-4ee4-baf5-1f7298fa7e4a,"	@Override
	public boolean shouldVisit(WebURL url) {
		String href = url.getURL().toLowerCase();
		return (!FILTERS.matcher(href).matches() && href.contains("".ics.uci.edu"")) &&
				!href.startsWith(""https"") && !href.contains(""calendar.ics.uci.edu"") && 
				!href.contains(""http://archive.ics.uci.edu"") && !href.contains(""ftp.ics.uci.edu"") &&
				(!href.contains(""http://djp3-pc2.ics.uci.edu/LUCICodeRepository"") || !href.startsWith(""http://djp3-pc2.ics.uci.edu/LUCICodeRepository"")) && 
				!href.contains(""rss.ics.uci.edu"") && !href.contains(""feed=rss"") && !href.contains("".css?"") && 
				!href.contains(""http://testlab.ics.uci.edu/"") && !href.contains(""http://phoenix.ics.uci.edu"") &&
				!href.contains(""networkdata.ics.uci.edu"") && !href.contains(""ics.uci.edu/~lopes/datasets"") &&
				!href.contains(""http://mlearn.ics.uci.edu/MLRepository.html"") && !href.contains(""sourcerer.ics.uci.edu/"") &&
				!href.contains(""http://www.ics.uci.edu/~eppstein/pix/"") && !href.contains(""http://www.ics.uci.edu/~xhx/project"");
	}
"
596,3593fabd-4821-4d8b-8cfb-53dde8451d88,"	@Override
	public void visit(Page page) {

		int docid = page.getWebURL().getDocid();
		String url = page.getWebURL().getURL();
		String domain = page.getWebURL().getDomain();
		String path = page.getWebURL().getPath();
		String subDomain = page.getWebURL().getSubDomain();
		String parentUrl = page.getWebURL().getParentUrl();

		if (page.getParseData() instanceof HtmlParseData) {

			HtmlParseData htmlParseData = (HtmlParseData) page.getParseData();
			String text = htmlParseData.getText();
			String html = htmlParseData.getHtml();
			List<WebURL> links = htmlParseData.getOutgoingUrls();

			// There is a unique file for each document containing the length.
			String fileName = docid + ""_logger"";
			try {
				if(text.length() != 0) {
					String parsedData = htmlParseData.toString();	

					if(parsedData.trim().length() != 0 || !parsedData.equals("" +"")) {
						System.out.println(""============="");
						System.out.println(""============="");
						System.out.println(""Docid: "" + docid);
						System.out.println(""URL: "" + url);
						System.out.println(""Domain: '"" + domain + ""'"");
						System.out.println(""Sub-domain: '"" + subDomain + ""'"");
						System.out.println(""Path: '"" + path + ""'"");
						System.out.println(""Parent page: "" + parentUrl);
						System.out.println(""Text length: "" + text.length());
						System.out.println(""Html length: "" + html.length());
						System.out.println(""Number of outgoing links: "" + links.size());

						// Getting the text within <title> ... </title>
						ArrayList<String> extracts = getTagContents(Jsoup.parse(html));
						
						// title, h1, h2, h3, b, strong, em, a
						
						String title = extracts.get(0);
						String h1 = extracts.get(1);
						String h2 = extracts.get(2);
						String h3 = extracts.get(3);
						String bold = extracts.get(4);
						String strong = extracts.get(5);
						String em = extracts.get(6);
						String anchorText = extracts.get(7);

						// Extracting anchor tag texts

						// Formatting the crawled webpage's (data) contents
						parsedData = parseData(parsedData);

						writeSeperateFile(docid, url, path, parentUrl, title, h1, h2, h3, bold, strong, em, anchorText, parsedData, fileName);
						
						writeSingleFile(docid, url, path, parentUrl, title, h1, h2, h3, bold, strong, em, anchorText, parsedData);
						
						FileWriter fstream_answers = new FileWriter(""urlnames"", true);
						BufferedWriter out_answers = new BufferedWriter(fstream_answers);
						out_answers.write(url); out_answers.newLine();
						out_answers.close();
					}
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
"
597,41c35881-298b-4701-9b4c-0b5e39f5cb9b,"	public static String parseData(String data) {
		// This converts words of form HelloWorld to Hello World
		// Reference: http://stackoverflow.com/questions/4886091/insert-space-after-capital-letter
		data = data.replaceAll(""(\\p{Ll})(\\p{Lu})(\\p{Ll})"",""$1 $2$3"");

		// Writing all the data in a single large file
		// Each line will correspond to one web page.
		data = data.replaceAll(""(\\r|\\n)"", "" "");

		// Removing extra white spaces between characters with a single white space
		data = data.replaceAll("" +"", "" "");

		// Reference: http://stackoverflow.com/questions/7552253/how-to-remove-special-characters-from-an-string
		data = data.replaceAll(""[^\\w\\s]"","""");
		data = data.replaceAll(""[^\\p{L}\\p{N}]"","" "");
		data = data.trim();
		data = data.toLowerCase();

		// Removing extra white spaces between characters
		data = data.replaceAll("" +"", "" "");

		// Removing data of the form &nbsp; - anything that begins with & and ends with ;
		data = data.replaceAll(""\\&.*?\\;"", """");

		return data;
	}
"
598,ac4953f2-0b3e-491d-bff5-1c53a88236f7,"	public static ArrayList<String> getTagContents(Document doc) {
		// title, h1, h2, h3, b, strong, em, a
		ArrayList<String> extracts = new ArrayList<String>();
		
		// Extracting the title
		Element title = doc.select(""title"").first();
		extracts.add((title==null)?"""":title.text());
		
		// Extracting h1
		String h1String = """";
		Elements h1List = doc.select(""h1"");
		for (Element h1 : h1List) {
			h1String += h1.text() + "" "";
		}
		extracts.add((h1String==null)?"""":h1String);
		
		// Extracting h2
		String h2String = """";
		Elements h2List = doc.select(""h2"");
		for (Element h2 : h2List) {
			h2String += h2.text() + "" "";
		}
		extracts.add((h2String==null)?"""":h2String);
		
		// Extracting h1
		String h3String = """";
		Elements h3List = doc.select(""h3"");
		for (Element h3 : h3List) {
			h1String += h3.text() + "" "";
		}
		extracts.add((h3String==null)?"""":h3String);
		
		// Extracting b
		String bString = """";
		Elements bList = doc.select(""b"");
		for (Element b : bList) {
			bString += b.text() + "" "";
		}
		extracts.add((bString==null)?"""":bString);
		
		// Extracting strong
		String strongString = """";
		Elements strongList = doc.select(""strong"");
		for (Element strong : strongList) {
			strongString += strong.text() + "" "";
		}
		extracts.add((strongString==null)?"""":strongString);
		
		// Extracting em
		String emString = """";
		Elements emList = doc.select(""em"");
		for (Element em : emList) {
			emString += em.text() + "" "";
		}
		extracts.add((emString==null)?"""":emString);
		
		// Extracting a
		String aString = """";
		Elements aList = doc.select(""a"");
		for (Element a : aList) {
			emString += a.text() + "" "";
		}
		extracts.add((aString==null)?"""":aString);
		
		return extracts;
	}
"
599,70b6c96b-f784-4ad6-90b0-7a50a534ea1d,"	public static void writeSeperateFile(Integer docId, String url, String path, String parentUrl, String title, String h1, String h2, String h3, 
			String bold, String strong, String em, String anchorText, String parsedData, String fileName) throws IOException {
		FileWriter fstream = new FileWriter(PATH_LOCATION+fileName);
		BufferedWriter out = new BufferedWriter(fstream);
		
		out.write(docId.toString()); out.newLine();
		out.write(url); out.newLine();
		out.write(path); out.newLine();
		if(parentUrl != null) {
			out.write(parentUrl); out.newLine();
		}
		out.write(title); out.newLine();
		out.write(h1); out.newLine();
		out.write(h2); out.newLine();
		out.write(h3); out.newLine();
		out.write(bold); out.newLine();
		out.write(strong); out.newLine();
		out.write(em); out.newLine();
		out.write(anchorText); out.newLine();
		out.write(parsedData);
		
		out.close();
	}
"
600,65538552-5459-4594-a726-1d351c2b3183,"	public static void writeSingleFile(Integer docId, String url, String path, String parentUrl, String title, String h1, String h2, String h3, String bold, 
			String strong, String em, String anchorText, String parsedData) throws IOException {
		FileWriter fstream = new FileWriter(""combinedwebpages"", true);
		BufferedWriter out = new BufferedWriter(fstream);
		out.write(docId.toString() + ""^"" + url + ""^"" + path + ""^"" + parentUrl + ""^"" + title + ""^"" + h1 + ""^"" + h2 + ""^"" + h3 + ""^"" + bold
				 + ""^"" + strong + ""^"" + em + ""^"" + anchorText + ""^"" + parsedData);
		out.newLine();
		out.close();
	}
"
601,9736fd9c-95fd-43fd-860d-ec0017cc6f7d,"	public static ArrayList<String> tokenizeFile(File input) throws IOException {
		BufferedReader inputBR = null;
		ArrayList<String> tokanizedWords = new ArrayList<String>();
		ArrayList<String> tempArrList = new ArrayList<String>();
		
		try {
			String inputString = """";
			
			// Storing all stop words in a HashSet
			HashSet<String> stopWords = new HashSet<String>();
			
			// Reading the Stop Words
			String line = null;
			File file = new File(""src/ir/assignments/UtilFiles/StopWords"");
			inputBR =  new BufferedReader(new FileReader(file));
			while (( line = inputBR.readLine()) != null) {
				stopWords.add(line.trim());
			}
			int i=0;
			// Reading and processing the file passes as argument to this method
			inputBR =  new BufferedReader(new FileReader(input));
			while (( inputString = inputBR.readLine()) != null) {
				if(inputString.trim().length() != 0 || !inputString.equals("" +"")) {
					// inputString += line + "" "";
					
					// Removing extra white spaces between characters with a single white space
					inputString = inputString.replaceAll("" +"", "" "");
					
					// Reference: http://stackoverflow.com/questions/7552253/how-to-remove-special-characters-from-an-string
					inputString = inputString.replaceAll(""[^\\w\\s]"","""");
					inputString = inputString.replaceAll(""[^\\p{L}\\p{N}]"","" "");
					inputString = inputString.trim();
					inputString = inputString.toLowerCase();
					
					// Removing extra white spaces between characters
					inputString = inputString.replaceAll("" +"", "" "");
					
					tempArrList.clear();
					tempArrList.addAll(Arrays.asList(inputString.split("" "")));
					// Removing stop words
					tempArrList = removeStopWords(tempArrList, stopWords);
					
					// Splitting the line based on spaces
					tokanizedWords.addAll(tempArrList);
					
					i++;
					if(i%500==0) {
						Calendar cal = Calendar.getInstance();
						cal.getTime();
				    	SimpleDateFormat sdf = new SimpleDateFormat(""HH:mm:ss"");
				    	System.out.println( i + "" :    "" + sdf.format(cal.getTime()) + "" ----------------    "" + tokanizedWords.size() );
						
					}
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} finally {
			inputBR.close();
		}
		if(tokanizedWords.size() == 1 && tokanizedWords.get(0).equals("""")) {
			return new ArrayList<String>();
		} else {
			return tokanizedWords;
		}
	}
"
602,5fa98125-efa9-46fe-9d11-60b70f68929f,"	public static ArrayList<String> removeStopWords(List<String> wordList, HashSet<String> stopWords) {
		ArrayList<String> modifiedWordList = new ArrayList<String>(wordList);
		for(String word: wordList) {
			if(stopWords.contains(word)) {
				modifiedWordList.remove(word);
			}
		}
		return modifiedWordList;
	}
"
603,63088b29-c570-4ef8-a667-eab6e2767aab,"	public static void printFrequencies(List<Frequency> frequencies) {
		int totTwoGrmCnt = 0;
		Boolean isTwoGram = false;
		for (Frequency frequency : frequencies) {
			totTwoGrmCnt += frequency.getFrequency();
			if(frequency.getText().split("" "").length > 1) isTwoGram = true;
		}
		if(isTwoGram) {
			System.out.println(""Total 2-gram count: "" + totTwoGrmCnt);
			System.out.println(""Unique 2-gram count: "" + frequencies.size());
		} else {
			System.out.println(""Total item count: "" + totTwoGrmCnt);
			System.out.println(""Unique item count: "" + frequencies.size());
		}
		System.out.println();
		for (Frequency frequency : frequencies) {
			System.out.println(frequency.toString());
		}
		System.out.println();
		
		System.out.println(""==============="");
		
		System.out.println();
	}
"
604,96087077-3452-46c3-ad74-2fa1e806673e,"	public static List<Frequency> computeFourGramFrequencies(ArrayList<String> words) {
		List<Frequency> fourGramList = new ArrayList<Frequency>();
		Map<String, Integer> fourGramMap = new TreeMap<String, Integer>();
		
		// Adding a pair of words and its corresponding frequency in a TreeMap.
		for (int i=0;i<words.size()-3;i++) {
			if(fourGramMap.get(words.get(i) + "" "" + words.get(i+1) + "" "" + words.get(i+2) + "" "" + words.get(i+3)) == null) {
				fourGramMap.put(words.get(i) + "" "" + words.get(i+1) + "" "" + words.get(i+2) + "" "" + words.get(i+3), 1);
			} else {
				fourGramMap.put(words.get(i) + "" "" + words.get(i+1) + "" "" + words.get(i+2) + "" "" + words.get(i+3),fourGramMap.get(words.get(i) + "" "" + words.get(i+1) + "" "" + words.get(i+2) + "" "" + words.get(i+3)) + 1);
			}
		}
		
		for (Map.Entry<String, Integer> entry : fourGramMap.entrySet()) {
			fourGramList.add(new Frequency(entry.getKey(), entry.getValue()));
		}

		return fourGramList;
	}
"
605,e248a0fb-d353-4a9a-b58e-c006eb98e638,"	public Frequency(String word) {
		this.word = word;
		this.frequency = 0;
	}
"
606,8c3eeb3c-6958-4e32-a39a-79d4c093a6e0,"	public Frequency(String word, int frequency) {
		this.word = word;
		this.frequency = frequency;
	}
"
607,f8081d44-558e-417f-a946-6a834cdec418,"	public String getText() {
		return word;
	}
"
608,b4edce29-2d3f-4b02-a08e-0a6667be7966,"	public int getFrequency() {
		return frequency;
	}
"
609,14cb7ea9-710e-4bc7-9a87-3f111f79c8a7,"	public void incrementFrequency() {
		frequency++;
	}
"
610,1946767a-119c-45e0-b88c-aef649fe72fd,"	@Override
	public String toString() {
		return word + ""\t"" + frequency;
	}
"
611,4aa8d601-334e-4848-b234-061d4a487897,"    public JSONArray() {
        this.myArrayList = new ArrayList();
    }
"
612,b7747783-9d50-47a2-8a22-23bf6b00c9c7,"    public JSONArray(JSONTokener x) throws JSONException {
        this();
        if (x.nextClean() != '[') {
            throw x.syntaxError(""A JSONArray text must start with '['"");
        }
        if (x.nextClean() != ']') {
            x.back();
            for (;;) {
                if (x.nextClean() == ',') {
                    x.back();
                    this.myArrayList.add(JSONObject.NULL);
                } else {
                    x.back();
                    this.myArrayList.add(x.nextValue());
                }
                switch (x.nextClean()) {
                case ';':
                case ',':
                    if (x.nextClean() == ']') {
                        return;
                    }
                    x.back();
                    break;
                case ']':
                    return;
                default:
                    throw x.syntaxError(""Expected a ',' or ']'"");
                }
            }
        }
    }
"
613,62674857-a438-4b89-b68d-8c908f886425,"    public JSONArray(String source) throws JSONException {
        this(new JSONTokener(source));
    }
"
614,935f2051-0e9f-4aa0-85cb-bb22729c5d43,"    public JSONArray(Collection collection) {
        this.myArrayList = new ArrayList();
        if (collection != null) {
            Iterator iter = collection.iterator();
            while (iter.hasNext()) {
                this.myArrayList.add(JSONObject.wrap(iter.next()));
            }
        }
    }
"
615,1c1abc55-68ab-4a65-926a-bd473a8ced52,"    public JSONArray(Object array) throws JSONException {
        this();
        if (array.getClass().isArray()) {
            int length = Array.getLength(array);
            for (int i = 0; i < length; i += 1) {
                this.put(JSONObject.wrap(Array.get(array, i)));
            }
        } else {
            throw new JSONException(
                    ""JSONArray initial value should be a string or collection or array."");
        }
    }
"
616,c544aaf9-c0f5-4863-8693-c779cc68b3db,"    public Object get(int index) throws JSONException {
        Object object = this.opt(index);
        if (object == null) {
            throw new JSONException(""JSONArray["" + index + ""] not found."");
        }
        return object;
    }
"
617,a589e148-b79a-4e2e-a694-c17770e27e26,"    public boolean getBoolean(int index) throws JSONException {
        Object object = this.get(index);
        if (object.equals(Boolean.FALSE)
                || (object instanceof String && ((String) object)
                        .equalsIgnoreCase(""false""))) {
            return false;
        } else if (object.equals(Boolean.TRUE)
                || (object instanceof String && ((String) object)
                        .equalsIgnoreCase(""true""))) {
            return true;
        }
        throw new JSONException(""JSONArray["" + index + ""] is not a boolean."");
    }
"
618,d3fc6aa8-16b7-444b-8254-298167fe3c52,"    public double getDouble(int index) throws JSONException {
        Object object = this.get(index);
        try {
            return object instanceof Number ? ((Number) object).doubleValue()
                    : Double.parseDouble((String) object);
        } catch (Exception e) {
            throw new JSONException(""JSONArray["" + index + ""] is not a number."");
        }
    }
"
619,12094b41-710e-45db-be85-92a8e7dcb7a7,"    public int getInt(int index) throws JSONException {
        Object object = this.get(index);
        try {
            return object instanceof Number ? ((Number) object).intValue()
                    : Integer.parseInt((String) object);
        } catch (Exception e) {
            throw new JSONException(""JSONArray["" + index + ""] is not a number."");
        }
    }
"
620,ec59fb95-f191-4720-8d0f-4e2f60f7ca02,"    public JSONArray getJSONArray(int index) throws JSONException {
        Object object = this.get(index);
        if (object instanceof JSONArray) {
            return (JSONArray) object;
        }
        throw new JSONException(""JSONArray["" + index + ""] is not a JSONArray."");
    }
"
621,bb951574-9e93-4c8d-8402-9ec60215058a,"    public JSONObject getJSONObject(int index) throws JSONException {
        Object object = this.get(index);
        if (object instanceof JSONObject) {
            return (JSONObject) object;
        }
        throw new JSONException(""JSONArray["" + index + ""] is not a JSONObject."");
    }
"
622,159609c7-d780-46bb-8780-d14397c7a1e4,"    public long getLong(int index) throws JSONException {
        Object object = this.get(index);
        try {
            return object instanceof Number ? ((Number) object).longValue()
                    : Long.parseLong((String) object);
        } catch (Exception e) {
            throw new JSONException(""JSONArray["" + index + ""] is not a number."");
        }
    }
"
623,428e0383-3926-43fc-a275-52123d955027,"    public String getString(int index) throws JSONException {
        Object object = this.get(index);
        if (object instanceof String) {
            return (String) object;
        }
        throw new JSONException(""JSONArray["" + index + ""] not a string."");
    }
"
624,21911af7-d127-40a3-b754-461d0bb4e9ee,"    public boolean isNull(int index) {
        return JSONObject.NULL.equals(this.opt(index));
    }
"
625,4adfc109-6df0-4956-89f8-d5f43e80ebdc,"    public String join(String separator) throws JSONException {
        int len = this.length();
        StringBuffer sb = new StringBuffer();

        for (int i = 0; i < len; i += 1) {
            if (i > 0) {
                sb.append(separator);
            }
            sb.append(JSONObject.valueToString(this.myArrayList.get(i)));
        }
        return sb.toString();
    }
"
626,e66ceb1e-29f9-4828-b825-b2b37a88a6d1,"    public int length() {
        return this.myArrayList.size();
    }
"
627,c6daf1ef-3f72-406e-9ec8-57cfc4beab36,"    public Object opt(int index) {
        return (index < 0 || index >= this.length()) ? null : this.myArrayList
                .get(index);
    }
"
628,77a68ff7-ba2b-4472-81a1-facb1e0cc997,"    public boolean optBoolean(int index) {
        return this.optBoolean(index, false);
    }
"
629,cde4cbe6-44b4-4e05-9644-1a49e56fe0e8,"    public boolean optBoolean(int index, boolean defaultValue) {
        try {
            return this.getBoolean(index);
        } catch (Exception e) {
            return defaultValue;
        }
    }
"
630,3f7058f7-3fe0-4a1a-9756-c00f1308d854,"    public double optDouble(int index) {
        return this.optDouble(index, Double.NaN);
    }
"
631,89b9db90-3b90-4468-9271-56dfe05a2597,"    public double optDouble(int index, double defaultValue) {
        try {
            return this.getDouble(index);
        } catch (Exception e) {
            return defaultValue;
        }
    }
"
632,be3d973e-c898-4539-a690-6e3429df89bc,"    public int optInt(int index) {
        return this.optInt(index, 0);
    }
"
633,e33d8ce8-9e57-46f3-9fb1-396789265172,"    public int optInt(int index, int defaultValue) {
        try {
            return this.getInt(index);
        } catch (Exception e) {
            return defaultValue;
        }
    }
"
634,7bd008a1-dc96-44b1-85ff-d66bb67bded2,"    public JSONArray optJSONArray(int index) {
        Object o = this.opt(index);
        return o instanceof JSONArray ? (JSONArray) o : null;
    }
"
635,f6f40395-0af3-446e-9483-56a530415f2a,"    public JSONObject optJSONObject(int index) {
        Object o = this.opt(index);
        return o instanceof JSONObject ? (JSONObject) o : null;
    }
"
636,fecde42a-f059-4b29-9a0f-4f7011e190ad,"    public long optLong(int index) {
        return this.optLong(index, 0);
    }
"
637,832ab319-dfe0-40be-95ad-6729cfcba304,"    public long optLong(int index, long defaultValue) {
        try {
            return this.getLong(index);
        } catch (Exception e) {
            return defaultValue;
        }
    }
"
638,51ab1326-e247-47c3-ac55-f4b6a2139369,"    public String optString(int index) {
        return this.optString(index, """");
    }
"
639,e3d1424b-707c-48d9-84ea-4924b1e0a025,"    public String optString(int index, String defaultValue) {
        Object object = this.opt(index);
        return JSONObject.NULL.equals(object) ? defaultValue : object
                .toString();
    }
"
640,ccd72706-e4f3-4a09-990e-3a22ad0bf3dc,"    public JSONArray put(boolean value) {
        this.put(value ? Boolean.TRUE : Boolean.FALSE);
        return this;
    }
"
641,c50fdea9-76fa-478f-93f3-2fb84755f497,"    public JSONArray put(Collection value) {
        this.put(new JSONArray(value));
        return this;
    }
"
642,bea63e19-bed5-46d1-90ac-f1157241e1ee,"    public JSONArray put(double value) throws JSONException {
        Double d = new Double(value);
        JSONObject.testValidity(d);
        this.put(d);
        return this;
    }
"
643,d6777dff-304b-46b6-85ea-bc6a54c0c2e6,"    public JSONArray put(int value) {
        this.put(new Integer(value));
        return this;
    }
"
644,0f776ce6-e73b-45fb-ad0c-d79445521d4a,"    public JSONArray put(long value) {
        this.put(new Long(value));
        return this;
    }
"
645,e731a3e4-807b-45be-9ac8-e266fc93a97f,"    public JSONArray put(Map value) {
        this.put(new JSONObject(value));
        return this;
    }
"
646,e106e65d-c571-44db-858b-d1ff443fecb0,"    public JSONArray put(Object value) {
        this.myArrayList.add(value);
        return this;
    }
"
647,e80f4ca0-1e76-44d1-bd17-82cff59de8cf,"    public JSONArray put(int index, boolean value) throws JSONException {
        this.put(index, value ? Boolean.TRUE : Boolean.FALSE);
        return this;
    }
"
648,111cb9a4-8c5f-4480-8724-eda0abffcad1,"    public JSONArray put(int index, Collection value) throws JSONException {
        this.put(index, new JSONArray(value));
        return this;
    }
"
649,f61b6c41-0e3a-4407-a03e-4fc8f0570fd6,"    public JSONArray put(int index, double value) throws JSONException {
        this.put(index, new Double(value));
        return this;
    }
"
650,ca23c008-4a71-4aca-a95c-bc3aaee1d913,"    public JSONArray put(int index, int value) throws JSONException {
        this.put(index, new Integer(value));
        return this;
    }
"
651,c18ef24e-563e-4b75-9d86-4e4478634abe,"    public JSONArray put(int index, long value) throws JSONException {
        this.put(index, new Long(value));
        return this;
    }
"
652,41223875-0639-45c3-90db-be11eaf4cf47,"    public JSONArray put(int index, Map value) throws JSONException {
        this.put(index, new JSONObject(value));
        return this;
    }
"
653,c0360233-deee-4544-b73e-40c7ddb1a7fe,"    public JSONArray put(int index, Object value) throws JSONException {
        JSONObject.testValidity(value);
        if (index < 0) {
            throw new JSONException(""JSONArray["" + index + ""] not found."");
        }
        if (index < this.length()) {
            this.myArrayList.set(index, value);
        } else {
            while (index != this.length()) {
                this.put(JSONObject.NULL);
            }
            this.put(value);
        }
        return this;
    }
"
654,eb8fa82f-77fb-4330-ac77-3a69560c3815,"    public Object remove(int index) {
        Object o = this.opt(index);
        this.myArrayList.remove(index);
        return o;
    }
"
655,3640f70b-c0fd-4b9d-9908-9eb95f6055e4,"    public JSONObject toJSONObject(JSONArray names) throws JSONException {
        if (names == null || names.length() == 0 || this.length() == 0) {
            return null;
        }
        JSONObject jo = new JSONObject();
        for (int i = 0; i < names.length(); i += 1) {
            jo.put(names.getString(i), this.opt(i));
        }
        return jo;
    }
"
656,74d3ce00-ac5c-4b5e-ae45-6f022dfee67c,"    public String toString() {
        try {
            return this.toString(0);
        } catch (Exception e) {
            return null;
        }
    }
"
657,a1bb83b3-88a8-42e3-800b-f7a13f1ef9fa,"    public String toString(int indentFactor) throws JSONException {
        StringWriter sw = new StringWriter();
        synchronized (sw.getBuffer()) {
            return this.write(sw, indentFactor, 0).toString();
        }
    }
"
658,bdaf0e1a-3c63-4c66-b3e0-9732f6bb331f,"    public Writer write(Writer writer) throws JSONException {
        return this.write(writer, 0, 0);
    }
"
659,1939a13e-8d06-40e3-99da-664ace171320,"    Writer write(Writer writer, int indentFactor, int indent)
            throws JSONException {
        try {
            boolean commanate = false;
            int length = this.length();
            writer.write('[');

            if (length == 1) {
                JSONObject.writeValue(writer, this.myArrayList.get(0),
                        indentFactor, indent);
            } else if (length != 0) {
                final int newindent = indent + indentFactor;

                for (int i = 0; i < length; i += 1) {
                    if (commanate) {
                        writer.write(',');
                    }
                    if (indentFactor > 0) {
                        writer.write('\n');
                    }
                    JSONObject.indent(writer, newindent);
                    JSONObject.writeValue(writer, this.myArrayList.get(i),
                            indentFactor, newindent);
                    commanate = true;
                }
                if (indentFactor > 0) {
                    writer.write('\n');
                }
                JSONObject.indent(writer, indent);
            }
            writer.write(']');
            return writer;
        } catch (IOException e) {
            throw new JSONException(e);
        }
    }
"
660,cb704a8c-7660-4d52-b48e-aec6ff72afa8,"    public String toJSONString();
"
661,69b2ff64-fb7c-47f2-af4a-90ffb0d72172,"    public JSONException(String message) {
        super(message);
    }
"
662,9343d980-eec3-4a87-83a3-6d59f0c0cf86,"    public JSONException(Throwable cause) {
        super(cause.getMessage());
        this.cause = cause;
    }
"
663,c351ddd3-1643-46ec-b27b-8e1af600bd33,"    public Throwable getCause() {
        return this.cause;
    }
"
664,a74dcfba-bb64-4a45-98aa-f3cf3d829922,"        protected final Object clone() {
            return this;
        }
"
665,0ba74c93-8e10-45fc-b094-c059f16ebcc7,"        public boolean equals(Object object) {
            return object == null || object == this;
        }
"
666,2edbe270-4ba1-458f-af2a-febee6d2a806,"        public String toString() {
            return ""null"";
        }
"
667,ae4a8e79-a7b9-47e2-8923-48ed870c9772,"    public JSONObject() {
        this.map = new HashMap();
    }
"
668,8fc74cb0-aa12-48af-b44b-6c36bbb71d83,"    public JSONObject(JSONObject jo, String[] names) {
        this();
        for (int i = 0; i < names.length; i += 1) {
            try {
                this.putOnce(names[i], jo.opt(names[i]));
            } catch (Exception ignore) {
            }
        }
    }
"
669,5b51e2fc-3961-487b-9aa6-a0c9ddba2cd7,"    public JSONObject(JSONTokener x) throws JSONException {
        this();
        char c;
        String key;

        if (x.nextClean() != '{') {
            throw x.syntaxError(""A JSONObject text must begin with '{'"");
        }
        for (;;) {
            c = x.nextClean();
            switch (c) {
            case 0:
                throw x.syntaxError(""A JSONObject text must end with '}'"");
            case '}':
                return;
            default:
                x.back();
                key = x.nextValue().toString();
            }

// The key is followed by ':'. We will also tolerate '=' or '=>'.

            c = x.nextClean();
            if (c == '=') {
                if (x.next() != '>') {
                    x.back();
                }
            } else if (c != ':') {
                throw x.syntaxError(""Expected a ':' after a key"");
            }
            this.putOnce(key, x.nextValue());

// Pairs are separated by ','. We will also tolerate ';'.

            switch (x.nextClean()) {
            case ';':
            case ',':
                if (x.nextClean() == '}') {
                    return;
                }
                x.back();
                break;
            case '}':
                return;
            default:
                throw x.syntaxError(""Expected a ',' or '}'"");
            }
        }
    }
"
670,703a23e2-c7be-43eb-bd08-a1e974cdfd55,"    public JSONObject(Map map) {
        this.map = new HashMap();
        if (map != null) {
            Iterator i = map.entrySet().iterator();
            while (i.hasNext()) {
                Map.Entry e = (Map.Entry)i.next();
                Object value = e.getValue();
                if (value != null) {
                    this.map.put(e.getKey(), wrap(value));
                }
            }
        }
    }
"
671,3fa0d811-3d3e-42f9-9d01-3d590f483f23,"    public JSONObject(Object bean) {
        this();
        this.populateMap(bean);
    }
"
672,3ae1bb2b-2e5c-4db3-8945-6ca6a140112a,"    public JSONObject(Object object, String names[]) {
        this();
        Class c = object.getClass();
        for (int i = 0; i < names.length; i += 1) {
            String name = names[i];
            try {
                this.putOpt(name, c.getField(name).get(object));
            } catch (Exception ignore) {
            }
        }
    }
"
673,459f40e3-8bb0-4364-8025-0991a50f94b9,"    public JSONObject(String source) throws JSONException {
        this(new JSONTokener(source));
    }
"
674,bee9b4a3-b042-41ec-88c4-48c9253bbb80,"    public JSONObject(String baseName, Locale locale) throws JSONException {
        this();
        ResourceBundle bundle = ResourceBundle.getBundle(baseName, locale,
                Thread.currentThread().getContextClassLoader());

// Iterate through the keys in the bundle.

        Enumeration keys = bundle.getKeys();
        while (keys.hasMoreElements()) {
            Object key = keys.nextElement();
            if (key instanceof String) {

// Go through the path, ensuring that there is a nested JSONObject for each
// segment except the last. Add the value using the last segment's name into
// the deepest nested JSONObject.

                String[] path = ((String)key).split(""\\."");
                int last = path.length - 1;
                JSONObject target = this;
                for (int i = 0; i < last; i += 1) {
                    String segment = path[i];
                    JSONObject nextTarget = target.optJSONObject(segment);
                    if (nextTarget == null) {
                        nextTarget = new JSONObject();
                        target.put(segment, nextTarget);
                    }
                    target = nextTarget;
                }
                target.put(path[last], bundle.getString((String)key));
            }
        }
    }
"
675,d5e43057-10a6-47e4-874f-757f5cebefe0,"    public JSONObject accumulate(
        String key,
        Object value
    ) throws JSONException {
        testValidity(value);
        Object object = this.opt(key);
        if (object == null) {
            this.put(key, value instanceof JSONArray
                    ? new JSONArray().put(value)
                    : value);
        } else if (object instanceof JSONArray) {
            ((JSONArray)object).put(value);
        } else {
            this.put(key, new JSONArray().put(object).put(value));
        }
        return this;
    }
"
676,c36c1674-2e99-435c-8136-b3a628a5c025,"    public JSONObject append(String key, Object value) throws JSONException {
        testValidity(value);
        Object object = this.opt(key);
        if (object == null) {
            this.put(key, new JSONArray().put(value));
        } else if (object instanceof JSONArray) {
            this.put(key, ((JSONArray)object).put(value));
        } else {
            throw new JSONException(""JSONObject["" + key +
                    ""] is not a JSONArray."");
        }
        return this;
    }
"
677,8d4c0fa2-9c44-4083-8456-537326f48670,"    public static String doubleToString(double d) {
        if (Double.isInfinite(d) || Double.isNaN(d)) {
            return ""null"";
        }

// Shave off trailing zeros and decimal point, if possible.

        String string = Double.toString(d);
        if (string.indexOf('.') > 0 && string.indexOf('e') < 0 &&
                string.indexOf('E') < 0) {
            while (string.endsWith(""0"")) {
                string = string.substring(0, string.length() - 1);
            }
            if (string.endsWith(""."")) {
                string = string.substring(0, string.length() - 1);
            }
        }
        return string;
    }
"
678,8bd06d64-615c-497a-a51f-0d92ddae08e8,"    public Object get(String key) throws JSONException {
        if (key == null) {
            throw new JSONException(""Null key."");
        }
        Object object = this.opt(key);
        if (object == null) {
            throw new JSONException(""JSONObject["" + quote(key) +
                    ""] not found."");
        }
        return object;
    }
"
679,53d71034-45eb-4255-bb1e-5238ba10ee37,"    public boolean getBoolean(String key) throws JSONException {
        Object object = this.get(key);
        if (object.equals(Boolean.FALSE) ||
                (object instanceof String &&
                ((String)object).equalsIgnoreCase(""false""))) {
            return false;
        } else if (object.equals(Boolean.TRUE) ||
                (object instanceof String &&
                ((String)object).equalsIgnoreCase(""true""))) {
            return true;
        }
        throw new JSONException(""JSONObject["" + quote(key) +
                ""] is not a Boolean."");
    }
"
680,323a71d5-5fc5-458e-818d-8ffc87528508,"    public double getDouble(String key) throws JSONException {
        Object object = this.get(key);
        try {
            return object instanceof Number
                ? ((Number)object).doubleValue()
                : Double.parseDouble((String)object);
        } catch (Exception e) {
            throw new JSONException(""JSONObject["" + quote(key) +
                ""] is not a number."");
        }
    }
"
681,f1e09e4b-9963-4ad8-8a72-e3a2dac0ea8a,"    public int getInt(String key) throws JSONException {
        Object object = this.get(key);
        try {
            return object instanceof Number
                ? ((Number)object).intValue()
                : Integer.parseInt((String)object);
        } catch (Exception e) {
            throw new JSONException(""JSONObject["" + quote(key) +
                ""] is not an int."");
        }
    }
"
682,0fc0a76e-b09e-42a7-bbaf-5d8d8eda3224,"    public JSONArray getJSONArray(String key) throws JSONException {
        Object object = this.get(key);
        if (object instanceof JSONArray) {
            return (JSONArray)object;
        }
        throw new JSONException(""JSONObject["" + quote(key) +
                ""] is not a JSONArray."");
    }
"
683,6723ce1d-94c2-472e-a1ca-7e2e7f691b22,"    public JSONObject getJSONObject(String key) throws JSONException {
        Object object = this.get(key);
        if (object instanceof JSONObject) {
            return (JSONObject)object;
        }
        throw new JSONException(""JSONObject["" + quote(key) +
                ""] is not a JSONObject."");
    }
"
684,eeb062ed-0b2e-4874-b1f3-befedd885e6e,"    public long getLong(String key) throws JSONException {
        Object object = this.get(key);
        try {
            return object instanceof Number
                ? ((Number)object).longValue()
                : Long.parseLong((String)object);
        } catch (Exception e) {
            throw new JSONException(""JSONObject["" + quote(key) +
                ""] is not a long."");
        }
    }
"
685,7c7f9770-18ab-44cd-ac43-51efc8420b79,"    public static String[] getNames(JSONObject jo) {
        int length = jo.length();
        if (length == 0) {
            return null;
        }
        Iterator iterator = jo.keys();
        String[] names = new String[length];
        int i = 0;
        while (iterator.hasNext()) {
            names[i] = (String)iterator.next();
            i += 1;
        }
        return names;
    }
"
686,e1859db7-f283-42ac-81c8-1a9e20eacdc1,"    public static String[] getNames(Object object) {
        if (object == null) {
            return null;
        }
        Class klass = object.getClass();
        Field[] fields = klass.getFields();
        int length = fields.length;
        if (length == 0) {
            return null;
        }
        String[] names = new String[length];
        for (int i = 0; i < length; i += 1) {
            names[i] = fields[i].getName();
        }
        return names;
    }
"
687,d88e52b1-f7d4-4fc2-94bc-649892feeb99,"    public String getString(String key) throws JSONException {
        Object object = this.get(key);
        if (object instanceof String) {
            return (String)object;
        }
        throw new JSONException(""JSONObject["" + quote(key) +
            ""] not a string."");
    }
"
688,b4f77a8c-6bb0-49b2-8f7d-73e47ce49ebe,"    public boolean has(String key) {
        return this.map.containsKey(key);
    }
"
689,b6d9df2e-f353-41db-82be-df0f23b06f46,"    public JSONObject increment(String key) throws JSONException {
        Object value = this.opt(key);
        if (value == null) {
            this.put(key, 1);
        } else if (value instanceof Integer) {
            this.put(key, ((Integer)value).intValue() + 1);
        } else if (value instanceof Long) {
            this.put(key, ((Long)value).longValue() + 1);
        } else if (value instanceof Double) {
            this.put(key, ((Double)value).doubleValue() + 1);
        } else if (value instanceof Float) {
            this.put(key, ((Float)value).floatValue() + 1);
        } else {
            throw new JSONException(""Unable to increment ["" + quote(key) + ""]."");
        }
        return this;
    }
"
690,48b8d934-4f99-43ee-ada6-cc4938675c52,"    public boolean isNull(String key) {
        return JSONObject.NULL.equals(this.opt(key));
    }
"
691,69eaf96f-0856-45f0-938d-0b605cfb01b1,"    public Iterator keys() {
        return this.keySet().iterator();
    }
"
692,c96c6709-428a-4c26-9cef-69318134b081,"    public Set keySet() {
        return this.map.keySet();
    }
"
693,6c7e97a6-59da-4e37-a005-088d347a21d7,"    public int length() {
        return this.map.size();
    }
"
694,649931bd-6291-4b6f-b875-d1eff09fd244,"    public JSONArray names() {
        JSONArray ja = new JSONArray();
        Iterator  keys = this.keys();
        while (keys.hasNext()) {
            ja.put(keys.next());
        }
        return ja.length() == 0 ? null : ja;
    }
"
695,d321cc22-9270-41b5-a149-98d40243ec65,"    public static String numberToString(Number number)
            throws JSONException {
        if (number == null) {
            throw new JSONException(""Null pointer"");
        }
        testValidity(number);

// Shave off trailing zeros and decimal point, if possible.

        String string = number.toString();
        if (string.indexOf('.') > 0 && string.indexOf('e') < 0 &&
                string.indexOf('E') < 0) {
            while (string.endsWith(""0"")) {
                string = string.substring(0, string.length() - 1);
            }
            if (string.endsWith(""."")) {
                string = string.substring(0, string.length() - 1);
            }
        }
        return string;
    }
"
696,211a82c2-ac3b-436e-8021-4678aa1c6b7d,"    public Object opt(String key) {
        return key == null ? null : this.map.get(key);
    }
"
697,f1b7f81d-cd5a-469e-8d2a-c0e0c7f1f2e6,"    public boolean optBoolean(String key) {
        return this.optBoolean(key, false);
    }
"
698,93abc96c-8785-46d0-9778-e9480a318c33,"    public boolean optBoolean(String key, boolean defaultValue) {
        try {
            return this.getBoolean(key);
        } catch (Exception e) {
            return defaultValue;
        }
    }
"
699,85752b22-cbee-40c8-9a05-2e4d407975a3,"    public double optDouble(String key) {
        return this.optDouble(key, Double.NaN);
    }
"
700,a5987b25-aac4-47b4-b257-d028dc559ffa,"    public double optDouble(String key, double defaultValue) {
        try {
            return this.getDouble(key);
        } catch (Exception e) {
            return defaultValue;
        }
    }
"
701,fe90052d-d8e5-4342-9912-c8a60f1955d2,"    public int optInt(String key) {
        return this.optInt(key, 0);
    }
"
702,c05ce2e9-e08c-41c1-bf2d-dc218af7b0e0,"    public int optInt(String key, int defaultValue) {
        try {
            return this.getInt(key);
        } catch (Exception e) {
            return defaultValue;
        }
    }
"
703,2419fbb7-f2df-4410-a1cc-f7c355f5f2f6,"    public JSONArray optJSONArray(String key) {
        Object o = this.opt(key);
        return o instanceof JSONArray ? (JSONArray)o : null;
    }
"
704,86a68123-94a8-4c17-b616-6bc026e1fdf4,"    public JSONObject optJSONObject(String key) {
        Object object = this.opt(key);
        return object instanceof JSONObject ? (JSONObject)object : null;
    }
"
705,4c30c8bc-0a9e-4da4-b0b9-2f2a4161d2e3,"    public long optLong(String key) {
        return this.optLong(key, 0);
    }
"
706,d7fd0078-aa3b-4062-ae3b-d20b369d5656,"    public long optLong(String key, long defaultValue) {
        try {
            return this.getLong(key);
        } catch (Exception e) {
            return defaultValue;
        }
    }
"
707,9eaeb9ac-6b98-460c-b6ee-d14257488fda,"    public String optString(String key) {
        return this.optString(key, """");
    }
"
708,b6eeca94-d757-4e58-a4e2-709ae9fc4f99,"    public String optString(String key, String defaultValue) {
        Object object = this.opt(key);
        return NULL.equals(object) ? defaultValue : object.toString();
    }
"
709,70e5d005-297d-4443-a4cf-d4eb3d2f226b,"    private void populateMap(Object bean) {
        Class klass = bean.getClass();

// If klass is a System class then set includeSuperClass to false.

        boolean includeSuperClass = klass.getClassLoader() != null;

        Method[] methods = includeSuperClass
                ? klass.getMethods()
                : klass.getDeclaredMethods();
        for (int i = 0; i < methods.length; i += 1) {
            try {
                Method method = methods[i];
                if (Modifier.isPublic(method.getModifiers())) {
                    String name = method.getName();
                    String key = """";
                    if (name.startsWith(""get"")) {
                        if (""getClass"".equals(name) ||
                                ""getDeclaringClass"".equals(name)) {
                            key = """";
                        } else {
                            key = name.substring(3);
                        }
                    } else if (name.startsWith(""is"")) {
                        key = name.substring(2);
                    }
                    if (key.length() > 0 &&
                            Character.isUpperCase(key.charAt(0)) &&
                            method.getParameterTypes().length == 0) {
                        if (key.length() == 1) {
                            key = key.toLowerCase();
                        } else if (!Character.isUpperCase(key.charAt(1))) {
                            key = key.substring(0, 1).toLowerCase() +
                                key.substring(1);
                        }

                        Object result = method.invoke(bean, (Object[])null);
                        if (result != null) {
                            this.map.put(key, wrap(result));
                        }
                    }
                }
            } catch (Exception ignore) {
            }
        }
    }
"
710,d1bc8145-5fb2-4871-b08d-c96c970e1624,"    public JSONObject put(String key, boolean value) throws JSONException {
        this.put(key, value ? Boolean.TRUE : Boolean.FALSE);
        return this;
    }
"
711,91c5cbad-14a2-40a5-a88a-4d43a25e0bd7,"    public JSONObject put(String key, Collection value) throws JSONException {
        this.put(key, new JSONArray(value));
        return this;
    }
"
712,d760523a-d413-4dc7-88ad-aa6296b5e838,"    public JSONObject put(String key, double value) throws JSONException {
        this.put(key, new Double(value));
        return this;
    }
"
713,1fc73286-e4a1-4736-95df-e1a093f83ee5,"    public JSONObject put(String key, int value) throws JSONException {
        this.put(key, new Integer(value));
        return this;
    }
"
714,c3b7a99b-8faf-40dd-9df8-359864eac7f3,"    public JSONObject put(String key, long value) throws JSONException {
        this.put(key, new Long(value));
        return this;
    }
"
715,659038d0-7aef-40bc-8bf2-d90247c07ac4,"    public JSONObject put(String key, Map value) throws JSONException {
        this.put(key, new JSONObject(value));
        return this;
    }
"
716,3bbc5189-b3e6-494f-9bf6-d9ac03547ef6,"    public JSONObject put(String key, Object value) throws JSONException {
        String pooled;
        if (key == null) {
            throw new JSONException(""Null key."");
        }
        if (value != null) {
            testValidity(value);
            pooled = (String)keyPool.get(key);
            if (pooled == null) {
                if (keyPool.size() >= keyPoolSize) {
                    keyPool = new HashMap(keyPoolSize);
                }
                keyPool.put(key, key);
            } else {
                key = pooled;
            }
            this.map.put(key, value);
        } else {
            this.remove(key);
        }
        return this;
    }
"
717,c869f335-0916-47a3-89ce-3005a6550c9c,"    public JSONObject putOnce(String key, Object value) throws JSONException {
        if (key != null && value != null) {
            if (this.opt(key) != null) {
                throw new JSONException(""Duplicate key \"""" + key + ""\"""");
            }
            this.put(key, value);
        }
        return this;
    }
"
718,d29beec2-23c1-4fd3-8055-6c1ba1403659,"    public JSONObject putOpt(String key, Object value) throws JSONException {
        if (key != null && value != null) {
            this.put(key, value);
        }
        return this;
    }
"
719,ba694c2f-2787-49a8-a3b3-334ff4960c39,"    public static String quote(String string) {
        StringWriter sw = new StringWriter();
        synchronized (sw.getBuffer()) {
            try {
                return quote(string, sw).toString();
            } catch (IOException ignored) {
                // will never happen - we are writing to a string writer
                return """";
            }
        }
    }
"
720,89a7982b-46c5-46b4-b81f-477ebfcbffb4,"    public static Writer quote(String string, Writer w) throws IOException {
        if (string == null || string.length() == 0) {
            w.write(""\""\"""");
            return w;
        }

        char b;
        char c = 0;
        String hhhh;
        int i;
        int len = string.length();

        w.write('""');
        for (i = 0; i < len; i += 1) {
            b = c;
            c = string.charAt(i);
            switch (c) {
            case '\\':
            case '""':
                w.write('\\');
                w.write(c);
                break;
            case '/':
                if (b == '<') {
                    w.write('\\');
                }
                w.write(c);
                break;
            case '\b':
                w.write(""\\b"");
                break;
            case '\t':
                w.write(""\\t"");
                break;
            case '\n':
                w.write(""\\n"");
                break;
            case '\f':
                w.write(""\\f"");
                break;
            case '\r':
                w.write(""\\r"");
                break;
            default:
                if (c < ' ' || (c >= '\u0080' && c < '\u00a0')
                        || (c >= '\u2000' && c < '\u2100')) {
                    w.write(""\\u"");
                    hhhh = Integer.toHexString(c);
                    w.write(""0000"", 0, 4 - hhhh.length());
                    w.write(hhhh);
                } else {
                    w.write(c);
                }
            }
        }
        w.write('""');
        return w;
    }
"
721,dc79070f-a7aa-4e16-b6e6-5ecb5aa3069e,"    public Object remove(String key) {
        return this.map.remove(key);
    }
"
722,bb976def-1086-493d-bfa0-bc827fba72b6,"    public static Object stringToValue(String string) {
        Double d;
        if (string.equals("""")) {
            return string;
        }
        if (string.equalsIgnoreCase(""true"")) {
            return Boolean.TRUE;
        }
        if (string.equalsIgnoreCase(""false"")) {
            return Boolean.FALSE;
        }
        if (string.equalsIgnoreCase(""null"")) {
            return JSONObject.NULL;
        }

        /*
         * If it might be a number, try converting it.
         * If a number cannot be produced, then the value will just
         * be a string. Note that the plus and implied string
         * conventions are non-standard. A JSON parser may accept
         * non-JSON forms as long as it accepts all correct JSON forms.
         */

        char b = string.charAt(0);
        if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {
            try {
                if (string.indexOf('.') > -1 ||
                        string.indexOf('e') > -1 || string.indexOf('E') > -1) {
                    d = Double.valueOf(string);
                    if (!d.isInfinite() && !d.isNaN()) {
                        return d;
                    }
                } else {
                    Long myLong = new Long(string);
                    if (myLong.longValue() == myLong.intValue()) {
                        return new Integer(myLong.intValue());
                    } else {
                        return myLong;
                    }
                }
            }  catch (Exception ignore) {
            }
        }
        return string;
    }
"
723,6d4967bb-eb3d-49d7-917c-6b387bac7674,"    public static void testValidity(Object o) throws JSONException {
        if (o != null) {
            if (o instanceof Double) {
                if (((Double)o).isInfinite() || ((Double)o).isNaN()) {
                    throw new JSONException(
                        ""JSON does not allow non-finite numbers."");
                }
            } else if (o instanceof Float) {
                if (((Float)o).isInfinite() || ((Float)o).isNaN()) {
                    throw new JSONException(
                        ""JSON does not allow non-finite numbers."");
                }
            }
        }
    }
"
724,1da75314-a488-4dd8-be7a-64e04bcd2753,"    public JSONArray toJSONArray(JSONArray names) throws JSONException {
        if (names == null || names.length() == 0) {
            return null;
        }
        JSONArray ja = new JSONArray();
        for (int i = 0; i < names.length(); i += 1) {
            ja.put(this.opt(names.getString(i)));
        }
        return ja;
    }
"
725,2d8f4b4e-6d7d-4d39-804b-c3924e421538,"    public String toString() {
        try {
            return this.toString(0);
        } catch (Exception e) {
            return null;
        }
    }
"
726,7814384f-bccf-425c-a79e-f5cc8198a916,"    public String toString(int indentFactor) throws JSONException {
        StringWriter w = new StringWriter();
        synchronized (w.getBuffer()) {
            return this.write(w, indentFactor, 0).toString();
        }
    }
"
727,6fc67035-fe9d-48d3-a532-3d0f9c6d479c,"    public static String valueToString(Object value) throws JSONException {
        if (value == null || value.equals(null)) {
            return ""null"";
        }
        if (value instanceof JSONString) {
            Object object;
            try {
                object = ((JSONString)value).toJSONString();
            } catch (Exception e) {
                throw new JSONException(e);
            }
            if (object instanceof String) {
                return (String)object;
            }
            throw new JSONException(""Bad value from toJSONString: "" + object);
        }
        if (value instanceof Number) {
            return numberToString((Number) value);
        }
        if (value instanceof Boolean || value instanceof JSONObject ||
                value instanceof JSONArray) {
            return value.toString();
        }
        if (value instanceof Map) {
            return new JSONObject((Map)value).toString();
        }
        if (value instanceof Collection) {
            return new JSONArray((Collection)value).toString();
        }
        if (value.getClass().isArray()) {
            return new JSONArray(value).toString();
        }
        return quote(value.toString());
    }
"
728,62ee11f4-1b03-409c-933e-ffb669b176a5,"     public static Object wrap(Object object) {
         try {
             if (object == null) {
                 return NULL;
             }
             if (object instanceof JSONObject || object instanceof JSONArray  ||
                     NULL.equals(object)      || object instanceof JSONString ||
                     object instanceof Byte   || object instanceof Character  ||
                     object instanceof Short  || object instanceof Integer    ||
                     object instanceof Long   || object instanceof Boolean    ||
                     object instanceof Float  || object instanceof Double     ||
                     object instanceof String) {
                 return object;
             }

             if (object instanceof Collection) {
                 return new JSONArray((Collection)object);
             }
             if (object.getClass().isArray()) {
                 return new JSONArray(object);
             }
             if (object instanceof Map) {
                 return new JSONObject((Map)object);
             }
             Package objectPackage = object.getClass().getPackage();
             String objectPackageName = objectPackage != null
                 ? objectPackage.getName()
                 : """";
             if (
                 objectPackageName.startsWith(""java."") ||
                 objectPackageName.startsWith(""javax."") ||
                 object.getClass().getClassLoader() == null
             ) {
                 return object.toString();
             }
             return new JSONObject(object);
         } catch(Exception exception) {
             return null;
         }
     }
"
729,d15734cc-ed1f-48be-96d1-907ebd158a74,"     public Writer write(Writer writer) throws JSONException {
        return this.write(writer, 0, 0);
    }
"
730,ccf981e3-53d1-4663-9459-9d6052d5fb09,"    static final Writer writeValue(Writer writer, Object value,
            int indentFactor, int indent) throws JSONException, IOException {
        if (value == null || value.equals(null)) {
            writer.write(""null"");
        } else if (value instanceof JSONObject) {
            ((JSONObject) value).write(writer, indentFactor, indent);
        } else if (value instanceof JSONArray) {
            ((JSONArray) value).write(writer, indentFactor, indent);
        } else if (value instanceof Map) {
            new JSONObject((Map) value).write(writer, indentFactor, indent);
        } else if (value instanceof Collection) {
            new JSONArray((Collection) value).write(writer, indentFactor,
                    indent);
        } else if (value.getClass().isArray()) {
            new JSONArray(value).write(writer, indentFactor, indent);
        } else if (value instanceof Number) {
            writer.write(numberToString((Number) value));
        } else if (value instanceof Boolean) {
            writer.write(value.toString());
        } else if (value instanceof JSONString) {
            Object o;
            try {
                o = ((JSONString) value).toJSONString();
            } catch (Exception e) {
                throw new JSONException(e);
            }
            writer.write(o != null ? o.toString() : quote(value.toString()));
        } else {
            quote(value.toString(), writer);
        }
        return writer;
    }
"
731,a6a1e2f1-6417-42d8-be9b-b2f81ffb40e9,"    static final void indent(Writer writer, int indent) throws IOException {
        for (int i = 0; i < indent; i += 1) {
            writer.write(' ');
        }
    }
"
732,532fe645-e33f-494d-8100-e2572652373b,"    Writer write(Writer writer, int indentFactor, int indent)
            throws JSONException {
        try {
            boolean commanate = false;
            final int length = this.length();
            Iterator keys = this.keys();
            writer.write('{');

            if (length == 1) {
                Object key = keys.next();
                writer.write(quote(key.toString()));
                writer.write(':');
                if (indentFactor > 0) {
                    writer.write(' ');
                }
                writeValue(writer, this.map.get(key), indentFactor, indent);
            } else if (length != 0) {
                final int newindent = indent + indentFactor;
                while (keys.hasNext()) {
                    Object key = keys.next();
                    if (commanate) {
                        writer.write(',');
                    }
                    if (indentFactor > 0) {
                        writer.write('\n');
                    }
                    indent(writer, newindent);
                    writer.write(quote(key.toString()));
                    writer.write(':');
                    if (indentFactor > 0) {
                        writer.write(' ');
                    }
                    writeValue(writer, this.map.get(key), indentFactor,
                            newindent);
                    commanate = true;
                }
                if (indentFactor > 0) {
                    writer.write('\n');
                }
                indent(writer, indent);
            }
            writer.write('}');
            return writer;
        } catch (IOException exception) {
            throw new JSONException(exception);
        }
     }
"
733,6d0e17db-032b-4ca0-bcf9-d6273695647c,"    public JSONTokener(Reader reader) {
        this.reader = reader.markSupported()
            ? reader
            : new BufferedReader(reader);
        this.eof = false;
        this.usePrevious = false;
        this.previous = 0;
        this.index = 0;
        this.character = 1;
        this.line = 1;
    }
"
734,df7ba7f5-f6b5-4eeb-9ddb-3420e2d0fc1d,"    public JSONTokener(InputStream inputStream) throws JSONException {
        this(new InputStreamReader(inputStream));
    }
"
735,85047169-058a-47d1-acdd-0a1968bc10fb,"    public JSONTokener(String s) {
        this(new StringReader(s));
    }
"
736,2436d2ea-ead3-488b-9501-8500cbab3c52,"    public void back() throws JSONException {
        if (this.usePrevious || this.index <= 0) {
            throw new JSONException(""Stepping back two steps is not supported"");
        }
        this.index -= 1;
        this.character -= 1;
        this.usePrevious = true;
        this.eof = false;
    }
"
737,f2a3d913-d5ee-4634-829f-1cb17673a6a5,"    public static int dehexchar(char c) {
        if (c >= '0' && c <= '9') {
            return c - '0';
        }
        if (c >= 'A' && c <= 'F') {
            return c - ('A' - 10);
        }
        if (c >= 'a' && c <= 'f') {
            return c - ('a' - 10);
        }
        return -1;
    }
"
738,db1255c1-1b76-4c3b-ba4e-be35b84447b3,"    public boolean end() {
        return this.eof && !this.usePrevious;
    }
"
739,e46d5302-eaba-4546-a012-424ab208d2a6,"    public boolean more() throws JSONException {
        this.next();
        if (this.end()) {
            return false;
        }
        this.back();
        return true;
    }
"
740,3f7eef1b-6664-49c7-81ff-7fc0a5489ee4,"    public char next() throws JSONException {
        int c;
        if (this.usePrevious) {
            this.usePrevious = false;
            c = this.previous;
        } else {
            try {
                c = this.reader.read();
            } catch (IOException exception) {
                throw new JSONException(exception);
            }

            if (c <= 0) { // End of stream
                this.eof = true;
                c = 0;
            }
        }
        this.index += 1;
        if (this.previous == '\r') {
            this.line += 1;
            this.character = c == '\n' ? 0 : 1;
        } else if (c == '\n') {
            this.line += 1;
            this.character = 0;
        } else {
            this.character += 1;
        }
        this.previous = (char) c;
        return this.previous;
    }
"
741,3f777e50-e418-401f-92e7-d60a728ba30e,"    public char next(char c) throws JSONException {
        char n = this.next();
        if (n != c) {
            throw this.syntaxError(""Expected '"" + c + ""' and instead saw '"" +
                    n + ""'"");
        }
        return n;
    }
"
742,79369501-b706-4661-a52b-664fe54040d5,"     public String next(int n) throws JSONException {
         if (n == 0) {
             return """";
         }

         char[] chars = new char[n];
         int pos = 0;

         while (pos < n) {
             chars[pos] = this.next();
             if (this.end()) {
                 throw this.syntaxError(""Substring bounds error"");
             }
             pos += 1;
         }
         return new String(chars);
     }
"
743,ace27a5d-183e-41af-8c23-5913ba30a6dc,"    public char nextClean() throws JSONException {
        for (;;) {
            char c = this.next();
            if (c == 0 || c > ' ') {
                return c;
            }
        }
    }
"
744,70d7fdf3-3571-42b7-8b89-b6af2fe316f9,"    public String nextString(char quote) throws JSONException {
        char c;
        StringBuffer sb = new StringBuffer();
        for (;;) {
            c = this.next();
            switch (c) {
            case 0:
            case '\n':
            case '\r':
                throw this.syntaxError(""Unterminated string"");
            case '\\':
                c = this.next();
                switch (c) {
                case 'b':
                    sb.append('\b');
                    break;
                case 't':
                    sb.append('\t');
                    break;
                case 'n':
                    sb.append('\n');
                    break;
                case 'f':
                    sb.append('\f');
                    break;
                case 'r':
                    sb.append('\r');
                    break;
                case 'u':
                    sb.append((char)Integer.parseInt(this.next(4), 16));
                    break;
                case '""':
                case '\'':
                case '\\':
                case '/':
                    sb.append(c);
                    break;
                default:
                    throw this.syntaxError(""Illegal escape."");
                }
                break;
            default:
                if (c == quote) {
                    return sb.toString();
                }
                sb.append(c);
            }
        }
    }
"
745,1839304e-2c6e-4d65-8ddc-f3a5bce091b2,"    public String nextTo(char delimiter) throws JSONException {
        StringBuffer sb = new StringBuffer();
        for (;;) {
            char c = this.next();
            if (c == delimiter || c == 0 || c == '\n' || c == '\r') {
                if (c != 0) {
                    this.back();
                }
                return sb.toString().trim();
            }
            sb.append(c);
        }
    }
"
746,dd44760f-0612-4ad7-adff-ea1f73c7fd25,"    public String nextTo(String delimiters) throws JSONException {
        char c;
        StringBuffer sb = new StringBuffer();
        for (;;) {
            c = this.next();
            if (delimiters.indexOf(c) >= 0 || c == 0 ||
                    c == '\n' || c == '\r') {
                if (c != 0) {
                    this.back();
                }
                return sb.toString().trim();
            }
            sb.append(c);
        }
    }
"
747,16beb29d-0f42-4d05-814a-56ec524ec22b,"    public Object nextValue() throws JSONException {
        char c = this.nextClean();
        String string;

        switch (c) {
            case '""':
            case '\'':
                return this.nextString(c);
            case '{':
                this.back();
                return new JSONObject(this);
            case '[':
                this.back();
                return new JSONArray(this);
        }

        /*
         * Handle unquoted text. This could be the values true, false, or
         * null, or it can be a number. An implementation (such as this one)
         * is allowed to also accept non-standard forms.
         *
         * Accumulate characters until we reach the end of the text or a
         * formatting character.
         */

        StringBuffer sb = new StringBuffer();
        while (c >= ' ' && "",:]}/\\\""[{;=#"".indexOf(c) < 0) {
            sb.append(c);
            c = this.next();
        }
        this.back();

        string = sb.toString().trim();
        if ("""".equals(string)) {
            throw this.syntaxError(""Missing value"");
        }
        return JSONObject.stringToValue(string);
    }
"
748,09a04015-5e6d-44c7-865b-df5f689dcaab,"    public char skipTo(char to) throws JSONException {
        char c;
        try {
            long startIndex = this.index;
            long startCharacter = this.character;
            long startLine = this.line;
            this.reader.mark(1000000);
            do {
                c = this.next();
                if (c == 0) {
                    this.reader.reset();
                    this.index = startIndex;
                    this.character = startCharacter;
                    this.line = startLine;
                    return c;
                }
            } while (c != to);
        } catch (IOException exc) {
            throw new JSONException(exc);
        }

        this.back();
        return c;
    }
"
749,57e3e1f0-aff2-415e-8472-b4efad665ea5,"    public JSONException syntaxError(String message) {
        return new JSONException(message + this.toString());
    }
"
750,380bead1-03cf-4d07-b495-e9ad827cc4c3,"    public String toString() {
        return "" at "" + this.index + "" [character "" + this.character + "" line "" +
            this.line + ""]"";
    }
"
751,da61816b-48ab-43e4-8501-0521eb5cc98d,"    public static float cos(float degree)
    {
        return (float) Math.cos(degree * Math.PI / 180);
    }
"
752,8191fdeb-0ba8-407f-b59b-e7a4408c950e,"    public static float sin(float degree)
    {
        return (float) Math.sin(degree * Math.PI / 180);
    }
"
753,98ce7b5b-05bb-4259-9572-dd9f69cc45e9,"	public SimpleTest() 
	{
		super(""SpaceGame"");
		
	}
"
754,7b5f83e0-86ed-4616-840a-0fcbe2319de4,"	@Override
	public void init(GameContainer container) throws SlickException 
	{
		this.container = container;
		container.setTargetFrameRate(60);
		int size = 5;
		int speed = 3;
		int rotation = 20;
		float range = 40;
		ship = new Ship(size, speed, rotation, range, this);
		List<Obj> shipList = new List<Obj>();
		shipList.add(ship);
		
		
		bulletList = new List<Obj>();
		
		astList = new List<Obj>();
		for (int i = 0; i < 2; i++)
		{
			float[] loc = new float[2];
			loc[0] = (float) (Math.random()* container.getWidth());
			loc[1] = (float) (Math.random()* container.getHeight());
			
			List<Obj> pointer = astList;
			while (pointer.next != null)
			{
				pointer = pointer.next;
			}
			List<Obj> wrapper = new List<Obj>();
			Asteroid ast = new Asteroid(loc, (float) (Math.random() * 10 + 4), wrapper, this);
			wrapper.data = ast; wrapper.previous = pointer;
			pointer.next = wrapper;
		}
		
		gameList = new List<List<Obj>>();
		gameList.add(bulletList);
		gameList.add(astList);
		gameList.add(shipList);
	}
"
755,76cd7d5c-d9be-4644-b0cf-c058e584c6b6,"	@Override
	public void update(GameContainer container, int delta) throws SlickException 
	{
		//ship.update(delta);
		CollisionChecker.checkAll(gameList, delta);
		List<List<Obj>> pointer = gameList.next;
		while(pointer != null)
		{
			List<Obj> pointer1 = pointer.data.next;
			while (pointer1 != null)
			{
				pointer1.data.update(delta);
				pointer1 = pointer1.next;
			}
			pointer = pointer.next;
		}
		
	}
"
756,63f315b7-6749-43ee-83c5-e547728caba9,"	@Override
	public void keyPressed(int key, char c)
	{
		if (c == 'a')
			ship.rotateLeft(true);
		else if (c == 'd')
			ship.rotateRight(true);
		else if (c == 'w')
			ship.accelerate(true);
		else if (c == ' ')
		{
			//System.out.println(ship.location[0] + ""  "" + ship.location[1]);
			ship.fire();
		}
		else if (c == 's')
			ship.stop(true);
	}
"
757,af978eca-53c6-437c-9aeb-a60ce10c9eda,"	@Override
	public void keyReleased(int key, char c)
	{
		if (c == 'a')
			ship.rotateLeft(false);
		else if (c == 'd')
			ship.rotateRight(false);
		else if (c == 'w')
			ship.accelerate(false);
		else if (c == 's')
			ship.stop(false);
	}
"
758,aa2fe31c-b0ce-4bb5-ad41-86ec38b91a7f,"	@Override
	public void render(GameContainer container, Graphics g) throws SlickException 
	{
		
		g.setLineWidth(.3f);
		//System.out.println(container.getHeight() + ""  "" + container.getWidth());
		//ship.draw(g);

		List<List<Obj>> pointer = gameList.next;
		while(pointer != null)
		{
			List<Obj> pointer1 = pointer.data.next;
			while (pointer1 != null)
			{
				pointer1.data.draw(g);
				pointer1 = pointer1.next;
			}
			pointer = pointer.next;
		}
		
	}
"
759,f9e159a9-c8d3-4f57-b298-d6f105ff038e,"	public static void main(String[] args) 
	{
		try 
		{
			AppGameContainer app = new AppGameContainer(new SimpleTest());
			app.start();
		} 
		catch (SlickException e) 
		{
			e.printStackTrace();
		}
	}
"
760,e8d6a61e-66ba-472c-b39e-dce93adbcf01,"	public List()
	{
	}
"
761,38841122-4bb0-4c11-8eb4-48a3e987ff1b,"	public List(Thing data, List<Thing> previous)
	{
		this.data = data;
		this.previous = previous;
	}
"
762,50a1c111-f9b4-452d-8625-5b80e0ee6c72,"	public void remove()
	{
		previous.next = next;
		if (next != null)
			next.previous = previous;
	}
"
763,cdf58e19-5702-4bcd-b3cb-67d0dc4348fa,"	public void add(Thing a)
	{
		List<Thing> wrapper = new List<Thing>(a, null);
		wrapper.previous = this;
		wrapper.next = next;
		if (next != null)
			next.previous = wrapper;
		
		next = wrapper;
	}
"
764,32bbddb4-1952-4496-98ae-26561a5d0c97,"	public static void checkAll(List<List<Obj>> objList, int delta)
	{
		List<List<Obj>> list1 = objList.next;
		while(list1 != null)
		{
			List<Obj> obj1 = list1.data.next;
			while(obj1 != null)
			{
				List<List<Obj>> list2 = list1;
				List<Obj> obj2 = obj1.next;
				while(list2 != null)
				{
					while(obj2 != null)
					{

						if (obj2.data.shape.intersects(obj1.data.shape))
						{
							obj2.data.collide(obj1.data, delta);
							obj1.data.collide(obj2.data, delta);
						}
						obj2 = obj2.next;
					}
					list2 = list2.next;
					if (list2 != null)
						obj2 = list2.data.next;
				}
				obj1 = obj1.next;
			}
			list1 = list1.next;
			if (list1 != null)
				obj1 = list1.data.next;
		}
	}
"
765,25e61cb9-3298-419f-83c4-4759b9a50a81,"	public static void backStep(Obj thing, int delta)
	{
		float[] speed = thing.setSpeed(null);
		speed[0] *= -1;
		speed[1] *= -1;
		thing.update(delta);
		speed[0] *= -1;
		speed[1] *= -1;
	}
"
766,8229384e-e76b-4e30-b22a-f6bf11f73c8c,"	public Ship (int size, int speed, int rotateSpd, float range, SimpleTest inst)
	{
		location = new float[2];
		location[0] = 200;
		location[1] = 200;
		velocity = new float[2];
		acceleration = new float[2];
		this.speed = speed;
		this.size = size;
		this.rotateSpd = rotateSpd;
		this.range = range;
		rotation = 0;
		gameInst = inst;  
	}
"
767,2ea45b81-beb5-44e2-884e-5473155b890e,"	public void draw(Graphics g)
	{
		float[] points = new float[6];
		points[0] = (size*Helper.cos(0 + rotation) + location[0]);
		points[1] = (size*Helper.sin(0 + rotation) + location[1]);


		points[2] = (size*Helper.cos(130 + rotation) + location[0]);
		points[3] = (size*Helper.sin(130 + rotation) + location[1]);


		points[4] = (size*Helper.cos(230 + rotation) + location[0]);
		points[5] = (size*Helper.sin(230 + rotation) + location[1]);

		shape = new Polygon(points);

		g.setColor(Color.green);
		g.fill(shape);

		// visual representation of the range of the ship
		Circle circle = new Circle(location[0], location[1], range);
		g.draw(circle);
	}
"
768,8cfca300-89ed-44dc-9dd4-d2b064c53217,"	public void rotateLeft(boolean turn)
	{
		turnLeft = turn;    
	}
"
769,daa73386-19b7-4c0a-9b61-058d4a418bf8,"	public void rotateRight(boolean turn)
	{
		turnRight = turn;    
	}
"
770,a6747212-d984-462a-be95-36c35948e425,"	public void stop(boolean truth)
	{
		stop = truth;
	}
"
771,9c4399a5-b411-4e03-a591-00e67443e2bc,"	public void update(int delta)
	{
		float d = .01f*delta;
		if (turnRight)
			rotation += rotateSpd*.01f*delta;
		if (turnLeft)
			rotation -= rotateSpd*.01f*delta;

		if (!checkBorders() && accelerate )
		{
			acceleration[0] = (float) Helper.cos(rotation)*speed;
			acceleration[1] = (float) Helper.sin(rotation)*speed;

			velocity[0] += acceleration[0]*delta*.01f;
			velocity[1] += acceleration[1]*delta*.01f;
		}
		
		for(int i = 0; i < 2; i++)
		{           
			location[i] += velocity[i]*delta*.01f;
			if (stop)
			{
				velocity[i] -= velocity[i]/10 * d;
			}
		}
	}
"
772,e49a8a15-c529-4b97-b1f0-aae243bc4807,"	private boolean checkBorders()
	{
		boolean check = false;
		int width = gameInst.container.getWidth();
		int height = gameInst.container.getHeight();
		
		if (location[0] >= width)
		{
			check = true;
			if (velocity[0] > 0)
				velocity[0] *= -.5f;
		}
		if (location[0] <= 0)
		{
			check = true;
			if (velocity[0] < 0)
				velocity[0] *= -.5f;
		}
		
		if (location[1] >= height)
		{
			check = true;
			if (velocity[1] > 0)
				velocity[1] *= -.5f;
		}
		if (location[1] <= 0)
		{
			check = true;
			if (velocity[1] < 0)
				velocity[1] *= -.5f;
		}
		return check;
	}
"
773,826e5ee2-bbb4-4d0e-8ee1-96cf886dc956,"	public void fire()
	{

		int counter = 0;
		List<Obj> pointer = gameInst.bulletList;
		while (pointer.next != null)
		{
			counter++;

			pointer = pointer.next;
		}
		System.out.println(""fire! "" + counter);
		List<Obj> wrapper = new List<Obj>();
		Bullet shot = new Bullet(location, rotation, range, wrapper);
		wrapper.data = shot; wrapper.previous = pointer;
		pointer.next = wrapper;
	}
"
774,29d8187c-7399-4acf-90d0-48cab19018ac,"	public void accelerate(boolean acc)
	{
		accelerate = acc;
	}
"
775,279d1d31-e59d-4388-aa2b-63f0b65bafbd,"	public void collide(Obj hitter, int delta)
	{
		collided = true;
		if (hitter instanceof Asteroid)
		{
			// forces this object to move back a step
			CollisionChecker.backStep(this, 2*delta);
			
			// speed of the object you are colliding into
			float[] hSpeed = hitter.setSpeed(null);
			hSpeed[0] += velocity[0] / 2;
			hSpeed[1] += velocity [0] / 2;
			
			velocity[0] *= -1.0/2;
			velocity[1] *= -1.0/2;
		}
	}
"
776,37afc692-240d-49c6-af14-431deaea01fa,"	abstract public void draw(Graphics g);
"
777,4c4fbfbe-cf1b-49f1-88ed-7ca77821b50c,"	abstract public void update(int delta);
"
778,92571c6d-b24f-4698-9e40-74ea9b7c369a,"	public Shape shape()
	{
		return shape;
	}
"
779,d6960a48-e010-4edb-9659-2c732cdfff93,"	public float[] setSpeed(float[] speed) 
	{
		if (speed != null)
			velocity = speed;
		return velocity;
	}
"
780,74b280d2-4072-418d-8fd5-e879f085d882,"	abstract public void collide(Obj hitter, int delta);
"
781,4c38654b-aef3-4a47-8042-4183c8b93151,"	public Bullet(float[] location, float rotation, float range, List<Obj> inst)
	{
		width = 2f;
		hieght = 10f;

		points = makePoints(location, rotation);
		shape = new Polygon(points);
		this.rotation = rotation;
		this.range = range;
		speed = 30f;

		objInst = inst;
	}
"
782,5bac9a47-d7d3-4926-af95-6dff84b86be1,"	private float[] makePoints(float[] loc, float rotation)
	{
		float cos = Helper.cos(rotation);
		float sin = Helper.sin(rotation);
		float[] pts = new float[8];

		// lower left pt
		pts[0] = loc[0] - width/2 * sin;
		pts[1] = loc[1] + width/2 * cos;

		//upper left pt
		pts[2] = pts[0] + hieght * cos;
		pts[3] = pts[1] + hieght * sin;

		//upper right pt
		pts[4] = pts[2] + width * sin;
		pts[5] = pts[3] - width * cos;

		//lower right pt
		pts[6] = pts[4] - hieght * cos;
		pts[7] = pts[5] - hieght * sin;

		return pts;
	}
"
783,5df41079-040d-49ba-abbc-a7701e2258fa,"	public void update(int delta)
	{
		//  removes this bullet from the list if it has gone too far
		if (range <= 0)
		{
			objInst.remove();
		}

		float speed = this.speed * delta * .01f;
		range -= speed;

		float cos = Helper.cos(rotation);
		float sin = Helper.sin(rotation);
		for (int i = 0; i < 8; i += 2)
		{
			points[i] += speed*cos;
			points[i+1] += speed*sin;
		}
	}
"
784,e53cb440-1454-4df7-8c49-8321baf16854,"	@Override
	public void draw(Graphics g)
	{
		shape = new Polygon(points);
		g.setColor(Color.yellow);
		g.fill(shape);
		//		g.drawLine(points[0], points[1], points[2], points[3]);
	}
"
785,03902fb9-2f00-40e1-b003-5b10b0d8ca8a,"	public Shape shape()
	{
		return shape;
	}
"
786,912fd72f-505a-4ad7-9581-f7445ccc20e2,"	@Override
	public float[] setSpeed(float[] speed) {
		// TODO Auto-generated method stub
		return null;
	}
"
787,4c195d77-3430-4f43-97fe-e353a299b5f3,"	@Override
	public void collide(Obj hitter, int delta)
	{
		if (hitter instanceof Asteroid)
		{
			collided = true;
			objInst.remove();
		}
	}
"
788,52c0888d-6799-4a6b-8410-176cf3a71dea,"	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr = {6, 4, 8, 9, 3, 5, 12, 2, 7};
		quickSort(arr, 0, 8);
		display(arr);
	}
"
789,345f5ed5-d8e4-4a06-ae5c-8a0e1c1cbdf1,"	public static void quickSort(int arr[], int left, int right) {
	      int index = partition(arr, left, right);
	      if (left < index - 1)
	            quickSort(arr, left, index - 1);
	      if (index < right)
	            quickSort(arr, index, right);
	      
	}
"
790,c2e04e76-ea32-48fc-918b-52f9ef8bd02c,"	public static int partition(int arr[], int left, int right)
	{
	      int i = left, j = right;
	      int tmp;
	      int pivot = arr[(left + right) / 2];
	     
	      while (i <= j) {
	            while (arr[i] < pivot)
	                  i++;
	            while (arr[j] > pivot)
	                  j--;
	            if (i <= j) {
	                  tmp = arr[i];
	                  arr[i] = arr[j];
	                  arr[j] = tmp;
	                  i++;
	                  j--;
	            }
	      };
	      return i;
	}
"
791,07490d33-3fa6-4b35-8875-920cee9c1bce,"	public static void display(int[] data)
    {
        for(int i=0;i<data.length;i++)
        {
            System.out.print(data[i]);
            System.out.print("" "");
        }
    }
"
792,e5d18782-7241-4714-95cf-ea0e06e7cb5f,"	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr = {9,8,7,6,5,4,3,2,1,0};
		shellSort(arr);
		Util util = new Util();
		util.printArray(arr);
	}
"
793,cc4d5680-b444-4a0a-9ef4-32239421c7b8,"		public static void	shellSort(){
			int a[]={1,54,6,3,78,34,12,45,56,100};
			double d1=a.length;
			int temp=0;
			while(true){
				d1= d1/2;//Math.ceil(d1/2);
				int d=(int) d1;
				for(int x=0;x<d;x++){
					for(int i=x+d;i<a.length;i+=d){
						int j=i-d;
						temp=a[i];
						for(;j>=0&&temp<a[j];j-=d){
						a[j+d]=a[j];
						}
						a[j+d]=temp;
					}
				}
				if(d==1)
					break;
			}
			for(int i=0;i<a.length;i++)
				System.out.println(a[i]);
		}
"
794,95c3bdc8-1f87-45b9-bdb9-85e3480125a8,"	public static int[] shellSort(int[] arr){
		int n = arr.length;
		int d=n;
		while(true){
			d = d/2;
			for(int i=0; i<d; i++){
				for(int j=i+d; j<n; j+=d){
					int tmp = arr[j];
					int k=j-d;
					for( ; k>=0&&tmp<arr[k]; k-=d){
							arr[k+d] = arr[k];
					}
					arr[k+d] = tmp;
				}
			}
		if(d==1)
			break;
		}
		return arr;
	}
"
795,eef3db05-bd3a-4204-914f-04addb1029c7,"	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr = {9,6,7,3,5,1};
		bubbleSort(arr);
	}
"
796,2302bef2-e10b-4379-a51c-62ac8d1cd724,"	public static int[] bubbleSort(int[] arr){
		boolean flag = true;
		int n = arr.length;
		while(flag){
			for(int i=1; i<n; i++){
				if(arr[i-1] > arr[i]){
					int tmp = arr[i-1];
					arr[i-1] = arr[i];
					arr[i] = tmp;
				}
			}
			n--;
			if(n==1){
				flag=false;
			}
		}
		return arr;
	}
"
797,1cae5cbf-4824-4aea-be94-669f208d70eb,"	public void printArray(int[] arr){
		int n =arr.length;
		for(int i=0; i<n; i++){
			System.out.print(arr[i]+"","");
		}
		System.out.print(""\n"");
	}
"
798,b907a078-c5b0-4b58-b684-135c06f39756,"	public JoueurIA(String nom, Jeu partie)
	{
		super(nom, partie);
	}
"
799,7f93594a-d24f-449d-bfae-9e68f62440a7,"	public CartePlusDeux(String color, int value)
	{
		super(color, value);
		this.type = ""Carte +2"";
	}
"
800,578fb02e-88ff-4ca6-8556-d86f65915ffa,"	public String getColor() {
		return this.color;
	}
"
801,27e259d4-72ed-4b9c-9caf-2ef7f64ba642,"	public void setColor(String color) {
		this.color = color;
	}
"
802,34bbbe4f-e2aa-4949-bf3c-6be6f2eaf64c,"	public int getValue() {
		return value;
	}
"
803,af279ca4-10c1-41a4-b2e2-f2003006d5dd,"	public void setValue(int value) {
		this.value = value;
	}
"
804,352b4408-4100-4b23-9a77-40f70af97c86,"	public Talon()
	{
		cartes = new LinkedList<Card>();
	}
"
805,282da5a6-08b4-4d74-946d-d37bb8f5f225,"	public List<Card> getCartes() {
		return cartes;
	}
"
806,6b499bdd-ab3c-4dcb-9ae0-09af640e3ca6,"	public void setCartes(List<Card> cartes) {
		this.cartes = cartes;
	}
"
807,921f0ec1-a853-455a-a948-9b809960cc0e,"	public CartePasseTour(String color, int value)
	{
		super(color, value);
//		this.color = color;
//		this.value = value;
		this.type = ""Carte Passe ton tour"";
	}
"
808,94c8ba00-7ea2-44b0-a760-7ed43be1b692,"	public String getColor() {
		return this.color;
	}
"
809,8cba3297-0ca1-4f9e-b4c8-8d2f063cde8c,"	public void setColor(String color) {
		this.color = color;
	}
"
810,29639e53-c380-4dd3-ae48-7ba59945747a,"	public int getValue() {
		return value;
	}
"
811,f5a0758f-ac39-4592-8f7e-0c9ad27dc8fe,"	public void setValue(int value) {
		this.value = value;
	}
"
812,a52dd456-d446-4a3c-9ed4-220d1220308b,"	public CarteInverse(String color, int value)
	{
		super(color, value);
//		this.color = color;
//		this.value = value;
		this.type = ""Carte Inverse"";
	}
"
813,83ed6ee6-5381-4c5a-9c29-c0f3d42a0cc8,"	public String getColor() {
		return this.color;
	}
"
814,5b9e6e61-a6b8-49ca-9b20-73d0e44107ed,"	public void setColor(String color) {
		this.color = color;
	}
"
815,2096f2a6-53bf-4ebb-b5d8-7040db832518,"	public int getValue() {
		return value;
	}
"
816,d6be2591-a263-4af4-aa89-f0bdbfdce058,"	public void setValue(int value) {
		this.value = value;
	}
"
817,84e798c4-2873-4d20-b90b-8608d2ec607a,"	public CarteCouleur(String color, int value)
	{
		super(color, value);
//		this.color = color;
//		this.value = value;
		this.type = ""Carte normale"";
	}
"
818,dada71e6-c285-42bf-8a03-42928d7dd08a,"	public String getColor() {
		return this.color;
	}
"
819,cf1a047c-7a6c-4b0b-a0c6-da070374bfd0,"	public void setColor(String color) {
		this.color = color;
	}
"
820,47039922-7b55-4805-8f77-ebc1c375da34,"	public int getValue() {
		return value;
	}
"
821,a2b53ca3-2948-4b39-9df1-661a21dfe697,"	public void setValue(int value) {
		this.value = value;
	}
"
822,e6a774c0-f5df-4459-9d7a-9755d42e5e0e,"	public CarteJoker()
	{
		super(""Black"", 50);
		this.type = ""Carte Joker"";
	}
"
823,6e6d700c-5c71-4a9b-bc47-01e7481c5519,"	public String getColor() {
		return this.color;
	}
"
824,64487589-e7ae-4725-9da5-760febfedc17,"	public void setColor(String color) {
		this.color = color;
	}
"
825,bb8bcdaf-ccc5-45b0-80d4-d98ca5edb825,"	public int getValue() {
		return value;
	}
"
826,c571cab1-b8f4-4c78-b542-aaa69daf89c1,"	public void setValue(int value) {
		this.value = value;
	}
"
827,84f0fc4a-4827-4de7-975d-cd579f5ff0a2,"	public static void main(String[] args) 
	{
		int nombreHumain;
		int nombreJoueur;
		Scanner sc = new Scanner(System.in);
//		Scanner sc2 = new Scanner(System.in);

		Jeu partieDeUNO;
		
		System.out.print(""Bienvenue dans le jeu de UNO\n\n"");
		
		System.out.print(""Combien de joueur (humain + IA) ?"");
		nombreJoueur = sc.nextInt();
		System.out.print(""Combien de joueur humain ?"");
		nombreHumain = sc.nextInt();
//		System.out.print(""String ?\n"");
//		String s  = sc2.nextLine();
		//sc.close();
//		sc2.close();
		
		
//		System.out.println(s + ""\n\n"");
		
		
		partieDeUNO = new Jeu(nombreJoueur, nombreHumain);
		partieDeUNO.lancerManche();
	}
"
828,5eccdebe-9c40-4910-9c30-198ef8d83292,"	public Joueur(String nom, Jeu partie)
	{
		poigne = new LinkedList<Card>();
		score = 0;
		this.nom = nom;
		this.partie = partie;
		aDitUNO = false;
	}
"
829,8734b126-a57f-442a-aff2-e651599df444,"	public LinkedList getPoigne() {
		return poigne;
	}
"
830,0f43d399-5202-4b37-b7e5-e2e8a1f7ff80,"	public void setPoigne(LinkedList poigne) {
		this.poigne = poigne;
	}
"
831,a169ebe8-b73e-441f-b847-71dbe35ce8a6,"	public int getScore() {
		return score;
	}
"
832,4e98e2a6-d97d-4574-ad8e-ab2ff91be82c,"	public void setScore(int score) {
		this.score = score;
	}
"
833,3f39a3a9-14b7-4382-8234-1ec15dc1eadd,"	public String getNom() {
		return nom;
	}
"
834,defeb0b7-a4b3-46fd-a37b-5bc1dea533c7,"	public void afficherCartes()
	{
		int i = 0;
		ListIterator<Card> li = poigne.listIterator();
		
		while(li.hasNext())
		{
			System.out.println(""Carte No"" + i);
			((Card)(li.next())).affichageCarte();
			i++;
		}
	}
"
835,80b167ec-3705-4c19-af46-871c87c8adf2,"	public boolean estJouable(Card carte)
	{
		if((partie.getTalon().getCartes().get(0).getColor() == carte.getColor())||
				(partie.getTalon().getCartes().get(0).getValue()== carte.getValue()))
			return true;
		
		if (carte.getColor() == ""black"")
			return true;
		
		return false;
	}
"
836,15a36795-bfc0-4bc9-b024-bf4f4873472c,"	public void affichageTexte()
	{
		System.out.print(""Joueur : "" + nom +  ""\n"" );
		afficherCartes();
	}
"
837,6fd6e43e-3203-4c74-8b87-635deefe04f8,"	public void jouer()
	{
		int reponse;
		Scanner sc = new Scanner(System.in);
		System.out.println(""ca marche pas!\n"");
		System.out.println(""Vos cartes : \n"");
		System.out.println(""\nQuelle carte souhaitez vous jouer ?\n"");
		reponse = sc.nextInt();
		
		
	}
"
838,a125c843-e1f4-4561-8fd6-130434b29076,"	public String getColor() {
		return color;
	}
"
839,7d3366fb-7bb4-463a-b6b0-493946a46fbe,"	public void setColor(String color) {
		this.color = color;
	}
"
840,174c2e1d-b433-47b9-bfee-a97c50e3f448,"	public int getValue() {
		return value;
	}
"
841,6f48e1d3-edbb-4bb7-8065-02f9e7d84d8a,"	public void setValue(int value) {
		this.value = value;
	}
"
842,80deeb57-3991-4876-a766-f46023ebb9b8,"	public Card(String color, int value)
	{
		this.color = color;
		this.value = value;
	}
"
843,8c35d1b3-0774-48a2-8992-4c7b3c83af93,"	public void affichageCarte()
	{
		System.out.print(type + "" - "" + color + "" - "" + value + ""\n"");
	}
"
844,9c8bdefc-43ea-4382-bd5d-b7ec7af07258,"	public JoueurHumain(String nom, Jeu partie) 
	{
		super(nom, partie);
	}
"
845,2d95de77-66fe-4fc7-b623-19abfbafc7b8,"	public void selectionnerCarte()
	{
		affichageTexte();
	}
"
846,c0e1b985-c93f-4dca-bb49-b9d9021d1ce9,"	public boolean poserCarte(int index)
	{
		if(estJouable(poigne.get(index)));
		{
			//partie.setPioche(pioche);
			
			return false;
		}
	}
"
847,027a4c9b-bea8-40b6-a34d-356ccf2f7a17,"	public void jouer()
	{
		Scanner sc = new Scanner(System.in);
		
		int reponse;
		
		System.out.println(""Quelle action voulez vous effectuer ?\n"");
		System.out.println(""- 1 ) Jouer une carte ?\n"");
		System.out.println(""- 2 ) Piocher une carte \n"");
		System.out.println(""- 3 ) Dire UNO \n"");
		System.out.println(""- 4 ) Dire contre-UNO \n"");
		
		reponse = sc.nextInt();
		
		switch(reponse)
		{
			case(1) :
				System.out.println(""- 1 ) Quelle carte souhaitez vous jouer ?\n"");
				afficherCartes();
				Scanner sc2 = new Scanner(System.in);
//				while(!poserCarte(sc2.next()))
//				{
//				}
//				
				
			case(2):
				poigne.add((Card)(partie.getPioche().getToutesLesCartes().poll()));
				
			case(3):
				aDitUNO = true;
				
		}
		
		
		
	}
"
848,4be121f8-efa9-4957-b9bf-e4d26dcec06a,"	public CarteSuperJoker()
	{
		super(""Black"", 50);
		this.type = ""Carte +4"";
	}
"
849,b9d4c50e-4743-423e-b0be-2fc9abd882dd,"	public String getColor() {
		return this.color;
	}
"
850,70bef6f0-5937-413b-aab5-1d0af9a07483,"	public void setColor(String color) {
		this.color = color;
	}
"
851,373f5e19-abd2-4fe9-8485-3bff23630c75,"	public int getValue() {
		return value;
	}
"
852,193bafe6-25ab-4d47-8a75-76f8974989c1,"	public void setValue(int value) {
		this.value = value;
	}
"
853,a3d2400e-721f-4e56-918a-cb930b15125d,"	public GenericStack_array(int size){
		tarray = (T[]) new Object[size];
	}
"
854,191b0c43-2c6c-4a83-9fbd-3f9c0eb96b2c,"	public void push(T item){
		if(position == tarray.length){
			System.out.println(""array size increasing"");
			T[] temparray = (T[]) new Object[(tarray.length*2)]; 
			for(int i=0; i<position; i++){
				temparray[i] = tarray[i];
			}
			tarray = temparray;
		}
		tarray[position] = item;
		position++;
	}
"
855,da1566a3-f7f6-4e9c-8b55-1dfd71700d7d,"	public Object pop(){
		position--;
		Object result = tarray[position];
		
		if(position < (tarray.length/4)){
			System.out.println(""array size decreasing"");
			T[] temparray = (T[]) new Object[(tarray.length/2)]; 
			for(int i=0; i<position; i++){
				temparray[i] = tarray[i];
			}
			tarray = temparray;
		}
		return result;
	}
"
856,9385fdb4-b158-413a-9e76-82d72019ed3d,"	public boolean isEmpty(){
		if(position == 0)
			return true;
		return false;
	}
"
857,41917da2-93e3-4035-80fc-cd8b2408fd35,"	public int size(){
		return position;
	}
"
858,2eca5c23-df64-4ad1-85ee-00c422190f3d,"		public Node(T item, Node next){
			this.item = item;
			this.next = next;
		}
"
859,37915ed2-1b44-4ce3-ac29-a5d1d1fac0c5,"	public void push(T stringarray){
		first = new Node(stringarray,first);
		N++;
	}
"
860,90ab7eba-a7a0-48c7-93d5-689d1e8bb133,"	public T pop(){
		T result = first.item;
		first = first.next;
		N--;
		return result;
	}
"
861,46160462-e2b9-4db9-bfd6-4dc4113d77d5,"	public boolean isEmpty(){
		if(N==0)
			return true;
		return false;
	}
"
862,b82ad90d-6af3-45cc-9c8c-75ff2f54ce60,"	public int size(){
		return N;
	}
"
863,2ecce73b-096c-4d13-86f4-320d12024866,"	public static void main(String[] args) {
		object_array();
		System.out.println(""###########################"");
		object_linkedlist();
	}
"
864,3b0a73d9-3ebf-4425-bfc2-d1497d3c63bd,"	private static void object_array(){
		int testsize = 11;
		//Integer part
		
		GenericStack_array<Integer> intarray = new GenericStack_array<Integer>(testsize);		
		
		for(int i = 0; i < testsize; i++){
			intarray.push(i);
			System.out.println(""position = ""+intarray.position+"" ; Value = ""+i);
		}
		
		System.out.println(""-------------------------------------"");
		
		for(int i = 0; i < testsize; i++){
			Object result = intarray.pop();
			System.out.println(""position = ""+intarray.position+"" ; Value = ""+result);
		}
		
		
		System.out.println(""##-------------------------------------##"");
		//String part
		
		GenericStack_array<String> stringarray = new GenericStack_array<String>(testsize);		
		
		for(int i = 0; i < testsize; i++){
			stringarray.push(""string""+i);
			System.out.println(""position = ""+stringarray.position+"" ; Value = ""+i);
		}
		
		System.out.println(""-------------------------------------"");
		
		for(int i = 0; i < testsize; i++){
			Object result = stringarray.pop();
			System.out.println(""position = ""+stringarray.position+"" ; Value = ""+result);
		}
		
	}
"
865,c923f5f3-abd1-43d3-8e67-7eda52051de8,"	private static void object_linkedlist(){
		//Integer part
		
		int[] intarray = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17};
		GenericStack_linkedlist<Integer> intnode = new GenericStack_linkedlist<Integer>();
		
		for(int i=0; i<intarray.length; i++){
			System.out.println(""Node item = ""+intnode.N+"" ;"");
			intnode.push(intarray[i]);
		}
		
		System.out.println(""-------------------------------------"");
		
		for(int i=0; i<intarray.length; i++){
			Object result = intnode.pop();
			System.out.println(""Node item = ""+intnode.N+"" ; Value = ""+result);
		}
		
		System.out.println(""##-------------------------------------##"");
		
		//String part
		
		String[] stringarray = {""test0"",""test1""};
		GenericStack_linkedlist<String> stringnode = new GenericStack_linkedlist<String>();
		
		for(int i=0; i<stringarray.length; i++){
			System.out.println(""Node item = ""+stringnode.N+"" ;"");
			stringnode.push(stringarray[i]);
		}
		
		System.out.println(""-------------------------------------"");
		
		for(int i=0; i<stringarray.length; i++){
			Object result = stringnode.pop();
			System.out.println(""Node item = ""+stringnode.N+"" ; Value = ""+result);
		}
	}
"
866,d3c58b36-2483-4381-aec9-7f2adafbe399,"    public static void main(String [] args) {


        try {
            byte[] encoded = Files.readAllBytes(Paths.get(""textfile.txt""));
            filestring = new String(encoded,Charset.defaultCharset());
            words = filestring.split(""[-!~\\s]+"");

            for(String word : words){
                uniquewords.add(word);
            }

            System.out.println(""Number of Words: ""+uniquewords.size());
        }catch(Exception e){
            e.printStackTrace();
        }
    }
"
867,668e201c-5b0d-4a7b-8d14-ebb253ec968f,"    public static void main(String [] args) {

        try {
            byte[] encoded = Files.readAllBytes(Paths.get(""textfile.txt""));
            filestring = new String(encoded, Charset.defaultCharset());
            words = filestring.split(""[-!~\\s]+"");

            for(String word : words){
                if(uniquewords.containsKey(word)){
                    uniquewords.put(word,uniquewords.get(word).intValue()+1);
                }else{
                    uniquewords.put(word,1);
                }
            }

            System.out.println(""Number of Words: ""+uniquewords.size());
            Iterator it = uniquewords.entrySet().iterator();
            while(it.hasNext()){
                Map.Entry pairs = (Map.Entry) it.next();
                System.out.println(pairs.getKey() + "" "" + pairs.getValue());
                it.remove();
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
"
868,2710aceb-a50e-40d5-b5c5-8ba19a27f401,"    public static void main(String[] args) {
        List<String> numberslist = new ArrayList<String>(Arrays.asList(args));
        Collections.sort(numberslist);

        System.out.println(""Maximum: ""+maximum(numberslist));
        System.out.println(""Median: ""+median(numberslist));
        System.out.println(""StandardDeviation: ""+standard_deviation(numberslist));
    }
"
869,bcdf57ec-3ae8-42b9-a5c4-744983cb3cd3,"    private static String maximum(List<String> numberslist){
        return numberslist.get(numberslist.size() - 1);
    }
"
870,cd6bf518-8a27-4bdb-a512-bb6686851df2,"    private static String median(List<String> numberslist){
        String result = null;
        if(numberslist.size()%2==0){
            int middle = numberslist.size() / 2;
            int middleright = Integer.parseInt(numberslist.get(middle));
            int middleleft = Integer.parseInt(numberslist.get(middle - 1));

            result = Integer.toString((middleright + middleleft)/2);
        }else{
            result = numberslist.get(numberslist.size()/2);
        }
        return result;
    }
"
871,80ff01a4-62f7-47eb-bf6b-ccc9d31aa145,"    private static String standard_deviation(List<String> numberslist){
        int total = 0;
        for(int i=0; i<numberslist.size(); i++){
            total += Integer.parseInt(numberslist.get(i));
        }
        //wrong?
        String result = Integer.toString(total/numberslist.size());
        return result;
    }
"
872,88c88c36-5ddc-46d9-89e7-4576c515710d,"    public static void main(String[] args) throws IOException, InterruptedException{
        String searchterm = null;
        int snippetlength = 2;

        if(args.length > 1){
            searchterm = args[0];
            if(Integer.parseInt(args[1])>=0)
                snippetlength = Integer.parseInt(args[1]);
        }else{
            System.out.println(""Not enough arguments entered! Usage: Search Term, Snippet "");
            return;
        }

        System.err.println("">WARNING!!, results not 'trustworthy'"");
//        System.out.println("">>ArrayList"");
//        for(int i = 0; i < RUN_TIMES; i++) {
//            double processtime = algorithmList(new ArrayList<String>(), 2^i, searchterm, snippetlength);
//            System.out.println((2^i) + ""\t"" + processtime);
//        }
//        System.out.println("">>LinkedList"");
//        for(int i = 0; i < RUN_TIMES; i++) {
//            double processtime = algorithmList(new LinkedList<String>(), 2^i, searchterm, snippetlength);
//            System.out.println(""plot("" + (2^i) + "","" + processtime + "",'-or');"");
//        }
        System.out.println("">>Vector"");
        for(int i = 0; i < RUN_TIMES; i++) {
            double processtime = algorithmList(new Vector<String>(), 2^i, searchterm, snippetlength);
            System.out.println((2^i) + ""\t"" + processtime);
        }
    }
"
873,46cf2cd3-7830-4e73-8273-cbec052331ca,"    public static double algorithmList(List<String> wordlist, int times_file, String searchterm, int snippetlength) throws IOException{
        /*
         *
         */
        Stopwatch timer = new Stopwatch();
        for(int i = 0; i < times_file; i++){
            BufferedReader br = new BufferedReader(new FileReader(FILENAME));
            String line = null;
            while ((line = br.readLine()) != null) {
                for (String word : line.split(""[-!~\\s]+"")) {
                    wordlist.add(word);
                }
            }
        }
        //double time = timer.elapsedTime();
        //System.out.print("">>>> "" + wordlist.getClass().getName());
        //System.out.printf("" : [Words processed:  %d |Time elapsed:  %.3f ]\n"",wordlist.size(),time);

        /*
         * N
         */

        int position = 0;
        int results =0;
        //Stopwatch timer2 = new Stopwatch();
        for(String word : wordlist) {
            if (word.equals(searchterm)) {
                StringBuilder temp = new StringBuilder();
                for (int i = (position - snippetlength); i < (position + snippetlength + 1); i++) {
                    temp.append(wordlist.get(i)); //[http://programcreek.com/2013/03/arraylist-vs-linkedlist-vs-vector/]
                    temp.append("" "");
                }
                //System.out.println("">> ""+ temp);
                results++;
            }
            position++;
        }
        //double time2 = timer2.elapsedTime();
        return timer.elapsedTime();
        //System.out.printf("">> algorithm finished: [Results found: %d |Time elapsed: %.3f]\n\n"",results,time2);
    }
"
874,4ef48819-d239-4d11-95d9-5e60d01eabe5,"    public static void main(String[] args) {
        String searchterm = ""a-wringing"";
        try {
            Stopwatch timer = new Stopwatch();
            LinearProbingHashST<String, Integer> st = new LinearProbingHashST<String, Integer>();

            byte[] encoded = Files.readAllBytes(Paths.get(""dickens.txt""));
            String filestring = new String(encoded, Charset.defaultCharset());
            String[] words = filestring.split(""[!~\\s]+"");

            for(int i = 0; i < words.length; i++){
                st.put(words[i],i+1);
            }System.out.println(""size: ""+st.size());
            double time = timer.elapsedTime();

            Stopwatch timer2 = new Stopwatch();
            System.out.println(""Result: ""+st.get(searchterm)+"" ""+searchterm);
            double time2 = timer2.elapsedTime();
            System.out.printf(""Processing file: %.3f sec| Get result: %.3f sec"",time,time2);

        }catch(Exception e){
            e.printStackTrace();
        }
    }
"
875,c5684606-b3ee-47e8-b590-3aa2fe5933ad,"    public static void main(String[] args) {
        String searchterm = ""a-wringing"";
        try {
            Stopwatch timer = new Stopwatch();
            SeparateChainingHashST<String, Integer> st = new SeparateChainingHashST<String, Integer>();

            byte[] encoded = Files.readAllBytes(Paths.get(""dickens.txt""));
            String filestring = new String(encoded, Charset.defaultCharset());
            String[] words = filestring.split(""[!~\\s]+"");

            for(int i = 0; i < words.length; i++){
                st.put(words[i],i+1);
            }System.out.println(""size: ""+st.size());
            double time = timer.elapsedTime();

            Stopwatch timer2 = new Stopwatch();
            System.out.println(""Result: ""+st.get(searchterm)+"" ""+searchterm);
            double time2 = timer2.elapsedTime();
            System.out.printf(""Processing file: %.3f sec| Get result: %.3f sec"",time,time2);

        }catch(Exception e){
            e.printStackTrace();
        }
    }
"
876,cfe99210-0c22-4fb9-aa98-f43f58a2c49e,"		public Node(int item, Node next){
			this.item = item;
			this.next = next;
		}
"
877,7ea08208-e637-4e9f-be52-9325fa7f3f97,"	public void push(int item){
		first = new Node(item,first);
		N++;
	}
"
878,e48570d4-a1bc-4b1e-8c07-401b3ddebfc8,"	public int pop(){
		int result = first.item;
		first = first.next;
		N--;
		return result;
	}
"
879,40a8e345-35e4-4b9c-a968-97aace3d0aff,"	public boolean isEmpty(){
		if(N==0)
			return true;
		return false;
	}
"
880,802b3a4d-9cf9-403d-87bb-2268d3e78d1f,"	public int size(){
		return N;
	}
"
881,0e9be8f1-8ae6-4e78-aa91-92d5bdf4d411,"	public static void main(String[] args) {
		ints_array();
		ints_linkedlist();
	}
"
882,5a19f23e-ceb3-4b94-8bc1-63e2a97add33,"	private static void ints_array(){
		StackOfInts_array intarray = new StackOfInts_array(testsize);		
		
		for(int i = 0; i < testsize; i++){
			intarray.push(i);
			System.out.println(""position = ""+intarray.position+"" ; Value = ""+i);
		}
		
		System.out.println(""-------------------------------------"");
		
		for(int i = 0; i < testsize; i++){
			int result = intarray.pop();
			System.out.println(""position = ""+intarray.position+"" ; Value = ""+result);
		}
	}
"
883,56e6934c-a6da-40e1-98a2-dbb8b609c263,"	private static void ints_linkedlist(){
		int[] intarray = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17};
		StackOfInts_linkedlist intnode = new StackOfInts_linkedlist();
		
		for(int i=0; i<intarray.length; i++){
			System.out.println(""Node item = ""+intnode.N+"" ;"");
			intnode.push(intarray[i]);
		}
		
		System.out.println(""-------------------------------------"");
		
		for(int i=0; i<intarray.length; i++){
			int result = intnode.pop();
			System.out.println(""Node item = ""+intnode.N+"" ; Value = ""+result);
		}
	}
"
884,1037d913-682b-4263-bae6-92481fa6b3c6,"	public StackOfInts_array(int size){
		intarray = new int[size];
	}
"
885,b2f7d4f5-11f5-4378-9587-f7f2df611aa0,"	public void push(int item){
		if(position == intarray.length){
			System.out.println(""array size increasing"");
			int[] temparray = new int[(intarray.length*2)]; 
			for(int i=0; i<position; i++){
				temparray[i] = intarray[i];
			}
			intarray = temparray;
		}
		intarray[position] = item;
		position++;
	}
"
886,25aa4f06-04f9-4527-b4e0-2e299e7fff38,"	public int pop(){
		position--;
		int result = intarray[position];
		
		if(position < (intarray.length/4)){
			System.out.println(""array size decreasing"");
			int[] temparray = new int[(intarray.length/2)]; 
			for(int i=0; i<position; i++){
				temparray[i] = intarray[i];
			}
			intarray = temparray;
		}
		return result;
	}
"
887,29c4d7fc-f243-4698-9332-c645cd1e3195,"	public boolean isEmpty(){
		if(position == 0)
			return true;
		return false;
	}
"
888,c43403ad-272f-4901-8cd4-d4137f96edf5,"	public int size(){
		return position;
	}
"
889,638924bb-8506-47e8-8d34-ed9ee9c3f10b,"	public Yhdistelma(Jatsikasi k){
		super(k);
		pisteet = 0;
		nimi = null;
		Arrays.sort(nopat); // Järjestetään nopat nousevaan järjestykseen
	}
"
890,4b3a2cc5-783d-4143-8c77-e06f11eb3ce2,"	public Yhdistelma(Noppa[] n, int a, Jatsiyhdistelma b){
		super(n);
		pisteet = a;
		nimi = b;
		Arrays.sort(nopat); // Järjestetään nopat nousevaan järjestykseen
	}
"
891,09a1da4d-a5b1-4c9d-85c4-cd23121a413d,"	public ArrayList<Yhdistelma> getYhdistelmat(){
		ArrayList<Yhdistelma> a = new ArrayList<Yhdistelma>();
		int points=0;
		if(ykkoset()){
			for(int i=0; i<5; i++){
				if (nopat[i].getValue()==1){
					points++;
				}
			}
			a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.YKKOSET));
			points=0;
		}
		if(kakkoset()){
			for(int i=0; i<5; i++){
				if (nopat[i].getValue()==2){
					points++;
				}
			}
			points = points*2;
			a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.KAKKOSET));
			points=0;
		}
		if(kolmoset()){
			for(int i=0; i<5; i++){
				if (nopat[i].getValue()==3){
					points++;
				}
			}
			points = points*3;
			a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.KOLMOSET));
			points=0;
		}
		if(neloset()){
			for(int i=0; i<5; i++){
				if (nopat[i].getValue()==4){
					points++;
				}
			}
			points = points*4;
			a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.NELOSET));
			points=0;
		}
		if(viitoset()){
			for(int i=0; i<5; i++){
				if (nopat[i].getValue()==5){
					points++;
				}
			}
			points = points*5;
			a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.VIITOSET));
			points=0;
		}
		if(kuutoset()){
			for(int i=0; i<5; i++){
				if (nopat[i].getValue()==6){
					points++;
				}
			}
			points = points*6;
			a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.KUUTOSET));
			points=0;
		}
		if(kaksiParia()){
			int ind=0;
			int tmpPoints;
			for(int i=0; i<2; i++){
				if(nopat[i].getValue()==nopat[i+1].getValue()){
					ind = i+2;
					points = nopat[i].getValue() + nopat[i+1].getValue();
					break;
				}
			}
			a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.PARI)); // add ensimmäinen pari
			tmpPoints=points;
			points=0;
			for(int i=ind; i<4; i++){
				if(nopat[i].getValue()==nopat[i+1].getValue()){
					ind = i+2;
					points = nopat[i].getValue() + nopat[i+1].getValue();
				}
			}
			a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.PARI)); // add toinen pari
			tmpPoints=tmpPoints+points;
			points=0;
			a.add(new Yhdistelma(nopat, tmpPoints, Jatsiyhdistelma.KAKSI_PARIA)); // add kaksi paria
		}
		else if(pari() || kolmeSamaa() || neljaSamaa()){ // Löytyy vain yksi pari
			for(int i=0; i<4; i++){
				if (nopat[i].getValue()==nopat[i+1].getValue()){
					points = nopat[i].getValue() + nopat[i+1].getValue();
				}
			}
			a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.PARI));
			points=0;
		}
		if(kolmeSamaa() || neljaSamaa()){
			for(int i=0; i<3; i++){
				if (nopat[i].getValue()==nopat[i+1].getValue() && nopat[i].getValue()==nopat[i+2].getValue()){
					points = nopat[i].getValue() + nopat[i+1].getValue() + nopat[i+2].getValue();
				}
			}
			a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.KOLME_SAMAA));
			points=0;
		}
		if(neljaSamaa()){
			for(int i=0; i<2; i++){
				if (nopat[i].getValue()==nopat[i+1].getValue() && nopat[i].getValue()==nopat[i+2].getValue() && nopat[i].getValue()==nopat[i+3].getValue()){
					points = nopat[i].getValue() + nopat[i+1].getValue() + nopat[i+2].getValue() + nopat[i+3].getValue();
				}
			}
			a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.NELJA_SAMAA));
			points=0;
		}
		if(pikkusuora()){
			a.add(new Yhdistelma(nopat, 15, Jatsiyhdistelma.PIKKUSUORA));
		}
		if(isosuora()){
			a.add(new Yhdistelma(nopat, 20, Jatsiyhdistelma.ISOSUORA));
		}
		if(tayskasi()){
			for(int i=0; i<5; i++){
				points=points+nopat[i].getValue();
			}
			a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.TAYSKASI));
			points=0;
		}
		// Sattuma
		for(int i=0; i<5; i++){
			points=points+nopat[i].getValue();
		}
		a.add(new Yhdistelma(nopat, points, Jatsiyhdistelma.SATTUMA));
		points=0;
		if(yatzy()){
			a.add(new Yhdistelma(nopat, 50, Jatsiyhdistelma.YATZY));
		}
		return a;
	}
"
892,bd3d6b7d-8b11-4ccf-a7f6-a84664e1e2a1,"	public boolean ykkoset(){
		if(nopat[0].getValue()==1){
			return true;
		}
		return false;
	}
"
893,33b066e5-8d76-4685-9c02-602cc91b2dd8,"	public boolean kakkoset(){
		for(int i=0; i<5; i++){
			if(nopat[i].getValue()==2){
				return true;
			}
		}
		return false;
	}
"
894,9509759c-b38d-4c83-b46b-a39c7a98835c,"	public boolean kolmoset(){
		for(int i=0; i<5; i++){
			if(nopat[i].getValue()==3){
				return true;
			}
		}
		return false;
	}
"
895,6b93f068-9fdb-4015-86ae-adabcd68c0d2,"	public boolean neloset(){
		for(int i=0; i<5; i++){
			if(nopat[i].getValue()==4){
				return true;
			}
		}
		return false;
	}
"
896,2efaaac1-54e0-4ed6-a24d-50443556c4a5,"	public boolean viitoset(){
		for(int i=0; i<5; i++){
			if(nopat[i].getValue()==5){
				return true;
			}
		}
		return false;
	}
"
897,b3e3da39-d044-4a5b-bdf8-9de0a285777c,"	public boolean kuutoset(){
		for(int i=0; i<5; i++){
			if(nopat[i].getValue()==6){
				return true;
			}
		}
		return false;
	}
"
898,fbc4a07f-59d7-43ea-9c44-1c3c17d3ad5e,"	public boolean pari(){
		for(int i=0; i<4; i++){
			if(nopat[i].getValue()==nopat[i+1].getValue()){
				return true;
			}
		}
		return false;
	}
"
899,992ac616-147d-407d-b84f-d9be58ad4f24,"	public boolean kaksiParia(){
		int count = 0;
		for(int i=0; i<4; i++){
			if(nopat[i].getValue()==nopat[i+1].getValue()){
				count++;
				i++;
			}
		}
		if(count==2){
			return true;
		}
		return false;
	}
"
900,71582ea8-5b54-4c5d-9048-d8d83d0f07d8,"	public boolean kolmeSamaa(){
		for(int i=0; i<3; i++){
			if(nopat[i].getValue()==nopat[i+2].getValue()){
				return true;
			}
		}
		return false;
	}
"
901,699f5afa-2d88-4228-a4e1-879e04e503bc,"	public boolean neljaSamaa(){
		for(int i=0; i<2; i++){
			if(nopat[i].getValue()==nopat[i+3].getValue()){
				return true;
			}
		}
		return false;
	}
"
902,0f7ac481-9eba-4153-b7b6-b4fb724a5874,"	public boolean pikkusuora(){
		for(int i=0; i<5; i++){
			if(nopat[i].getValue()!=i+1){
				return false;
			}
		}
		return true;
	}
"
903,3e824cd1-384b-467e-a9c4-3d46b9953852,"	public boolean isosuora(){
		for(int i=0; i<5; i++){
			if(nopat[i].getValue()!=i+2){
				return false;
			}
		}
		return true;
	}
"
904,f6ca0764-941a-41cd-801b-553ab653c9c6,"	public boolean tayskasi(){
		if(nopat[0].getValue()==nopat[1].getValue()&&nopat[2].getValue()==nopat[4].getValue()){
			return true;
		}
		if(nopat[0].getValue()==nopat[2].getValue()&&nopat[3].getValue()==nopat[4].getValue()){
			return true;
		}
		return false;
	}
"
905,392daec4-f090-452a-8139-a990c5cabc78,"	public boolean yatzy(){
		for(int i=1; i<5; i++){
			if(nopat[0].getValue()!=nopat[i].getValue()){
				return false;
			}
		}
		return true;
	}
"
906,297c802c-16a7-47f6-9a40-52402e8e02b8,"	public int getPisteet(){
		return pisteet;
	}
"
907,c3a59099-d107-4c96-8ffb-b8b9bfc1c258,"	public void setPisteet(int a){
		pisteet=a;
	}
"
908,0e312884-0f44-423b-8590-4013cd752e29,"	public Jatsiyhdistelma getNimi(){
		return nimi;
	}
"
909,5557b1ba-6f0d-4ff6-9f0f-45b4d844b1c1,"	public void setNimi(Jatsiyhdistelma y){
		nimi = y;
	}
"
910,1588c0f7-4376-4efb-9356-e4f88a06f2d0,"	public int compareTo(Yhdistelma o) {
		return pisteet-o.getPisteet();
	}
"
911,a54dadb0-235a-4de3-9098-c3abc823c784,"    public run() {
    	lock=true;
    	pelaajat = new ArrayList<Pelaaja>();
    	pelaajat.add(new Pelaaja(""Pelaaja 1""));
    	pelaajat.add(new Pelaaja(""Pelaaja 2""));
    	currentPelaaja=0;
    	heitot=0;
    	load();
    	JLabel tausta =new JLabel(new ImageIcon(""tausta.png""));
    	tausta.setLayout(null);
    	
    	vaihto = new JButton(""Heita"");
    	vaihto.setBounds(435,405,150,40);
    	vaihto.addMouseListener(
    			
    			
    			new MouseListener () {
  		        public void actionPerformed(Action tapahtuma) {
  		        
  		        }
  		        
 					@Override
 					public void mouseClicked(MouseEvent arg0) {
 						if(heitot<2){ // Heittoja jäljellä
 							heitot++;
 							otsikko.setText(pelaajat.get(currentPelaaja).getNimi()+""   heitot: "" + (3-heitot));
 							pelaajat.get(currentPelaaja).heita();
 							nappi1.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[0].getImage())));
 							nappi2.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[1].getImage())));
 							nappi3.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[2].getImage())));
 							nappi4.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[3].getImage())));
 							nappi5.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[4].getImage())));
 						}
 						else if(heitot==2){ // Viimeinen heitto
 							heitot++;
 							otsikko.setText(pelaajat.get(currentPelaaja).getNimi()+""   heitot: "" + (3-heitot));
 							pelaajat.get(currentPelaaja).heita();
 							pelaajat.get(currentPelaaja).getKasi().unlock(); // Avataan lukitus nopista
 							nappi1.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[0].getImage())));
 							nappi2.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[1].getImage())));
 							nappi3.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[2].getImage())));
 							nappi4.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[3].getImage())));
 							nappi5.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[4].getImage())));
 							vaihto.setText(""Vaihda pelaajaa"");
 							yhdistelmat=pelaajat.get(currentPelaaja).mahdollisetYhdistelmat(); // Pisteitä tuottavat yhdistelmät
 							yhdistelmat.addAll(pelaajat.get(currentPelaaja).yliviivattavat());	// Yliviivattavat
 							yhdistelmaRivi.setText(""Valitse:""+""\n""+""\n""+pelaajat.get(currentPelaaja).mahdollisetYhdistelmatToString());
 							otsikko.setText(""Syota Komento ja paina enter"");
 						}
 						else { // Heitot käytetty
 							if(!lock){
 								if(currentPelaaja==1){
 	 								currentPelaaja=0;
 	 							}
 	 							else{
 	 								currentPelaaja=1;
 	 							}
 	 							kentta.setText(""""); // Tyhjennetään kenttä
 	 							yhdistelmaRivi.setText(""Valitse:"");
 	 							heitot=0;
 	 							otsikko.setText(pelaajat.get(currentPelaaja).getNimi()+""   heitot: "" + (3-heitot));
 	 							vaihto.setText(""Heita"");
 	 							if(vihkoTaynna()){ // Peli loppu
 	 								clip.stop();
 	 								clip.close();
 	 								music(""Victory.wav"");
 	 								System.out.println(""Peli loppu"");
 	 								Collections.sort(pelaajat, Collections.reverseOrder());
 	 								JOptionPane.showMessageDialog(null, ""Voittaja on "" + pelaajat.get(0).getNimi());
 	 							}
 	 							lock=true;
 							}
 							
 						}
 					}
 					public void mouseEntered(MouseEvent arg0) {	
 					}
 					public void mouseExited(MouseEvent arg0) {	
 					}
 					public void mousePressed(MouseEvent arg0) {	
 					}
 					public void mouseReleased(MouseEvent arg0) {
 					}
  		      }
  		    );
    	
    	
    	
    	nappi1 = new JButton(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[0].getImage()));
    	nappi1.setOpaque(false);
    	nappi1.setContentAreaFilled(false);
    	nappi1.setBorderPainted(false);
    	nappi1.setBounds(160,475,100,100);
    	nappi1.addMouseListener(
    			
 		       new MouseListener () {
 		        public void actionPerformed(Action tapahtuma) {
 		        
 		        }

					@Override
					public void mouseClicked(MouseEvent arg0) {
						if(heitot!=0 && heitot!=3){
							pelaajat.get(currentPelaaja).getKasi().getNopat()[0].lock();
							nappi1.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[0].getImage())));
						}
					}
					public void mouseEntered(MouseEvent arg0) {	
					}
					public void mouseExited(MouseEvent arg0) {	
					}
					public void mousePressed(MouseEvent arg0) {	
					}
					public void mouseReleased(MouseEvent arg0) {
					}
 		      }
 		    );
    	
    	
    	
    	
    	nappi2 = new JButton(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[1].getImage()));
    	nappi2.setOpaque(false);
    	nappi2.setContentAreaFilled(false);
    	nappi2.setBorderPainted(false);
    	nappi2.setBounds(310,475,100,100);
    	nappi2.addMouseListener(
    			
  		       new MouseListener () {
  		        public void actionPerformed(Action tapahtuma) {
  		        
  		        }

 					@Override
 					public void mouseClicked(MouseEvent arg0) {
 						if(heitot!=0 && heitot!=3){
							pelaajat.get(currentPelaaja).getKasi().getNopat()[1].lock();
							nappi2.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[1].getImage())));
						}
 					}
 					public void mouseEntered(MouseEvent arg0) {	
 					}
 					public void mouseExited(MouseEvent arg0) {	
 					}
 					public void mousePressed(MouseEvent arg0) {	
 					}
 					public void mouseReleased(MouseEvent arg0) {
 					}
  		      }
  		    );
    	
    	
    	nappi3 = new JButton(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[2].getImage()));
    	nappi3.setOpaque(false);
    	nappi3.setContentAreaFilled(false);
    	nappi3.setBorderPainted(false);
    	nappi3.setBounds(460,475,100,100);
    	nappi3.addMouseListener(
    			
  		       new MouseListener () {
  		        public void actionPerformed(Action tapahtuma) {
  		        
  		        }

 					@Override
 					public void mouseClicked(MouseEvent arg0) {
 						if(heitot!=0 && heitot!=3){
 							pelaajat.get(currentPelaaja).getKasi().getNopat()[2].lock();
 							nappi3.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[2].getImage())));
 						}
 					}
 					public void mouseEntered(MouseEvent arg0) {	
 					}
 					public void mouseExited(MouseEvent arg0) {	
 					}
 					public void mousePressed(MouseEvent arg0) {	
 					}
 					public void mouseReleased(MouseEvent arg0) {
 					}
  		      }
  		    );
    	
    	
    	
    	nappi4 = new JButton(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[3].getImage()));
    	nappi4.setOpaque(false);
    	nappi4.setContentAreaFilled(false);
    	nappi4.setBorderPainted(false);
    	nappi4.setBounds(610,475,100,100);
    	nappi4.addMouseListener(
    			
  		       new MouseListener () {
  		        public void actionPerformed(Action tapahtuma) {
  		        
  		        }

 					@Override
 					public void mouseClicked(MouseEvent arg0) {
 						if(heitot!=0 && heitot!=3){
 							pelaajat.get(currentPelaaja).getKasi().getNopat()[3].lock();
 							nappi4.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[3].getImage())));
 						}
 					}
 					public void mouseEntered(MouseEvent arg0) {	
 					}
 					public void mouseExited(MouseEvent arg0) {	
 					}
 					public void mousePressed(MouseEvent arg0) {	
 					}
 					public void mouseReleased(MouseEvent arg0) {
 					}
  		      }
  		    );
    	
    	
    	
    	nappi5 = new JButton(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[4].getImage()));
    	nappi5.setOpaque(false);
    	nappi5.setContentAreaFilled(false);
    	nappi5.setBorderPainted(false);
    	nappi5.setBounds(760,475,100,100);
    	nappi5.addMouseListener(
    			
  		       new MouseListener () {
  		        public void actionPerformed(Action tapahtuma) {
  		        
  		        }

 					@Override
 					public void mouseClicked(MouseEvent arg0) {
 						if(heitot!=0 && heitot!=3){
 						pelaajat.get(currentPelaaja).getKasi().getNopat()[4].lock();
						nappi5.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[4].getImage())));
 						}
 					}
 					public void mouseEntered(MouseEvent arg0) {	
 					}
 					public void mouseExited(MouseEvent arg0) {	
 					}
 					public void mousePressed(MouseEvent arg0) {	
 					}
 					public void mouseReleased(MouseEvent arg0) {
 					}
  		      }
  		    );
    	
    	nappiNollaa = new JButton(""Uusi peli"");
    	nappiNollaa.setBounds(920,500,100,30);
    	nappiNollaa.addMouseListener(
    			
   			 new MouseListener () {
   	  		        public void actionPerformed(Action tapahtuma) {
   	  		        
   	  		        }

   	 					@Override
   	 					public void mouseClicked(MouseEvent arg0) {
   	 						pelaajat = new ArrayList<Pelaaja>();
   	 						pelaajat.add(new Pelaaja(""pelaaja1""));
   	 						pelaajat.add(new Pelaaja(""pelaaja2""));
   	 						currentPelaaja=0;
   	 						heitot=0;
   	 						vaihto.setText(""Heita"");
   	 						pelaaja1.setText(""PELAAJA 1"" + ""\n"" + ""\n"" + pelaajat.get(0).getVihko().toString()); // Päivitetään pelivihko
   	 						pelaaja2.setText(""PELAAJA 2"" + ""\n"" + ""\n"" + pelaajat.get(1).getVihko().toString()); // Päivitetään pelivihko
   	 						otsikko.setText(pelaajat.get(currentPelaaja).getNimi()+""   heitot: "" + (3-heitot));
   	 						nappi1.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[0].getImage())));
							nappi2.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[1].getImage())));
							nappi3.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[2].getImage())));
							nappi4.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[3].getImage())));
							nappi5.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[4].getImage())));
   	 					}
   	 					public void mouseEntered(MouseEvent arg0) {	
   	 					}
   	 					public void mouseExited(MouseEvent arg0) {	
   	 					}
   	 					public void mousePressed(MouseEvent arg0) {	
   	 					}
   	 					public void mouseReleased(MouseEvent arg0) {
   	 					}
   	  		      }
   	  		    );

    	
    	kentta = new JTextField(""Kentta"");
    	kentta.setBounds(250,10,500,300);
    	
    	kentta = new JTextField(""Komennot"");
    	kentta.setBounds(700,410,120,30);
    	kentta.addKeyListener(new KeyListener() {
    		public void keyPressed(KeyEvent e) {

    		if(e.getKeyChar() == KeyEvent.VK_ENTER && kentta.getText().length() != 0) {
    		if(heitot==3){
    			try{
    				valinta=Integer.parseInt(kentta.getText())-1;
    				if(valinta>=0 && valinta<yhdistelmat.size()){
    					pelaajat.get(currentPelaaja).getVihko().setPisteet(yhdistelmat.get(valinta));
    					pelaaja1.setText(""PELAAJA 1"" + ""\n"" + ""\n"" + pelaajat.get(0).getVihko().toString()); // Päivitetään pelivihko
    					pelaaja2.setText(""PELAAJA 2"" + ""\n"" + ""\n"" + pelaajat.get(1).getVihko().toString()); // Päivitetään pelivihko
    					lock=false;
    					System.out.println(""ENTER PRESSED"");
    		    		yhdistelmaRivi.setText(kentta.getText());
    		    		save();
    				}
    			}
    			catch(NumberFormatException ex){
    				yhdistelmaRivi.setText(""Annettu komento ei ollut numero:""+""\n""+""\n""+pelaajat.get(currentPelaaja).mahdollisetYhdistelmatToString());
    			}
    		}
    		}
    		}
    		public void keyTyped(KeyEvent e) {}
    		public void keyReleased(KeyEvent e) {}
    		});
    	
    	pelaaja1 = new JTextArea();
    	pelaaja1.setBounds(150,10,200,380);
    	pelaaja1.setEditable(false);
    	pelaaja1.setText(pelaajat.get(0).getNimi() + ""\n"" + ""\n"" + pelaajat.get(0).getVihko().toString());
    	
    	pelaaja2 = new JTextArea();
    	pelaaja2.setBounds(380,10,200,380);
    	pelaaja2.setEditable(false);
    	pelaaja2.setText(pelaajat.get(1).getNimi() + ""\n"" + ""\n"" + pelaajat.get(1).getVihko().toString());
    	
    	yhdistelmaRivi = new JTextArea();
    	yhdistelmaRivi.setBounds(680,10,220,380);
    	yhdistelmaRivi.setEditable(false);
    	yhdistelmaRivi.setText(""Valitse:"");

    	otsikko = new JLabel(pelaajat.get(currentPelaaja).getNimi()+""   heitot: "" + (3-heitot));
    	otsikko.setBounds(200,415,250,20);
    	
    	add(tausta);
    	setLayout(new FlowLayout());
    	tausta.add(nappi1);
    	tausta.add(nappi2);
    	tausta.add(nappi3);
    	tausta.add(nappi4);
    	tausta.add(nappi5);
    	tausta.add(nappiNollaa);
    	tausta.add(vaihto);
    	tausta.add(pelaaja1);
    	tausta.add(pelaaja2);
    	tausta.add(yhdistelmaRivi);
    	tausta.add(kentta);
    	tausta.add(otsikko);
    	
        setTitle(""Yatzi!!!"");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(1024, 635);
        setLocationRelativeTo(null);
        setVisible(true);
        setResizable(true);
        music(""music.wav"");
    }
"
912,0d0c6a79-2b07-4e9e-a988-905b853d71df,"  		        public void actionPerformed(Action tapahtuma) {
  		        
  		        }
"
913,97d7ab7f-04b4-46a5-a6ce-a91126298383," 					@Override
 					public void mouseClicked(MouseEvent arg0) {
 						if(heitot<2){ // Heittoja jäljellä
 							heitot++;
 							otsikko.setText(pelaajat.get(currentPelaaja).getNimi()+""   heitot: "" + (3-heitot));
 							pelaajat.get(currentPelaaja).heita();
 							nappi1.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[0].getImage())));
 							nappi2.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[1].getImage())));
 							nappi3.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[2].getImage())));
 							nappi4.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[3].getImage())));
 							nappi5.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[4].getImage())));
 						}
 						else if(heitot==2){ // Viimeinen heitto
 							heitot++;
 							otsikko.setText(pelaajat.get(currentPelaaja).getNimi()+""   heitot: "" + (3-heitot));
 							pelaajat.get(currentPelaaja).heita();
 							pelaajat.get(currentPelaaja).getKasi().unlock(); // Avataan lukitus nopista
 							nappi1.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[0].getImage())));
 							nappi2.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[1].getImage())));
 							nappi3.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[2].getImage())));
 							nappi4.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[3].getImage())));
 							nappi5.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[4].getImage())));
 							vaihto.setText(""Vaihda pelaajaa"");
 							yhdistelmat=pelaajat.get(currentPelaaja).mahdollisetYhdistelmat(); // Pisteitä tuottavat yhdistelmät
 							yhdistelmat.addAll(pelaajat.get(currentPelaaja).yliviivattavat());	// Yliviivattavat
 							yhdistelmaRivi.setText(""Valitse:""+""\n""+""\n""+pelaajat.get(currentPelaaja).mahdollisetYhdistelmatToString());
 							otsikko.setText(""Syota Komento ja paina enter"");
 						}
 						else { // Heitot käytetty
 							if(!lock){
 								if(currentPelaaja==1){
 	 								currentPelaaja=0;
 	 							}
 	 							else{
 	 								currentPelaaja=1;
 	 							}
 	 							kentta.setText(""""); // Tyhjennetään kenttä
 	 							yhdistelmaRivi.setText(""Valitse:"");
 	 							heitot=0;
 	 							otsikko.setText(pelaajat.get(currentPelaaja).getNimi()+""   heitot: "" + (3-heitot));
 	 							vaihto.setText(""Heita"");
 	 							if(vihkoTaynna()){ // Peli loppu
 	 								clip.stop();
 	 								clip.close();
 	 								music(""Victory.wav"");
 	 								System.out.println(""Peli loppu"");
 	 								Collections.sort(pelaajat, Collections.reverseOrder());
 	 								JOptionPane.showMessageDialog(null, ""Voittaja on "" + pelaajat.get(0).getNimi());
 	 							}
 	 							lock=true;
 							}
 							
 						}
 					}
"
914,61e768e1-ed2b-4526-846e-b83390c6a145," 					public void mouseEntered(MouseEvent arg0) {	
 					}
"
915,31fb5e48-e954-4135-b34e-1218e9e316e3," 					public void mouseExited(MouseEvent arg0) {	
 					}
"
916,79301f4c-36fa-42ac-8aec-f8ae72938451," 					public void mousePressed(MouseEvent arg0) {	
 					}
"
917,49d07ce4-d1af-4829-b010-0960509fe52e," 					public void mouseReleased(MouseEvent arg0) {
 					}
"
918,c70625b6-0ac5-4aec-aa1d-d537e8ee218e," 		        public void actionPerformed(Action tapahtuma) {
 		        
 		        }
"
919,cd22eac9-ce3b-4b08-ad24-60365577a28e,"					@Override
					public void mouseClicked(MouseEvent arg0) {
						if(heitot!=0 && heitot!=3){
							pelaajat.get(currentPelaaja).getKasi().getNopat()[0].lock();
							nappi1.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[0].getImage())));
						}
					}
"
920,6075582e-5b3b-4f0e-9266-a50f759a1643,"					public void mouseEntered(MouseEvent arg0) {	
					}
"
921,ca63af87-d8c2-44d6-91f8-74506c786eaa,"					public void mouseExited(MouseEvent arg0) {	
					}
"
922,c02dbcd2-a9d5-42fb-96d9-2c7b23a240d3,"					public void mousePressed(MouseEvent arg0) {	
					}
"
923,9496e064-033b-4893-bc94-6fbff9136337,"					public void mouseReleased(MouseEvent arg0) {
					}
"
924,bc17cb91-34cf-408d-8fea-71c15258618f,"  		        public void actionPerformed(Action tapahtuma) {
  		        
  		        }
"
925,677aa21d-0d1a-48b7-b0bf-b00d851b2dfc," 					@Override
 					public void mouseClicked(MouseEvent arg0) {
 						if(heitot!=0 && heitot!=3){
							pelaajat.get(currentPelaaja).getKasi().getNopat()[1].lock();
							nappi2.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[1].getImage())));
						}
 					}
"
926,0621ffd6-fbfc-4364-a6bd-875c8e840dfa," 					public void mouseEntered(MouseEvent arg0) {	
 					}
"
927,3b5597c2-7228-44dc-b6d5-d6059eca0260," 					public void mouseExited(MouseEvent arg0) {	
 					}
"
928,07a1df4f-f78e-409d-a08e-4ef0725e80a6," 					public void mousePressed(MouseEvent arg0) {	
 					}
"
929,5a839425-6661-4b91-890b-165472573b42," 					public void mouseReleased(MouseEvent arg0) {
 					}
"
930,70007970-dc53-4a47-86ae-e01a6aeddc41,"  		        public void actionPerformed(Action tapahtuma) {
  		        
  		        }
"
931,eff0ea3e-d304-4345-8358-e83cfb60cbb0," 					@Override
 					public void mouseClicked(MouseEvent arg0) {
 						if(heitot!=0 && heitot!=3){
 							pelaajat.get(currentPelaaja).getKasi().getNopat()[2].lock();
 							nappi3.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[2].getImage())));
 						}
 					}
"
932,f7c88d51-5f68-4fa9-9bb7-24e4b3a04435," 					public void mouseEntered(MouseEvent arg0) {	
 					}
"
933,29cdba10-7dee-44db-b02b-126f746fb328," 					public void mouseExited(MouseEvent arg0) {	
 					}
"
934,9e1a6129-050e-4570-9793-6f9f4f09370b," 					public void mousePressed(MouseEvent arg0) {	
 					}
"
935,042afa72-1fb2-4f60-96f5-1e28e42164c4," 					public void mouseReleased(MouseEvent arg0) {
 					}
"
936,3d0b7e76-5d0e-4749-8066-af79d4472b32,"  		        public void actionPerformed(Action tapahtuma) {
  		        
  		        }
"
937,e871398d-0f34-4fba-bec6-0a11a1497679," 					@Override
 					public void mouseClicked(MouseEvent arg0) {
 						if(heitot!=0 && heitot!=3){
 							pelaajat.get(currentPelaaja).getKasi().getNopat()[3].lock();
 							nappi4.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[3].getImage())));
 						}
 					}
"
938,952fd48f-af54-4146-ae84-00d8fe440ae3," 					public void mouseEntered(MouseEvent arg0) {	
 					}
"
939,536461e3-d3d7-45d3-8b26-eb5ba39b9be3," 					public void mouseExited(MouseEvent arg0) {	
 					}
"
940,b1bde402-c317-476c-9732-2e8944791db7," 					public void mousePressed(MouseEvent arg0) {	
 					}
"
941,b6d5f352-a6ba-4b00-9505-afb4db69672d," 					public void mouseReleased(MouseEvent arg0) {
 					}
"
942,fc7ffa9d-61fb-4273-8140-318a1b4e874d,"  		        public void actionPerformed(Action tapahtuma) {
  		        
  		        }
"
943,a0fa5e7e-5787-4b10-b9b7-6bd3005995a6," 					@Override
 					public void mouseClicked(MouseEvent arg0) {
 						if(heitot!=0 && heitot!=3){
 						pelaajat.get(currentPelaaja).getKasi().getNopat()[4].lock();
						nappi5.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[4].getImage())));
 						}
 					}
"
944,e096ca78-e62a-43c3-8e46-3e7c50481eb7," 					public void mouseEntered(MouseEvent arg0) {	
 					}
"
945,bbc30bcf-31ec-4657-aadc-3c97a265ba0d," 					public void mouseExited(MouseEvent arg0) {	
 					}
"
946,0fbc516d-9652-4ada-aceb-3eb997e931c7," 					public void mousePressed(MouseEvent arg0) {	
 					}
"
947,b422bd9b-0a12-4ab4-854b-45aff9783374," 					public void mouseReleased(MouseEvent arg0) {
 					}
"
948,a504ebd3-a350-4bb2-9db4-6deeaf1212b6,"   	  		        public void actionPerformed(Action tapahtuma) {
   	  		        
   	  		        }
"
949,54bdb4a0-233e-4688-858f-74cb7543f424,"   	 					@Override
   	 					public void mouseClicked(MouseEvent arg0) {
   	 						pelaajat = new ArrayList<Pelaaja>();
   	 						pelaajat.add(new Pelaaja(""pelaaja1""));
   	 						pelaajat.add(new Pelaaja(""pelaaja2""));
   	 						currentPelaaja=0;
   	 						heitot=0;
   	 						vaihto.setText(""Heita"");
   	 						pelaaja1.setText(""PELAAJA 1"" + ""\n"" + ""\n"" + pelaajat.get(0).getVihko().toString()); // Päivitetään pelivihko
   	 						pelaaja2.setText(""PELAAJA 2"" + ""\n"" + ""\n"" + pelaajat.get(1).getVihko().toString()); // Päivitetään pelivihko
   	 						otsikko.setText(pelaajat.get(currentPelaaja).getNimi()+""   heitot: "" + (3-heitot));
   	 						nappi1.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[0].getImage())));
							nappi2.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[1].getImage())));
							nappi3.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[2].getImage())));
							nappi4.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[3].getImage())));
							nappi5.setIcon((Icon)(new ImageIcon(pelaajat.get(currentPelaaja).getKasi().getNopat()[4].getImage())));
   	 					}
"
950,c68c9ebd-2ceb-4ac2-9a09-04c2439d6e10,"   	 					public void mouseEntered(MouseEvent arg0) {	
   	 					}
"
951,66fa53ee-8461-4d7d-8a56-5871cc7c8fe7,"   	 					public void mouseExited(MouseEvent arg0) {	
   	 					}
"
952,485dee1d-dc5a-4ab3-ba26-ed4e2d3ca72b,"   	 					public void mousePressed(MouseEvent arg0) {	
   	 					}
"
953,125e3da9-e845-4594-ae8a-f9fa770984af,"   	 					public void mouseReleased(MouseEvent arg0) {
   	 					}
"
954,afbafc3e-dd3d-4096-8b4a-8bc5b973a533,"    		public void keyPressed(KeyEvent e) {

    		if(e.getKeyChar() == KeyEvent.VK_ENTER && kentta.getText().length() != 0) {
    		if(heitot==3){
    			try{
    				valinta=Integer.parseInt(kentta.getText())-1;
    				if(valinta>=0 && valinta<yhdistelmat.size()){
    					pelaajat.get(currentPelaaja).getVihko().setPisteet(yhdistelmat.get(valinta));
    					pelaaja1.setText(""PELAAJA 1"" + ""\n"" + ""\n"" + pelaajat.get(0).getVihko().toString()); // Päivitetään pelivihko
    					pelaaja2.setText(""PELAAJA 2"" + ""\n"" + ""\n"" + pelaajat.get(1).getVihko().toString()); // Päivitetään pelivihko
    					lock=false;
    					System.out.println(""ENTER PRESSED"");
    		    		yhdistelmaRivi.setText(kentta.getText());
    		    		save();
    				}
    			}
    			catch(NumberFormatException ex){
    				yhdistelmaRivi.setText(""Annettu komento ei ollut numero:""+""\n""+""\n""+pelaajat.get(currentPelaaja).mahdollisetYhdistelmatToString());
    			}
    		}
    		}
    		}
"
955,db395dbe-aa3d-43af-b7ca-d30871b4a993,"    		public void keyTyped(KeyEvent e) {}
"
956,7a845fe7-4ba3-4b5a-9c2a-4b01ad1b0086,"    		public void keyReleased(KeyEvent e) {}
"
957,65508c4a-4893-4d27-9318-6d9834d6fb6d,"	public static void main(String[] args) {
        new run();
    }
"
958,d6ab3a1d-9b95-4dd1-a6ca-940868bf1443,"	public void music(String file){
		try
        {
            clip = AudioSystem.getClip();
            clip.open(AudioSystem.getAudioInputStream(new File(file)));
            clip.loop(Clip.LOOP_CONTINUOUSLY);
        }
        catch (Exception exc)
        {
            exc.printStackTrace(System.out);
        }
  }
"
959,a1ba7350-75ce-4d30-a3ae-feb0abdc2ad2,"	public boolean vihkoTaynna(){
		for(int i=0; i<pelaajat.size(); i++){
			if(!pelaajat.get(i).getVihko().full()){
				return false;
			}
		}
		return true;
	}
"
960,f05619a1-3195-448c-bf8a-4877dcbf5f34,"	public void save(){
		try{
			// Create file 
			FileWriter fstream = new FileWriter(""save.txt"");
			BufferedWriter out = new BufferedWriter(fstream);
			out.write(
					pelaajat.get(0).getNimi() + ""\n""
					+ pelaajat.get(1).getNimi() + ""\n"");
			if(currentPelaaja==0){
				out.write(1+""\n"");
			}
			else{
				out.write(0+""\n"");
			}
			out.write(""\n"");
			for(int i=0; i<15; i++){
				try{
				out.write(Jatsiyhdistelma.values()[i].toString() + "" "" + pelaajat.get(0).getVihko().getPisteet(Jatsiyhdistelma.values()[i])+""\n"");
				}
				catch(NoPointsException e){
				}
			}
			out.write(""stop"");
			out.write(""\n"");
			for(int i=0; i<15; i++){
				try{
				out.write(Jatsiyhdistelma.values()[i].toString() + "" "" + pelaajat.get(1).getVihko().getPisteet(Jatsiyhdistelma.values()[i])+""\n"");
				}
				catch(NoPointsException e){
				}
			}
			//Close the output stream
			out.close();
		}
		catch (Exception e){//Catch exception if any
			System.err.println(""Error: "" + e.getMessage());
		}
	}
"
961,dea523ff-2c19-4f85-8344-a24843f46156,"	public void load(){
		Scanner sc;
		try {
			sc = new Scanner(new File(""save.txt"")).useDelimiter(""\\s""); // Luetaan tiedostosta save.txt, käytetään erottimena "" ""
			pelaajat.removeAll(pelaajat); 
			pelaajat.add(new Pelaaja(sc.nextLine()));
			pelaajat.add(new Pelaaja(sc.nextLine()));
			currentPelaaja=sc.nextInt();
			sc.nextLine();
			sc.nextLine();
			while(true){
				try{
					pelaajat.get(0).getVihko().load(Jatsiyhdistelma.valueOf(sc.next()), sc.nextInt());
				}
					catch(IllegalArgumentException e){ // Rivillä lukee ""stop""
						break;
					}
				sc.nextLine();
			}
			while(sc.hasNext()){
				pelaajat.get(1).getVihko().load(Jatsiyhdistelma.valueOf(sc.next()), sc.nextInt());
				sc.nextLine();
			}
			sc.close();
		} 
		catch (FileNotFoundException e) {
		}
		
	}
"
962,92fe7c59-f381-487a-b9e9-e4f65e4d688d,"	public Pelivihko(){
		yhdistelmat = new EnumMap<Jatsiyhdistelma, Integer>(Jatsiyhdistelma.class);
		jatsiyhdistelmat = new ArrayList<Jatsiyhdistelma>();
		jatsiyhdistelmat.add(Jatsiyhdistelma.YKKOSET);
		jatsiyhdistelmat.add(Jatsiyhdistelma.KAKKOSET);
		jatsiyhdistelmat.add(Jatsiyhdistelma.KOLMOSET);
		jatsiyhdistelmat.add(Jatsiyhdistelma.NELOSET);
		jatsiyhdistelmat.add(Jatsiyhdistelma.VIITOSET);
		jatsiyhdistelmat.add(Jatsiyhdistelma.KUUTOSET);
		jatsiyhdistelmat.add(Jatsiyhdistelma.PARI);
		jatsiyhdistelmat.add(Jatsiyhdistelma.KAKSI_PARIA);
		jatsiyhdistelmat.add(Jatsiyhdistelma.KOLME_SAMAA);
		jatsiyhdistelmat.add(Jatsiyhdistelma.NELJA_SAMAA);
		jatsiyhdistelmat.add(Jatsiyhdistelma.PIKKUSUORA);
		jatsiyhdistelmat.add(Jatsiyhdistelma.ISOSUORA);
		jatsiyhdistelmat.add(Jatsiyhdistelma.TAYSKASI);
		jatsiyhdistelmat.add(Jatsiyhdistelma.SATTUMA);
		jatsiyhdistelmat.add(Jatsiyhdistelma.YATZY);
		for(int i=0; i<jatsiyhdistelmat.size(); i++){
			yhdistelmat.put(jatsiyhdistelmat.get(i), null);
		}
		valisumma=0;
		bonus=0;
		summa=0;
		full=false;
	}
"
963,662b3357-53e9-495a-94c2-33e9e6265226,"	public void load(Jatsiyhdistelma j, int a){
		yhdistelmat.put(j, a);
		// Jos yhdistelmä on jokin silmälukuyhdistelmistä, lisätään saadut pisteet välisummaan
				if(j==Jatsiyhdistelma.YKKOSET||j==Jatsiyhdistelma.KAKKOSET||j==Jatsiyhdistelma.KOLMOSET||j==Jatsiyhdistelma.NELOSET||j==Jatsiyhdistelma.VIITOSET||j==Jatsiyhdistelma.KUUTOSET){
					valisumma=valisumma+a;
					if((bonus==0)){ // Jos bonusta ei ole vielä annettu
						if(valisumma>=63){
							bonus=50; // Annetaan bonus
							summa=summa+50;
						}
					}
				}
				summa = summa + a;
				for(int i=0; i<15; i++){ // Tarkistaa, onko pelivihko täynnä
					if(yhdistelmat.get(jatsiyhdistelmat.get(i))==null){ // Ei ole täynnä
						break;
					}
					if(i==14){ // On täynnä
						full=true;
					}
				}
	}
"
964,ff83c3fb-5a45-4a3e-a370-05030a8edd3c,"	public void setPisteet(Yhdistelma y){
		yhdistelmat.put(y.getNimi(), y.getPisteet());
		// Jos yhdistelmä on jokin silmälukuyhdistelmistä, lisätään saadut pisteet välisummaan
		if(y.getNimi()==Jatsiyhdistelma.YKKOSET||y.getNimi()==Jatsiyhdistelma.KAKKOSET||y.getNimi()==Jatsiyhdistelma.KOLMOSET||y.getNimi()==Jatsiyhdistelma.NELOSET||y.getNimi()==Jatsiyhdistelma.VIITOSET||y.getNimi()==Jatsiyhdistelma.KUUTOSET){
			valisumma=valisumma+y.getPisteet();
			if((bonus==0)){ // Jos bonusta ei ole vielä annettu
				if(valisumma>=63){
					bonus=50; // Annetaan bonus
					summa=summa+50;
				}
			}
		}
		summa = summa + y.getPisteet();
		for(int i=0; i<15; i++){ // Tarkistaa, onko pelivihko täynnä
			if(yhdistelmat.get(jatsiyhdistelmat.get(i))==null){ // Ei ole täynnä
				break;
			}
			if(i==14){ // On täynnä
				full=true;
			}
		}
	}
"
965,18d9a9bd-a7b3-42fe-bfa2-721733c70e59,"	public String toString(){
		String s ="""";
		for(int i=0; i<6; i++){
			s=s+(jatsiyhdistelmat.get(i).name() + "":		"" + yhdistelmat.get(jatsiyhdistelmat.get(i))) + ""\n"";
		}
		s=s+""-------------------------------------------------""+ ""\n"";
		s=s+(""VALISUMMA: "" + valisumma)+ ""\n"";
		s=s+(""BONUS: "" + bonus)+ ""\n"";
		s=s+""-------------------------------------------------""+ ""\n"";
		for(int i=6; i<8; i++){
			s=s+(jatsiyhdistelmat.get(i).name() + "":		"" + yhdistelmat.get(jatsiyhdistelmat.get(i)))+ ""\n"";
		}
		s=s+(jatsiyhdistelmat.get(8).name() + "":	"" + yhdistelmat.get(jatsiyhdistelmat.get(8)))+ ""\n"";
		for(int i=9; i<15; i++){
			s=s+(jatsiyhdistelmat.get(i).name() + "":		"" + yhdistelmat.get(jatsiyhdistelmat.get(i)))+ ""\n"";
		}
		s=s+""-------------------------------------------------""+ ""\n"";
		s=s+(""SUMMA: "" + summa)+ ""\n"";
		return s;
	}
"
966,f1ea9398-9146-4eba-a889-c60ed85bddc6,"	public int getSum(){
		return summa;
	}
"
967,0a455301-4285-409a-933a-4157a04dc0f3,"	public int getPisteet(Jatsiyhdistelma avain) throws NoPointsException{
		if(yhdistelmat.get(avain)!=null){
			return yhdistelmat.get(avain);
		}
		else{
			throw new NoPointsException(""value==null"");
		}
	}
"
968,527ff127-ecf5-4797-9f14-2a77923f9f43,"	public boolean full(){
		return full;
	}
"
969,a46cfd5b-1560-49ec-8aec-81aa1f6597d5,"	public int compareTo(Pelivihko arg0) {
		return summa-arg0.getSum();
	}
"
970,dcc071f4-b794-4180-91e1-e88934ceb63c,"	public Noppa(){
		value=1;
		lukitus = false;
		setImage();
	}
"
971,5d01d51c-efbd-48af-8482-55427570cac2,"	protected Image getImage(){
		return img;
	}
"
972,75e86207-91b8-42e6-ad41-4c2b18f567d8,"	private void setImage() {
		if (lukitus==false){
			if(value==1){
				img=open1;
			}
			else if(value==2){
				img=open2;
			}
			else if(value==3){
				img=open3;
			}
			else if(value==4){
				img=open4;
			}
			else if(value==5){
				img=open5;
			}
			else if(value==6){
				img=open6;
			}
		}
		else if (lukitus==true){
			if(value==1){
				img=locked1;
			}
			else if(value==2){
				img=locked2;
			}
			else if(value==3){
				img=locked3;
			}
			else if(value==4){
				img=locked4;
			}
			else if(value==5){
				img=locked5;
			}
			else if(value==6){
				img=locked6;
			}
		}
	}
"
973,68abbbb7-7284-4345-bedf-b45ce01ea1bc,"	public int getValue(){
		return value;
	}
"
974,48c6bb4e-bdbe-4f8c-8a69-56c2b8e7bb88,"	public boolean getLukitus(){
		return lukitus;
	}
"
975,048feac9-ddd9-4833-a4f4-f5aef8524539,"	public void lock(){
		lukitus = !lukitus;
		setImage();
	}
"
976,b2bbb504-b1c7-48dc-b197-b36c1431869d,"	public void unlock(){
		lukitus=false;
		setImage();
	}
"
977,9ab8c265-beda-4dd9-974f-5197b1575bf8,"	public void heita(){
		if(!lukitus){
			value=rnd.nextInt(6)+1; //arpoo numeron 1-6
		}
		setImage();
	}
"
978,3a28e781-5d48-425a-a9d5-9e7a6c2a2800,"	public int compareTo(Noppa arg0) {
		return value-arg0.getValue();
	}
"
979,5236725b-e8c7-49ab-b763-be80911738c1,"	public NoPointsException(String message){
		super(message);
	}
"
980,d3b5963c-e7d2-4493-951e-780e95216233,"	public NoPointsException(){
		super();
	}
"
981,273d31f2-fc6f-4715-8733-b1e4e30aeebc,"	public Jatsikasi(){
		nopat = new Noppa[5];
		for(int i=0; i<5; i++){
			nopat[i]=new Noppa();
		}
	}
"
982,69873e0d-643c-4455-9f95-3f67016ad247,"	protected Jatsikasi(Jatsikasi k){
		nopat = k.getNopat();
	}
"
983,b954a7e9-c109-405c-bf06-278f84662fd7,"	protected Jatsikasi(Noppa[] n){
		nopat=n;
	}
"
984,23b09afb-723d-4e86-9a24-1a9e072e926f,"	public void heita(){
		for(int i=0; i<nopat.length; i++){
			if (nopat[i].getLukitus()==false){ // Jos noppaa ei ole lukittu, heitetään
				nopat[i].heita();
			}
		}
	}
"
985,54397e51-dd80-45f3-b6e2-83c7dcab6a25,"	public void lock(int ind){
		nopat[ind].lock();
	}
"
986,7d4ff957-68e9-4593-acbc-faaf70ed24d8,"	public void unlock(){
		for(int i=0; i<5; i++){
			nopat[i].unlock();
		}
	}
"
987,3e841dee-5d6a-44b3-8747-e623f19108b1,"	public Noppa[] getNopat(){
		return nopat;
	}
"
988,b01c0f2f-e88a-4919-b386-7e4a18b2c633,"	public Pelaaja(String n){
		nimi = n;
		vihko = new Pelivihko();
		kasi = new Jatsikasi();
		jatsiyhdistelmat = new ArrayList<Jatsiyhdistelma>();
		jatsiyhdistelmat.add(Jatsiyhdistelma.YKKOSET);
		jatsiyhdistelmat.add(Jatsiyhdistelma.KAKKOSET);
		jatsiyhdistelmat.add(Jatsiyhdistelma.KOLMOSET);
		jatsiyhdistelmat.add(Jatsiyhdistelma.NELOSET);
		jatsiyhdistelmat.add(Jatsiyhdistelma.VIITOSET);
		jatsiyhdistelmat.add(Jatsiyhdistelma.KUUTOSET);
		jatsiyhdistelmat.add(Jatsiyhdistelma.PARI);
		jatsiyhdistelmat.add(Jatsiyhdistelma.KAKSI_PARIA);
		jatsiyhdistelmat.add(Jatsiyhdistelma.KOLME_SAMAA);
		jatsiyhdistelmat.add(Jatsiyhdistelma.NELJA_SAMAA);
		jatsiyhdistelmat.add(Jatsiyhdistelma.PIKKUSUORA);
		jatsiyhdistelmat.add(Jatsiyhdistelma.ISOSUORA);
		jatsiyhdistelmat.add(Jatsiyhdistelma.TAYSKASI);
		jatsiyhdistelmat.add(Jatsiyhdistelma.SATTUMA);
		jatsiyhdistelmat.add(Jatsiyhdistelma.YATZY);
	}
"
989,133b0b63-2de7-4ee2-82c1-2b1891c34e16,"	public void heita(){
		kasi.heita();
	}
"
990,c749195a-85a6-494b-8085-4d62cef901ec,"	public ArrayList<Yhdistelma> mahdollisetYhdistelmat(){
		Yhdistelma y = new Yhdistelma(kasi);
		ArrayList<Yhdistelma> yhdistelmat = y.getYhdistelmat(); // Kaikki kädestä saatavat yhdistelmät
		ArrayList<Yhdistelma> toReturn = new ArrayList<Yhdistelma>(); // Palautettavat yhdistelmät
		for(int i=0; i<yhdistelmat.size(); i++){
			try{
				vihko.getPisteet(yhdistelmat.get(i).getNimi()); // Kokeillaan, onko vihkoon jo asetettu yhdistelmälle pisteet
			}
			catch(NoPointsException e){ // Yhdistelmälle ei ole vielä asetettu pisteitä, joten lisätään yhdistelmä palautettaviin
				toReturn.add(yhdistelmat.get(i));
			}
		}
		Collections.sort(toReturn, Collections.reverseOrder()); // Järjestää yhdistelmät pisteiden mukaan laskevaan järjestykseen
		return toReturn;
	}
"
991,42c81f8e-8b11-4c52-b46c-b9f4bf60cf94,"	public String mahdollisetYhdistelmatToString(){
		String s="""";
		ArrayList<Yhdistelma> y = mahdollisetYhdistelmat();
		int ind=y.size();
		for(int i=0; i<y.size(); i++){
			s=s+(i+1)+"" - ""+y.get(i).getNimi()+"": ""+y.get(i).getPisteet()+""p""+""\n"";
			if(i==y.size()-1){
				s=s+""---------------------yliviivaa---------------------""+""\n"";
			}
		}
		y=yliviivattavat();
		for(int i=0; i<y.size(); i++){
			s=s+(ind+i+1)+"" - ""+y.get(i).getNimi()+"": ""+y.get(i).getPisteet()+""p""+""\n"";
		}
		return s;
		
	}
"
992,e3e7f5ed-a071-4189-b84e-ce1f0a2e0c63,"	public ArrayList<Yhdistelma> yliviivattavat(){
		Yhdistelma y = new Yhdistelma(kasi);
		ArrayList<Yhdistelma> yhdistelmat = y.getYhdistelmat(); // Kaikki kädestä saatavat yhdistelmät
		ArrayList<Yhdistelma> toReturn = new ArrayList<Yhdistelma>(); // Palautettavat yhdistelmät
		for(int i=0; i<jatsiyhdistelmat.size(); i++){ // Käydään kaikki jatsiyhdistelmät läpi
			for(int j=0; j<yhdistelmat.size(); j++){ // Käydään kaikki kädestä saatavat yhdistelmät läpi
				if(jatsiyhdistelmat.get(i)==yhdistelmat.get(j).getNimi()){ // Jos kädestä on mahdollista saada ko. yhdistelmä, ei lisätä palautettaviin
					continue;
				}
				if(j==yhdistelmat.size()-1){ // Ollaan päästy loppuun, eli kädestä ei ole mahdollista saada ko. yhdistelmää. Lisätään palautettaviin
					toReturn.add(new Yhdistelma(kasi.getNopat(), 0, jatsiyhdistelmat.get(i)));
				}
				
			}
		}
		for(int i=0; i<toReturn.size(); i++){
			try{
				vihko.getPisteet(toReturn.get(i).getNimi()); // Kokeillaan, onko vihkoon jo asetettu yhdistelmälle pisteet
				toReturn.remove(i); // On asetettu, joten poistetaan palautettavista
				i--;
			}
			catch(NoPointsException e){ // Yhdistelmälle ei ole vielä asetettu pisteitä, joten ei tehdä mitään
			}
		}
		return toReturn;
	}
"
993,49d2ca7f-6b20-4fff-8587-7987ea6e097a,"	public String getNimi(){
		return nimi;
	}
"
994,c53cdbf8-bc4e-4213-9f3b-726a55f556b9,"	public void setNimi(String n){
		nimi=n;
	}
"
995,1c1d86dc-7f06-4164-8ee8-0165e0574ef3,"	public int getPisteet(Jatsiyhdistelma avain) throws NoPointsException{
		return vihko.getPisteet(avain);
	}
"
996,31ca0b9c-2621-42d2-b172-a015e6fd6b2f,"	public int getPisteet(){
		return vihko.getSum();
	}
"
997,301a0fc2-67d0-416b-803f-67dc0034249e,"	public Pelivihko getVihko(){
		return vihko;
	}
"
998,ce86d3b9-a603-4a55-8278-643b8162d2f8,"	public Jatsikasi getKasi(){
		return kasi;
	}
"
999,f10bcccc-8c04-49b9-b7ee-fe52e23ee08e,"	public int compareTo(Pelaaja arg0) {
		return vihko.compareTo(arg0.getVihko());
	}
"
1000,2381ef7d-2a0a-46c5-86df-d0d48769b031,"	public ProcesaPropiedades() {
		inicializarLecturaArchivo();
	}
"
1001,f665ee8e-9556-4720-a667-aff945a11460,"	private static void crearInstancia() {
		if (INSTANCIA == null) {
			if (INSTANCIA == null) {
				INSTANCIA = new ProcesaPropiedades();
			}
		}
	}
"
1002,c1bebc17-7bbb-4455-82f4-d30c49d2d370,"	public static ProcesaPropiedades getInstancia() {
		crearInstancia();
        return INSTANCIA;
    }
"
1003,5f5acc11-0948-4a52-b075-42b8a9a31e35,"	private void inicializarLecturaArchivo() {
		configuracion = PropiedadesManager.getInstancia()
				.leerArchivoConfiguracion();
	}
"
1004,43748590-ca9f-4dbd-9bd7-6ef0a78c5672,"	public static void main(String[] args) {
		getInstancia().obtenerConfiguracion();
	}
"
1005,b823a095-3105-4046-b1fc-1824785c6360,"	public Map<String, Object> obtenerConfiguracion(){
		Map<String, Object> propieades = new HashMap<String, Object>();
		propieades.put(PropiedadesManager.PREFIJO_ENTIDA, proListado(configuracion.getProperty(PropiedadesManager.PREFIJO_ENTIDA)));
		propieades.put(PropiedadesManager.LIST_NEGRA_ATR, proListado(configuracion.getProperty(PropiedadesManager.LIST_NEGRA_ATR)));
		propieades.put(PropiedadesManager.PAQUETE_ORIGEN, configuracion.getProperty(PropiedadesManager.PAQUETE_ORIGEN));
		propieades.put(PropiedadesManager.PAQUETE_DESTIN, configuracion.getProperty(PropiedadesManager.PAQUETE_DESTIN));
		
//		System.out.println(""Retornando Propiedades al Cliente del Manager"");
//		System.out.println(PropiedadesManager.PAQUETE_ORIGEN+"":""+propieades.get(PropiedadesManager.PAQUETE_ORIGEN));
//		System.out.println(PropiedadesManager.PAQUETE_DESTIN+"":""+propieades.get(PropiedadesManager.PAQUETE_DESTIN));
//		System.out.println(PropiedadesManager.PREFIJO_ENTIDA+"":""+propieades.get(PropiedadesManager.PREFIJO_ENTIDA));
//		System.out.println(PropiedadesManager.LIST_NEGRA_ATR+"":""+propieades.get(PropiedadesManager.LIST_NEGRA_ATR));
		
		return propieades;
	}
"
1006,39e7fcab-ca83-4439-9e1b-4c13084c093e,"	private List<String> proListado(String propertie){
		List<String> listado = new ArrayList<String>();
		
		String[] props = propertie.split("","");
		for (int i = 0; i < props.length; i++) {
			listado.add( props[i].trim() );
		}
		
		return listado;
	}
"
1007,7217614a-c5e3-45dd-b048-aa36902ba0c3,"	public static void main(String[] args) {
		PropiedadesManager.getInstancia().crearArchivoPropiedades();
	}
"
1008,e0d91dff-391d-400e-8b56-9a5a915e0bad,"	public static void main(String[] args) {
		GeneradorDTO generadorDTO = new GeneradorDTO();
		generadorDTO.generar();
		
		File file = new File(""src/main/java/"");
		System.out.println(file.getAbsolutePath());
	}
"
1009,d6e648ea-bda2-4ab2-9b0b-10827785dc87,"	public AtributoVO() {
	}
"
1010,165e23da-80a9-401a-95e2-0db110ba0252,"	public String getGeter() {
		StringBuilder sb = new StringBuilder();
		sb.append(""public "" + tipoAtributoVO + "" get""+ getNombreCamelTipo(nombreAtributoVO) + ""(){\n"");
		sb.append(""\t\treturn this."" + nombreAtributoVO + "";\n"");
		sb.append(""\t}"");
		return sb.toString();
	}
"
1011,49445194-e20d-4dd1-bbc1-c72a738f1672,"	public String getGeterNombreVO() {
		StringBuilder sb = new StringBuilder();
		sb.append(""get"" + getNombreCamelTipo(nombreAtributoVO) + ""()"");
		return sb.toString();
	}
"
1012,ed4938e5-f4c9-4548-83ad-3d729d775540,"	public String getGeterNombreEntity() {
		StringBuilder sb = new StringBuilder();
		sb.append(""get"" + getNombreCamelTipo(nombreAtributoEnti) + ""()"");
		return sb.toString();
	}
"
1013,faaee443-5c1c-4529-9e99-90f39a18865b,"	public String getNombreCamelTipo(String nombreAtributoVO) {
		return nombreAtributoVO.substring(0, 1).toUpperCase()
				+ nombreAtributoVO.substring(1);
	}
"
1014,6af3c3a0-83b7-42f2-8cc6-9c3aafc564e4,"	public String getSeterNombreVO() {
		StringBuilder sb = new StringBuilder();
		sb.append(""set"" + getNombreCamelTipo(nombreAtributoVO));
		return sb.toString();
	}
"
1015,f1fa72c4-f75a-4ce1-93cd-a8babac909a6,"	public String getSeterNombreEntity() {
		StringBuilder sb = new StringBuilder();
		sb.append(""set"" + getNombreCamelTipo(nombreAtributoEnti));
		return sb.toString();
	}
"
1016,e40817f8-d916-4135-b85a-b7cc0ca7bbd9,"	public String getSeter() {
		StringBuilder sb = new StringBuilder();
		sb.append(""public void set"" + getNombreCamelTipo(nombreAtributoVO)+ ""("" + tipoAtributoVO + "" "" + nombreAtributoVO + ""){\n"");
		sb.append(""\t\tthis."" + nombreAtributoVO + ""="" + nombreAtributoVO+ "";\n"");
		sb.append(""\t}"");
		return sb.toString();
	}
"
1017,2d446241-56f2-413f-b3c1-f25ac4b00f66,"	public String getNombreAtributoVO() {
		return nombreAtributoVO;
	}
"
1018,f40241b1-9881-4420-bb5a-41514a1a4a1d,"	public void setNombreAtributoVO(String nombreAtributoVO) {
		this.nombreAtributoVO = nombreAtributoVO;
	}
"
1019,b16118f3-d8df-4b45-88ab-1ee6267ae23c,"	public String getTipoAtributoVO() {
		return tipoAtributoVO;
	}
"
1020,b24cab29-c439-49a7-b0f3-cc48f4092eeb,"	public void setTipoAtributoVO(String tipoAtributoVO) {
		this.tipoAtributoVO = tipoAtributoVO;
	}
"
1021,e384cc54-f135-46a9-b071-27bc04bed121,"	public String getNombreAtributoEnti() {
		return nombreAtributoEnti;
	}
"
1022,3d7078fe-d610-46a5-b0c9-8bd4b72cca25,"	public void setNombreAtributoEnti(String nombreAtributoEnti) {
		this.nombreAtributoEnti = nombreAtributoEnti;
	}
"
1023,771cbca2-0955-4155-bed4-d2919f91d5dd,"	public String getTipoAtributoEnti() {
		return tipoAtributoEnti;
	}
"
1024,0f28bda7-5685-426c-8a28-7b050ad25f6c,"	public void setTipoAtributoEnti(String tipoAtributoEnti) {
		this.tipoAtributoEnti = tipoAtributoEnti;
	}
"
1025,98fa11fb-03ef-4296-82ea-042e33dd843a,"	public boolean isEntidadNegocio() {
		return isEntidadNegocio;
	}
"
1026,67b8b2e0-375d-466f-bbc8-6397dbb50841,"	public void setEntidadNegocio(boolean isEntidadNegocio) {
		this.isEntidadNegocio = isEntidadNegocio;
	}
"
1027,5afcc2b2-b3d6-4db8-ae03-3c15b074fcb7,"	public void setTipoAtributoEntiPaquete(String nombrePackageType) {
		this.setNombrePackageType(nombrePackageType);
	}
"
1028,da2a0b96-d3a9-42a8-80f9-59d876ff78b9,"	public String getNombrePackageType() {
		return nombrePackageType;
	}
"
1029,f3ea16c9-aa3c-4cf8-a661-92aa4eb60fa7,"	public void setNombrePackageType(String nombrePackageType) {
		this.nombrePackageType = nombrePackageType;
	}
"
1030,d58f5c18-94d4-4189-b9e4-dfe9f689adf7,"	@Override
	public String toString() {
		return ""AtributoVO [nombreAtributoVO="" + nombreAtributoVO
				+ "", tipoAtributoVO="" + tipoAtributoVO
				+ "", nombreAtributoEnti="" + nombreAtributoEnti
				+ "", tipoAtributoEnti="" + tipoAtributoEnti
				+ "", nombrePackageType="" + nombrePackageType
				+ "", isEntidadNegocio="" + isEntidadNegocio + ""]"";
	}
"
1031,02c5bd39-d516-438b-b61a-83888ba00976,"	public String getNombreVO() {
		return nombreVO;
	}
"
1032,4c905a51-e0de-43f3-adc1-9da3cce4b357,"	public void setNombreVO(String nombreVO) {
		this.nombreVO = nombreVO;
	}
"
1033,0f0dc112-4422-41c7-935f-9fea9cdb88fd,"	public String getNombreEntity() {
		return nombreEntity;
	}
"
1034,5dabf888-8e0a-41b5-9bfd-a1a3a2b88b9e,"	public void setNombreEntity(String nombreEntity) {
		this.nombreEntity = nombreEntity;
	}
"
1035,20c5739a-7d64-47d8-92a4-8d5f2d9f7df2,"	public List<AtributoVO> getAtributos() {
		return atributos;
	}
"
1036,adff079e-00a5-4c5a-8c7b-896db725aada,"	public void setAtributos(List<AtributoVO> atributos) {
		this.atributos = atributos;
	}
"
1037,05e7a7ab-6664-4854-b203-7d1d282be541,"	public void setAtributo(AtributoVO atributoVO){
		this.atributos.add(atributoVO);
	}
"
1038,ccb34533-4d01-4bd3-a8ab-0350efc8e4db,"	public String getNombreCamelMinuscula(String nombreAtributoVO) {
		return nombreAtributoVO.substring(0, 1).toLowerCase()+nombreAtributoVO.substring(1);
	}
"
1039,7e38bf02-0409-49fe-a432-f77b020dc676,"	public void grabarArchivodeClaseJava(String paqueteCodigoGenerado, String path){
		setPaqueteContenedor(paqueteCodigoGenerado);
		paqueteCodigoGenerado = paqueteCodigoGenerado.replace(""."", ""\\"");
		String filename = path+File.separatorChar+paqueteCodigoGenerado+File.separatorChar+nombreVO+"".java"";
		String content = generarContenidoClase();
		
        try {
            FileWriter fw = new FileWriter(filename);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter salida = new PrintWriter(bw);
            salida.println(content);
            salida.close();
        }
        catch(IOException e) {
          System.out.println(""Error al escribir el Archivo"");
          e.printStackTrace();
        }
	}
"
1040,7c111e6b-38ef-4690-a036-8fcf48cfc046,"	private String generarContenidoClase() {
		contenidoClase = new StringBuilder();
		
		contenidoClase.append(""package ""+paqueteContenedorDestino+"";\n""+NL);
		
		contenidoClase.append(NL+""/* CLASE - AUTOGENERADA"");
		contenidoClase.append(NL+"" * FECHA CREACION: ""+new Date()+"" */""+NL);		
		
		contenidoClase.append(generarImports());
		
		contenidoClase.append(""public class ""+nombreVO+"" implements Serializable{""+NL);
		
		Date fechaActual = new Date();
		long serialVersionUID = fechaActual.getTime();		
		contenidoClase.append(NL+TB+""private static final long serialVersionUID = ""+ serialVersionUID +""L;""+NL );
		
		contenidoClase.append(generarBloqueAtributos());
		contenidoClase.append(NL+TB+""public ""+nombreVO+""(){\n\t}""+NL);
		contenidoClase.append(generarBloqueSetterGetters());
		
		contenidoClase.append(generarMetodoToString());
		
		contenidoClase.append(NL+""}"");
		return contenidoClase.toString();
	}
"
1041,3a0ccb8e-8414-41e8-b386-f69c6e0ec42e,"	private String generarMetodoToString() {
		StringBuilder  sb = new StringBuilder();
		sb.append(TB+""@Override""+NL);
		sb.append(TB+""public String toString(){""+NL);
		sb.append(TB+TB+"" return \""""+nombreVO+""["");
		
		int i=0;
		for (AtributoVO attr : atributos) {
			if (i!=0) {
				sb.append(attr.getNombreAtributoVO()+""=\""+""+attr.getNombreAtributoVO());
			}else{
				sb.append(attr.getNombreAtributoVO()  +""=\""+""+attr.getNombreAtributoVO());//primera linea
			}
			
			i++;
			if(i==atributos.size()){
				sb.append(""+\""]\"";""+NL);//ultima linea
			}else{
				sb.append(NL+TB+""\t +\"","");
			}
			
		}
		
		//sb.replace(sb.toString().length()-2, sb.toString().length(), ""\""]\"";""+NL);
		sb.append(TB+""}""+NL);
		return sb.toString();
	}
"
1042,782ce3ae-e29c-49fa-aefb-f375a3f0831c,"	private String generarImports() {
		StringBuilder  sb = new StringBuilder();
		//System.out.println(""tiene ""+atributos.size()+"" atributos"");
		Map<String, String> importables = new HashMap<String, String>();
		for (AtributoVO atributoVO : atributos) {
			if(!isNoImportable(atributoVO.getNombrePackageType()) 
					&& !importables.containsValue(atributoVO.getNombrePackageType()) 
					&& !atributoVO.getNombrePackageType().startsWith(paqueteContenedorOrigen)){
				sb.append(""import ""+atributoVO.getNombrePackageType()+"";""+NL);
				importables.put(atributoVO.getNombrePackageType(), atributoVO.getNombrePackageType());
			}
			
		}
		sb.append(""import java.io.Serializable;\n""+NL);
		return sb.toString();
	}
"
1043,f744327c-1c43-4299-9e1f-4314763f8593,"	private boolean isNoImportable(String type) {
		for (int i = 0; i < paquetesNoImportables.length; i++) {
			if(type.startsWith(paquetesNoImportables[i])){
				return true;
			}
		}
		return false;
	}
"
1044,d9e7be80-6a4d-462e-bc9d-ca0d71628ffe,"	private String generarBloqueAtributos() {
		StringBuilder  sb = new StringBuilder();
		//System.out.println(""tiene ""+atributos.size()+"" atributos"");
		for (AtributoVO atributoVO : atributos) {
			sb.append(TB+""private ""+atributoVO.getTipoAtributoVO()+"" ""+atributoVO.getNombreAtributoVO()+"";""+NL);
		}
		return sb.toString();
	}
"
1045,2de4ad5f-830d-4cf2-bc2c-ea1b4585bb3e,"	private String generarBloqueSetterGetters() {
		StringBuilder  sb = new StringBuilder();
		for (AtributoVO atributoVO : atributos) {
			sb.append(TB+""""+atributoVO.getSeter()+NL+"""");
			sb.append(TB+""""+atributoVO.getGeter()+NL+"""");
		}
		return sb.toString();
	}
"
1046,338fe7b5-e45e-4449-a74b-5914c685a528,"	public String getPaqueteContenedor() {
		return paqueteContenedorDestino;
	}
"
1047,2ad04f3b-05a4-4ad1-b93e-fb343d4e2798,"	public void setPaqueteContenedor(String paqueteContenedor) {
		this.paqueteContenedorDestino = paqueteContenedor;
	}
"
1048,197bc3a6-868e-4ce9-bd21-a80f490a81f1,"	public String getPaqueteContenedorOrigen() {
		return paqueteContenedorOrigen;
	}
"
1049,88d6c90b-fb71-4dc6-b201-51649b692f33,"	public void setPaqueteContenedorOrigen(String paqueteContenedorOrigen) {
		this.paqueteContenedorOrigen = paqueteContenedorOrigen;
	}
"
1050,4c44217c-35ec-45cd-a4d4-04dca41170db,"	public String getSetterToVODeficionion(AtributoVO atributoVO) {
		String definicion = """";
		if (isTieneUnPrefijo(atributoVO)) {
			definicion = getNombreCamelMinuscula(nombreVO) + "".""
					+ atributoVO.getSeterNombreVO() + ""( toVO(""
					+ getNombreCamelMinuscula(nombreEntity) + "".""
					+ atributoVO.getGeterNombreEntity() + "") );"";

		} else {
			definicion = getNombreCamelMinuscula(nombreVO) + "".""
					+ atributoVO.getSeterNombreVO() + ""(""
					+ getNombreCamelMinuscula(nombreEntity) + "".""
					+ atributoVO.getGeterNombreEntity() + "");"";

		}
		
		System.out.println(""definicion: "" + definicion);
		return definicion;
	}
"
1051,6c772ac2-1d4c-4e3f-bd52-8d74128f5e8b,"	public String getSetterToEntityDeficionion(AtributoVO atributoVO) {
		String definicion = """";
		if (isTieneUnPrefijo(atributoVO)) {
			definicion = getNombreCamelMinuscula(nombreEntity) + "".""
					+ atributoVO.getSeterNombreEntity() + ""( toEntity(""
					+ getNombreCamelMinuscula(nombreVO) + "".""
					+ atributoVO.getGeterNombreVO() + "") );"";
		} else {
			definicion = getNombreCamelMinuscula(nombreEntity) + "".""
					+ atributoVO.getSeterNombreEntity() + ""(""
					+ getNombreCamelMinuscula(nombreVO) + "".""
					+ atributoVO.getGeterNombreEntity() + "");"";
		}

		System.out.println(""definicion: "" + definicion);
		return definicion;
	}
"
1052,c2ed5f02-e7f3-46fe-9476-4d15311eb538,"	public boolean isTieneUnPrefijo(AtributoVO atributoVO){
		@SuppressWarnings(""unchecked"")
		List<String> preFijos = (List<String>) ProcesaPropiedades.getInstancia().obtenerConfiguracion().get(PropiedadesManager.PREFIJO_ENTIDA);
		for (String prefijo : preFijos) {
			if(atributoVO.getTipoAtributoEnti().startsWith(prefijo)){
				System.out.println(prefijo+"" == ""+atributoVO.getTipoAtributoEnti()+"" = ""+atributoVO.getTipoAtributoEnti().startsWith(prefijo));
				return true;
			}
		}
		return false;
	}
"
1053,d640d390-6211-43da-8e08-026177be1bb1,"	public String getHelperEntityToVO(){
		StringBuilder sb = new StringBuilder();
		sb.append(NL+TB+""/** Transforma un objeto tipo ""+ nombreEntity +"" en uno nuevo de tipo ""+ nombreVO +"" */""+NL);
		sb.append(TB+""public ""+nombreVO+"" toVO(""+nombreEntity+"" ""+ getNombreCamelMinuscula(nombreEntity)+""){""+NL);
		sb.append(TB+TB+""""+nombreVO+"" ""+getNombreCamelMinuscula(nombreVO)+"" = new ""+nombreVO+""();""+NL);
		//sb.append(TB+TB+""try{ ""+NL);
		for (AtributoVO atributoVO : atributos) {
			sb.append(TB+TB+""\t""+getSetterToVODeficionion(atributoVO)+NL+"""");//
		}
		//sb.append(TB+TB+""}catch(java.lang.NullPointerException e){/*seteando valores nulos, es normal.*/} ""+NL);
		sb.append(TB+TB+""return ""+getNombreCamelMinuscula(nombreVO)+"";""+NL);
		sb.append(TB+""}""+NL);
		//System.out.println(sb);
		return sb.toString();
	}
"
1054,2a6190cb-c78a-4c39-a2a0-9ad54fe46a21,"	public String getHelperVoToEntity(){
		StringBuilder sb = new StringBuilder();
		sb.append(NL+TB+""/** Transforma un objeto tipo ""+ nombreVO +"" en uno nuevo de tipo ""+ nombreEntity +"" */""+NL);
		sb.append(TB+""public ""+nombreEntity+"" toEntity(""+nombreVO+"" ""+ getNombreCamelMinuscula(nombreVO)+""){""+NL);
		sb.append(TB+TB+""""+nombreEntity+"" ""+getNombreCamelMinuscula(nombreEntity)+"" = new ""+nombreEntity+""();""+NL);
		for (AtributoVO atributoVO : atributos) {
			sb.append(TB+TB+""""+getSetterToEntityDeficionion(atributoVO)+NL+"""");//
		}
		sb.append(TB+TB+""return ""+getNombreCamelMinuscula(nombreEntity)+"";""+NL);
		sb.append(TB+""}""+NL);
		//System.out.println(sb);
		return sb.toString();
	}
"
1055,0f0d2528-281b-4825-87c0-c6f4be1e3921,"	public String generarContenidoArchivoHelperVO(String paqueteCodigoGenerado) {
		StringBuilder sb = new StringBuilder();
		sb.append(getHelperEntityToVO());
		sb.append(getHelperVoToEntity());
		return sb.toString();
	}
"
1056,f04e75da-aaf7-46f8-beb2-121c0dbb53dd,"	public boolean isGenerarToStringVOS() {
		return isGenerarToStringVOS;
	}
"
1057,60e82d22-2d0e-443f-983a-3d3941c8f8e3,"	public void setGenerarToStringVOS(boolean isGenerarToStringVOS) {
		this.isGenerarToStringVOS = isGenerarToStringVOS;
	}
"
1058,1fba2b14-fa2d-48cb-b715-78442cb4528f,"	public void imprimirConstantesCampos() {
		StringBuilder sb = new StringBuilder();
		for (AtributoVO atributoVO : atributos) {
			String nombreAtributo = atributoVO.getNombreAtributoEnti();
			sb.append(""public static final String ""+stringFormatoConstante(nombreAtributo).toUpperCase()+"" = \""""+ nombreAtributo +""\"";""+NL);//
		}
		//System.out.println(sb.toString());
	}
"
1059,a091b295-5898-47f7-a8a7-05c5aafb9e54,"	public String stringFormatoConstante(String str) {
		String x = str;
		for (int i = 0; i < x.length(); i++) {
			if (i>0 && Character.isUpperCase(x.charAt(i))){
				str = str.replace(x.charAt(i)+"""", ""_"" + x.charAt(i));
			}				
		}
		return str;
	}
"
1060,d9e4a57a-4e06-4dcd-af7c-eaa15dec4a0b,"	@SuppressWarnings(""unchecked"")
	public GeneradorDTO() {
		super();
		prefijosEntidadesNegocio = (List<String>) ProcesaPropiedades
				.getInstancia().obtenerConfiguracion()
				.get(PropiedadesManager.PREFIJO_ENTIDA);
		listaNegraatributos = (List<String>) ProcesaPropiedades.getInstancia()
				.obtenerConfiguracion().get(PropiedadesManager.LIST_NEGRA_ATR);

		paqueteEntidades = (String) ProcesaPropiedades.getInstancia()
				.obtenerConfiguracion().get(PropiedadesManager.PAQUETE_ORIGEN);
		paqueteCodigoGenerado = (String) ProcesaPropiedades.getInstancia()
				.obtenerConfiguracion().get(PropiedadesManager.PAQUETE_DESTIN);
	}
"
1061,e4ba4b61-bb98-4d34-9d71-e6074b47a658,"	@SuppressWarnings(""rawtypes"")
	public void generar() {

		System.out.println(isGenerarVOS + ""-"" + isGenerarToStringVOS + ""-""
				+ isHelperVOBetweenEntity);

		contenidoHelperVoEntity.append(NL + ""public class ""
				+ nombreClaseHelperVoEntity + ""{\n"" + NL);

		try {
			Class[] lasClases = obtenerClasesDelPaquete(paqueteEntidades);

			logger.info(lasClases.length + "" Clases encontradas, en ""
					+ paqueteEntidades);

			for (int i = 0; i < lasClases.length; i++) {
				Class clase = lasClases[i];
				importsClaseHelperVoEntity.append(""import "" + clase.getName()
						+ "";"" + NL);
				construirVO(clase);
			}

			contenidoHelperVoEntity.append(NL + ""}"");

			if (isHelperVOBetweenEntity) {
				grabarArchivodeHelper(paqueteCodigoGenerado,
						contenidoHelperVoEntity, getPathArchivosGenerados());
			}

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
"
1062,cb82278f-095f-45e0-a9aa-a79f43d18702,"	@SuppressWarnings(""rawtypes"")
	private void construirVO(Class clase) {
		Field[] atributos = clase.getDeclaredFields();

		ClaseVO claseVO = new ClaseVO();
		claseVO.setNombreEntity(clase.getSimpleName());
		claseVO.setNombreVO(cambioNombreEntityToVO(clase.getSimpleName()));

		for (int i = 0; i < atributos.length; i++) {
			Field atributo = atributos[i];
			if (!estaEnListaNegraAtributos(atributo.getName())) {
				AtributoVO atributoVO = getDeficinionAtributoVO(atributo);
				claseVO.setAtributo(atributoVO);
			}

		}
		// claseVO.getSetEntity();
		vos.add(claseVO);
		System.out.println(""Generando "" + claseVO.getNombreVO() + "" ""
				+ claseVO.getAtributos().size() + "" atributos"");
		claseVO.setPaqueteContenedorOrigen(paqueteEntidades);
		claseVO.setGenerarToStringVOS(isGenerarToStringVOS);

		claseVO.imprimirConstantesCampos();

		if (isGenerarVOS) {
			claseVO.grabarArchivodeClaseJava(paqueteCodigoGenerado,
					getPathArchivosGenerados());
		}

		if (isHelperVOBetweenEntity) {
			contenidoHelperVoEntity.append(claseVO
					.generarContenidoArchivoHelperVO(paqueteCodigoGenerado));
		}

		System.out.println(NL + """" + NL);
	}
"
1063,cae455cb-b7a8-4f5f-b6ff-2d56d373c77f,"	private String getPathArchivosGenerados() {
		String path = """";
		if (isTest) {
			path = ""src/test/java/"";
		} else {
			path = ""src/main/java/"";
		}
		File file = new File(path);
		//System.out.println(""Utilizando el PATH:"" + path);
		return file.getAbsolutePath();
	}
"
1064,d787cfe3-eda0-44f4-8d49-fc1011c062de,"	private AtributoVO getDeficinionAtributoVO(Field atributo) {

		AtributoVO atributoVO = new AtributoVO();

		String nombreAtributo = atributo.getName();
		String nombreType = atributo.getType().getSimpleName();

		atributoVO.setNombreAtributoEnti(nombreAtributo);
		atributoVO.setTipoAtributoEnti(nombreType);
		String nombrePackageType = atributo.getType().getCanonicalName();

		atributoVO.setTipoAtributoEntiPaquete(nombrePackageType);

		// ahora se adaptan los nombres a vo

		nombreType = cambioNombreEntityToVO(nombreType);
		nombreAtributo = cambioNombreEntityToVO(nombreAtributo);

		atributoVO.setNombreAtributoVO(nombreAtributo);
		atributoVO.setTipoAtributoVO(nombreType);

		return atributoVO;
	}
"
1065,e3aa11ee-655b-4981-9c6a-6d3ab57bab83,"	private String cambioNombreEntityToVO(String nombreAtributo) {
		System.out.println(""entra ""+nombreAtributo);
		for (String prefijo : getSufijosNegocio()) {
			nombreAtributo = nombreAtributo.replace(prefijo, ""Vo"");
		}

		for (String prefijo : getSufijosNegocio()) {
			String prefijoMinusculas = prefijo;
			prefijoMinusculas = prefijoMinusculas.substring(0, 1).toLowerCase()
					+ prefijoMinusculas.substring(1);
			
			nombreAtributo = nombreAtributo.replace(prefijoMinusculas, ""vo"");
			
		}
		System.out.println(""sale ""+nombreAtributo);
		return nombreAtributo;
	}
"
1066,e12112a3-c16e-4d2c-94a8-799549cf457d,"	private boolean estaEnListaNegraAtributos(String name) {
		for (String prefijo : listaNegraatributos) {
			if (prefijo.equals(name)) {
				return true;
			}
		}
		return false;
	}
"
1067,f33b3c0f-26d8-4db3-8c7b-4f92d4d63e77,"	@SuppressWarnings(""rawtypes"")
	private Class[] obtenerClasesDelPaquete(String packageName)
			throws ClassNotFoundException, IOException {

		ClassLoader classLoader = Thread.currentThread()
				.getContextClassLoader();

		assert classLoader != null;

		String path = packageName.replace('.', '/');
		logger.info(""path: "" + path);

		Enumeration<URL> resources = classLoader.getResources(path);

		List<File> dirs = new ArrayList<File>();
		while (resources.hasMoreElements()) {
			URL resource = resources.nextElement();
			dirs.add(new File(resource.getFile()));
			logger.info(resource.toString());
		}

		ArrayList<Class> classes = new ArrayList<Class>();
		for (File directory : dirs) {
			classes.addAll(buscarClasesEnDirectorio(directory, packageName));
		}

		return classes.toArray(new Class[classes.size()]);
	}
"
1068,72d2b999-1163-4419-a6b0-ea31e1791e01,"	@SuppressWarnings(""rawtypes"")
	private List<Class> buscarClasesEnDirectorio(File directory,
			String packageName) throws ClassNotFoundException {

		String fixPath = directory.getAbsolutePath().replace(""%20"", "" "");
		logger.info(""fixPath : "" + fixPath);

		directory = new File(fixPath);

		logger.info(""directory : "" + directory.getAbsolutePath());
		logger.info(""packageName : "" + packageName);

		List<Class> classes = new ArrayList<Class>();

		if (!directory.exists()) {
			logger.info(""directory.exists() : "" + directory.exists());
			return classes;
		}

		File[] files = directory.listFiles();
		for (File file : files) {
			if (file.isDirectory()) {

				assert !file.getName().contains(""."");
				classes.addAll(buscarClasesEnDirectorio(file, packageName + "".""
						+ file.getName()));

			} else if (file.getName().endsWith("".class"")) {

				classes.add(Class.forName(packageName
						+ '.'
						+ file.getName().substring(0,
								file.getName().length() - 6)));

			}
		}
		return classes;
	}
"
1069,baa0108e-cc82-43bd-b182-c108663cf6a5,"	public String getPaqueteEntidades() {
		return paqueteEntidades;
	}
"
1070,92cb87bf-f45a-4851-811d-84d8aed3db84,"	public void setPaqueteEntidades(String paqueteEntidades) {
		this.paqueteEntidades = paqueteEntidades;
	}
"
1071,5507cd7f-b582-4708-8df1-6845e2a6cc52,"	public String getPaqueteCodigoGenerado() {
		return paqueteCodigoGenerado;
	}
"
1072,4170e150-d31b-4ad7-9d14-c522a3cb20d1,"	public void setPaqueteCodigoGenerado(String paqueteCodigoGenerado) {
		this.paqueteCodigoGenerado = paqueteCodigoGenerado;
	}
"
1073,edb7eaad-9a4b-4d10-8311-240fddb6ac41,"	public boolean isGenerarVOS() {
		return isGenerarVOS;
	}
"
1074,8fabf130-0d78-4b7d-bb21-16219416cacd,"	public void setGenerarVOS(boolean isGenerarVOS) {
		this.isGenerarVOS = isGenerarVOS;
	}
"
1075,0454cb90-3734-44a0-9fbf-7831e3590785,"	public boolean isHelperVOBetweenEntity() {
		return isHelperVOBetweenEntity;
	}
"
1076,35f548a9-31a3-4eea-a4ae-0b76a65258b3,"	public void setHelperVOBetweenEntity(boolean isHelperVOBetweenEntity) {
		this.isHelperVOBetweenEntity = isHelperVOBetweenEntity;
	}
"
1077,6b693bce-d64d-40b4-8d55-89430dbb0da5,"	public void grabarArchivodeHelper(String paqueteCodigoGenerado,
			StringBuilder contenido, String path) {
		String folderCodigoGenerado = paqueteCodigoGenerado.replace(""."", ""\\"");
		String filename = path + File.separatorChar + folderCodigoGenerado
				+ File.separatorChar + nombreClaseHelperVoEntity + "".java"";

		System.out.println(""path: "" + path);
		System.out.println(""paqueteCodigoGenerado: "" + paqueteCodigoGenerado);
		System.out.println(""folderCodigoGenerado: "" + folderCodigoGenerado);
		System.out.println(""filename: "" + filename);

		contenido.insert(0, importsClaseHelperVoEntity.toString());

		contenido
				.insert(0,
						NL
								+ ""/* En caso de cambiar el modelo de datos, esta clase debe ser modificada o volver a generar. */""
								+ NL + NL);
		contenido.insert(0, NL + ""* FECHA CREACION: "" + new Date().toString()
				+ "" */"" + NL);
		contenido.insert(0, NL + ""/* CLASE - AUTOGENERADA"" + NL);

		contenido.insert(0, ""package "" + paqueteCodigoGenerado + "";"" + NL);

		try {
			FileWriter fw = new FileWriter(filename);
			BufferedWriter bw = new BufferedWriter(fw);
			PrintWriter salida = new PrintWriter(bw);
			salida.println(contenido.toString());
			salida.close();
		} catch (IOException e) {
			System.out.println(""Error al escribir el Archivo"");
			e.printStackTrace();
		}
	}
"
1078,d3098321-0fce-4467-95c8-ce0cd98ce6ba,"	public List<String> getSufijosNegocio() {
		return prefijosEntidadesNegocio;
	}
"
1079,89df4f46-9c2b-47d2-9d74-9928f7d20da5,"	public void setSufijosNegocio(List<String> sufijosNegocio) {
		this.prefijosEntidadesNegocio = sufijosNegocio;
	}
"
1080,1b510bf1-ab95-4f87-b421-29e5edaf1f92,"	public void setTest(boolean b) {
		this.isTest = b;
	}
"
1081,e723273a-e0c2-4eaf-9662-0fcced8c7b9f,"	public BaseTabGrupotrabajo() {
	}
"
1082,0f69e003-0b45-41c8-b27c-dfbf15a468d3,"	public long getGrupotrabajoCod() {
		return this.grupotrabajoCod;
	}
"
1083,2bb04a29-90b0-4588-8454-0c34c5eff8e0,"	public void setGrupotrabajoCod(long grupotrabajoCod) {
		this.grupotrabajoCod = grupotrabajoCod;
	}
"
1084,c796442c-4dc5-432b-a3d5-d200f7499fa8,"	public String getDescripcion() {
		return this.descripcion;
	}
"
1085,4203c568-c681-462a-ba5d-f97665e13be2,"	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}
"
1086,7ecd63f0-0747-4f16-815c-c7d12244ed3a,"	public String getNombre() {
		return this.nombre;
	}
"
1087,cf2cb7f3-ddb0-44ad-90d3-b0d11ddfe413,"	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
"
1088,b217fc61-109b-4707-af17-b5ed8e1addea,"	public BaseTabExtensionarchivo() {
	}
"
1089,a7370970-c151-4024-9861-8c2568993165,"	public long getExtensionarchivoCod() {
		return this.extensionarchivoCod;
	}
"
1090,62ff0c2b-aa97-4f67-8e59-2328283d3337,"	public void setExtensionarchivoCod(long extensionarchivoCod) {
		this.extensionarchivoCod = extensionarchivoCod;
	}
"
1091,a5d61846-4380-45d8-8146-0185645d41a1,"	public String getBaseTabExtensionarchivo() {
		return this.baseTabExtensionarchivo;
	}
"
1092,6b7f7f58-a579-4164-b615-0482a04f6ff2,"	public void setBaseTabExtensionarchivo(String baseTabExtensionarchivo) {
		this.baseTabExtensionarchivo = baseTabExtensionarchivo;
	}
"
1093,93fa9d18-6dd4-4512-84ab-d42d7b3ea27a,"	public BigDecimal getTypemime() {
		return this.typemime;
	}
"
1094,3240cf68-ba21-43cc-a4b4-29381d20b9e3,"	public void setTypemime(BigDecimal typemime) {
		this.typemime = typemime;
	}
"
1095,5ef9dc98-c280-4211-bef4-b46b2132df34,"	public BaseTabHistoriaestadoavance() {
	}
"
1096,54d3592d-a9b4-4603-a59c-b5fc77f09d68,"	public long getHistoriaestadoavanceCod() {
		return this.historiaestadoavanceCod;
	}
"
1097,d764a2bb-7e54-45a7-89de-556fb8ca24e8,"	public void setHistoriaestadoavanceCod(long historiaestadoavanceCod) {
		this.historiaestadoavanceCod = historiaestadoavanceCod;
	}
"
1098,49bbe0f8-2703-47d4-8de2-286646e1a42e,"	public Boolean getEsHistoria() {
		return this.esHistoria;
	}
"
1099,71125f00-4d9d-42fe-be11-c6c815248355,"	public void setEsHistoria(Boolean esHistoria) {
		this.esHistoria = esHistoria;
	}
"
1100,71685274-bc3d-4e3e-9219-a7699bcabdde,"	public Timestamp getFechaEstado() {
		return this.fechaEstado;
	}
"
1101,d16eee00-d5b6-484f-83a2-00358dfbcc48,"	public void setFechaEstado(Timestamp fechaEstado) {
		this.fechaEstado = fechaEstado;
	}
"
1102,36be51f0-43d4-4ac5-b32f-7b4715f4dba0,"	public BaseTabActividad getBaseTabActividad() {
		return this.baseTabActividad;
	}
"
1103,dab5b712-f2b8-4278-88be-2b96a8aa0329,"	public void setBaseTabActividad(BaseTabActividad baseTabActividad) {
		this.baseTabActividad = baseTabActividad;
	}
"
1104,2a628434-fe2b-457f-9a40-11786879f924,"	public BaseTabEstadoavance getBaseTabEstadoavance() {
		return this.baseTabEstadoavance;
	}
"
1105,ef1e93f6-256e-40fd-9f1f-d0aa78421f39,"	public void setBaseTabEstadoavance(BaseTabEstadoavance baseTabEstadoavance) {
		this.baseTabEstadoavance = baseTabEstadoavance;
	}
"
1106,065062d7-e26d-4095-8841-4010748b7144,"	public BaseTabMiembroresponsableactividad() {
	}
"
1107,17635249-951c-4204-a3fd-d3f97b98306c,"	public long getMiembroresponsableactividadCod() {
		return this.miembroresponsableactividadCod;
	}
"
1108,e84775ac-f2a9-45d9-904a-837aa839e1f1,"	public void setMiembroresponsableactividadCod(long miembroresponsableactividadCod) {
		this.miembroresponsableactividadCod = miembroresponsableactividadCod;
	}
"
1109,b52c8133-1ea9-4734-b80c-c8c4af3fd1e2,"	public BaseTabActividad getBaseTabActividad() {
		return this.baseTabActividad;
	}
"
1110,4d6e4a9a-7cac-43dd-8392-61570752beaa,"	public void setBaseTabActividad(BaseTabActividad baseTabActividad) {
		this.baseTabActividad = baseTabActividad;
	}
"
1111,9f5731b9-9aca-4c34-97d4-dff31aeb0664,"	public BaseTabMiembrogrupo getBaseTabMiembrogrupo() {
		return this.baseTabMiembrogrupo;
	}
"
1112,3e14c1dd-1315-4ade-ace8-ea8e63182805,"	public void setBaseTabMiembrogrupo(BaseTabMiembrogrupo baseTabMiembrogrupo) {
		this.baseTabMiembrogrupo = baseTabMiembrogrupo;
	}
"
1113,ae300a55-d572-496c-8550-93f12b6b08c2,"	public BaseTabArchivoadjunto() {
	}
"
1114,23856c2c-662b-437e-811b-f13685e92bae,"	public long getArchivoadjuntoCod() {
		return this.archivoadjuntoCod;
	}
"
1115,455cda14-7709-4bff-bde7-aa0178a0df6d,"	public void setArchivoadjuntoCod(long archivoadjuntoCod) {
		this.archivoadjuntoCod = archivoadjuntoCod;
	}
"
1116,669fd9d6-3871-4749-9508-c3fd82195f7f,"	public String getDescripcion() {
		return this.descripcion;
	}
"
1117,03fbe29f-669e-4c9d-9dd9-6cf945fa8acb,"	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}
"
1118,f371e481-4f17-4bf1-882d-12a7409c9fed,"	public String getNombreArchivo() {
		return this.nombreArchivo;
	}
"
1119,a6eeef2e-11e2-48aa-83b8-e82ef70ae7e8,"	public void setNombreArchivo(String nombreArchivo) {
		this.nombreArchivo = nombreArchivo;
	}
"
1120,bee0fa29-857b-4c24-94e7-f211a73a3555,"	public BaseTabExtensionarchivo getBaseTabExtensionarchivo() {
		return this.baseTabExtensionarchivo;
	}
"
1121,44d35c0d-61ea-45e8-929c-ddb3a7b88cee,"	public void setBaseTabExtensionarchivo(BaseTabExtensionarchivo baseTabExtensionarchivo) {
		this.baseTabExtensionarchivo = baseTabExtensionarchivo;
	}
"
1122,d02693d5-3337-4044-b27a-59f67db211ec,"	public BaseTabMiembrocomentaactividad() {
	}
"
1123,93ff6701-b6ec-4d5a-aea1-d51d7dd3242b,"	public long getMiembrocomentaactividadCod() {
		return this.miembrocomentaactividadCod;
	}
"
1124,4bdfba14-aba7-4185-827b-b943cdede35e,"	public void setMiembrocomentaactividadCod(long miembrocomentaactividadCod) {
		this.miembrocomentaactividadCod = miembrocomentaactividadCod;
	}
"
1125,aa6cec86-6830-4ee1-bef3-c5d501730926,"	public Timestamp getFechaComenta() {
		return this.fechaComenta;
	}
"
1126,cef4aba8-51e0-4dd2-8216-529cd9025cb7,"	public void setFechaComenta(Timestamp fechaComenta) {
		this.fechaComenta = fechaComenta;
	}
"
1127,4673d05c-745b-490f-8b76-0053a0263136,"	public BaseTabComentario getBaseTabComentario() {
		return this.baseTabComentario;
	}
"
1128,03b20067-d1a4-43a8-8748-6e060f3a431b,"	public void setBaseTabComentario(BaseTabComentario baseTabComentario) {
		this.baseTabComentario = baseTabComentario;
	}
"
1129,403b181e-5eb7-4fac-bd8a-ce5d0e02788d,"	public BaseTabMiembrogrupo getBaseTabMiembrogrupo() {
		return this.baseTabMiembrogrupo;
	}
"
1130,d7728a5d-7136-4250-aaa4-f5b94bdac045,"	public void setBaseTabMiembrogrupo(BaseTabMiembrogrupo baseTabMiembrogrupo) {
		this.baseTabMiembrogrupo = baseTabMiembrogrupo;
	}
"
1131,9b41adcb-7621-4b7c-83c5-104595254e3a,"	public BaseTabMembresia() {
	}
"
1132,10af3605-a8af-48ba-9397-51a8e4dbc203,"	public long getMembresiaCod() {
		return this.membresiaCod;
	}
"
1133,883133a8-6ef0-45ea-9217-756972b90e66,"	public void setMembresiaCod(long membresiaCod) {
		this.membresiaCod = membresiaCod;
	}
"
1134,fc6457e5-5ef1-46b8-b745-9885cb66f2ad,"	public Timestamp getFechaMembresia() {
		return this.fechaMembresia;
	}
"
1135,22dec1d5-929f-41a9-8943-9d3851ec2cb5,"	public void setFechaMembresia(Timestamp fechaMembresia) {
		this.fechaMembresia = fechaMembresia;
	}
"
1136,b2eb17d6-c057-4371-8387-514101851301,"	public Boolean getVigente() {
		return this.vigente;
	}
"
1137,37f1c75b-9fb3-4390-a267-ff3ab20bfd7b,"	public void setVigente(Boolean vigente) {
		this.vigente = vigente;
	}
"
1138,f2fab37f-3274-4e5b-80c5-077d36dfbc99,"	public BaseTabGrupotrabajo getBaseTabGrupotrabajo() {
		return this.baseTabGrupotrabajo;
	}
"
1139,c3200863-4260-45bd-b07e-bc08a928b572,"	public void setBaseTabGrupotrabajo(BaseTabGrupotrabajo baseTabGrupotrabajo) {
		this.baseTabGrupotrabajo = baseTabGrupotrabajo;
	}
"
1140,5ff52c2d-94cf-454b-b6c9-407a86c46dda,"	public BaseTabMiembrogrupo getBaseTabMiembrogrupo() {
		return this.baseTabMiembrogrupo;
	}
"
1141,b414c9c1-006b-470f-adf6-806bfb3717d2,"	public void setBaseTabMiembrogrupo(BaseTabMiembrogrupo baseTabMiembrogrupo) {
		this.baseTabMiembrogrupo = baseTabMiembrogrupo;
	}
"
1142,5b7e5d68-402c-4bb6-8017-3b66d2e0e384,"	public BaseTabMiembrogrupo() {
	}
"
1143,f7db8c25-5b43-4906-bdab-2bd395de7fef,"	public long getMiembrogrupoCod() {
		return this.miembrogrupoCod;
	}
"
1144,34dc639a-b35c-47fd-808c-12868601074f,"	public void setMiembrogrupoCod(long miembrogrupoCod) {
		this.miembrogrupoCod = miembrogrupoCod;
	}
"
1145,5007e7fa-afe5-44a5-9fce-c194c7843dce,"	public String getEmail() {
		return this.email;
	}
"
1146,f794a869-fdf7-43ce-a784-4a37f0d3045b,"	public void setEmail(String email) {
		this.email = email;
	}
"
1147,06bf12ad-dcd9-4bfc-9a81-e3ac8175db89,"	public String getNombre() {
		return this.nombre;
	}
"
1148,ac85c971-c0fd-4003-bd7f-8447012a306c,"	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
"
1149,af305161-58cb-45f5-b90b-4de3e033d892,"	public BaseTabComentario() {
	}
"
1150,72a4d450-0d03-45bc-ba32-5d75926166ab,"	public long getComentarioCod() {
		return this.comentarioCod;
	}
"
1151,e9f245d3-a570-4d3c-875b-16f6b1c449ef,"	public void setComentarioCod(long comentarioCod) {
		this.comentarioCod = comentarioCod;
	}
"
1152,6ea203af-52c2-4fbe-80f4-a44dc5a424ff,"	public Boolean getConcluyente() {
		return this.concluyente;
	}
"
1153,97170838-c516-4c7a-8264-f8af69ec971d,"	public void setConcluyente(Boolean concluyente) {
		this.concluyente = concluyente;
	}
"
1154,e9b99c7d-2c59-4987-9bde-6b17eb77a749,"	public String getTexto() {
		return this.texto;
	}
"
1155,20f01c2e-aee2-46df-8d3d-f44b5c191667,"	public void setTexto(String texto) {
		this.texto = texto;
	}
"
1156,6d5c3cad-8e6a-4cfd-87c6-a54465edf275,"	public BaseTabActividad() {
	}
"
1157,6eb9c2bf-1f2a-4c30-83af-1f962dc38f12,"	public long getActividadCod() {
		return this.actividadCod;
	}
"
1158,cd3e7bfd-699d-49a5-8435-e9d35ff8df1d,"	public void setActividadCod(long actividadCod) {
		this.actividadCod = actividadCod;
	}
"
1159,80c21c8b-69f3-44ce-8b59-0a34dded03a1,"	public String getDescripcion() {
		return this.descripcion;
	}
"
1160,6317dc8a-1233-440c-b20f-60faebe8df7f,"	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}
"
1161,a055e527-3b34-4519-8a75-b120077e5b9a,"	public Date getFechaEntrega() {
		return this.fechaEntrega;
	}
"
1162,f993e6e5-efe1-4622-b140-31388d77bcc3,"	public void setFechaEntrega(Date fechaEntrega) {
		this.fechaEntrega = fechaEntrega;
	}
"
1163,fe190f64-0bc1-4b5a-b2e1-9590ece42be3,"	public String getTitulo() {
		return this.titulo;
	}
"
1164,e260a961-eee5-466b-a33f-371c7ce77dbf,"	public void setTitulo(String titulo) {
		this.titulo = titulo;
	}
"
1165,f81e6562-e012-4457-9c70-7112e4d0a92f,"	public BaseTabActividad getBaseTabActividad() {
		return this.baseTabActividad;
	}
"
1166,5816448e-e4c5-4da7-b7e3-623e4a7db6b7,"	public void setBaseTabActividad(BaseTabActividad baseTabActividad) {
		this.baseTabActividad = baseTabActividad;
	}
"
1167,ef7c01e7-9dfd-4ded-a97c-a92870430645,"	public BaseTabEstadoavance() {
	}
"
1168,d5ef9e15-f4da-4604-880d-ffba87fc00b5,"	public long getEstadoavanceCod() {
		return this.estadoavanceCod;
	}
"
1169,2f23c623-5ce5-4939-a5b2-66740c1b5a55,"	public void setEstadoavanceCod(long estadoavanceCod) {
		this.estadoavanceCod = estadoavanceCod;
	}
"
1170,3fb45bea-227d-4c82-b9f8-8c519b8261c3,"	public String getDescripcion() {
		return this.descripcion;
	}
"
1171,f6a1eb13-4863-4fc5-91e7-74a43b00a191,"	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}
"
1172,7880acf1-2a95-4e4f-a4c2-a4794ad2edc1,"	public String getGlosa() {
		return this.glosa;
	}
"
1173,95bff8c2-6a05-46b3-96db-5420f838d1d9,"	public void setGlosa(String glosa) {
		this.glosa = glosa;
	}
"
1174,08a071cb-3b6c-4fd3-aa06-6a7174a65523,"	public BaseTabArchivoadjuntocomentario() {
	}
"
1175,2c89324c-0078-4511-9da7-ab998634f0d0,"	public long getArchivoadjuntocomentarioCod() {
		return this.archivoadjuntocomentarioCod;
	}
"
1176,751142d4-2f65-49a2-9f4b-62895d62652d,"	public void setArchivoadjuntocomentarioCod(long archivoadjuntocomentarioCod) {
		this.archivoadjuntocomentarioCod = archivoadjuntocomentarioCod;
	}
"
1177,7c17d78a-206d-4909-b034-d30cf28cf255,"	public Timestamp getFechaAdjunto() {
		return this.fechaAdjunto;
	}
"
1178,1df87ade-0fbe-4345-9651-464bcd747233,"	public void setFechaAdjunto(Timestamp fechaAdjunto) {
		this.fechaAdjunto = fechaAdjunto;
	}
"
1179,6a37633c-6806-4321-b9d1-732e182a9287,"	public BaseTabArchivoadjunto getBaseTabArchivoadjunto() {
		return this.baseTabArchivoadjunto;
	}
"
1180,fdc068fb-1748-466f-9ee2-b782cef9d84f,"	public void setBaseTabArchivoadjunto(BaseTabArchivoadjunto baseTabArchivoadjunto) {
		this.baseTabArchivoadjunto = baseTabArchivoadjunto;
	}
"
1181,4a96333c-1507-4a82-bde0-7dfcc3d766e3,"	public BaseTabComentario getBaseTabComentario() {
		return this.baseTabComentario;
	}
"
1182,013f9559-a67b-48f3-8075-68dcf03995bd,"	public void setBaseTabComentario(BaseTabComentario baseTabComentario) {
		this.baseTabComentario = baseTabComentario;
	}
"
1183,442f6f47-23ce-4242-9fb1-0e40f69fba76,"    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<Transaction> getTransactions(@QueryParam(""accountId"") int accountId) {
        return Repository.findTransactions(accountId);
    }
"
1184,5b9b600f-a360-4778-84f5-369a8d7e161b,"    public Account() {
    }
"
1185,7dc5b5bf-565e-4585-868d-74305b14f8f8,"    public Account(int id, String name, String balanceType, double balance) {
        this.id = id;
        this.name = name;
        this.balanceType = balanceType;
        this.balance = balance;
    }
"
1186,3c10c593-bb63-48ea-960d-262f968a842e,"    public int getId() {
        return id;
    }
"
1187,7288d1be-14aa-4c61-a3e6-ce00c2f5de73,"    public void setId(int id) {
        this.id = id;
    }
"
1188,0bbc2256-ea7f-4efa-94fa-78f7c3ed3b92,"    public String getName() {
        return name;
    }
"
1189,cdfb994c-15dd-4933-a5b7-c4fd9256f2fe,"    public void setName(String name) {
        this.name = name;
    }
"
1190,13190d50-d6f4-4a98-9339-24889f306dca,"    public String getBalanceType() {
        return balanceType;
    }
"
1191,1034d46d-1ce4-4f50-b6c5-b33c36e88f88,"    public void setBalanceType(String balanceType) {
        this.balanceType = balanceType;
    }
"
1192,654f57d2-1141-48d6-b07c-299812078ad1,"    public double getBalance() {
        return balance;
    }
"
1193,85df5565-346a-4b25-8f3c-8aba99b8d6cb,"    public void setBalance(double balance) {
        this.balance = balance;
    }
"
1194,6a17d174-fa0f-4276-9ddb-d8490f79bd26,"    public static List<Account> findAccounts() {
        return new ArrayList<Account>(accounts);
    }
"
1195,5c04a359-022f-4175-905b-9bd677b43077,"    public static List<Transaction> findTransactions(int accountId) {
        List<Transaction> transactionList = new ArrayList<Transaction>();
        for (Transaction transaction: transactions) {
            if (transaction.getAccountId() == accountId) {
            	transactionList.add(transaction);
            }
        }
        
        return transactionList;
    }
"
1196,4c89a594-4063-4ece-9ff1-c1f811404b6c,"    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<Account> getAccounts() {
        return Repository.findAccounts();
    }
"
1197,89e522fe-17f3-4a73-8e0b-88be559e4627,"    public Transaction() {
    }
"
1198,34848269-db02-44bc-9ee3-5c160baaeecd,"    public Transaction(
            int id,
            int accountId,
            String date,
            String description,
            String type,
            String status,
            double amount,
            double balance) {
        this.id = id;
        this.accountId = accountId;
        this.date = date;
        this.description = description;
        this.type = type;
        this.status = status;
        this.amount = amount;
        this.balance = balance;
    }
"
1199,84b624b8-9a87-4430-a780-f3e648e99063,"    public int getId() {
        return id;
    }
"
1200,3f9ce223-c39d-4927-99fb-b719257d943c,"    public void setId(int id) {
        this.id = id;
    }
"
1201,bb691953-b8f5-4526-b69d-dcc6251c7eca,"    public int getAccountId() {
		return accountId;
	}
"
1202,9d8e322e-2f03-47a3-be58-4adbd21eec04,"	public void setAccountId(int accountId) {
		this.accountId = accountId;
	}
"
1203,dbf0fbce-5fd5-4b15-b8c5-c17fb57129ef,"    public String getDate() {
		return date;
	}
"
1204,53da75f8-bcd1-48bc-93e6-25d6de78a785,"	public void setDate(String date) {
		this.date = date;
	}
"
1205,7b1ec807-2d5f-4421-a7ed-b93a75d58fbe,"	public String getDescription() {
        return description;
    }
"
1206,a19232e7-a037-4abb-bde2-d043306db74e,"    public void setDescription(String description) {
        this.description = description;
    }
"
1207,42595dbd-006e-4b22-9059-ac7a88749af6,"    public String getType() {
        return type;
    }
"
1208,e424fba6-3ad6-493a-b429-c1db1cda08cc,"    public void setType(String type) {
        this.type = type;
    }
"
1209,6885c562-3c42-4b06-aa59-e617617b2fca,"    public String getStatus() {
        return status;
    }
"
1210,a0edc434-412d-4731-8e6a-b502633e70c5,"    public void setStatus(String status) {
        this.status = status;
    }
"
1211,f0dfcbd8-fa6f-4bad-ad02-a74c1c4fbd94,"    public double getAmount() {
        return amount;
    }
"
1212,231b439c-fac8-4303-a188-484d20083061,"    public void setAmount(double amount) {
        this.amount = amount;
    }
"
1213,15d80700-9da3-4058-9620-580d385e97b9,"    public double getBalance() {
        return balance;
    }
"
1214,229f021b-4299-4973-bcad-8daa01d7615e,"    public void setBalance(double balance) {
        this.balance = balance;
    }
"
1215,d64c6aa3-7f49-48d6-a551-485bab645ef5,"	Level (int e, PApplet p) {
		this.elevation = e;
		this.levelWidth = 20 * feet;
		parent = p;
	}
"
1216,d266dde8-af03-489c-8646-f4d72881536d,"	 Level (int e, int w, PApplet p){
	      this.elevation = e;
	      this.levelWidth = w;
	      parent = p;
	 }
"
1217,a6d2e05b-97c9-47b1-b8b0-87c751192d83,"	 void drawLevel(int i){
	    	drawLevelGraphic(i);
	    	drawLevelData(i);
	    }
"
1218,4abbe403-789d-4249-bb85-0387ab4ef6db,"	    void drawLevelGraphic(int i){
	    	parent.pushMatrix(); 
	    	parent.translate(0,0,elevation); 
	    	parent.noStroke();  // levels are not outlined
	    	parent.fill(250-i*10,0,0,5); // levels are transparent red
	    	parent.rectMode(PApplet.CENTER);
	    	parent.rect(0, 0, levelWidth, levelWidth); //  
	    	parent.popMatrix(); 
	    }
"
1219,92d3dfbb-33c5-4037-9d74-ec89aa7a9037,"	    void drawLevelData(int i){
	    	drawLevelName(i);
	    	drawLevelHeight(i);
	    }
"
1220,a79af73c-940a-49d2-ad70-539b458e0ab6,"	    void drawLevelName(int i){
	    	parent.pushMatrix(); 
	    	parent.translate(levelWidth/2+textMargin , levelWidth/2, elevation); 
	    	parent.fill(50, 50, 50, 55);
	    	parent.textSize(40);
	    	parent.text(""LEVEL "" + i, 0, 0);
	    	parent.popMatrix(); 
	    }
"
1221,026ec72f-a322-44dd-9a91-e4c427707981,"	    void drawLevelHeight(int i){
	    	parent.pushMatrix(); 
	    	parent.translate(levelWidth/2+textMargin , levelWidth/2+levelTextSize, elevation); 
	    	parent.fill(50, 50, 50, 95);
	    	parent.textSize(levelTextSize);
	    	parent.text( (int)(elevation/feet) + "" ' - "" + (int)(elevation%feet) + "" ''"", 0, 0);
	    	parent.popMatrix(); 
	    }
"
1222,7fba7a8d-c0ac-4a9f-a95d-d7b4ddafc68a,"	ColumnGridLine(int num, PApplet p){
		parent = p;
		dist = num;
		name = (Integer.toString(num));
	
    }
"
1223,0b00cace-bb97-4bff-94f5-4f0e3b71cfdb,"	public String getName(){
		return name;
		
	}
"
1224,986f6d36-2be9-433b-9e2b-029ebe4c29df,"	void drawGridLine(int w, int d){
		parent.pushMatrix();
		parent.stroke(150);
		parent.translate(-(w/2), 0 , 0);
		
		parent.line(dist, (-length/2)-margin, dist, (length/2)+margin );
		//parent.line(dist, (-length/2), dist, (length/2));
    	parent.fill(50, 50, 50, 155);
    	parent.textSize(gridTextSize);
    	//parent.text(name,dist+2,(length/2)+margin);
    	parent.text(name, dist+2, (length/2)+margin);
    	parent.popMatrix();
	}
"
1225,40065925-62d9-415a-a29e-4e245c09869b,"	 public void drawGridLineName(int w, int name){
	    	parent.pushMatrix();
			parent.stroke(150);
			parent.translate(-(w/2), 0, 0 );
	    	parent.fill(50, 50, 50, 155);
	    	parent.textSize(50);
	    	//parent.text(name+1,dist+2,(-length/2)-margin);
	    	parent.text(name+1,dist+2,(-length/2)-margin);
	    	parent.popMatrix();
	 }
"
1226,df14c7e5-202f-43cb-b4c6-559be52d8b9c,"	 public void drawGridLineLetter(int w, int name){
		    int newname = name + 65;
		 	parent.pushMatrix();
			parent.stroke(150);
			parent.translate(-(w/2), 0, 0 );
	    	parent.fill(50, 50, 50, 155);
	    	parent.textSize(50);
	    	//parent.text((char)newname,dist+2,(-length/2)-margin);
	    	parent.text((char)newname, dist+2, (-length/2)-margin);
	    	parent.popMatrix();
	 }
"
1227,30363b02-19fc-493d-9368-687eeaf965c7,"	 public boolean locked(int x){
		 if (x==1){
			 return true;
		 }else{
			 return false;
		 }
	 }
"
1228,20d05b5e-cfd5-40cd-b705-e63b4bcc40fa,"	 public boolean pinned(int x){
		 if (x==2){
			 return true;
		 }else{
			 return false;
		 }
	 }
"
1229,8c8fe3cd-042e-441d-9e6a-607fa7ff89f6,"	 public void drawColumn(int w){
			setColors();
	    	parent.pushMatrix();
	 
	    	//parent.translate( -(mySkyscraper.myColumn.w/2), 0, (base.elevation + h/2) ); // CRUD the grid line doesn't know where it is!
	    	parent.translate(-(w/2), 0, 1000); // CRUD the grid line doesn't know where it is!
	    	parent.box(12, 12, 2236); //to be replaced with extruded sketch of profile
	    	parent.popMatrix();
	}
"
1230,d20f4e87-ca14-426c-9de0-cb3d3a88da32,"	    void setColors(){
	    	parent.stroke(155);  // Floors are outlined
	    	parent.fill(155,155); // levels are transparent grey
	    }
"
1231,d0cdb28b-05fe-463f-adc5-d924c1e5f952,"    public LevelStack (int numLevels, int levelWidth, PApplet p ){
    	parent = p;
    	myLevels = new ArrayList<Level>();

    	for (int i=0; i<numLevels; i++){
    		myLevels.add(new Level(i*typicalLevelHeight, levelWidth, parent) );
    	}

    }
"
1232,d5a7e95e-7af3-4ee6-a0ef-b8937c9228fa,"    public void drawStack(){
    	for (int i=0; i<myLevels.size(); i++){
    		lev = (Level) myLevels.get(i);
    		lev.drawLevel(i);
    	}
    }
"
1233,a277fd25-ea68-4a28-ae84-0be67bcf3ee1,"    public void addLevel(){
    	int lastIndex = myLevels.size()-1;
    	myLevels.add(new Level(lastIndex*typicalLevelHeight, parent));
    }
"
1234,cca7dbf4-626a-4117-8f6d-7f813eb3cbfd,"    public void removeLevel(int i){
    	myLevels.remove(i);
    }
"
1235,2e60a6be-835a-4400-a9af-0d0ad2670127,"    public void flush(){
    	myLevels.clear();
    }
"
1236,55f7a6d3-586b-41b0-86d4-a61baa33c6f2,"    public void setHeight(int h, int i){
    	lev = (Level) myLevels.get(i);
    	lev.elevation = h;
    }
"
1237,d8af0b8c-3d15-483b-afb3-a2a77f2c1f29,"    public void setWidthAll(int w){
    	for (int i = 0; i < myLevels.size(); i++) {
    		lev = (Level) myLevels.get(i);
    		lev.levelWidth = w;
    	}
    }
"
1238,3b098875-625b-4870-9797-d950147d564c,"	public void setup() {

		size(1200, 800, OPENGL);
		p3 = (PGraphics3D) g;
		cam = new PeasyCam(this, 300 * feet);
		//cam.setMinimumDistance(2 * feet);
		//cam.setMaximumDistance(2000 * feet);

		cp5 = new cp5GUI(this);
		cp5.inCP5();
		cp5.initialize();
		
		System.out.println(cp5.lw + ""   "" + cp5.nl);
		
		mySkyscraper = new Skyscraper(cp5.nl, cp5.lw, this);

	}
"
1239,832b3e93-661d-4161-a542-55a7137376b7,"	public void draw() {
		
		background(250);
		
		//hint(ENABLE_DEPTH_TEST);
		pushMatrix();
		mySkyscraper.myLevels.drawStack();
		
		popMatrix();
		//hint(DISABLE_DEPTH_TEST);
		gui();
		
		cam.setActive(true);
		if(cp5.cp5.isMouseOver()){
			cam.setActive(false);
		}
	}
"
1240,c019a181-375b-4a82-88ae-7bd114e9838f,"	void gui() {
		
		hint(DISABLE_DEPTH_TEST);
		cam.beginHUD();
		currCameraMatrix  = new PMatrix3D(p3.camera);
		camera();
		cp5.cp5.draw();
		p3.camera = currCameraMatrix;
		cam.endHUD();
		hint(ENABLE_DEPTH_TEST);
		
	}
"
1241,3ea89f55-aba2-45cb-8b11-330515a3532e,"	public void numLevels(String theText){
		mySkyscraper.myLevels.flush();
		cp5.nl = Integer.parseInt(theText);
		mySkyscraper.myLevels = new LevelStack(cp5.nl, cp5.lw, this);
	}
"
1242,c517c7c7-dbf2-4b3d-b7ac-5cad37ef6c4e,"	public void lvlWidth(String theText){
		cp5.lW = theText;
		cp5.lw = Integer.parseInt(cp5.lW)*feet;
		for (int i = 0; i < mySkyscraper.myLevels.myLevels.size(); i++){
			lev = (Level)mySkyscraper.myLevels.myLevels.get(i);
			lev.levelWidth = cp5.lw;
		}
	}
"
1243,9b68ebad-ec13-45a9-9f11-845c6228d2c4,"	public cp5GUI(PApplet p){
		parent = p;
		cp5 = new ControlP5(parent);
	}
"
1244,97cdff36-853e-45dc-a242-eee58368e7ec,"		public void initialize(){
			nl = getInt(""numLevels"");
			lw = getInt(""lvlWidth"")*feet;
			
		}
"
1245,dacdbf28-c558-4043-be63-d75752fdd9dd,"		public int getInt(String name){
			return Integer.parseInt(cp5.get(Textfield.class, name).getText());
		}
"
1246,4bef2eb3-7caa-4195-b9b0-e9b41118ff40,"		public void inCP5(){
			g1 = cp5.addGroup(""g1"")
					.setPosition(0, 11)
					.setBackgroundHeight(100)
					.setBackgroundColor(color(50,100))//.bringToFront()
					.setLabel(""Levels"")
					;
			
			cp5.addTextfield(""numLevels"").setCaptionLabel(""Number of Levels"").setPosition(10,10).setSize(70, 15).setValue(""1"").setAutoClear(false).setGroup(g1);
			cp5.addTextfield(""lvlWidth"").setCaptionLabel(""Level Width"").setPosition(10, 40).setSize(70, 15).setValue(""40"").setAutoClear(false).setGroup(g1);
			cp5.addButton(""addLevel"").setCaptionLabel(""Add Level"").setPosition(10, 70).setSize(70, 15).setGroup(g1);

			g2 = cp5.addGroup(""g2"")
					.setPosition(0,121)
					.setWidth(300)
					.activateEvent(true)
					.setBackgroundColor(color(50,100))
					.setBackgroundHeight(100)
					.setLabel(""Hello World."")
					.bringToFront()
					.setMoveable(true)
					;

			cp5.addSlider(""S-1"")
			.setPosition(80,10)
			.setSize(180,9)
			.setGroup(g2)
			;

			cp5.addSlider(""S-2"")
			.setPosition(80,20)
			.setSize(180,9)
			.setGroup(g2)
			;

			cp5.addRadioButton(""radio"")
			.setPosition(10,10)
			.setSize(20,9)
			.addItem(""black"",0)
			.addItem(""red"",1)
			.addItem(""green"",2)
			.addItem(""blue"",3)
			.addItem(""grey"",4)
			.setGroup(g2)
			;
			
			cp5.setAutoDraw(false);
			
			//ControlFrame is for seperate windows
			/*cf = addControlFrame(""extra"", 200, 200);
			*cf = addControlFrame(""blank"", 300, 200);
			**/
		}
"
1247,8d0692e8-995b-40e8-98b9-be697dd6fe5b,"		public void controlEvent(ControlEvent theEvent) {
			if(theEvent.isGroup()) {
				println(""got an event from group ""
						+theEvent.getGroup().getName()
						+"", isOpen? ""+theEvent.getGroup().isOpen()
						+""     "" + theEvent.getGroup().isMouseOver()
						);

			} else if (theEvent.isController()){
				println(""got something from a controller ""
						+theEvent.getController().getName()
						);
			} else if (theEvent.isFrom(""Set"")){
				noLoop();
				//theEvent.getController().get
				
			}
		}
"
1248,6942ee4f-4521-42fd-8cdf-fc6c55451824,"		public void keyPressed() {
			if(key==' ') {
				if(cp5.getGroup(""g1"")!=null) {
					cp5.getGroup(""g1"").remove();
				}
			}
		}
"
1249,9eff61c2-3e16-418b-9047-811d1b371c71,"	public void setup() {
		size(w, h);
		frameRate(25);
		cp5 = new ControlP5(this);
		cp5.addSlider(""abc"").setRange(0, 255).setPosition(10,10);
		cp5.addSlider(""def"").plugTo(parent,""def"").setRange(0, 255).setPosition(10,30).setValue(250);
	}
"
1250,d8b36a3f-7c09-4655-8fb4-9451f5ed9ab2,"	public void draw() {
		background(abc);
	}
"
1251,8d4109b5-30f8-4ba8-bbd4-36eb9c4f4915,"	public ControlFrame() {
	}
"
1252,ea394d0c-50e9-455b-84dc-c44c200ba6a6,"	public ControlFrame(Object theParent, int theWidth, int theHeight) {
		parent = theParent;
		w = theWidth;
		h = theHeight;
	}
"
1253,5f8e061f-8414-4755-81d3-d1ad0c0f00b9,"	public ControlP5 control() {
		return cp5;
	}
"
1254,1fdc4889-e793-4e92-88ce-a41d7d241bc3,"    public Skyscraper(int nl, int lw, PApplet p){
    	myLevels = new LevelStack(nl, lw, p); // initialize with 0 Levels
    }
"
1255,62ccd733-0026-4e39-a8d7-d010ee9e2406,"public static void main(String[] args) {
	System.out.println(HeaderType.valueOf(""id"").toString());
}
"
1256,4663c716-84ed-4a52-9823-38e44cdd5fa1,"	public void metaData(String[] args);
"
1257,e3555639-1471-4b1f-bc93-320969cb1f1a,"	@Override
	public void metaData(String[] args) {
		MetaData.main(args);
	}
"
1258,7e125687-c115-4e00-b2d9-0e134c4a29b4,"	private HeaderType(String type) {
		this.typeOf=type;
	}
"
1259,50bfd248-0cff-4caa-b58c-7fe013143573,"	public String toString(){
	       return typeOf;
	    }
"
1260,d1a3b171-77ce-4052-8171-00e0be8ffb0d,"		@Override
		protected void setup(Context context) throws IOException,
				InterruptedException {
			headers = context.getConfiguration().get(""header"").trim()
					.split(""\\,"");
		}
"
1261,1e7c7373-6f5d-496f-8329-863a7abb6f3f,"		@Override
		protected void map(LongWritable key, Text value, Context context)
				throws IOException, InterruptedException {
			String[] words = value.toString().split(""\\,"");
			if (key.get() != 0) {
				for (int i = 2; i < 11; i++) {
					context.write(new Text(headers[i]), new Text(words[i]));
				}
			}

		}
"
1262,510ab2f8-0a89-4d15-9cb4-43eccbc02d6b,"		@Override
		protected void reduce(Text key, Iterable<Text> values, Context context)
				throws IOException, InterruptedException {
			System.out.println(HeaderType.valueOf(
					key.toString().trim().replaceAll(""\\ "", """")).toString());
			switch (HeaderType.valueOf(
					key.toString().trim().replaceAll(""\\ "", """")).toString()) {
			case ""number"":
				System.out.println(""number me for key =""+key.toString());
				double max = Integer.MIN_VALUE;
				double min = Integer.MAX_VALUE;
				double avg = 0.0;
				Integer count = 0;
				for (Text value : values) {
					double curr = Double.parseDouble(value.toString().trim());
					max = max <= curr ? curr : max;
					min = min >= curr ? curr : min;
					avg += curr;
					count++;

				}
				context.write(
						key,
						new Text(""max="" + String.valueOf(max) + ""\t min=""
								+ String.valueOf(min) + ""\t AVg=""
								+ String.valueOf(avg / count)));

				break;
			case ""words"":
				System.out.println(""words me for key=""+key.toString());
				Map<String, Integer> countOfCat=new HashMap<String, Integer>();
				count=0;
				for (Text word : values) {
				
					
					if (countOfCat.containsKey(word.toString())) {
						count=countOfCat.get(word.toString()) ;
						countOfCat.put(word.toString(), ++count);
					}else{
						countOfCat.put(word.toString(), 1);
					}
				} 
				String tmp=new String();
				for (Entry<String, Integer> entry : countOfCat.entrySet()) {
					tmp+=entry.getKey()+""=""+entry.getValue()+""\t"";
				}
				context.write(key, new Text(tmp));
				break;

			default:
				break;
			}
			
			
			

		}
"
1263,d2d96722-1317-43a2-9015-e962af30ca5c,"	public static void main(String[] args) {
		try {
			Configuration configuration = new Configuration();
			configuration
					.set(""header"",
							""id,tstamp,Queue Time,Hold Time,Talk Time,Agent Skill,Agent Tenure,Case Severity,Answer Within Service Level,Brand,Case Status,Product,Vendor,Location,Customer Satisfaction,Satisfaction with Agent,Brand - Satisfaction,Repurchase Likelihood,Recommend Likelihood,Problem Resolution,First Contact Resolution,Resolved within 2"");
			Job job = new Job(configuration);
			job.setJarByClass(MetaData.class);
			job.setJobName(""Meata Data for valiables"");

			FileInputFormat.addInputPath(job, new Path(args[0]));
			FileOutputFormat.setOutputPath(job, new Path(args[1]));

			job.setInputFormatClass(TextInputFormat.class);
			job.setOutputFormatClass(TextOutputFormat.class);

			job.setOutputKeyClass(Text.class);
			job.setOutputValueClass(Text.class);

			job.setMapperClass(MetaDataMapper.class);
			job.setReducerClass(MetaDataReducer.class);
			job.waitForCompletion(true);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
"
1264,a75f41af-4964-46dd-8656-f151b726f5b8,"	private CarGasType(String prologValue) {
		mFieldValue = prologValue;
	}
"
1265,25b927ba-489d-459e-8417-05c1c84a77d8,"	public String getPrologFieldName() {
		return FIELD_NAME;
	}
"
1266,1d9baa13-0db5-4096-9104-eba24d390b7d,"	public String getPrologFieldValue() {
		return mFieldValue;
	}
"
1267,49952b2f-8af2-4c33-961c-145724bd23b4,"	private CarDoorsType(String prologValue) {
		mFieldValue = prologValue;
	}
"
1268,35387ab5-9775-48bf-bd0f-47b38446ad81,"	public String getPrologFieldName() {
		return FIELD_NAME;
	}
"
1269,58f76280-ca9e-4162-81e2-1f53cd894201,"	public String getPrologFieldValue() {
		return mFieldValue;
	}
"
1270,c1133043-7689-4d28-8c41-6a14a3a97f88,"	private CarTrunkCapacityType(String prologValue) {
		mFieldValue = prologValue;
	}
"
1271,60e364e7-3e76-4290-aa98-4b227b5d198a,"	public String getPrologFieldName() {
		return FIELD_NAME;
	}
"
1272,18404b31-1a95-4e97-80c2-ee59c0cda641,"	public String getPrologFieldValue() {
		return mFieldValue;
	}
"
1273,f86836ee-91a4-4830-8b4c-9c6ec399d857,"	private CarManufacturerProductionType(String prologValue) {
		mFieldValue = prologValue;
	}
"
1274,4ed6318b-3df4-445d-afad-aae52dac5553,"	public String getPrologFieldName() {
		return FIELD_NAME;
	}
"
1275,e351b711-9214-4a40-8b1f-a95a365e6fe2,"	public String getPrologFieldValue() {
		return mFieldValue;
	}
"
1276,1efddd90-920c-4265-b7b3-bb98ba164b4d,"	public String getPrologFieldName();
"
1277,b1c23bdc-4254-4c2f-a6c4-57b1a8bd704c,"	public String getPrologFieldValue();
"
1278,905e655a-ee78-4c5f-96a2-9cc3d0963c7c,"	private CarBodyType(String prologValue) {
		mFieldValue = prologValue;
	}
"
1279,b1624722-3318-4434-af17-a19640ae202f,"	public String getPrologFieldName() {
		return FIELD_NAME;
	}
"
1280,ab223b3f-e5a1-47bc-b54f-3363039ed26a,"	public String getPrologFieldValue() {
		return mFieldValue;
	}
"
1281,b3d3654a-5e8f-4459-8daa-0a5d3da76ed4,"	private CarTurboType(String prologValue) {
		mFieldValue = prologValue;
	}
"
1282,cd75dc0b-1989-4ec9-b8c1-a5a74e23ba3f,"	public String getPrologFieldName() {
		return FIELD_NAME;
	}
"
1283,a17731f5-132c-487c-be00-b3b2eeecde4b,"	public String getPrologFieldValue() {
		return mFieldValue;
	}
"
1284,e6046f2c-84d4-4b0f-93ef-8311304c408e,"	private CarPriceType(String prologValue) {
		mFieldValue = prologValue;
	}
"
1285,5e0035f4-5de2-4c05-8eb8-d1f18ca5b0a0,"	public String getPrologFieldName() {
		return FIELD_NAME;
	}
"
1286,163f0665-20aa-4cae-ba7a-605e6120c965,"	public String getPrologFieldValue() {
		return mFieldValue;
	}
"
1287,98632893-368c-48ff-9179-7f04769cd552,"	private CarSuspensionType(String prologValue) {
		mFieldValue = prologValue;
	}
"
1288,61edc001-c1c8-43bc-9277-3943672906cd,"	public String getPrologFieldName() {
		return FIELD_NAME;
	}
"
1289,c3d75458-bb0a-4bfa-af03-52fff3b93ca8,"	public String getPrologFieldValue() {
		return mFieldValue;
	}
"
1290,3ff13475-0514-4668-a0d4-cfc9381aca09,"	public PrologCommunicator() {
		initializeEnvironment();
	}
"
1291,65b553fb-b562-4c36-ad5c-dd8864cc27bf,"	private void initializeEnvironment() {
		Query query = new Query(""consult('prolog/samochod.pl')"");
		if (!query.hasSolution()) {
			System.out.println(""consult('samochod.pl') failed"");
			System.exit(1);
		}
	}
"
1292,729711cb-4c29-483c-aee8-5232426d5793,"	public void onPrologQueryRequested(
			List<PrologModelApplicable> preconditionsList,
			OnPrologQueryResultListener resultListener) {

		clearEnvironmentPreconditions();
		setEnvironmentPreconditions(preconditionsList);
		performExpertConsultation(resultListener);
	}
"
1293,1df455ee-f442-4778-bbac-6365fa017be3,"	private void clearEnvironmentPreconditions() {
		new Query(CLEAR_ENVIRONMENT_QUERY).hasSolution();
	}
"
1294,ce8d3d5f-777f-46a3-b13c-f4c94dfe3129,"	private void setEnvironmentPreconditions(
			List<PrologModelApplicable> preconditionsList) {
		
		Query preconditionQuery = null;
		for (PrologModelApplicable precondition : preconditionsList) {
			preconditionQuery = new Query(PRECONDITION_QUERY, new Term[] {
					new Atom(precondition.getPrologFieldName()),
					new Atom(precondition.getPrologFieldValue()) });
			preconditionQuery.hasSolution();
			preconditionQuery.close();
		}
	}
"
1295,945e5e10-fba2-49fa-9eed-6606948ef239,"	private void performExpertConsultation(
			OnPrologQueryResultListener resultListener) {

		Variable x = new Variable(""X"");
		Query q = new Query(ASK_EXPERT_QUERY, new Term[]{x});
		List<String> carSolutions = new ArrayList<String>();
		if (q.hasSolution()) {
			for (Object object : q.allSolutions()) {
				carSolutions.add("""" + object + ""\n"");
			}
		} else {
			carSolutions.add(""There's no car matching the pattern.\n"");
		}
		
		resultListener.onPrologQueryResultReceived(carSolutions);
	}
"
1296,f3b3317d-d101-4db1-bca1-f625e610f699,"	public RootFrame() {
		super(""An expert car chooser"");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 578, 453);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBounds(5, 5, 212, 398);
		contentPane.add(panel);
		panel.setLayout(null);
		
		JComboBox<PrologModelApplicable> comboBox_1 = new JComboBox<PrologModelApplicable>();
		comboBox_1.setModel(new DefaultComboBoxModel<PrologModelApplicable>(CarManufacturerProductionType.values()));
		comboBox_1.setBounds(0, 21, 202, 19);
		comboBox_1.setToolTipText(""Choose country"");
		comboBox_1.setSelectedIndex(-1);
		mPrologContentComboBoxes.add(comboBox_1);
		panel.add(comboBox_1);
		
		JComboBox<PrologModelApplicable> comboBox = new JComboBox<PrologModelApplicable>();
		comboBox.setModel(new DefaultComboBoxModel<PrologModelApplicable>(CarSuspensionType.values()));
		comboBox.setBounds(0, 66, 202, 19);
		mPrologContentComboBoxes.add(comboBox);
		comboBox.setSelectedIndex(-1);
		panel.add(comboBox);
		
		JComboBox<PrologModelApplicable> comboBox_3 = new JComboBox<PrologModelApplicable>();
		mPrologContentComboBoxes.add(comboBox_3);
		comboBox_3.setModel(new DefaultComboBoxModel<PrologModelApplicable>(CarGasType.values()));
		comboBox_3.setBounds(0, 113, 202, 19);
		comboBox_3.setSelectedIndex(-1);
		panel.add(comboBox_3);
		
		JComboBox<PrologModelApplicable> comboBox_2 = new JComboBox<PrologModelApplicable>();
		mPrologContentComboBoxes.add(comboBox_2);
		comboBox_2.setModel(new DefaultComboBoxModel<PrologModelApplicable>(CarDoorsType.values()));
		comboBox_2.setBounds(0, 162, 202, 19);
		comboBox_2.setSelectedIndex(-1);
		panel.add(comboBox_2);
		
		JLabel lblManufacturerCountry = new JLabel(""Manufacturer country"");
		lblManufacturerCountry.setBounds(0, 0, 138, 14);
		panel.add(lblManufacturerCountry);
		
		JLabel lblBodyType = new JLabel(""Suspension type"");
		lblBodyType.setBounds(0, 51, 138, 14);
		panel.add(lblBodyType);
		
		JLabel lblGasType = new JLabel(""Gas type"");
		lblGasType.setBounds(0, 96, 138, 14);
		panel.add(lblGasType);
		
		JLabel lblNewLabel_1 = new JLabel(""Doors amount"");
		lblNewLabel_1.setBounds(0, 148, 95, 14);
		panel.add(lblNewLabel_1);
		
		JLabel lblPrice = new JLabel(""Price"");
		lblPrice.setBounds(0, 192, 138, 14);
		panel.add(lblPrice);
		
		JComboBox<PrologModelApplicable> comboBox_4 = new JComboBox<PrologModelApplicable>();
		comboBox_4.setModel(new DefaultComboBoxModel<PrologModelApplicable>(CarPriceType.values()));
		comboBox_4.setBounds(0, 210, 202, 19);
		comboBox_4.setSelectedIndex(-1);
		mPrologContentComboBoxes.add(comboBox_4);
		panel.add(comboBox_4);
		
		JLabel lblTurboType = new JLabel(""Turbo type"");
		lblTurboType.setBounds(0, 241, 138, 14);
		panel.add(lblTurboType);
		
		JComboBox<PrologModelApplicable> comboBox_5 = new JComboBox<PrologModelApplicable>();
		comboBox_5.setModel(new DefaultComboBoxModel<PrologModelApplicable>(CarTurboType.values()));
		comboBox_5.setBounds(0, 257, 202, 19);
		comboBox_5.setSelectedIndex(-1);
		mPrologContentComboBoxes.add(comboBox_5);
		panel.add(comboBox_5);
		
		JLabel lblTrunkType = new JLabel(""Trunk type"");
		lblTrunkType.setBounds(0, 287, 138, 14);
		panel.add(lblTrunkType);
		
		JComboBox<PrologModelApplicable> comboBox_6 = new JComboBox<PrologModelApplicable>();
		comboBox_6.setModel(new DefaultComboBoxModel<PrologModelApplicable>(CarTrunkCapacityType.values()));
		comboBox_6.setBounds(0, 303, 202, 19);
		comboBox_6.setSelectedIndex(-1);
		mPrologContentComboBoxes.add(comboBox_6);
		panel.add(comboBox_6);
		
		JButton btnNewButton = new JButton(""Reset choices"");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				mExpertAnswerRootPane.setText("""");
				for (JComboBox<PrologModelApplicable> comboBox : mPrologContentComboBoxes) {
					comboBox.setSelectedIndex(-1);
				}
			}
		});
		btnNewButton.setBounds(38, 364, 138, 23);
		panel.add(btnNewButton);
		
		JPanel panel_1 = new JPanel();
		panel_1.setBounds(217, 5, 338, 398);
		contentPane.add(panel_1);
		panel_1.setLayout(null);
		
		JLabel lblNewLabel = new JLabel(""Choose properties and ask the expert."");
		lblNewLabel.setBounds(59, 11, 226, 14);
		panel_1.add(lblNewLabel);
		lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
		
		JButton btnAskExpert = new JButton(""Ask Expert"");
		btnAskExpert.setBounds(89, 36, 163, 23);
		btnAskExpert.addActionListener(new AskExpertButtonActionListener());
		panel_1.add(btnAskExpert);
		
		mExpertAnswerRootPane = new JTextPane();
		mExpertAnswerRootPane.setBounds(21, 69, 292, 318);
		//panel_1.add(mExpertAnswerRootPane);
		
		JScrollPane pane = new JScrollPane(mExpertAnswerRootPane);
		pane.setBounds(21, 69, 292, 318);
		panel_1.add(pane);
	}
"
1297,86158be7-d1e4-4ff1-9c73-e5f7fbf3cbc1,"			public void actionPerformed(ActionEvent arg0) {
				mExpertAnswerRootPane.setText("""");
				for (JComboBox<PrologModelApplicable> comboBox : mPrologContentComboBoxes) {
					comboBox.setSelectedIndex(-1);
				}
			}
"
1298,276a8d6e-e318-4f1c-9934-68ba3e000f8a,"	public void setOnPrologQueryRequestedListener(OnPrologQueryRequestedListener listener) {
		mOnQueryRequestedListener = listener != null ? 
				listener : new EmptyOnPrologQueryRequestedListener();
	}
"
1299,68d017ef-9995-4453-b2a8-521f3e515a46,"	public void onPrologQueryResultReceived(List<String> associatedCarsList) {
		if (associatedCarsList == null)
			return;
		
		for (String car : associatedCarsList) {
			updateTextPane(car);
		}
	}
"
1300,ad1e3bea-6115-4baa-afda-f529e636da31,"	private void updateTextPane(final String text) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				Document doc = mExpertAnswerRootPane.getDocument();
				try {
					doc.insertString(doc.getLength(), text, null);
				} catch (BadLocationException e) {
					throw new RuntimeException(e);
				}
				mExpertAnswerRootPane.setCaretPosition(doc.getLength() - 1);
			}
		});
	}
"
1301,02af6615-48af-45fd-a514-a6dcf5fd346e,"			public void run() {
				Document doc = mExpertAnswerRootPane.getDocument();
				try {
					doc.insertString(doc.getLength(), text, null);
				} catch (BadLocationException e) {
					throw new RuntimeException(e);
				}
				mExpertAnswerRootPane.setCaretPosition(doc.getLength() - 1);
			}
"
1302,94c0dd63-69f4-4c72-9ea7-dabeed805cd5,"		public void actionPerformed(ActionEvent e) {
			mExpertAnswerRootPane.setText("""");
			mOnQueryRequestedListener.onPrologQueryRequested(
					obtainPrologPreconditions(), RootFrame.this);
		}
"
1303,93ba9419-cb6e-4404-b6e6-7d9e109e8c61,"		private List<PrologModelApplicable> obtainPrologPreconditions() {
			List<PrologModelApplicable> returnList = new ArrayList<PrologModelApplicable>();
			
			for (JComboBox<PrologModelApplicable> comboBox : mPrologContentComboBoxes) {
				if (comboBox.getSelectedIndex() < 0)
					continue;
				
				PrologModelApplicable currentPredefinedPredicate = 
						((PrologModelApplicable) comboBox.getSelectedItem());
				if (currentPredefinedPredicate == null)
					continue;
				
				returnList.add(currentPredefinedPredicate);
			}
			return returnList;
		}
"
1304,cb628896-d1da-4930-89f3-062b46a6fc6c,"		public void onPrologQueryRequested(
				List<PrologModelApplicable> preconditionsList,
				OnPrologQueryResultListener resultListener) {
			// do nothing
		}
"
1305,e4148238-9424-4eca-97b5-7fc130417ae4,"	public static void main(String... strings) {
		new Main().initialize();
	}
"
1306,5c58c227-9928-4bc8-8464-e1d13af61054,"	public void initialize() {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					mRootFrame.setOnPrologQueryRequestedListener(mPrologCommunicator);
					mRootFrame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
"
1307,deee8549-86ca-45b9-90c9-6072f330a265,"			public void run() {
				try {
					mRootFrame.setOnPrologQueryRequestedListener(mPrologCommunicator);
					mRootFrame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
"
1308,1bd355c5-45d1-49c6-85a7-c54660dab033,"	public void onPrologQueryResultReceived(List<String> associatedCarsList);
"
1309,dd68b6db-ce17-402e-b7f1-be89925938e8,"	public void onPrologQueryRequested(List<PrologModelApplicable> preconditionsList, 
			OnPrologQueryResultListener resultListener);
"
1310,27bda441-ea41-4c74-aa81-da83ed729bae,"        @Override
        public void run() {
            REAL_DRIVER.close();
        }
"
1311,ac8e1545-eb30-4eeb-9c8b-393f99a294c8,"    public SharedDriver() {
        super(REAL_DRIVER);
    }
"
1312,04be838f-2c0b-4ba3-a7ec-72cd2703ab8d,"    @Override
    public void close() {
        if (Thread.currentThread() != CLOSE_THREAD) {
            throw new UnsupportedOperationException(""You shouldn't close this WebDriver. It's shared and will close when the JVM exits."");
        }
        super.close();
    }
"
1313,16587de3-aa30-4a13-8d70-95bb5828140f,"    @Before
    public void deleteAllCookies() {
        manage().deleteAllCookies();
    }
"
1314,3e7a3a83-751f-4aaa-a82d-8478fc1ba02e,"    @After
    public void embedScreenshot(Scenario scenario) {
        try {
            byte[] screenshot = getScreenshotAs(OutputType.BYTES);
            scenario.embed(screenshot, ""image/png"");
        } catch (WebDriverException somePlatformsDontSupportScreenshots) {
            System.err.println(somePlatformsDontSupportScreenshots.getMessage());
        }
    }
"
1315,c0961c59-90cf-4303-922b-c896dcd274f8,"    public WebElement getErrorMessageElement() {
        return errorMessageElement;
    }
"
1316,9e9be399-e2e0-4084-960a-31918fdf8104,"    public void SignUp(String emailAddress) {
        email.sendKeys(emailAddress);
        email.submit();
    }
"
1317,1d73d631-4354-449c-946f-8eb4e79c1d2c,"    public WebElement getNoSignUpsMessageElement() {
        return noSignUpsMessageElement;
    }
"
1318,ba55707e-f435-4073-917f-bdb90514e9b4,"    public WebElement getThankYouHeadingElement() {
        return thankYouHeadingElement;
    }
"
1319,1c1a12c8-ef3f-458b-9344-143c929bc6b0,"    public WebElement getThankYouBodyTextElement() {
        return thankYouBodyTextElement;
    }
"
1320,05f4e082-e607-4571-ae2c-c747b0d0203f,"    public WebElement getInfoMessageElement() {
        return infoMessage;
    }
"
1321,5d69e8f5-9c57-4d77-a2f3-a87840a0604c,"    public Reset(SharedDriver driver) {
        this.driver = driver;
        conf = ConfigFactory.load();

    }
"
1322,b7453ea7-5ac5-435f-acb8-f97ce4ee0b48,"    @When(""^I go to the reset URL$"")
    public void iGoToTheResetURL() {
        driver.get(conf.getString(""moo-hw.host"")+""reset"");
    }
"
1323,a198fdcb-0c16-4a26-ac00-c316fda06f81,"    @Then(""^I will see a confirmation message$"")
    public void iWillSeeAConfirmationMessage()  {
        resetPage = PageFactory.initElements(driver, ResetPage.class);
        assertThat(resetPage.getInfoMessageElement().getText(), is(""List of emails has been reset""));
        driver.get(conf.getString(""moo-hw.host"")+""all"");
    }
"
1324,330b523e-3773-4710-837b-e42f6155eef4,"    @Then(""^there will be no email addresses on the email list$"")
    public void thereWillBeNoEmailAddressesOnTheEmailList()  {
        listAllPage = PageFactory.initElements(driver, ListAllPage.class);
        assertThat(listAllPage.getNoSignUpsMessageElement().getText(), is(""No email signups so far""));
    }
"
1325,681b6863-eff8-4e57-9b6d-f12b4f36a999,"    public ListAll(SharedDriver driver) {
        this.driver = driver;
        conf = ConfigFactory.load();

    }
"
1326,e27dd815-357f-4972-a1d2-445ae3e3eda6,"    @Given(""^I have signed up to the email list$"")
    public void iHaveSignedUpToTheEmailList() {
        driver.get(conf.getString(""moo-hw.host"")+""signup"");
        page = PageFactory.initElements(driver, SignUpPage.class);
        page.SignUp(emailAddress);
    }
"
1327,fd1cb819-2b23-44c5-aedb-daae4554b8bc,"    @When(""^I load the list subscribers page$"")
    public void iLoadTheListSubscribersPage()  {
        driver.get(conf.getString(""moo-hw.host"")+""all"");
    }
"
1328,b2a927b6-0cda-4818-b6f6-c60ab48afdec,"    @Then(""^I should see my email address$"")
    public void iShouldSeeMyEmailAddress() throws Throwable {
    assertThat(driver.findElement(By.tagName(""body"")).getText(), containsString(emailAddress));
    }
"
1329,2b673340-6ccc-4397-9b96-10fee947c59f,"    public SignUp(SharedDriver driver) {
        this.driver = driver;
        conf = ConfigFactory.load();
        page = PageFactory.initElements(driver, SignUpPage.class);
    }
"
1330,1dda7e43-ba49-4a60-90dd-1995cc61b2ec,"    @Given(""^I am on the email sign up page$"")
    public void iAmOnTheEmailSignUpPage() {
        driver.get(conf.getString(""moo-hw.host"")+""signup"");

    }
"
1331,7244eda0-1ff1-43cd-bcfe-128645057739,"    @When(""^I enter a valid email address$"")
    public void iEnterAValidEmailAddress() {
        page.SignUp(emailAddress);
    }
"
1332,0c436f49-0f7b-4428-a6ad-6da61533cb86,"    @Then(""^I see a thank you confirmation message$"")
    public void iSeeAThankYouConfirmationMessage() {
        ThankYouPage page = PageFactory.initElements(driver, ThankYouPage.class);
        assertThat(page.getThankYouHeadingElement().getText(), is(""Thank your for your details!""));
        assertThat(page.getThankYouBodyTextElement().getText(), containsString(""You have signed up with email""+"" ""+emailAddress));
    }
"
1333,4f8364f9-34bd-40f5-b62d-79a04b32b281,"    @When(""^I leave the email field blank$"")
    public void iLeaveTheEmailFieldBlank()  {
       page.SignUp("""");

    }
"
1334,2f1d5922-9763-4fee-ab73-809a00bf050b,"    @Then(""^I see an error message$"")
    public void iSeeAnErrorMessage()  {
        assertThat(page.getErrorMessageElement().getText(), is(""Please provide your email address""));
    }
"
1335,f96ec34c-4a21-4275-b7b0-f5fcf9bad39e,"    @Given(""^I sign-up as \""(.*?)\""$"")
    public void iSignUpAs(String emailAddress) {
        page.SignUp(emailAddress);
    }
"
1336,0ca50eae-3847-4a56-a1d9-c139c762df42,"    @When(""^I sign-up again as \""(.*?)\""$"")
    public void iSignUpAgainAs(String emailAddress) {
      // need to navigate away to let us reload the sign-up page
        driver.get(""about:blank"");
        driver.get(conf.getString(""moo-hw.host"")+""signup"");
        page.SignUp(emailAddress);
    }
"
1337,5678d4eb-f112-4219-ad3a-5186f6ea593f,"    @Then(""^I see an error message saying the email address is already subscribed$"")
    public void iSeeAnErrorMessageSayingTheEmailAddressIsAlreadySubscribed() {
        assertThat(page.getErrorMessageElement().getText(), is(""This email has already been signed up""));
    }
"
1338,b570e2f4-c7c9-4bff-8043-ba4919df8fa5,"    @When(""^I enter an invalid email address$"")
    public void iEnterAnInvalidEmailAddress() {
        page.SignUp(""invalid"");
    }
"
1339,9a714f9c-4bab-4085-9314-c6f1a88cd8e6,"    @Then(""^I see an error message to provide a valid email address$"")
    public void iSeeAnErrorMessageToProvideAValidEmailAddress()  {
        assertThat(page.getErrorMessageElement().getText(), is(""Please provide a valid email address""));
    }
"
1340,bb0eab5f-7a07-480e-8b6d-cf54bdc13c69,"        @Override
        public double evaluate(final IntSet subset) {
            int sum = 0;
            for (final int element : subset) {
                sum += element;
            }
            maxFitnessValue = Math.max(maxFitnessValue, sum);

            //System.out.println(""fitness evaluated: ""+sum+"" max: ""+maxFitnessValue);
            return sum;
        }
"
1341,e518f14f-9153-4ec5-ba46-26d5021a69c6,"        @Override
        public double evaluate(final IntSet subset) {
            int sum = 1000;
            for (final int element : subset) {
                sum -= element;
            }

            return sum;
        }
"
1342,9fcf88c8-0c7f-4d4e-a3a3-1c012fcecff9,"    public synchronized void testSubSetLargest() throws InvalidConfigurationException {
        final IntSet set = new IntArraySet();
        final int[] elements = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        for (final int element : elements) {
            set.add(element);
        }

        final OptimizeSubSet optimizer = new OptimizeSubSet(set, 3, largestCriterion);
        optimizer.setRandomSeed(1);

        final boolean converged = optimizer.optimize(10000, 0.001);
        assertTrue(converged);

        final IntSet optimalsubSet = optimizer.getFitestSubset();
        printSubset(optimalsubSet);
        assertTrue(optimalsubSet.contains(7));
        assertTrue(optimalsubSet.contains(8));
        assertTrue(optimalsubSet.contains(9));


    }
"
1343,5c98dec7-578b-44a2-8d55-acb8c13c4654,"    public synchronized void testSubSetLargestWithGaps() throws InvalidConfigurationException {
        final IntSet set = new IntArraySet();
        final int[] elements = {1, 74, 87, 900, 2, 61};
        for (final int element : elements) {
            set.add(element);
        }

        final OptimizeSubSet optimizer = new OptimizeSubSet(set, 3, largestCriterion);
        optimizer.setRandomSeed(1);

        final boolean converged = optimizer.optimize(10000, 0.001);
        assertTrue(converged);

        final IntSet optimalsubSet = optimizer.getFitestSubset();
        printSubset(optimalsubSet);
        assertTrue(optimalsubSet.contains(74));
        assertTrue(optimalsubSet.contains(87));
        assertTrue(optimalsubSet.contains(900));
    }
"
1344,5f20186b-5bf7-4fb7-803a-1c123225a028,"        @Override
        public double evaluate(final IntSet subset, final double... paramValues) {
            assert paramValues.length == 2 : ""evaluate must be called with two parameter values"";
            int sum = 100;
            for (final int element : subset) {
                sum += (element * paramValues[0]) - paramValues[1];
            }
            maxFitnessValue = Math.max(maxFitnessValue, sum);
            return sum;
        }
"
1345,287328e4-e619-4c0c-a8ca-1c179eb40dad,"    public synchronized void testSubSetLargestWithGapsAndParams() throws InvalidConfigurationException {
        final IntSet set = new IntArraySet();
        final int[] elements = {1, 74, 87, 900, 2, 61};
        for (final int element : elements) {
            set.add(element);
        }

        // fitness function=sum of elements in subset multiplied by alpha, minus beta.
        final String param1 = ""alpha=1,2,3,4,0.5,0.1"";    //optimal alpha=4
        final String param2 = ""beta=1,2,0,3,4,0.5"";       //optimal beta=0
        final OptimizeSubSet optimizer = new OptimizeSubSet(set, 3, largestCriterionWithAlphaBeta, param1, param2);
        optimizer.setRandomSeed(1);

        final boolean converged = optimizer.optimize(10000, 0.001);
        assertTrue(converged);

        final IntSet optimalsubSet = optimizer.getFitestSubset();
        printSubset(optimalsubSet);
        assertTrue(optimalsubSet.contains(74));
        assertTrue(optimalsubSet.contains(87));
        assertTrue(optimalsubSet.contains(900));
        final double[] optimalParameterValues = optimizer.getFitestParameterValues();
        assertEquals(4d, optimalParameterValues[0]);
        assertEquals(0d, optimalParameterValues[1]);
    }
"
1346,71612904-0c18-4a6c-add1-6b23bb25818a,"    public synchronized void testSubSetSmallest() throws InvalidConfigurationException {
        final IntSet set = new IntArraySet();
        final int[] elements = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        for (final int element : elements) {
            set.add(element);
        }
        final OptimizeSubSet optimizer = new OptimizeSubSet(set, 3, smallestCriterion);
        optimizer.setRandomSeed(1);
        final boolean converged = optimizer.optimize(10000, 0.001);
        assertTrue(converged);

        final IntSet optimalsubSet;
        System.out.println(""Number of iterations: "" + optimizer.getNumberOfIterationsPerformed());
        optimalsubSet = optimizer.getFitestSubset();
        printSubset(optimalsubSet);
        assertTrue(optimalsubSet.contains(1));
        assertTrue(optimalsubSet.contains(2));
        assertTrue(optimalsubSet.contains(3));
    }
"
1347,76641739-0c15-4bd3-95fa-d38efe62af66,"    public synchronized void testSubSetLargest100() throws InvalidConfigurationException {
        final IntSet set = new IntArraySet();
        final int[] elements = new int[100];
        int max = Integer.MIN_VALUE;
        for (int i = 1; i <= elements.length; ++i) {
            set.add(i);
            max = Math.max(i, max);
        }
        System.out.println(""max element: "" + max);
        final OptimizeSubSet optimizer = new OptimizeSubSet(set, 3, largestCriterion);
        optimizer.setRandomSeed(39);
        optimizer.setPopulationSize(10000);
        maxFitnessValue = 0;
        final boolean converged = optimizer.optimize(10000, 0.001);
        assertEquals(""fitest chromosome must have maximum fitness evaluated by fitness function."", maxFitnessValue, optimizer.getFitestFunctionValue());
        assertTrue(converged);
        System.out.println(""Number of iterations: "" + optimizer.getNumberOfIterationsPerformed());

        final IntSet optimalsubSet;

        optimalsubSet = optimizer.getFitestSubset();
        printSubset(optimalsubSet);
        assertTrue(optimalsubSet.contains(elements.length));
        assertTrue(optimalsubSet.contains(elements.length - 1));
        assertTrue(optimalsubSet.contains(elements.length - 2));
    }
"
1348,65ec92bf-d11d-428c-a4dc-f9fb3dc137dc,"    public synchronized void testSubSetLargest2000() throws InvalidConfigurationException {
        final IntSet set = new IntArraySet();
        final int[] elements = new int[2000];
        for (int i = 1; i <= elements.length; ++i) {
            set.add(i);
        }
        final double optimal = 2000 + 1999 + 1998;
        final OptimizeSubSet optimizer = new OptimizeSubSet(set, 3, largestCriterion);
        optimizer.setPopulationSize(1000);
        optimizer.setRandomSeed(1);
        maxFitnessValue = 0;
        final boolean converged = optimizer.optimize(20000, 0.001);
        assertEquals(""fitest chromosome must have maximum fitness evaluated by fitness function."", maxFitnessValue, optimizer.getFitestFunctionValue());
        assertTrue(converged);

        final IntSet optimalsubSet;
        assertEquals(""optimal fitest function must match true optimum"", optimal, optimizer.getFitestFunctionValue());
        optimalsubSet = optimizer.getFitestSubset();
        printSubset(optimalsubSet);
        assertTrue(optimalsubSet.contains(elements.length));
        assertTrue(optimalsubSet.contains(elements.length - 1));
        assertTrue(optimalsubSet.contains(elements.length - 2));
    }
"
1349,770e3610-4b7e-4508-a1e8-fadf0efcff13,"    public synchronized void TestSubSetLargest20000() throws InvalidConfigurationException {
        final IntSet set = new IntArraySet();
        final int[] elements = new int[20000];
        for (int i = 1; i <= elements.length; ++i) {
            set.add(i);
        }
        final double optimal = 20000 + 20000-1 + 20000-2;
        final OptimizeSubSet optimizer = new OptimizeSubSet(set, 3, largestCriterion);
        optimizer.setPopulationSize(1000);
        final boolean converged = optimizer.optimize(200000, 0.001);
        assertTrue(converged);
        assertEquals(""optimal fitest function must match true optimum"", optimal, optimizer.getFitestFunctionValue());

        final IntSet optimalsubSet;

        optimalsubSet = optimizer.getFitestSubset();
        printSubset(optimalsubSet);
        assertTrue(optimalsubSet.contains(elements.length));
        assertTrue(optimalsubSet.contains(elements.length - 1));
        assertTrue(optimalsubSet.contains(elements.length - 2));
    }
"
1350,706e5798-c025-49de-a06c-13d6901a9645,"    private void printSubset(final IntSet optimalsubSet) {
        for (final int element : optimalsubSet) {
            System.out.println(""element "" + element);
        }
    }
"
1351,23e76d11-abf0-475c-acc7-9d2f156ec69f,"    double evaluate(IntSet subset, double ... paramValues);
"
1352,ebf1a4d5-7bca-44b0-a159-d2e78154cd86,"    double evaluate(IntSet subset);
"
1353,722dadac-f660-4824-8528-66b395c3a3ea,"    public SubsetSuperGene() throws InvalidConfigurationException {
        this.subset = new IntArraySet();
    }
"
1354,51d82b34-5bac-4d85-9830-5054ee010d22,"    public SubsetSuperGene(final Configuration configuration) throws InvalidConfigurationException {
        super(configuration);
        this.subset = new IntArraySet();
    }
"
1355,019ac5d7-9527-4729-a6b5-40dc728edb87,"    public SubsetSuperGene(final Configuration configuration, final Gene[] subsetGenes) throws InvalidConfigurationException {
        super(configuration, subsetGenes);
        this.subset = new IntArraySet();
    }
"
1356,35bb0433-a4a9-4cb3-9e04-670ee422985a,"    public SubsetSuperGene(final Configuration configuration, final Gene[] subsetGenes, final int[] allElements) throws InvalidConfigurationException {
        super(configuration, subsetGenes);
        this.subset = new IntArraySet();
        this.allElements = allElements;
    }
"
1357,848b545b-0fb9-4f90-a258-9d6e77b2e87c,"    @Override
    public synchronized boolean isValid(final Gene[] genes, final Supergene supergene) {
        subset.clear();
        int previous = -1;
        for (final Gene gene : genes) {
            final int element = (Integer) gene.getAllele();

            if (element <= previous) {
                // force increasing order of element to avoid considering order permutations
                return false;
            }
            subset.add(element);
            previous = element;
        }
        // valid solutions have no duplicate elements.
        return subset.size() == genes.length;
    }
"
1358,fce204b8-e912-4115-93e3-deebb0f0ac2f,"    @Override
    public Gene newGene() {
        final SubsetSuperGene copy = (SubsetSuperGene) super.newGene();
        copy.allElements = allElements;
        return copy;
    }
"
1359,79e20922-d787-4f22-afe9-fba0689b3a8d,"    public IntSet getSubSet() {
        final IntSet result = new IntArraySet();
        for (final Gene gene : getGenes()) {
            final Integer element = (Integer) gene.getAllele();
            result.add(allElements[element]);

        }
        return result;
    }
"
1360,3e48cb30-67d6-44a3-9845-097b625c950b,"    @Override
    public String toString() {
        final MutableString result = new MutableString();
        result.append(""{ "");
        for (final Gene gene : getGenes()) {
            result.append(gene.getAllele());
            result.append(' ');
        }
        result.append(""} "");
        return result.toString();
    }
"
1361,a9de5b9c-d358-4808-a957-0ba8c3809f05,"    @Override
    public void setToRandomValue(final RandomGenerator a_numberGenerator) {

        final IntList sortedSubSet = new IntArrayList();
        final Gene[] m_genes = getGenes();
        for (int i = 0; i < m_genes.length; i++) {
            int value = -1;
            do {
                m_genes[i].setToRandomValue(a_numberGenerator);
                value = (Integer) m_genes[i].getAllele();
            } while (sortedSubSet.contains(value));
            sortedSubSet.add(value);
        }
        Collections.sort(sortedSubSet);
        // set all to random value first

        for (int i = 0; i < m_genes.length; i++) {
            m_genes[i].setAllele(sortedSubSet.get(i));
        }
        if (!isValid()) {
            throw new InternalError(""Supergene content must be compatible with valid method"");
        }
    }
"
1362,b5ea5375-b940-41b8-a4a9-f2f92b08958f,"    public double evaluate(final IntSet subset, final double... paramValues) {
        assert paramValues.length == 0 : "" paramValues are not supported by this implementation."";
        return evaluate(subset);
    }
"
1363,6ed3be1a-8f87-4664-8e92-f650594092cc,"    public double evaluate(final IntSet subset) {
        assert false : ""This method must be overriden with a functional implementation"";
        return 0;
    }
"
1364,283a48a7-c775-4ade-8128-a1c7aeda3c01,"    public void setModuloProgressReport(final int moduloProgressReport) {
        this.moduloProgressReport = moduloProgressReport;
    }
"
1365,8a59f27b-9397-4ce9-980e-ebb526f6914d,"    public OptimizeSubSet(final IntSet set, final int k, final SubSetFitnessFunction convergenceCriterion) throws InvalidConfigurationException {
        this(set, k, convergenceCriterion, DEFAULT_POPULATION_SIZE);
    }
"
1366,996d2f70-a64c-4f48-a5ed-089c6daeb9fc,"    public OptimizeSubSet(final IntSet set, final int k, final SubSetFitnessFunction convergenceCriterion, final String... params) throws InvalidConfigurationException {
        this(set, k, convergenceCriterion, DEFAULT_POPULATION_SIZE, params);
    }
"
1367,eda2f141-c0cd-45f8-81b1-fb36b21ade18,"    public OptimizeSubSet(final IntSet set, final int k, final SubSetFitnessFunction convergenceCriterion, final int populationSize,
                          final String... params) throws InvalidConfigurationException {
        this.numParams = params.length;
        parseParameterDefinitions(params);
        this.set = set;
        this.k = k;
        int i = 0;
        this.allElements = new int[set.size()];
        for (final int element : set) {
            allElements[i++] = element;
        }

        this.convergenceCriterion = convergenceCriterion;
        this.k = k;
        numElementsInSet = set.size();
        // This is odd: JGAP seems to maintain properties associated with each thread, so creating a new
        // Configuration instance is not sufficient to indicate that we want a fresh configuration. We have
        // to call the static reset method on Configuration..
        Configuration.reset();

        randomGenerator = new TwisterGenerator();
        this.populationSize = populationSize;
        configure();
    }
"
1368,e4db6555-6554-426d-9575-e919dc53f479,"    private void parseParameterDefinitions(final String[] paramDefinitions) {
        int paramIndex = 0;
        parameterNames = new String[paramDefinitions.length];
        allPossibleParameterValues = new double[paramDefinitions.length][];
        for (final String parameterDefinition : paramDefinitions) {
            final String[] tokens = parameterDefinition.split(""[=,]"");
            assert tokens.length > 3 : ""parameter definition must be of the form name=value1,value2,..."";
            parameterNames[paramIndex] = tokens[0];
            final DoubleList paramValues = new DoubleArrayList();
            for (int valueIndex = 1; valueIndex < tokens.length; valueIndex++) {
                paramValues.add(Double.parseDouble(tokens[valueIndex]));
            }
            allPossibleParameterValues[paramIndex] = paramValues.toDoubleArray();
            paramIndex++;
        }
    }
"
1369,3a21f904-5db9-4ef3-980c-c519bda300b4,"    public void setPopulationSize(final int populationSize) {
        this.populationSize = populationSize;
    }
"
1370,8de7b917-9a6d-4367-9b8c-b08ffd8ca82b,"    public void setRandomSeed(final int randomSeed) {
        this.randomSeed = randomSeed;
        this.randomGenerator = new TwisterGenerator(randomSeed);
    }
"
1371,390b31ff-7c4a-40ed-bf57-59f585a456e8,"    public void configure() throws InvalidConfigurationException {


        configuration = new DefaultConfiguration();
        configuration.setPreservFittestIndividual(true);
        configuration.setKeepPopulationSizeConstant(true);

        configuration.setRandomGenerator(randomGenerator);
        fitnessFunction = new FitnessFunctionAdapter(set, k, convergenceCriterion, allPossibleParameterValues);

      configuration.setBulkFitnessFunction(new BulkFitnessNoOffset(fitnessFunction));

        subsetChromosome = setupChromosome(allElements);
        configuration.setSampleChromosome(subsetChromosome);
        configuration.setPopulationSize(populationSize);
        progressLogger = new ProgressLogger(log);
        fitestSubset = new IntArraySet();
        configured = true;
    }
"
1372,4e4def46-73ed-4b9e-9660-f338891d35b8,"    private IChromosome setupChromosome(final int[] set) throws InvalidConfigurationException {
        subsetGenes = new Gene[k];
        int minElementValue = Integer.MAX_VALUE;
        int maxElementValue = Integer.MIN_VALUE;
        for (final int element : set) {
            minElementValue = Math.min(element, minElementValue);
            maxElementValue = Math.max(element, maxElementValue);
        }

        for (int g = 0; g < k; g++) {

            subsetGenes[g] = new IntegerGene(configuration, 0, numElementsInSet - 1);
        }
        final Gene[] genes = new Gene[1 + getNumberOfParameters()];
        final AbstractSupergene constrainedGenes = new SubsetSuperGene(configuration, subsetGenes, this.allElements);
        genes[0] = constrainedGenes;
        for (int paramIndex = 0; paramIndex < getNumberOfParameters(); paramIndex++) {
            genes[1 + paramIndex] = new IntegerGene(configuration, 0, this.allPossibleParameterValues[paramIndex].length - 1);
        }
        subsetChromosome = new Chromosome(configuration, genes);
        return subsetChromosome;
    }
"
1373,fb6796e6-a3b5-4c8f-b71e-f50ef93349bd,"    public void setLog(final Logger log) {
        this.log = log;
        progressLogger = new ProgressLogger(log);
    }
"
1374,69e5e983-458f-4988-9ca6-7120c4bfcc20,"    public int getNumberOfIterationsPerformed() {
        return numberOfIterationsPerformed;
    }
"
1375,0321cba6-64fb-4265-80e9-12050b83757e,"    public boolean optimize(final int numSteps, final double convergenceDelta) throws InvalidConfigurationException {
        if (!configured) {
            configure();
        }
        final int deltaNumSteps = numSteps/10;
        final Genotype population = Genotype.randomInitialGenotype(configuration);
        final boolean converged;
        int timesFitnessStable = 0;
        double previousFitness = -1;
        progressLogger.expectedUpdates = numSteps;
        progressLogger.start(""optimization"");
        IChromosome fitestChromosome = null;
        double fitness = -2;
        for (int i = 0; i < numSteps; i++) {
             //   writeCurrentPopulation(population);
            fitestChromosome = population.getFittestChromosome();

            fitness = fitnessFunction.getFitnessValue(fitestChromosome);
            fitestFunctionValue = fitness;
            if (i % moduloProgressReport == 1) {
                log.info(""Current solution has a fitness value of "" +
                        formatDouble(Math.log(fitestChromosome.getFitnessValue())) +
                        "" absolute: "" + formatDouble(Math.log(fitness)) +
                        ""or raw: "" + fitness);
                log.debug(fitestChromosome.getGene(0).toString());
            }
            if (fitness >= previousFitness && fitness - previousFitness < Math.abs(convergenceDelta)) {
                timesFitnessStable++;
                log.trace(""fitness function value stable "" + timesFitnessStable);
            } else {
                timesFitnessStable = 0;
                log.trace(""fitness function not stable, old: "" + previousFitness + "" new fitness: "" + fitness);
            }

            previousFitness = fitness;
            if (timesFitnessStable >= deltaNumSteps) {
                break;
            }
            numberOfIterationsPerformed = i;
            if (i != numSteps - 1) {
                // do not evolve if this is the last step.
                population.evolve();
                progressLogger.lightUpdate();
            }

        }
        if (fitness - previousFitness < Math.abs(convergenceDelta)) {
            converged = true;
        } else {
            converged = false;
        }
        progressLogger.stop(""optimization"");
        convertFittestToSolution(fitestChromosome);

        return converged;

    }
"
1376,075bf53d-0902-4b8e-8834-7814e0d70626,"    private void convertFittestToSolution(final IChromosome fittestChromosome) {
        if (fittestChromosome == null) {
            fitestSubset = null;
            fitestParams = ArrayUtils.EMPTY_DOUBLE_ARRAY;
        } else {
            fitestSubset = ((SubsetSuperGene) fittestChromosome.getGene(0)).getSubSet();
            fitestParams = FitnessFunctionAdapter.getParameterValues(fittestChromosome, allPossibleParameterValues);

        }

    }
"
1377,2758bb5e-8a83-4971-a0c1-8dde819e1774,"    public IntSet getFitestSubset() {
        return fitestSubset;
    }
"
1378,03e73151-fc34-48f0-93be-7595f7aa9d6c,"    public double[] getFitestParameterValues() {
        return fitestParams;
    }
"
1379,a63b7fe6-3110-4347-88f7-e0d3046d1cf4,"    private String formatDouble(final double v) {

        return formatter.format(v);
    }
"
1380,276bd556-9d15-4322-9095-d3b01579cd03,"    public int getNumberOfParameters() {
        return numParams;
    }
"
1381,cc8a484c-ed33-4b5b-b685-79680644d683,"    public double getFitestFunctionValue() {
        return fitestFunctionValue;
    }
"
1382,ea415ecc-a7fd-4faf-a655-aa8dc7a898b1,"    public BulkFitnessNoOffset(final FitnessFunction fitnessFunction) {
        this.fitnessFunction = fitnessFunction;
    }
"
1383,72ec5a6d-c1f8-43de-8d4d-266ca47188cb,"    @Override
    public void evaluate(final Population a_chromosomes) {
         double curFitness;
        final Iterator itChromosomes = a_chromosomes.iterator();
        IChromosome chromosome;
        while (itChromosomes.hasNext()) {
            chromosome = (IChromosome) itChromosomes.next();

            curFitness = chromosome.getFitnessValueDirectly();
            if (curFitness < 0) {
                // fitness was not evaluated for this chromosome yet.

                curFitness = fitnessFunction.getFitnessValue(chromosome);
                // And store it to avoid evaluation of the same Chromosome again:
                chromosome.setFitnessValue(curFitness);
            } else {
                chromosome.setFitnessValue(curFitness);
            }

        }
    }
"
1384,6aeccd7f-6498-47f5-b08f-6bb06316f233,"    public CacheThread(Socket s) {
        log.info(""New Thread created!"");
        this.s = s;
        //setDaemon(true);
        //setPriority(NORM_PRIORITY);
    }
"
1385,db0312b9-d830-451b-8cbb-3a3d1eb10b06,"    protected void from_net(String header, String host, int port, String path) throws Exception {
        log.info(""New socked (host, port):"" + host + "":"" + port + ""\n"");
        Socket requestSocket = new Socket(host, port);

        log.info(""Request Header: \n"" + header);
        requestSocket.getOutputStream().write(header.getBytes(""ASCII""));

//        log.info(""Sended from from_net"");
        InputStream responseIs = requestSocket.getInputStream();

//        File f = new File((new File(path)).getParent());
//        if (!f.exists())
//            f.mkdirs();
//        FileOutputStream fos = new FileOutputStream(path);


        try {
            //get header
//            StringBuilder responseHeaderSB = new StringBuilder();
            ArrayList<Byte> arrayList = new ArrayList(2048);
            int buf;
            while ((buf = responseIs.read()) != -1) {
//                responseHeaderSB.append(new String(new byte[]{(byte) buf}, ""ASCII""));
//                System.out.printf(new String(new byte[]{(byte)buf}), ""ASCII"");
                arrayList.add((byte) buf);
                if (13 == buf) {
                    buf = responseIs.read();
                    arrayList.add((byte) buf);
                    if (10 == buf) {
                        buf = responseIs.read();
                        arrayList.add((byte) buf);
                        if (13 == buf) {
                            buf = responseIs.read();
                            arrayList.add((byte) buf);
                            if (10 == buf) {
                                break;
                            }
                        }
                    }
                }


//                if (responseHeaderSB.toString().endsWith(""\n\n"") || responseHeaderSB.toString().endsWith(""\r\n\r\n"")) {
//                    break;
//                }
            }

            byte[] resposebHeader = new byte[arrayList.size()];
            for (int i = 0; i < arrayList.size(); i++) {
                resposebHeader[i] = arrayList.get(i);
            }

            String responseHeader = new String(resposebHeader, ""ASCII"");
            log.info(""Response Header\n"" + responseHeader);

            os.write(resposebHeader);
            if (responseHeader.startsWith(""HTTP/1.0 304 Not Modified"") || responseHeader.startsWith(""HTTP/1.0 302 Moved Temporarily"")) {
                log.info(""302 or 304"");
                return;
            }
//            HTTP/1.0 304 Not Modified

            //get content Length
            String[] requestHeaders = responseHeader.split(""\\n"");
            long contentLength = 0;
            for (String requestHeader1 : requestHeaders) {
                if (requestHeader1.startsWith(""Content-Length:"")) {
                    log.info(requestHeader1);
                    String cl = requestHeader1.substring(requestHeader1.indexOf("":"") + 1).trim();
                    log.info(cl);
                    contentLength = Long.parseLong(cl);
                    break;
                }
            }
            log.info(""Content Length: "" + contentLength);

            if (contentLength != 0) {
                for (long i = 0; i < contentLength; i++) {
                    //fos.write(responseIs.read());
                    os.write(responseIs.read());

                }
            } else {
                byte reply[] = new byte[1024];
                int bytes_read;
                while ((bytes_read = responseIs.read(reply)) != -1) {
                    //fos.write(reply, 0, bytes_read);
                    os.write(reply, 0, bytes_read);

                }
            }


//            while ((bytes_read = is.read(reply)) != 0) {
//                System.out.printf(new String(reply, 0, bytes_read, ""ASCII""));
////                fos.write(reply, 0, bytes_read);
//                os.write(reply, 0, bytes_read);
//            }

        } catch (SocketTimeoutException e) {
            log.error(e.getMessage(), e);
//            log.error(""SocketTimeoutException: Read timed out in socked (host, port):"" + host + "":"" + port + ""\n"");
//            log.error(""HEADER:"" + header);
        } finally {
//            fos.close();
//            os.close();
            responseIs.close();
            requestSocket.close();
        }

    }
"
1386,bf77a60b-8e0f-4a71-a6be-6c1837b7d77f,"    protected void from_net(String header) throws Exception {
        log.info(""Try from net!"");
        String host = extractFromHeader(header, ""Host:"", ""\n""), path = getPath(header);
        if ((host == null) || (path == null)) {
            printError(""invalid request:\n"" + header);
            return;
        }
        log.info(""Transform path: "" + path);

        int port = host.indexOf("":"", 0);
        if (port < 0)
            port = 80;
        else {
            port = Integer.parseInt(host.substring(port + 1));
            host = host.substring(0, port);
        }
        log.info(""From net Host+port: "" + host + "":"" + port);
        from_net(header, host, port, path);
    }
"
1387,fdc04d50-2e94-48cf-8ab3-f9960805edae,"    protected void from_cache(String header) throws Exception {
        log.info(""Try from cache!"");
        this.method = ""GET"";
        String path = getPath(header);
        log.info(""Transform path: "" + path);
        if (path == null) {
            this.error = ""invalid request:\n"" + header;
            log.info(this);
            printError(""invalid request:\n"" + header);
            return;
        }

        // except ""Pragma: no-cache""
    /*
     * String pragma = extractFromHeader(header, ""Pragma:"", ""\n""); if
	 * (pragma != null) if (pragma.toLowerCase().equals(""no-cache"")) {
	 * System.out.println(""Pragma no-cache!""); from_net(header); return; }
	 */
        this.path = path;
        if ((new File(path)).exists()) {
            log.info(""File is exists!"");
            this.fromCache = true;
            FileInputStream fis = new FileInputStream(path);
            byte buf[] = new byte[64 * 1024];
            int r = 1;
            log.info(this);
            while (r > 0) {
                r = fis.read(buf);
                if (r > 0)
                    os.write(buf, 0, r);
            }
            fis.close();
            os.flush();
            os.close();
        } else {
            log.info(""File is NOT exists!"");
            from_net(header);
        }
    }
"
1388,061027e1-83bd-4e96-8d31-cbb3a9ebbbae,"    public void run() {
        log.info(""Process request\n"");
        int r = 0;
        try {
            is2 = s.getInputStream();
            os = s.getOutputStream();

            byte buf[] = new byte[10 * 1024];
            r = is2.read(buf);
            if (r > 0) {
                String header = new String(buf, 0, r, ""ASCII"");
                //Хидер GET только из кеша
//                if (header.indexOf(""GET "", 0) == 0)
//                    from_cache(header);
//                    //Иные из интернета
//                else
//                    log.info(""REQUEST main:\n"" + header);
                from_net(header);
            }

        } catch (Exception e) {
            try {
                log.error(e.getMessage(), e);
//                e.printStackTrace();
//                printError(""exception:\n"" + e);
            } catch (Exception ex) {
            }
        } finally {
            try {
//                if (is2 != null) is2.close();
//                if (os != null) os.close();
                if (s != null) s.close();
                log.info(""Thread finished!"");
            } catch (IOException e) {
            }
        }

    }
"
1389,c1da543c-6241-4f4f-b193-83f2f2b857c9,"    private void printError(String err) throws Exception {
        os.write((new String(PROXY_ERROR + err)).getBytes());
    }
"
1390,9bf6e917-fe1e-4333-bd5a-6400f77de02b,"    @Override
    public String toString() {
        return ""CacheThread [method="" + method + "", path="" + path
                + "", fromCache="" + fromCache + "", error="" + error + ""]"";
    }
"
1391,e1489c83-3307-4b7f-988d-7a358284fcc3,"    static String getPageCharsetFromHeaders(Map<String, List<String>> headers) {

        String contentType = Arrays.toString(headers.get(""Content-Type"").toArray()).replaceAll(""\\[|\\]"", """").replaceAll("", "",
                ""\t"");
        String[] values = contentType.split("";""); //The values.length must be equal to 2...
        String charset = """";

        for (String value : values) {
            value = value.trim();

            if (value.toLowerCase().startsWith(""charset="")) {
                charset = value.substring(""charset="".length());
            }
        }

        if ("""".equals(charset)) {
            charset = ""UTF-8""; //f**k ups...lol, Default encoding accepted!
        }


        log.info(""\n Accepted encoding: "" + charset);
        return charset;
    }
"
1392,b500452d-e45f-42f6-9fb3-240fa5c04b7a,"	public static String extractFromHeader(String str, String start,
	                                       String end) {
		int s = str.indexOf(""\n\n"", 0), e;
		if (s < 0)
			s = str.indexOf(""\r\n\r\n"", 0);
		if (s > 0)
			str = str.substring(0, s);
		s = str.indexOf(start, 0) + start.length();
		if (s < start.length())
			return null;
		e = str.indexOf(end, s);
		if (e < 0)
			e = str.length();
		return (str.substring(s, e)).trim();
	}
"
1393,8e8f9bbd-ee27-4398-afc5-c8623d7a6456,"	public static StringBuilder replaceAll(StringBuilder builder, String from,
	                                       String to) {
		StringBuilder replaceBuilder = builder;
		int index = replaceBuilder.indexOf(from);
		while (index != -1) {
			replaceBuilder.replace(index, index + from.length(), to);
			index += to.length(); // Move to the end of the replacement
			index = replaceBuilder.indexOf(from, index);
		}
		return replaceBuilder;
	}
"
1394,83f2bc18-f2e0-4588-8473-bd839734c42b,"	public static String replaceRegex(StringBuilder builder, String pattern,
	                                  String replacement) {
		Pattern p = Pattern.compile(pattern);
		Matcher m = p.matcher(builder);
		StringBuffer sb = new StringBuffer();
		while (m.find()) {
			m.appendReplacement(sb, replacement);
		}
		m.appendTail(sb);

		return sb.toString();
	}
"
1395,ec4188b4-47f9-4bb9-828d-b66ab90ffd16,"	public static String getPath(String header) {
		String URI = extractFromHeader(header, ""GET "", "" ""), path;
		if (URI == null)
			URI = extractFromHeader(header, ""POST "", "" "");
		if (URI == null)
			return null;

		path = URI.toLowerCase();
		if (path.length() >= 7 && path.indexOf(""http://"", 0) == 0)
			URI = URI.substring(7);
		else {
			path = extractFromHeader(header, ""Host:"", ""\n"");
			if (path == null) return null;
			URI = path + URI;
		}

		URI = Transform.fixURL(URI);
		URI = Transform.URL2File(URI, (byte) 0);
		path = CACHE_PATH + File.separator + URI;
		//System.out.println(""Method getPath(fix+transform), Getted path: ""+path);
		return path;

	}
"
1396,798576fb-4d0d-4e3a-b3bb-0a8ef0f00186,"	public static String fixURL(String URI) {
		//System.out.println(""\tFIX URL Getted URI: ""+URI);
		if (URI.length() >= 7 && URI.indexOf(""http://"", 0) == 0)
			URI = URI.substring(7);
		String s = URI;
		int startIndex = s.indexOf('#');
		if (startIndex >= 0) {
			StringBuilder sb = new StringBuilder(s);
			s = sb.delete(startIndex, sb.length()).toString();
		}

		// Делаем URL более однозначным
		// -Коды символов %xX в %XX (верхний регист)
		s = replaceToUpCase(s, Pattern.compile(""%[A-Fa-f\\d]{2}""));
		// -Символ ' "" ' в %22
		s = s.replace(""\"""", ""%22"");
		// -Символ ' < ' в %3C
		s = s.replace(""<"", ""%3C"");
		// -Символ ' > ' в %3E
		s = s.replace("">"", ""%3E"");
		// -Символ ' ` ' в %60
		s = s.replace(""`"", ""%60"");

		int num1 = s.indexOf('?');
		s = (num1 < 0) ? s.replace(""^"", ""%5E"") : s.substring(0, num1).replace(
				""^"", ""%5E"")
				+ s.substring(num1);
		s = escape_unicode_rus(s);
		if (s.indexOf('/') < 0 & s.length() > 0)
			s = s + '/';
		int num2 = s.indexOf('/');
		if (num2 >= 0)
			s = Pattern.compile(""(:(80)?$)?"").matcher(s.substring(0, num2))
					.replaceAll("""").toLowerCase()
					+ s.substring(num2);

		int num3 = s.indexOf('/');
		char[] Chars = s.toCharArray();

		for (int index = 0; index < num3; ++index) {
			if (((int) Chars[index] < 48 | (int) Chars[index] > 57)
					& ((int) Chars[index] < 97 | (int) Chars[index] > 122)
					& ((int) Chars[index] != 45 & (int) Chars[index] != 46 & (int) Chars[index] != 58)) {
				s = ""НЕПРАВИЛЬНЫЙ ХОСТ"";
				break;
			}
		}
		//System.out.println(""Transformed URI: ""+s);
		return s;
	}
"
1397,d830d2ee-bbb1-4135-90f1-b678936463bf,"	public static String URL2File(String url, byte redir) {
		//System.out.println(""To file: ""+url);
		// Обрезаем 'http:\\' в URL чтобы не писать в путь файла
		if (url.length() >= 7
				&& url.substring(0, 7).toLowerCase().equals(""http://"")) {
			url = url.substring(7);
		}
	/*
	 * Преобразовать символы
	 * '*' 	в '#x' (совместимость)
	 * '\\' в '#~' (совместимость)
	 * '|' 	в '#i' (совместимость)
	 * ':'	в '#=' (НЕсовместимость!), ранее в '!', соответственно '!' ранее в '#I'
	 */

		String str1 = url.replace(""*"", ""#x"").replace(""\\"", ""#~"")
				.replace(""|"", ""#i"").replace("":"", ""#="");

		// Опционально:
		// Кодировать %22 ("") - двойную ковычку
		// --в символ #'
		// str1 = str1.replace(""%22"", ""#'"");
		// --в символ ``
		// str1 = str1.replace(""%22"", ""``"");
		// Кодировать %3C (<) и %3E (>) - скобы
		// --в символы '#(' и '#)'
		// str1 = str1.replace(""%3C"", ""#("").replace(""%3E"", ""#)"");
		// --в символы '#{' и '#}'
		// str1 = str1.replace(""%3C"", ""#{"").replace(""%3E"", ""#}"");

		/**
		 * Преобразование URL содержащих символ '?' (основная часть)
		 * Знак '?' преобразуется в '^\'
		 * за тем преобразуются символы:
		 * Символ 	до '?' 		после '?'	ранее
		 *  /		\		    #!		    \ и #%
		 *  //		\#!		    #!#!		\~ и #%~
		 *  ///		\#!#!		#!#!#!		\~\ и #%~#%
		 *  .\		.#n\		.#n\
		 *  пробел\	пробел#n\	пробел#n\
		 */
		int startIndex = str1.indexOf('?');
		String str2 = """";
		if (startIndex >= 0) {
			String str3 = str1.substring(startIndex + 1);

			StringBuilder sb = new StringBuilder(str1);

			str1 = sb.delete(startIndex, sb.length()).toString();

			str2 = ""^\\"" + str3.replace(""/"", ""#!"").replace(""?"", ""#^"");

		}

		String s = str1.replace(""//"", ""\\#!"").replace(""#!\\"", ""#!#!"")
				.replace('/', '\\').replace("".\\"", "".#n\\"")
				+ str2;

		// Преобразовывать русские коды Win-1251 в символы в имени файла
		// s = unescape_win1251_rus(s);

		// Преобразовывать коды русского Юникода в русские символы в имени файла
		s = unescape_unicode_rus(s);

		// Преобразовывать коды пробела %20 в символ пробела
		s = unescape_space(s).replace("" \\"", "" #n\\"");

		// Использовать алгоритм шифрования CRC32 для длинных URL
		// [путь<maxUrlLength-15]\#-[CRC32(урл_без_хоста)]

		int maxUrlLength = 200;
		if (s.length() > maxUrlLength - 5) {
			int num1 = url.indexOf('/');
			int num2 = s.substring(0, maxUrlLength - 10 - 5).lastIndexOf('\\');
			s = s.substring(0, num2 + 1) + ""#-""
					+ CRC32(url.substring(num1 + 1));
		}

		// Преобразовать редирект (301 Moved Permanently) к виду редирект#m
		if ((int) redir == 1)
			s = s + ""#m"";
		char[] Chars = s.toCharArray();
		if (s.length() > 0 && Chars[s.length() - 1] == 92
				| Chars[s.length() - 1] == 46 | Chars[s.length() - 1] == 32)
			s = s + ""#_"";

		//System.out.println(""FilePath is: ""+s);
		return s;
	}
"
1398,63b66763-70e5-4270-b5bb-0d22dce3f49c,"	public static String CRC32(String str) {
		CRC32 crc = new CRC32();
		crc.update(str.getBytes());
		long result = crc.getValue();
		return Long.toHexString(result).toUpperCase();
	}
"
1399,0627ce98-0f8b-4455-8a7b-9d2cc2e211b5,"	private static String escape_unicode_rus(String s) {
		for (int index = 0; index < RUSSIAN_CHARS.length; ++index)
			s = s.replace(RUSSIAN_CHARS[index], ESCAPE_CHARS[index]);
		s = s.replace("" "", ""%20"");
		return s;
	}
"
1400,5d04e64a-29f7-407f-bbd8-d94710149ec7,"	private static String unescape_space(String s) {
		s = s.replace(""%20"", "" "");
		return s;
	}
"
1401,2a2f61be-8fac-4674-9456-12ed149569e1,"	private static String unescape_unicode_rus(String s) {
		for (int index = 0; index < ESCAPE_CHARS.length; ++index)
			s = s.replace(ESCAPE_CHARS[index], RUSSIAN_CHARS[index]);
		return s;
	}
"
1402,3acf0688-8b91-418f-903f-c98f9abd1a82,"	private static String unescape_win1251_rus(String s) {
		for (int index = 0; index < WIN1251_CHARS.length; ++index)
			s = s.replace(WIN1251_CHARS[index], RUSSIAN_CHARS[index]);
		return s;
	}
"
1403,cc684ba0-2e9c-4750-ac17-88a5905db4a4,"	public static String replaceToUpCase(String s, Pattern p) {
		StringBuilder text = new StringBuilder(s);
		Matcher m2 = p.matcher(text);
		int matchPointer = 0;// First search begins at the start of the string
		while (m2.find(matchPointer)) {
			matchPointer = m2.end(); // Next search starts from where this one
			// ended
			text.replace(m2.start(), m2.end(), m2.group().toUpperCase());
		}
		return text.toString();
	}
"
1404,653c202a-b118-4f7d-9df7-274484b1a053,"	public static byte[] readRawLine(InputStream inputStream) throws IOException {

		ByteArrayOutputStream buf = new ByteArrayOutputStream();
		int ch;
		while ((ch = inputStream.read()) >= 0) {
			buf.write(ch);
			if (ch == '\n') {
				break;
			}
		}
		if (buf.size() == 0) {
			return null;
		}
		return buf.toByteArray();
	}
"
1405,d8005484-0333-498c-981b-c8ad808e8e1f,"	public static String readLine(InputStream inputStream) throws IOException {
		byte[] rawdata = readRawLine(inputStream);
		if (rawdata == null) {
			return null;
		}
		int len = rawdata.length;
		int offset = 0;
		if (len > 0) {
			if (rawdata[len - 1] == '\n') {
				offset++;
				if (len > 1) {
					if (rawdata[len - 2] == '\r') {
						offset++;
					}
				}
			}
		}
		return getString(rawdata, 0, len - offset);
	}
"
1406,7ae7a215-8eee-46ef-8a35-f905e5557197,"	public static String getString(final byte[] data, int offset, int length) {

		if (data == null) {
			throw new IllegalArgumentException(""Parameter may not be null"");
		}

		try {
			return new String(data, offset, length, HTTP_ELEMENT_CHARSET);
		} catch (Exception e) {
			return new String(data, offset, length);
		}
	}
"
1407,581055bc-e68d-4492-98b2-70eb24d17150,"    public static void main(String[] args) throws UnknownHostException,
            IOException {

        try {
            ServerSocket serverSocket = new ServerSocket(3132, 50, InetAddress.getByName(""localhost""));
//            ServerSocket serverSocket = new ServerSocket(3132, 1000, InetAddress.getByName(""192.168.117.121""));
//            ServerSocket serverSocket = new ServerSocket(3132);

//            serverSocket.setSoTimeout(10 * 1000);
//			System.out.println(InetAddress.getByName(""localhost""));
//			System.out.println(""proxy is started"");
            ExecutorService executorService = Executors.newFixedThreadPool(10);


            LOGGER.info(InetAddress.getByName(""localhost""));
            LOGGER.info(""proxy is started"");
            while (true) {
                Socket client = null;
                try {
                    client = serverSocket.accept();
                    LOGGER.info(""Got new request"" + client.getInetAddress().toString());

                    executorService.submit(new CacheThread(client));

//                    CacheThread cacheThread = new CacheThread(client);
//                    cacheThread.start();
//                    cacheThread.join();
                    LOGGER.info(""Complete request: "" + client.getInetAddress().toString());
                } catch (Exception ex) {
                    LOGGER.error(ex.getMessage(), ex);
                    client.close();
                }
            }
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);

        } // by socket binding error

    }
"
1408,c517ebee-7c69-4504-afb2-0153aa954bba,"    private ThreadPool() {

    }
"
1409,7fc98177-7370-427b-a0aa-b7d8ca60c30a,"    public static ThreadPool getInstance() {
        return INSTANCE;
    }
"
1410,9308f429-6e9f-4b7f-bd7a-3f11fd804e57,"    public void addOrPut(Socket s) throws Exception {
        InputStream is; // входящий поток от сокета
        OutputStream os; // исходящий поток от сокета
        is = s.getInputStream();
        os = s.getOutputStream();

        byte buf[] = new byte[64 * 1024];
        int r = is.read(buf);

        String header = new String(buf, 0, r);
        if (header.indexOf(""GET "", 0) == 0) {
            String path = getPath(header);
            if (path == null) {
                printError(os, ""invalid request:\n"" + header);
                return;
            }
        }

    }
"
1411,ce3469a5-c08a-4f30-99c2-3bef83de1749,"    protected void printError(OutputStream os, String err) throws Exception {
        os.write((new String(PROXY_ERROR + err)).getBytes());
    }
"
1412,c55a0c4e-51cf-4bab-8bd2-8f18197a3bf6,"    public AppTest( String testName )
    {
        super( testName );
    }
"
1413,6079e89f-7376-4eac-b419-9247a22d32bf,"    public static Test suite()
    {
        return new TestSuite( AppTest.class );
    }
"
1414,ee787dab-cb7b-4795-bc74-536dbb21f70d,"    public void testApp()
    {
        assertTrue( true );
    }
"
1415,10301af9-f1c5-4923-945f-1bf0759891b7,"    public Agent(Simulation controller) {
        sim = controller;
        age = 0;
        energy = 6;
    }
"
1416,7aedbc5e-c575-45a2-9433-a979ceab59f8,"    public void act() {
    	// This function handles all of an Agents' behavior in
        // any given step.
        // First, check if the Agent has enough energy to survive
        // the step, otherwise remove it.
        if (energy < metabolism) {
            remove();
        } else {
            // Let the Agent know it has survived another step.
            age++;

			// 'Cost of living': Subtracting the metabolism from the
            // Agents' energy level.
            energy -= metabolism;

			// Generating a vector with the Sites that can be moved to,
            // and a vector with Sites suitable for offspring..
            Vector<Site> freeSites = findFreeSites();

			// Evaluating each of the possible Sites to move to.
            // YOU WILL NEED TO IMPLEMENT FINDBESTSITE YOURSELF.
            Site bestSite = findBestSite(freeSites);

			// Moving to the best possible Site, and reaping the energy
            // from it.
            // YOU WILL NEED TO IMPLEMENT MOVE AND REAP YOURSELF.
            move(bestSite);
            reap(bestSite);

			// Checking if the Agent is fertile and has a free neighboring
            // Site, and if so, producing offspring.
            if (energy > procreateReq) {
                Vector<Site> babySites = findBabySites();
                if (babySites.size() > 0) {
                    procreate(babySites);
                }
            }
        }

    }
"
1417,5b653354-b9fb-4f6c-8606-f921f8367f93,"    public Site findBestSite(Vector<Site> freeSites) {
    	// Your own code determining what the best Site is of all
        // possible freeSites for the agent to move to;
        Iterator<Site> i = freeSites.iterator();
        Site bestSite = new Site();
        double gain = Double.NEGATIVE_INFINITY;
        double newGain;
        if (i.hasNext()) {
            bestSite = i.next();
            gain = bestSite.getFood() - moveCost*pythagoras(this.xPosition, bestSite.getXPosition(), this.yPosition, bestSite.getYPosition());
        }
        while (i.hasNext()) {
            Site freeSite = i.next();
            newGain = freeSite.getFood()-moveCost*pythagoras(this.xPosition, freeSite.getXPosition(), this.yPosition, freeSite.getYPosition());
            if (newGain > gain) {
                bestSite = freeSite;
                gain = newGain;
            }
        }
        // Then return the best Site.
        return bestSite;
    }
"
1418,e2a1f03f-6cc5-4e26-bdc7-77bc57e00fda,"    public void move(Site newSite) {
        sim.grid[this.xPosition][this.yPosition].setAgent(null);
        energy -= moveCost*pythagoras(this.xPosition, newSite.getXPosition(), this.yPosition, newSite.getYPosition());
        this.xPosition = newSite.getXPosition();
        this.yPosition = newSite.getYPosition();
        
        newSite.setAgent(this);
    }
"
1419,40b08245-58ca-4732-8cc9-02e1e982a08c,"    public void reap(Site s) {
        this.energy += s.getFood();
        s.setFood(0.0);
    }
"
1420,79e85db8-159c-4a6a-9041-ea45043fff38,"    public void procreate(Vector<Site> babySites) {
        energy -= procreateCost;
        Agent baby = new Agent(sim);
        sim.agents.add(baby);

        Site babySite = (Site) babySites.elementAt(0);
        baby.setPosition(babySite.getXPosition(), babySite.getYPosition());
        babySite.setAgent(baby);
    }
"
1421,6e64db56-75b3-46e1-b984-a53ff8180667,"    public void remove() {
        sim.agents.remove(this);
        sim.grid[xPosition][yPosition].setAgent(null);
    }
"
1422,490abd69-4d84-49ca-a3a6-c60d115fc47c,"    public Vector<Site> findFreeSites() {
        Vector<Site> freeSites = new Vector<Site>();

        for (int m = -vision; m <= vision; m++) {
            for (int n = -vision; n <= vision; n++) {
                Site site;
                int x = xPosition + m;
                int y = yPosition + n;
                if (x >= 0 && x < sim.xSize && y >= 0 && y < sim.ySize) {
                    site = sim.grid[x][y];
                    Agent occ = site.getAgent();
                    if (occ == null || this.equals(occ)) {
                        freeSites.addElement(site);
                    }
                }
            }
        }
        Collections.shuffle(freeSites);
        return freeSites;
    }
"
1423,7dd0e9b6-a132-472f-b4be-48c3f27c468a,"    public Vector<Site> findBabySites() {
        Vector<Site> babySites = new Vector<Site>();

        for (int m = -1; m <= 1; m++) {
            for (int n = -1; n <= 1; n++) {
                Site site;
                int x = xPosition + m;
                int y = yPosition + n;
                if (x >= 0 && x < sim.xSize && y >= 0 && y < sim.ySize) {
                    site = sim.grid[x][y];
                    Agent occ = site.getAgent();
                    if (occ == null) {
                        babySites.addElement(site);
                    }
                }
            }
        }
        Collections.shuffle(babySites);
        return babySites;
    }
"
1424,65a7c65e-d6cf-4019-990a-71ba55c8ba27,"    public double calculateDistance(int x, int y) {
        return Math.sqrt(Math.pow((x - xPosition), 2) + Math.pow((y - yPosition), 2));
    }
"
1425,4db16093-0b8b-4d34-ad23-31909eb9d90a,"    public void setPosition(int x, int y) {
        xPosition = x;
        yPosition = y;
    }
"
1426,59ab0c48-fa7b-4759-9eb8-b3d62964c1d4,"    public int getXPosition() {
        return xPosition;
    }
"
1427,3f47ab58-5853-47a9-bb41-32b4ae69cd5e,"    public int getYPosition() {
        return yPosition;
    }
"
1428,ce1428da-6a10-48cc-a5ef-4718f4797137,"    public double getEnergy() {
        return energy;
    }
"
1429,3bf5458c-3a75-4d5a-8765-445fa9ea2606,"    public int getAge() {
        return age;
    }
"
1430,86b983f3-875e-4966-a038-a17a848ab5ef,"    private double pythagoras(int x1, int x2, int y1, int y2){
        return Math.sqrt(Math.pow(Math.abs(x1-x2), 2) + Math.pow(Math.abs(y1-y2), 2));
    }
"
1431,ea262067-fc60-4979-8015-13a81be7a975,"	public static void main(String args[]) {
		Simulation sim = new Simulation();
		sim.run();
	}
"
1432,271510ee-de8b-470c-a420-f6bc4cd2313f,"	public Simulation() {
		epochs = 0;
		initGrid();
		initAgents();
	}
"
1433,eb40d821-faf4-4656-85f9-515e0fd2b453,"	public void run() {
		createAndShowGUI();
	}
"
1434,b79d4c0f-a2d9-4b88-9657-47b2c303ae8a,"    private void createAndShowGUI() {
        //Create and set up the window.
        frame = new JFrame(""Scape"");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);

        //Set up the content pane.
        buildUI(frame.getContentPane());

        //Display the window.
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        buttonPanel.forwardEpochs.grabFocus();
    }
"
1435,05237203-0d17-4290-a98d-690fdd4af3cd,"    private void buildUI(Container pane) {
        pane.setLayout(new FlowLayout());
        mainPanel = new MainPanel(this);
        pane.add(mainPanel);
        buttonPanel = new ButtonPanel(this);
        pane.add(buttonPanel);
    }
"
1436,1229c55c-5609-4bb4-b21e-08587774b983,"	private void initGrid() {
		grid = new Site[xSize][ySize];
		for(int x = 0; x < xSize; x++) {
			for(int y = 0; y < ySize; y++) {
				double distance = Math.sqrt(Math.pow((center1 - x), 2) + Math.pow((center1 - y), 2));
				double distance2 = Math.sqrt(Math.pow((center2 - x), 2) + Math.pow((center2 - y), 2));
				double cap = minFood;
				if(distance <= distance2 && distance >= 0) {
					cap = maxFood * (1 - distance / spread);
				}
				if(distance > distance2 && distance2 >= 0) {
					cap = maxFood * (1 - distance2 / spread);
				}
				if(cap < minFood) {
					cap = minFood;
				}

				grid[x][y] = new Site(cap, x, y);
				totalFoodCapacity = totalFoodCapacity + cap;
			}
		}
	}
"
1437,52c35e54-6162-4a2b-aa1d-b034f4a5a5da,"    private void initAgents() {
    		agents = new Vector<Agent>();

    		for(int a = 0; a < numAgents; a++) {
    			agents.add(new Agent(this));
    		}

    		for(int a = 0; a < agents.size(); a++) {
    			int x = 0;
    			int y = 0;
    			boolean free = false;
    			while (!free) {
    				x = gen.nextInt(xSize);
    				y = gen.nextInt(ySize);
    				free = (grid[x][y].getAgent() == null);
        		}
        		Agent agent = agents.elementAt(a);
        		agent.setPosition(x,y);
        		grid[x][y].setAgent(agent);
    		}
    }
"
1438,e0575b8c-a91b-42d3-a41a-e82d55a44800,"    public void step() {
    	for(int x = 0; x < xSize; x++) {
			for(int y = 0; y < ySize; y++) {
				grid[x][y].grow();
				// YOU WILL NEED TO IMPLEMENT GROW() YOURSELF.
			}
		}

    	Collections.shuffle(agents);

    	for(int a = agents.size()-1; a >= 0; a--) {
			Agent agent = agents.elementAt(a);
			agent.act();
			// YOU WILL NEED TO COMPLETE ACT() YOURSELF.
	    }
    }
"
1439,5f439efb-95a6-4148-ba2d-737024c2e264,"	public ButtonPanel(Simulation controller) {
		scape = controller;
		setLayout(new BorderLayout());
		setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

		info = new JTextPane();
		info.setPreferredSize(new Dimension(270, 300));
		info.setMaximumSize(new Dimension(270, 300));
		info.setEditable(false);
		info.setOpaque(false);
		info.setBorder(
				BorderFactory.createCompoundBorder(
						BorderFactory.createEmptyBorder(0, 0, 20, 0),
						BorderFactory.createCompoundBorder(
								BorderFactory.createEtchedBorder(EtchedBorder.RAISED),
								BorderFactory.createEmptyBorder(5, 5, 5, 5))));
		StyledDocument doc = info.getStyledDocument();
		addStylesToDocument(doc);
		updateInfo();

		epochsLabel = new JLabel("""", SwingConstants.CENTER);
		String ep = ""Epochs: "" + scape.epochs;
		epochsLabel.setText(ep);

		buttons1 = new JPanel();
		buttons1.setLayout(new FlowLayout());
		buttons1.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));

		next = new JButton(""Next"");
		next.setActionCommand(""next"");
		next.addActionListener(this);

		buttons1.add(next);

		forwardLabel = new JLabel(""Enter the number of epochs to forward."", SwingConstants.LEFT);
		forwardLabel.setVerticalAlignment(SwingConstants.BOTTOM);

		buttons2 = new JPanel();
		buttons2.setLayout(new BoxLayout(buttons2, BoxLayout.LINE_AXIS));

		forwardEpochs = new JTextField(""100"");
		forwardEpochs.setMaximumSize(new Dimension(100, 25));

		forward = new JButton(""Forward"");
		forward.setActionCommand(""forward"");
		forward.addActionListener(this);

		buttons2.add(forwardEpochs);
		buttons2.add(Box.createRigidArea(new Dimension(5, 0)));
		buttons2.add(forward);

		buttons3 = new JPanel();
		buttons3.setLayout(new BoxLayout(buttons3, BoxLayout.LINE_AXIS));
		buttons3.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));

		restart = new JButton(""Restart"");
		restart.setActionCommand(""restart"");
		restart.addActionListener(this);

		exit = new JButton(""Exit"");
		exit.setActionCommand(""exit"");
		exit.addActionListener(this);

		buttons3.add(Box.createHorizontalGlue());
		buttons3.add(restart);
		buttons3.add(Box.createRigidArea(new Dimension(5, 0)));
		buttons3.add(exit);

		body = new JPanel();
		body.setLayout(new GridLayout(0, 1));

		body.add(epochsLabel);
		body.add(buttons1);
		body.add(forwardLabel);
		body.add(buttons2);

		this.add(info, BorderLayout.NORTH);
		this.add(body, BorderLayout.CENTER);
		this.add(buttons3, BorderLayout.SOUTH);
	}
"
1440,9db498a2-373e-4d7a-9893-091fa57162bd,"	public Dimension getPreferredSize() {
		return preferredSize;
	}
"
1441,56286f19-46b7-4d97-b3f1-9348028b00b7,"	public void actionPerformed(ActionEvent e) {
		if (""next"".equals(e.getActionCommand())) {
			update(1);
		}

		if (""forward"".equals(e.getActionCommand())) {
			Integer num = new Integer(forwardEpochs.getText());
			update(num.intValue());
		}

		if (""restart"".equals(e.getActionCommand())) {
			scape.frame.dispose();
                        new Simulation().run();
		}

		if (""exit"".equals(e.getActionCommand())) {
			scape.frame.dispose();
		}
	}
"
1442,23d8a090-ff37-4fe8-a780-28c3a4dc8f85,"	private void update(int cycles) {
		if (cycles < 0) {
			while (true) {
				scape.step();
				addInfo(scape.grid[scape.mainPanel.xSelected][scape.mainPanel.ySelected]);
				scape.epochs++;
				String ep = ""Epochs:  "" + scape.epochs;
				epochsLabel.setText(ep);
			}
		}
		else {
			for (int c = 0; c < cycles; c++) {
				scape.step();
				addInfo(scape.grid[scape.mainPanel.xSelected][scape.mainPanel.ySelected]);
				scape.epochs++;
				String ep = ""Epochs:  "" + scape.epochs;
				epochsLabel.setText(ep);
				scape.mainPanel.update();
			}
		}
	}
"
1443,d988dce9-2292-4ef0-8bf1-2d9b08d26d89,"	private void addStylesToDocument(StyledDocument doc) {
		// Initialize some styles.
		Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);

		Style regular = doc.addStyle(""regular"", def);
		StyleConstants.setFontFamily(def, ""SansSerif"");
		StyleConstants.setFontSize(regular, 14);

		Style s = doc.addStyle(""italic"", regular);
		StyleConstants.setItalic(s, true);

		s = doc.addStyle(""bold"", regular);
		StyleConstants.setBold(s, true);
	}
"
1444,7aebe142-7481-4ee0-9f4c-3d2cdbe6cb3a,"	public void addInfo(Site s) {
		content[0] = ""Scape"";
		content[1] = ""Agents: "" + scape.agents.size();
		content[2] = newline + ""Site"";
		content[3] = ""Coordinates: ("" + s.getXPosition() + "", "" + s.getYPosition() + "")"";
		content[4] = ""Site food: "" + round(s.getFood());
		content[5] = newline + ""Agent on Site"";

		Agent a = s.getAgent();
		if (a != null) {
			content[6] = ""Agent ID: "" + a;
			content[7] = ""Age: "" + a.getAge();
			content[8] = ""Agent Energy: "" + round(a.getEnergy());
		}

		else {
			content[6] = ""ID: "";
			content[7] = ""Age: "";
			content[8] = ""Agent Energy: "";
		}

		updateInfo();
	}
"
1445,5e94f802-4a01-40f0-a802-8276b824209f,"	private void updateInfo() {
		StyledDocument doc = info.getStyledDocument();
		try {
			doc.remove(0, doc.getLength());
			for (int i = 0; i < content.length; i++) {
				doc.insertString(doc.getLength(), content[i] + newline, doc.getStyle(style[i]));
			}
		}
		catch (BadLocationException ble) {
			System.err.println(""Couldn't insert text into text pane."");
		}
	}
"
1446,f797274e-00ff-4ef1-86cd-3c2284e51ce0,"	public String round(double value) {
		DecimalFormat df = new DecimalFormat(""0.00"");
		String stringValue = df.format(value);
		return stringValue;
	}
"
1447,02fb4113-7cb0-4b77-a2d7-b2bc2ea94aad,"    public Site () {
    		food = 0;
    }
"
1448,7f4d8986-8486-4b12-b37b-42ba4f41d712,"    public Site(double cap, int x, int y) {
    		food = foodMax = cap;
    		xPosition = x;
    		yPosition = y;
    }
"
1449,87209eb9-930c-4eca-a58b-e90d3ed0a742,"    public void grow() {
        double growthFactor = 0.15;
    	food += (foodMax-food)*growthFactor;
    }
"
1450,6eb838e5-499a-4694-bd09-8f9e303c4128,"    public double getFood() {
    		return food;
    }
"
1451,993f7b90-62b5-4533-b07d-34f8dbe8dc89,"    public void setFood(double f) {
    		food = f;
    }
"
1452,fe12c51c-120c-41ad-bb46-a05330662e73,"    public Agent getAgent() {
    		return agent;
    }
"
1453,ca1cba26-1317-4e49-ad5d-9856121aa0ef,"    public void setAgent(Agent a) {
    		agent = a;
    }
"
1454,0e93a461-4ac1-4a91-91c7-750e3e2f2b22,"    public int getXPosition() {
    		return xPosition;
    }
"
1455,b9798b62-499d-43fa-99d8-3853f04fb1a4,"    public int getYPosition() {
    		return yPosition;
    }
"
1456,33e084db-0363-4a46-87ea-546423839232,"	public MainPanel(Simulation controller) {
		this.scape = controller;
		xSize = scape.xSize;
		ySize = scape.ySize;
		setLayout(new GridLayout(xSize, ySize));
		addMouseListener(this);
		labels = new JLabel[xSize][ySize];
		for (int y = 0; y < ySize; y++) {
			for (int x = 0; x < xSize; x++) {
				labels[x][y] = new JLabel("""");
				labels[x][y].setOpaque(true);
				labels[x][y].setBorder(BorderFactory.createLineBorder(Color.black));
				labels[x][y].setHorizontalAlignment(SwingConstants.CENTER);
				labels[x][y].setVerticalAlignment(SwingConstants.CENTER);
				add(labels[x][y]);
			}
		}
		update();
	}
"
1457,774ae406-8901-4b8e-9ed9-e7278174858e,"	public void update() {
		for (int y = 0; y < ySize; y++) {
			for (int x = 0; x < ySize; x++) {
				Site site = scape.grid[x][y];
				JLabel label = labels[x][y];
				double energy = site.getFood();

				double div = (255 / scape.maxFood) * energy;
				int gradient = (int) (255 - div);
				Color background;

				background = (gradient > 235) ? new Color(255, 250, 205) : new Color(gradient, 255, gradient);

				label.setBackground(background);

				if (site.getAgent() != null) {
					label.setText(""o"");
					label.setForeground(Color.red);
				}
				else {
					label.setText("""");
				}
			}
		}
	}
"
1458,0e96b58d-61f4-4054-9c82-516cdb0d0394,"	public Dimension getPreferredSize() {
		return preferredSize;
	}
"
1459,dfadb17b-ab0d-4d59-9e42-8ff301e60324,"	public void mouseClicked(MouseEvent e) {
		labels[xSelected][ySelected].setBorder(BorderFactory.createLineBorder(Color.black));
		xSelected = e.getX() / (650 / xSize);
		ySelected = e.getY() / (650 / ySize);
		labels[xSelected][ySelected].setBorder(BorderFactory.createLineBorder(Color.red));
		scape.buttonPanel.addInfo(scape.grid[xSelected][ySelected]);
	}
"
1460,c65951d6-bd2d-4bd2-b55c-c1ca9ed3be0b,"	public void mouseMoved(MouseEvent e) {
	}
"
1461,67d64c8d-9bd3-4824-8291-50ec84d3cbce,"	public void mouseExited(MouseEvent e) {
	}
"
1462,e682b102-ca00-40a8-926b-5401d9426f75,"	public void mouseReleased(MouseEvent e) {
	}
"
1463,2c3ae05e-55c7-47ad-82de-1a2bfbad9230,"	public void mouseEntered(MouseEvent e) {
	}
"
1464,051eac88-b658-496a-b501-c3027d33a754,"	public void mousePressed(MouseEvent e) {
	}
"
1465,703b653b-430f-47d3-839f-cef25ef88507,"	public void mouseDragged(MouseEvent e) {
	}
"
1466,e7bb6031-0d2b-4a2b-a0f0-a38cc901e2e7,"    @Override
    public void start(Stage primaryStage) throws Exception{
        PresenterImpl mainPresenter = new PresenterImpl(primaryStage);
        mainPresenter.show();
    }
"
1467,572d4fd2-aecc-4521-b645-8c2f46b9f2cf,"    public static void main(String[] args) {
//        System.out.println(""os.name=""+System.getProperty(""os.name""));
        launch(args);
    }
"
1468,69dd0347-c1ec-4426-9a38-5d86be996a0e,"    @Override
    public int check(int attempt) {
        this.lastAttempt = attempt;
        this.noAttepts++;
        if (attempt > this.number) return 1;
        if (attempt < this.number) return -1;
        return 0;
    }
"
1469,8d52d835-4ae4-4eff-8afa-f2827a5bf9b3,"    @Override
    public void generateRandomNumber(int maxNumber) {
        this.lastAttempt = 0;
        this.noAttepts=0;
        Random r = new Random();
        this.number = r.nextInt(maxNumber);
        System.out.println(""generated number: ""+this.number);
    }
"
1470,d88fd023-5cf4-4f34-871c-bf8df9acf0e0,"    @Override
    public int getLastTry() {
        return this.lastAttempt;
    }
"
1471,107502f0-5445-48e3-b70e-857f21132306,"    @Override
    public int getNoAttepts() {
        return this.noAttepts;
    }
"
1472,11f9ced1-8ff2-47c4-81f9-c0abd24994f6,"    public int check(int number);
"
1473,f8b8c6c8-1d68-4ec0-a66d-53aed0ad3484,"    public void generateRandomNumber(int maxNumber);
"
1474,1c5f1f6b-3b39-46ab-bea1-aa2b9adec9f3,"    public int getLastTry();
"
1475,062e1670-c954-440b-bdc5-39e0aa62faab,"    public int getNoAttepts();
"
1476,6760faee-0b8b-44af-81af-763e7caaf8b7,"    public PresenterImpl(Stage stage) {
        this.stage = stage;
        this.model = getModel();

    }
"
1477,0b9b14e0-6043-4897-ad0b-ef436184fc9b,"    public void show() throws Exception {
        gamePresenter = getGamePresenter();
        newGame();


        Scene scene = new Scene(gamePresenter.getViewRoot());
        stage.setScene(scene);
        stage.setTitle(""FindNumber FXML"");
//        setScreenSize();
//        stage.setMaximised(true);// available in JavaFX 8

        // reakcja na wcisniecie krzyzyka
        stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
            public void handle(final WindowEvent e) {
                e.consume(); // Consuming the event by default. Wymagane zeby klikniecie w krzyzyk otwarlo popup zamiast zamknac aplikacji
//                new CloseAppDialog(stage, ""Question"");
                applicationExitShowConfirmDialog();
            }
        });

//        stage.setFullScreen(true);
        setWindowStyle();
        stage.show();
        stage.centerOnScreen();
    }
"
1478,74f50e41-2ece-4f52-8680-21a957fce6b9,"            public void handle(final WindowEvent e) {
                e.consume(); // Consuming the event by default. Wymagane zeby klikniecie w krzyzyk otwarlo popup zamiast zamknac aplikacji
//                new CloseAppDialog(stage, ""Question"");
                applicationExitShowConfirmDialog();
            }
"
1479,ead8a7ff-4c51-4677-95b8-dbe8eb995f85,"    private void setScreenSize() {
        Rectangle2D screenBounds = Screen.getPrimary().getVisualBounds();
        stage.setX(0);
        stage.setY(0);
        stage.setWidth(screenBounds.getWidth());
        stage.setHeight(screenBounds.getHeight());
    }
"
1480,88c5e36e-d76b-4a79-a089-52a552fc5bc1,"    private void setWindowStyle() {
        stage.initStyle(StageStyle.DECORATED);
//        stage.initStyle(StageStyle.UNDECORATED);
    }
"
1481,cc60dd80-a42b-46c9-8530-4e5ee3493cac,"    public GamePresenter getGamePresenter() {
        if (gamePresenter == null) {
            try {
                FXMLLoader loader = new FXMLLoader(getClass().getResource(""../view/game/game.fxml""));
                loader.load();

                gamePresenter = loader.getController();
                if (gamePresenter == null) System.out.println(""gamePresenter null"");
                gamePresenter.setPresenterImpl(this);
            } catch (IOException e) {
                throw new RuntimeException(""Unable to load game.fxml"", e);
            }
        }
        return gamePresenter;
    }
"
1482,e2196115-b13a-4833-b8e4-859400c5a729,"    public ModelInterface getModel() {
        if (model == null) {
            model = new Model();
//            initMock();
        }
        return model;
    }
"
1483,6674b84b-c1c3-43eb-8ce0-7fb3d8a53170,"    private void initMock() {
        model = Mockito.mock(Model.class);
        Mockito.when(model.check(Mockito.anyInt())).thenReturn(100);
        Mockito.when(model.check(501)).thenReturn(0);
        Mockito.when(model.check(400)).thenReturn(-1);
        Mockito.when(model.check(600)).thenReturn(1);
    }
"
1484,8e58f173-d7ba-45f5-8fd6-4ce642290f30,"    @Override
    public void applicationExitShowConfirmDialog() {
        System.out.println(""application exit"");
        closeAppDialog = new CloseAppDialog(stage, ""Question"");
        closeAppDialog.setPresenterImpl(this);
    }
"
1485,b9d11940-9b9f-4708-9585-40bb9d53939a,"    @Override
    public void applicationExit() {
        if (closeAppDialog == null) return;
        if (!closeAppDialog.isButtonOkPressed()) return;
        stage.close();
    }
"
1486,54d5679c-33c3-40ff-8f80-e81d494ccf00,"    @Override
    public void showInfoVictory() {
        String m = ""victory: correct number"";
        System.out.println(m);
        gamePresenter.addTryHistory(getMessageForAttemptsHistory(m));
        gamePresenter.showInfo(m);
    }
"
1487,dd8444a0-fb3c-4296-8c98-ecb1ba9f20e0,"    @Override
    public void showInfoNumberToLow() {
        String m = ""number to low"";
        System.out.println(m);
        gamePresenter.addTryHistory(getMessageForAttemptsHistory(m));
        gamePresenter.showInfo(m);
    }
"
1488,e44b8a19-588f-406d-96dc-288ebf63ec70,"    private String getMessageForAttemptsHistory(String m) {
        return model.getNoAttepts() + "": "" + model.getLastTry() + "" "" + m;
    }
"
1489,6f6a26d0-9b14-460d-b28c-9903857afe93,"    @Override
    public void showInfoNumberToBig() {
        String m = ""number to big"";
        System.out.println(m);
        gamePresenter.addTryHistory(getMessageForAttemptsHistory(m));
        gamePresenter.showInfo(m);
    }
"
1490,9f23d7a4-ebfe-4b80-9b38-a47a054ec22f,"    @Override
    public void setFieldsActive(boolean active) {
        gamePresenter.setFieldsActive(active);
    }
"
1491,64779685-5f93-4c89-a8d1-6068e9487f5b,"    @Override
    public void newGame() {
        model.generateRandomNumber(1000);
        gamePresenter.setFieldsActive(true);
        gamePresenter.clearAtteptsHistory();
    }
"
1492,cb5f4158-cbfc-403b-a978-123138c30943,"    @Override
    public void processTry(int number) {
        int wynik = model.check(number);
        System.out.println(""wynik="" + wynik);
        if (wynik == 0) showInfoVictory();
        else if (wynik < 0) showInfoNumberToLow();
        else if (wynik > 0) showInfoNumberToBig();

        if (wynik == 0) setFieldsActive(false);
        else setFieldsActive(true);
    }
"
1493,f9739791-ef2b-4b2c-9cef-646b236a9dd9,"    public void applicationExit();
"
1494,a5ac9bcc-722e-4123-b0b6-1f63f9766396,"    public void applicationExitShowConfirmDialog();
"
1495,37abc20e-cc80-4819-8808-64e241e4a450,"    public void showInfoVictory();
"
1496,d04ffcd9-b888-406a-a279-00badc95534e,"    public void showInfoNumberToLow();
"
1497,2e0c1f6b-4b13-4117-8f22-05100f1f7d9c,"    public void showInfoNumberToBig();
"
1498,d168d4cd-1711-437e-9a39-5d2acce2607a,"    public void setFieldsActive(boolean active);
"
1499,d0ba21d6-cbc5-4e39-849e-9335e3cde9b7,"    public void newGame();
"
1500,833348e6-7894-4ea4-8817-673121615438,"    public void processTry(int number);
"
1501,83159bc2-f9c2-4348-87f5-f786ed16d9a5,"    public void setPresenterImpl(PresenterInterface presenterImpl) {
        this.presenterImpl = presenterImpl;
    }
"
1502,33bc446a-4766-4b3e-91e0-13148413b5d5,"    abstract public Parent getViewRoot();
"
1503,d7ad0391-31f9-4512-a585-0844b612d587,"    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        attempts = tryHistory.getItems();

        // ustawić w scene builderze dla przycisku nazwe _New game i wtedy ponizsze zadziala jako skrot alt-n,
        // jesli sie nie myle to bedzie wywolane to co jest w SB w onAction lub ustawione jako onAction w kodzie
        bNewGame.setMnemonicParsing(true);
        animate();
    }
"
1504,50597a6b-aca9-4aa1-b4e6-afcfc1846a67,"    @Override
    public Parent getViewRoot() {
        return root;
    }
"
1505,6001a818-0299-4d11-9432-438221b0e024,"    @FXML
    private void handleTextField() {
        Integer n = null;
        try {
            n = Integer.parseInt(number_textfield.getText());
        } catch (NumberFormatException e) {
            return;
        }

        presenterImpl.processTry(n);
    }
"
1506,118f9e08-64c9-4241-b92a-916caa9527ee,"    public void setFieldsActive(boolean state) {
        number_textfield.clear();
        number_textfield.setEditable(state);
        number_textfield.setDisable(!state);
    }
"
1507,f67e7d1e-94ba-4140-b223-12dfbffb7a9f,"    public void clearAtteptsHistory() {
        attempts.clear();
    }
"
1508,6a376cd6-5e55-4606-8e27-5f3f81442c3d,"    public void showInfo(String msg) {
        info_label.setText(msg);
    }
"
1509,2cc81db2-5e83-4e95-a927-b480a9093ea8,"    public void addTryHistory(String m) {
        attempts.add(m);
        tryHistory.scrollTo(attempts.size());
    }
"
1510,8815eeb4-ddbc-4ebd-8367-8f61fb4f01d4,"    @FXML
    private void handleKoniec() {
        presenterImpl.applicationExitShowConfirmDialog();
    }
"
1511,ad807110-7a9e-46e4-90f5-ba31d6139d57,"    @FXML
    private void handleNewGame() {
        presenterImpl.newGame();
    }
"
1512,4eac007d-60aa-4ddf-933a-a37df0aa1a54,"    public void animate() {
//        bNewGame.toFront();
        bNewGame.getTransforms().add(new Shear(0.7, 0));
        scaleTransition = ScaleTransitionBuilder.create()
                .node(bNewGame)
                .duration(Duration.seconds(2))
                .toX(3)
                .toY(3)
                .cycleCount(Timeline.INDEFINITE)
                .autoReverse(true)
                .build();
        scaleTransition.play();
    }
"
1513,08199327-64ab-4fce-bd77-71742317a0e1,"    public CloseAppDialog(Stage owner, String title){
        root = new BorderPane();
        stage = this;
        this.owner = owner;
        initModality( Modality.APPLICATION_MODAL );
        initOwner( owner );
        initStyle( StageStyle.UTILITY );
        setTitle( title );
        setContents();
    }
"
1514,843ad84b-524d-4282-9e07-636572058386,"    public void setContents(){

        Scene scene = new Scene(root,150,150);
        setScene(scene);

        Group groupInDialog = new Group();
        groupInDialog.getChildren().add( new Label(""Really Exit ?"") );
        root.setCenter( groupInDialog );


        Button yes = new Button( ""Yes"" );
        yes.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent paramT) {
                buttonOkPressed=true;
                stage.close(); // Closing the pop up.
//                owner.close(); // Closing the parent stage also.
                presenterImpl.applicationExit();
            }
        });

        Button no  = new Button( ""No"" );
        no.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent paramT) {
                buttonOkPressed=false;
                stage.close(); // Closing the pop up only
            }
        });

        HBox buttonPane = new HBox();
        buttonPane.setSpacing(10);
        buttonPane.getChildren().addAll(yes,no);
        root.setBottom(buttonPane);

        stage.show();
    }
"
1515,8f787062-45b6-4b33-89aa-9290f4ac802b,"            @Override
            public void handle(ActionEvent paramT) {
                buttonOkPressed=true;
                stage.close(); // Closing the pop up.
//                owner.close(); // Closing the parent stage also.
                presenterImpl.applicationExit();
            }
"
1516,a84f453d-c04f-4e2a-b60d-28e250f5e922,"            @Override
            public void handle(ActionEvent paramT) {
                buttonOkPressed=false;
                stage.close(); // Closing the pop up only
            }
"
1517,e8caff04-0fbf-4668-8191-17bdaff0d227,"    public boolean isButtonOkPressed() {
        return buttonOkPressed;
    }
"
1518,f53eb62a-b312-450c-8127-f3d0cfd1fdf7,"    @Override
    public Parent getViewRoot() {
        return root;
    }
"
1519,ab0aef62-3d15-4704-b21e-c62212ee3c87,"    public void  uploadAndUnzipFile  (String directory,String uploadFile,String deployModel)
    {
        FileUpload fu = new FileUpload();
        ChannelSftp sftp=fu.connect(server_ip, server_port, user_name, password);
        System.out.println(""开始上传文件"");
        fu.upload(directory, uploadFile, sftp);
        System.out.println(""上传文件结束"");

        File tempFile =new File( uploadFile.trim());
        String fileName = tempFile.getName();  //获取文件名
        System.out.println(""fileName = "" + fileName);
        UnZipFile uzf = new UnZipFile();
        Connection conn = uzf.establishConnection(server_ip);

        uzf.unZipFile(conn,user_name,password,fileName,directory,deployModel);

    }
"
1520,071dac3d-6a5e-4f82-aa39-c653457d4531,"   public  FileUploadThread (String directory,String uploadFile,String deployModel) {
       this.directory = directory;
       this.uploadFile = uploadFile;
       this.deployModel = deployModel;
    }
"
1521,e4819c7c-3fec-4881-b775-ed4cc373bb32,"    public void run() {
        try {
            Thread.sleep(5000);
            new AutoDeployment().uploadAndUnzipFile(directory,uploadFile,deployModel);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }
"
1522,86be47e1-7784-4f9e-93d9-d7888e2ece0b,"    public String getSERVER_IP() {
        return SERVER_IP;
    }
"
1523,55a1b9b6-9dee-4fa6-a459-a1711c569ac4,"    public void setSERVER_IP(String SERVER_IP) {
        this.SERVER_IP = SERVER_IP;
    }
"
1524,120d5ac9-8a54-4d83-a784-48e6bd881f2c,"    public String getSERVER_POR() {
        return SERVER_POR;
    }
"
1525,e1607c7a-6fa6-46b6-b51f-8d7700bd5f2d,"    public void setSERVER_POR(String SERVER_POR) {
        this.SERVER_POR = SERVER_POR;
    }
"
1526,1b6738af-86e6-428e-b8b7-982dd72ecb36,"    public String getUSER_NAME() {
        return USER_NAME;
    }
"
1527,28beb537-0fa2-4801-85bf-77123344679a,"    public void setUSER_NAME(String USER_NAME) {
        this.USER_NAME = USER_NAME;
    }
"
1528,6e3e383f-c7a1-4f90-83a3-b75a5ce8b825,"    public String getPASSWORD() {
        return PASSWORD;
    }
"
1529,bd06bf86-b869-4157-a4bb-053a0cf06be0,"    public void setPASSWORD(String PASSWORD) {
        this.PASSWORD = PASSWORD;
    }
"
1530,5fe7138c-28f8-4ab5-878d-8dc7b78fc25a,"    public Connection establishConnection(String server_ip){
        Connection conn = null;
        try {
            conn = new Connection(server_ip);
            conn.connect(); // 连接

        }
        catch (IOException e) {
            e.printStackTrace();

            }
        finally {

        }
        return conn;
    }
"
1531,afad7f74-7e7a-4c9a-9459-bcd4a71d5761,"    public  int unZipFile(Connection conn,String user_name,String password,String filename,String directory,String deployModel){
        Session session = null;
        int ret = -1;

        try {
            if (conn.authenticateWithPassword(user_name, password)) {  // 认证
                session = conn.openSession();               // 打开一个会话
            }
            System.out.println(""username : ""+user_name);
            System.out.println(""password:  "" +password);
            System.out.println(""开始解压文件……"");
            if(deployModel.equals(""incDeploy""))
            {
                session.execCommand(""cd "" + directory + "";"" + ""tar xvf "" + filename);       //切换目录，解压文件 ,增量发版使用tar命令解压
            }
            else if (deployModel.equals(""fullDeploy"")){
                session.execCommand(""cd "" + directory + "";"" + ""jar xvf "" + filename);       //切换目录，解压文件 ,全量发版使用jar命令解压
            }
            else{
                System.out.println(""发布方式参数错误，文件未解压！"");
            }

            InputStream stdErr = new StreamGobbler(session.getStderr());
            InputStream stdOut = new StreamGobbler(session.getStdout());
            String line = null;
            BufferedReader brError = new BufferedReader(new InputStreamReader(stdErr,""utf-8""));
            BufferedReader brStdout = new BufferedReader(new InputStreamReader(stdOut,""utf-8""));

            while ((line = brError.readLine()) != null){
                System.out.println(line);
            }
            while ((line = brStdout.readLine()) != null){
                System.out.println(line);
            }
            ret = session.getExitStatus();
            session.close();
            conn.close();
            if(ret==0)
            {
                System.out.println(""解压成功！"");
            }
            else {
                System.out.println(""解压失败！"");
            }
            return ret;

    }
        catch (IOException e)
        {
            e.printStackTrace();
        }
      return  ret;
   }
"
1532,d21c9f72-d3bd-4b84-afbc-3d606a44ea4e,"    public static void main (String args[]) throws Exception {
        SystemParam param = new SystemParam();

        param.setSERVER_IP(""10.1.30.5"");
        param.setSERVER_POR(""22"");
        param.setUSER_NAME(""weblogic"");
        param.setPASSWORD(""weblogic"");

        XMLEncoder encoder = new XMLEncoder(
                new BufferedOutputStream(
                        new FileOutputStream(""Sample.xml"")));
        encoder.writeObject(param);
        encoder.close();
        System.out.println(param);
        XMLDecoder decoder = new XMLDecoder(
                new BufferedInputStream(
                        new FileInputStream(""Sample.xml"")));
        SystemParam sample2 = (SystemParam)decoder.readObject();
        decoder.close();
        System.out.println(sample2);
    }
"
1533,03a9fd16-9492-44ac-85e4-bbe6cf61dc77,"    public static boolean isNumeric(String str){
        Pattern pattern = Pattern.compile(""[0-9]*"");
        return pattern.matcher(str).matches();
    }
"
1534,a0c6bb9c-c635-47ec-a858-19eafac83770,"    public FileProgressMonitor(long fileSize) {
        this.fileSize = fileSize;
    }
"
1535,311b8770-b4fb-4ced-9f51-9b231336eb31,"    @Override
    public void run() {
        if (!isEnd()) { // 判断传输是否已结束
            System.out.println(""Transfering is in progress."");
            long transfered = getTransfered();
            if (transfered != fileSize) { // 判断当前已传输数据大小是否等于文件总大小
                System.out.println(""Current transfered: "" + transfered + "" bytes"");
                sendProgressMessage(transfered);
            } else {
                System.out.println(""File transfering is done."");
                setEnd(true); // 如果当前已传输数据大小等于文件总大小，说明已完成，设置end
            }
        } else {
            System.out.println(""Transfering done. Cancel timer."");
            stop(); // 如果传输结束，停止timer记时器
            return;
        }
    }
"
1536,fa652784-7e4e-4709-aa35-3163ec199e74,"    public void stop() {
        System.out.println(""Try to stop progress monitor."");
        if (timer != null) {
            timer.cancel();
            timer.purge();
            timer = null;
            isScheduled = false;
        }
        System.out.println(""Progress monitor stoped."");
    }
"
1537,a28f038c-92ca-4d31-a4bd-6108bb9a1950,"    public void start() {
        System.out.println(""Try to start progress monitor."");
        if (timer == null) {
            timer = new Timer();
        }
        timer.schedule(this, 1000, progressInterval);
        isScheduled = true;
        System.out.println(""Progress monitor started."");
    }
"
1538,626f2a27-a8b4-4e33-91c5-c1bc9d8d5f55,"    private void sendProgressMessage(long transfered) {
        if (fileSize != 0) {
            double d = ((double)transfered * 100)/(double)fileSize;
            DecimalFormat df = new DecimalFormat( ""#.##"");
            System.out.println(""Sending progress message: "" + df.format(d) + ""%"");
        } else {
            System.out.println(""Sending progress message: "" + transfered);
        }
    }
"
1539,9f7d1f39-547f-4b61-80e7-67371cc448e8,"    public boolean count(long count) {
        if (isEnd()) return false;
        if (!isScheduled) {
            start();
        }
        add(count);
        return true;
    }
"
1540,2ca5fe50-20fe-479d-b0b0-098ebc944249,"    public void end() {
        setEnd(true);
        System.out.println(""transfering end."");
    }
"
1541,264bc175-0269-4600-808d-8ee2b9078a2b,"    private synchronized void add(long count) {
        transfered = transfered + count;
    }
"
1542,a2e1d2b5-0341-4245-886d-244a0e0922e6,"    private synchronized long getTransfered() {
        return transfered;
    }
"
1543,b96739f9-c678-4a06-a6d5-bc32d72f24e5,"    public synchronized void setTransfered(long transfered) {
        this.transfered = transfered;
    }
"
1544,189e543f-b78c-48f6-acc3-49f9f0f225b8,"    private synchronized void setEnd(boolean isEnd) {
        this.isEnd = isEnd;
    }
"
1545,bc44d7bd-3925-496a-a920-23230d1aadca,"    private synchronized boolean isEnd() {
        return isEnd;
    }
"
1546,ec4ae618-4296-43b9-8d30-b5548f5606b6,"    public void init(int op, String src, String dest, long max) {
        // Not used for putting InputStream
    }
"
1547,ccbd1b4f-e6d9-4f0c-b1df-97eeb1f2f27c,"    public ConsoleTextArea(InputStream[] inStreams) {
        for(int i = 0; i < inStreams.length; ++i)
            startConsoleReaderThread(inStreams[i]);
    } // ConsoleTextArea()
"
1548,da8c5c49-28bd-4b06-b0c1-6e0cfc349454,"    public ConsoleTextArea() throws IOException {
        final LoopedStreams ls = new LoopedStreams();
        // 重定向System.out和System.err
        PrintStream ps = new PrintStream(ls.getOutputStream());
        System.setOut(ps);
        System.setErr(ps);
        startConsoleReaderThread(ls.getInputStream());
    } // ConsoleTextArea()
"
1549,9a88728d-1a95-4ac5-80ef-8d4edc91d462,"    private void startConsoleReaderThread(
            InputStream inStream) {
        final BufferedReader br =
                new BufferedReader(new InputStreamReader(inStream));
        new Thread(new Runnable() {
            public void run() {
                StringBuffer sb = new StringBuffer();
                try {
                    String s;
                    Document doc = getDocument();
                    while((s = br.readLine()) != null) {
                        boolean caretAtEnd = false;
                        caretAtEnd = getCaretPosition() == doc.getLength() ?
                                true : false;
                        sb.setLength(0);
                        append(sb.append(s).append('\n').toString());
                        if(caretAtEnd)
                            setCaretPosition(doc.getLength());
                    }
                }
                catch(IOException e) {
                    JOptionPane.showMessageDialog(null,
                            ""从BufferedReader读取错误："" + e);
                    System.exit(1);
                }
            }
        }).start();
    } // startConsoleReaderThread()
"
1550,e176de83-ddc9-435e-b441-accecfa84a93,"            public void run() {
                StringBuffer sb = new StringBuffer();
                try {
                    String s;
                    Document doc = getDocument();
                    while((s = br.readLine()) != null) {
                        boolean caretAtEnd = false;
                        caretAtEnd = getCaretPosition() == doc.getLength() ?
                                true : false;
                        sb.setLength(0);
                        append(sb.append(s).append('\n').toString());
                        if(caretAtEnd)
                            setCaretPosition(doc.getLength());
                    }
                }
                catch(IOException e) {
                    JOptionPane.showMessageDialog(null,
                            ""从BufferedReader读取错误："" + e);
                    System.exit(1);
                }
            }
"
1551,980233f5-c029-404f-a833-aaac51130cb4,"    public ChannelSftp connect(String server_ip, int server_port, String user_name,
                               String password) {
        ChannelSftp sftp = null;
        try {
            JSch jsch = new JSch();
            jsch.getSession(user_name, server_ip, server_port);
            Session sshSession = jsch.getSession(user_name, server_ip, server_port);
            System.out.println(""Session created."");
            sshSession.setPassword(password);
            Properties sshConfig = new Properties();
            sshConfig.put(""StrictHostKeyChecking"", ""no"");
            sshSession.setConfig(sshConfig);
            sshSession.connect();
            System.out.println(""Session connected."");
            System.out.println(""Opening Channel."");
            Channel channel = sshSession.openChannel(""sftp"");
            channel.connect();
            sftp = (ChannelSftp) channel;
            System.out.println(""Connected to "" + server_ip + ""."");
        } catch (Exception e) {

        }
        return sftp;
    }
"
1552,cf3d2a64-8f66-441f-8ad2-1856027ad43f,"    public void upload(String directory, String uploadFile, ChannelSftp sftp) {
        try {
            sftp.cd(directory);
            File file=new File(uploadFile);
            FileInputStream fis = new FileInputStream(file);
            System.out.println(""文件size:""+String.valueOf(fis.available()/1000)+""k"");
            sftp.put(new FileInputStream(file), file.getName(),new FileProgressMonitor(fis.available()), ChannelSftp.OVERWRITE);
        }
        catch (SftpException sftpException){
            sftpException.printStackTrace();
            return;
        }
        catch (Exception e) {
            e.printStackTrace();
            return;
        }
    }
"
1553,afb8e993-6165-4ae4-963f-447625c79444,"    public void download(String directory, String downloadFile,String saveFile, ChannelSftp sftp) {
        try {
            sftp.cd(directory);
            File file=new File(saveFile);
            sftp.get(downloadFile, new FileOutputStream(file));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
"
1554,b82102a2-40cb-4fc6-9874-a12b84b59371,"    public void delete(String directory, String deleteFile, ChannelSftp sftp) {
        try {
            sftp.cd(directory);
            sftp.rm(deleteFile);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
"
1555,f64cdb4c-5650-40d6-9bda-44342bfc7f2b,"    public Vector listFiles(String directory, ChannelSftp sftp) throws SftpException{
        return sftp.ls(directory);
    }
"
1556,a5b5081d-a485-495d-a3c2-f9dfb0b70c45,"                public void close() {
                    keepRunning = false;
                    try {
                        super.close();
                        pipedOS.close();
                    }
                    catch(IOException e) {
                        // 记录错误或其他处理
                        // 为简单计，此处我们直接结束
                        System.exit(1);
                    }
                }
"
1557,b2c50aed-1887-4dc0-9881-e1cf534ff8c3,"        public void close() {
            keepRunning = false;
            try    {
                super.close();
            }
            catch(IOException e) {
                // 记录错误或其他处理
                // 为简单计，此处我们直接结束
                System.exit(1);
            }
        }
"
1558,24369e62-fdbd-4f6c-a911-bb9be46b69b5,"    public LoopedStreams() throws IOException {
        pipedOS.connect(pipedIS);
        startByteArrayReaderThread();
    } // LoopedStreams()
"
1559,edf87dde-d304-4a7c-8c5f-af0d99f573f0,"    public InputStream getInputStream() {
        return pipedIS;
    } // getInputStream()
"
1560,610b90ea-ebd3-479d-baeb-c7957844569a,"    public OutputStream getOutputStream() {
        return byteArrayOS;
    } // getOutputStream()
"
1561,00c10d65-214e-43cb-84c8-d805f7d7ba3d,"    private void startByteArrayReaderThread() {
        new Thread(new Runnable() {
            public void run() {
                while(keepRunning) {
                    // 检查流里面的字节数
                    if(byteArrayOS.size() > 0) {
                        byte[] buffer = null;
                        synchronized(byteArrayOS) {
                            buffer = byteArrayOS.toByteArray();
                            byteArrayOS.reset(); // 清除缓冲区
                        }
                        try {
                            // 把提取到的数据发送给PipedOutputStream
                            pipedOS.write(buffer, 0, buffer.length);
                        }
                        catch(IOException e) {
                            // 记录错误或其他处理
                            // 为简单计，此处我们直接结束
                            System.exit(1);
                        }
                    }
                    else // 没有数据可用，线程进入睡眠状态
                        try {
                            // 每隔1秒查看ByteArrayOutputStream检查新数据
                            Thread.sleep(1000);
                        }
                        catch(InterruptedException e) {}
                }
            }
        }).start();
    } // startByteArrayReaderThread()
"
1562,e1cc87cb-4bab-41c9-90da-f17f03a9e969,"            public void run() {
                while(keepRunning) {
                    // 检查流里面的字节数
                    if(byteArrayOS.size() > 0) {
                        byte[] buffer = null;
                        synchronized(byteArrayOS) {
                            buffer = byteArrayOS.toByteArray();
                            byteArrayOS.reset(); // 清除缓冲区
                        }
                        try {
                            // 把提取到的数据发送给PipedOutputStream
                            pipedOS.write(buffer, 0, buffer.length);
                        }
                        catch(IOException e) {
                            // 记录错误或其他处理
                            // 为简单计，此处我们直接结束
                            System.exit(1);
                        }
                    }
                    else // 没有数据可用，线程进入睡眠状态
                        try {
                            // 每隔1秒查看ByteArrayOutputStream检查新数据
                            Thread.sleep(1000);
                        }
                        catch(InterruptedException e) {}
                }
            }
"
1563,5533e2a8-1002-40d2-8b8b-d6a911be0b7b,"    public JTabbedPane   SystemParmFrame() {
        server_ip_label.setBounds(10, 10, 70, 20);
        server_ip.setBounds(75, 10, 200, 20);

        server_port_label.setBounds(10, 35, 70, 20);
        server_port.setBounds(75, 35, 200, 20);

        username_label.setBounds(10, 60, 70, 20);
        username.setBounds(75, 60, 200, 20);

        password_label.setBounds(10, 85, 70, 20);
        password.setBounds(75, 85, 200, 20);



        SaveButton.setBounds(280, 120, 50, 20);


        con.add(server_ip_label);
        con.add(server_ip);
        con.add(server_port_label);
        con.add(server_port);
        con.add(username_label);
        con.add(username);
        con.add(password_label);
        con.add(password);
        con.add(SaveButton);
        tabPane.add(""自动化发布"", con);// 添加布局1
        return tabPane;
    }
"
1564,4f048ac9-5a7e-4ca8-8751-e58a99889048,"    public void actionPerformed(ActionEvent e) {

        if (e.getSource().equals(SaveButton)) {

        }
    }
"
1565,e0dbf5f1-e107-44c5-9166-1b07387eb101,"    public    MainFrame() {
        double lx = Toolkit.getDefaultToolkit().getScreenSize().getWidth();
        double ly = Toolkit.getDefaultToolkit().getScreenSize().getHeight();
        frame.setLocation(new Point((int) (lx / 2) - 150, (int) (ly / 2) - 150));// 设定窗口出现位置
        frame.setSize(480, 370);// 设定窗口大小
        frame.setResizable(false); //禁止最大化

        Image icon = Toolkit.getDefaultToolkit().getImage("""");  //去掉左上角java图标
        frame.setIconImage(icon);
        frame.setContentPane(tabPane);// 设置布局

        //添加按钮事件监听
        about.addActionListener(this);

        help.add(about) ;    //将菜单项目添加到菜单
        menuBar.add(help) ;      //将菜单增加到菜单工具栏
        frame.setJMenuBar(menuBar) ;  //为 窗体设置  菜单工具栏

        frame.setVisible(true);// 窗口可见
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// 使能关闭窗口，结束程序
        AutoDeploymentFrame autoDeployment = new AutoDeploymentFrame();
        tabPane.add(""自动化发布"", autoDeployment.AutoDeploymentFrame());// 添加布局1

        AppLogViewFrame logView = new AppLogViewFrame();
        tabPane.add(""日志截取"",logView.AppLogViewFrame());
        //SystemParmFrame sysPlane =  new SystemParmFrame();
        //tabPane.add(""系统配置"",sysPlane.SystemParmFrame());

    }
"
1566,81d47630-bda1-4c7c-b5d9-fa906638963e,"    public void actionPerformed (ActionEvent e) {
        if (e.getSource().equals(about)) {
            JOptionPane.showMessageDialog(frame, ""OpsPlat运维平台 V0.1 alpha"", ""关于"", 2);
        }

    }
"
1567,69272dd0-fd73-4849-8de7-e0b80c609d42,"    public static void main(String[] args){
        new  MainFrame();
    }
"
1568,aa2d908b-0d64-49cc-a829-39ed9e489477,"    public Container   AutoDeploymentFrame() {
            jfc.setCurrentDirectory(new File(""d://""));// 文件选择器的初始目录定为d盘

            //设定组件布局
            choseFile.setBounds(10, 10, 70, 20);
            filePath.setBounds(75, 10, 200, 20);
            choseButton.setBounds(280, 10, 50, 20);

            serverDir.setBounds(10, 35, 70, 20);
            serverDirPath.setBounds(75, 35, 200, 20);

            deployModelLabel.setBounds(10, 60, 70, 20);
            incDeploy.setBounds(75,60,60,20);
            fullDeploy.setBounds(190,60,60,20);
            deployGroup.add(incDeploy);
            deployGroup.add(fullDeploy);

            OKButton.setBounds(360, 75, 70, 40);

         //控制台输出框
        try {
            consoleTextArea = new ConsoleTextArea();
            scrollPane = new JScrollPane(consoleTextArea);
            //设置控制台输出信息自动滚动到底部 开始
            int height = 10;
            Point p = new Point();
            p.setLocation(0,this.consoleTextArea.getLineCount()*height);
            this.scrollPane.getViewport().setViewPosition(p);
            //设置控制台输出信息自动滚动到底部 结束
        }
        catch(IOException e) {
            System.err.println(
                    ""不能创建LoopedStreams："" + e);
            System.exit(1);
        }

            scrollPane.setBounds(0,120,470,150);
            //添加按钮事件监听
            choseButton.addActionListener(this); // 添加事件处理
            OKButton.addActionListener(this); // 添加事件处理

            //添加组件到容器
            con.add(choseFile);
            con.add(filePath);
            con.add(choseButton);

            con.add(serverDir);
            con.add(serverDirPath);

            con.add(deployModelLabel);
            con.add(incDeploy);
            con.add(fullDeploy);

            con.add(scrollPane);

            con.add(OKButton);

            return con;

        }
"
1569,8cebb3d3-39b7-407b-bd76-ce997695e364,"        public void actionPerformed (ActionEvent e) {
            // 绑定到选择文件，先择文件事件
            if (e.getSource().equals(choseButton)) {
                jfc.setFileSelectionMode(0);// 设定只能选择到文件
                int state = jfc.showOpenDialog(null);// 此句是打开文件选择器界面的触发语句
                if (state == 1) {
                    return; // 撤销则返回
                } else {
                    File f = jfc.getSelectedFile();// f为选择到的文件
                    filePath.setText(f.getAbsolutePath());
                }
            }
            if (e.getSource().equals(OKButton)) {
                String directory =  serverDirPath.getText();
                String uploadFile = filePath.getText();
                String deployModel = null;
                if(directory.equals("""")){
                    JOptionPane.showMessageDialog(con, ""请指定服务器目录"", ""提示"", 2);
                    return;
                }
                if(uploadFile.equals(""""))
                {
                    JOptionPane.showMessageDialog(con, ""请选择本地文件"", ""提示"", 2);
                    return;
                }
                if(incDeploy.isSelected()||fullDeploy.isSelected())
                {
                    if(incDeploy.isSelected()){
                         deployModel = ""incDeploy"";
                    }
                    else {
                        deployModel = ""fullDeploy"";
                    }
                }
                else{
                    JOptionPane.showMessageDialog(con, ""请选择发布模式（全量/增量）"", ""提示"", 2);
                    return;
                }
                System.out.println(""启动文件上传解压子线程……"");

                new Thread(new FileUploadThread(directory,uploadFile,deployModel)).start();

            }
        }
"
1570,e0d95441-b6d9-4ef5-ad0c-633b36a0c47d,"        public Container   AppLogViewFrame() {
            log_path_label.setBounds(10, 10, 70, 20);
            log_path.setBounds(75, 10, 200, 20);

            log_name_label.setBounds(10, 35, 70, 20);
            log_name.setBounds(75, 35, 200, 20);

            line_num_label.setBounds(10, 60, 70, 20);
            line_num.setBounds(75, 60, 200, 20);

            OKButton.setBounds(360, 75, 70, 40);


            //控制台输出框
            try {
                consoleTextArea = new ConsoleTextArea();
                scrollPane = new JScrollPane(consoleTextArea);
                //设置控制台输出信息自动滚动到底部 开始
                int height = 10;
                Point p = new Point();
                p.setLocation(0,this.consoleTextArea.getLineCount()*height);
                this.scrollPane.getViewport().setViewPosition(p);
                //设置控制台输出信息自动滚动到底部 结束
            }
            catch(IOException e) {
                System.err.println(
                        ""不能创建LoopedStreams："" + e);
                System.exit(1);
            }
            scrollPane.setBounds(0,120,470,150);

            con.add(log_path_label);
            con.add(log_path);
            con.add(log_name_label);
            con.add(log_name);
            con.add(line_num_label);
            con.add(line_num);

            con.add(OKButton);
            con.add(scrollPane);
            OKButton.addActionListener(this); // 添加事件处理

            return con;
        }
"
1571,be1bf2c8-16c4-4bb6-aa89-6c9c9146b7ab,"        public void actionPerformed(ActionEvent e) {

            if (e.getSource().equals(OKButton)) {
                    String directory =  log_path.getText();
                    String logFile = log_name.getText();
                    String lineNumStr = line_num.getText();
                    if(directory.equals("""")){
                        JOptionPane.showMessageDialog(con, ""请指定服务器目录"", ""提示"", 2);
                        return;
                    }
                    if(logFile.equals(""""))
                    {
                        JOptionPane.showMessageDialog(con, ""请指定日志文件"", ""提示"", 2);
                        return;
                    }
                    if(lineNumStr.equals("""") || !utils.isNumeric(lineNumStr))
                    {
                        JOptionPane.showMessageDialog(con, ""请输入截取行数(数字)"", ""提示"", 2);
                        return;
                    }
                    int lineNum   = Integer.parseInt(lineNumStr);
                    new Thread(new LogViewThread(directory,logFile,lineNum)).start();
            }
        }
"
1572,b8c2053a-1f73-44ac-ad7c-7f1c8ef6211f,"    public  LogViewThread(String directory,String logFile,int lineNum){
       this.directory = directory;
       this.logFile = logFile;
       this.lineNum = lineNum;
    }
"
1573,da2466e4-69e4-446e-9921-6faf5721db81,"    public void run() {
        try {
            Thread.sleep(5000);
            InterceptLog lc = new InterceptLog();
            Connection conn = lc.establishConnection(server_ip);
            new InterceptLog().InterceptLog( conn, user_name, password, logFile, directory, lineNum);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
"
1574,82bc01b4-d986-4b39-b455-5a04262c6e84,"    public Connection establishConnection(String server_ip){
        Connection conn = null;
        try {
            conn = new Connection(server_ip);
            conn.connect(); // 连接

        }
        catch (IOException e) {
            e.printStackTrace();

        }
        finally {

        }
        return conn;
    }
"
1575,c3777790-7d25-403d-ab24-5697ea9fa00d,"    public  int InterceptLog(Connection conn,String user_name,String password,String filename,String directory,int lineNum) {
        Session session = null;
        int ret = -1;

        try {
            if (conn.authenticateWithPassword(user_name, password)) {  // 认证
                session = conn.openSession();               // 打开一个会话
            }
            System.out.println(""username : "" + user_name);
            System.out.println(""password:  "" + password);
            System.out.println(""开始截取日志……"");

            session.execCommand(""cd "" + directory + "";"" + ""tail -""+lineNum +"" "" + filename);       //切换目录，截取文件



            InputStream stdErr = new StreamGobbler(session.getStderr());
            InputStream stdOut = new StreamGobbler(session.getStdout());
            String line = null;
            BufferedReader brError = new BufferedReader(new InputStreamReader(stdErr, ""utf-8""));
            BufferedReader brStdout = new BufferedReader(new InputStreamReader(stdOut, ""utf-8""));

            while ((line = brError.readLine()) != null) {
                System.out.println(line);
            }
            while ((line = brStdout.readLine()) != null) {
                System.out.println(line);
            }
            ret = session.getExitStatus();
            session.close();
            conn.close();
            if (ret == 0) {
                System.out.println(""截取日志成功！"");
            } else {
                System.out.println(""截取日志失败！"");
            }
            return ret;

        } catch (IOException e) {
            e.printStackTrace();
        }
        return ret;
    }
"
1576,9a066b9b-3d83-48af-bfc6-67a063d6e6d9,"	public Element() {
		this.poids = 1;
	}
"
1577,ca57df00-4f3e-4569-9e6a-765be18a5093,"	public void setPere(Noeud pere) {
		this.pere = pere;
	}
"
1578,a9286c6d-797d-4279-9a47-92bf593edda2,"	public void setSuiv(Element suiv) {
		this.suiv = suiv;
	}
"
1579,7b5fe815-9abd-4647-971b-7d26eea156a5,"	public Noeud getPere() {
		return pere;
	}
"
1580,fb072b97-d7f5-4d0d-928b-f950d3d4b6d9,"	public int getPoids() {
		return poids;
	}
"
1581,48caaedb-9c11-4d94-af86-81a6cf06b660,"	public void setPoids(int poids) {
		this.poids = poids;
	}
"
1582,77c30d3a-3bf6-4e88-9be8-acab6896abe8,"	public Element getSuiv() {
		return suiv;
	}
"
1583,ff2fc5c9-67c3-45a2-a90f-072c823044b3,"	public void incrPoids() {
		this.poids++;
	}
"
1584,b4da1b84-fcbb-40a0-b4c8-234b0ec9e464,"	public boolean estFilsGauche() {
		return this == this.getPere().getFilsGauche();
	}
"
1585,9463871f-ab08-4bb8-a516-d179eb064340,"	public static void compression(String texte, OutputStream out)
			throws IOException {
		// initialise l'arbre avec la feuille '#'
		ArbreHuffman arbre = new ArbreHuffman();
		GestionnaireBit gestion = new GestionnaireBit();

		for (char symbole : texte.toCharArray()) {

			if (arbre.estPresent(symbole) && symbole != '#') {
				gestion.transmettreChemin(arbre.getCode(symbole)); //log n
 			} else {
				gestion.transmettreChemin(arbre.getCode('#')); // log n
				gestion.transmettreSymbole(symbole);
				
			}

			arbre.modification(symbole);
		}
		gestion.finirTransmission(arbre.getRacine().getPoids());

		gestion.ecrireDansFichier(out);
		System.out.println(""[DEBUG] Arbre final compression : \n"" + arbre);
		System.out.println(""[DEBUG] Nombre de caracteres transmis : ""
				+ arbre.getRacine().getPoids());
	}
"
1586,c2e04fbc-811c-4313-8eff-bec8520bbffe,"	public static void compression(File file, OutputStream out)
			throws IOException {
		final int length = (int) file.length();
		final char[] buffer = new char[length];
		final FileReader fr = new FileReader(file);
		int offset = 0;
		while (offset < length) {
			int read = fr.read(buffer, offset, length - offset);
			offset += read;
		}

		compression(new String(buffer), out);
	}
"
1587,c21d47c9-3098-4545-8c7f-6990aaf5f3dc,"	public static String decompression(InputStream in) throws IOException {
		StringBuilder str = new StringBuilder();
		ArbreHuffman arbre = new ArbreHuffman();

		// lecture des 4 premiers octets pour connaitre la taille
		int longueurDuTexte = 0;
		for (int i = 0; i < 4; i++) {
			longueurDuTexte += (in.read() << (24 - i * 8));
		}

		// Si il n'y a rien a lire, on s'arrete la
		if (longueurDuTexte == 0)
			return """";

		// Premier octet = lettre
		byte b = (byte) in.read();
		str.append((char) b);
		arbre.modification((char) b);

		LinkedList<Boolean> buffer = new LinkedList<Boolean>();
		int i = 1;
		while (i < longueurDuTexte) {

			// On lit les bits tant que le chemin n'est pas complet
			while (!arbre.estCheminComplet(buffer)) {
				buffer.addAll(GestionnaireBit.byteToBooleanList((byte) in
						.read()));
			}
			// Modifie la liste des bits lus - enlève les bits du buffer
			char symbole = arbre.recupererFeuille(buffer);
			if (symbole == '#') {
				// Si le prochain caractere inconnu n'est pas en memoire, on lit
				// le suivant
				if (buffer.size() < 8) {
					buffer.addAll(GestionnaireBit.byteToBooleanList((byte) in
							.read()));
				}
				symbole = GestionnaireBit.booleanListToChar(buffer);
			}

			str.append(symbole);
			arbre.modification(symbole);
			i++;
		}

		System.out.println(""[DEBUG] Arbre final decompression : \n"" + arbre);
		System.out.println(""[DEBUG] Nombre de caracteres lu : "" + i);

		return str.toString();
	}
"
1588,6cb9d363-77a1-4281-bc04-73feb7b45653,"	public static void decompression(InputStream in, File out)
			throws IOException {
		FileWriter fw = new FileWriter(out);
		fw.write(decompression(in));
		fw.flush();
	}
"
1589,b7b50a7f-7cd4-48b9-ba9f-4674233a970c,"	public static void main(String[] args) throws IOException {

		File f = new File(""test.vbgz"");

		Huffman.compression(""abrac###adabra"", new FileOutputStream(f));

		System.out.println(Huffman.decompression(new FileInputStream(new File(""test.vbgz""))));

	}
"
1590,323d3193-0be0-4f6e-b5d3-19abd3e2df4a,"	public GestionnaireBit() {
		liste = new LinkedList<Byte>();
		current = 0;
		indexCurrent = 0;
	}
"
1591,0bddc960-063c-499f-9494-6a103fb3282c,"	public void transmettreSymbole(char symbole) {
		transmettreChemin(byteToBooleanList((byte) symbole));
	}
"
1592,efb9f64b-897e-4afb-81e2-bcb6cba2f8dd,"	public void transmettreChemin(Collection<Boolean> chemin) {

		for (Boolean b : chemin) {
			if (b) {
				Byte comp = (byte) (1 << (7 - indexCurrent));
				current = (byte) (current.byteValue() | (byte) comp);
			}

			if (++indexCurrent == 8) {
				liste.add(current);
				indexCurrent = 0;
				current = 0;
			}
		}

	}
"
1593,e4a8af67-ff07-4be2-bf2c-7e354a1b1d1a,"	public void finirTransmission(int nbTransmissions) {
		if (indexCurrent != 0) {
			liste.add(current);
		}
		for (int i = 0; i < 4; i++) {
			byte b = (byte) (nbTransmissions << (3 - i) * 8 >> 24);
			liste.push(b);
		}
	}
"
1594,d4f11a3c-b2ba-4d11-b2bd-a2a6bcd225e9,"	public void ecrireDansFichier(OutputStream out) throws IOException {
		for (Byte b : liste) {
			out.write(new byte[] { b });
		}
		out.close();
	}
"
1595,599d5506-d154-4fff-ac45-69cff71ca02f,"	public static Collection<Boolean> byteToBooleanList(byte b) {
		Collection<Boolean> tmp = new ArrayList<Boolean>();

		// on parcourt le caract�re pour construire la liste
		char comp = 1 << 7;
		for (int i = 0; i < 8; i++) {
			tmp.add((b & comp) != 0);
			comp >>= 1;
		}

		return tmp;
	}
"
1596,eb5d60d0-42ff-4d9b-ae18-cdb0fb9ccb7a,"	public static char booleanListToChar(LinkedList<Boolean> bitList) {
		char c = 0;
		for (int i = 0; i < 8; i++) {
			boolean b = bitList.pop();
			if (b)
				c |= (1 << (7 - i));
		}

		return c;
	}
"
1597,f67e1378-164e-4382-a436-88c116efc0b6,"	public static void showBits(Collection<Boolean> bitList) {
		for (boolean b : bitList) {
			System.out.print(b ? ""1"" : ""0"");
		}

	}
"
1598,c8eeef20-837e-431f-8e1c-5f06f7e5ecab,"	public Feuille(char symbole) {
		super();
		this.symbole = symbole;
	}
"
1599,c7cc611b-e6e7-4056-a9db-abdc4a9c7e77,"	public char getSymbole() {
		return symbole;
	}
"
1600,9c10e72b-d09d-47b9-b7df-0488cfc799d3,"	public static void main(String[] args) throws IOException {

		if (args.length == 3) {
			String option = args[0];
			File src = new File(args[1]), dest = new File(args[2]);
			if (option.equals(""d"")) {
				System.out.println(""[Décompression...]"");
				Huffman.decompression(new FileInputStream(src), dest);
				return;
			} else if (option.equals(""c"")) {
				System.out.println(""[Compression...]"");
				Huffman.compression(src, new FileOutputStream(dest));
				return;
			}

		}
		System.out.println(""Usage : [c|d] fichier.src fichier.dest"");
	}
"
1601,d28265d4-c0d3-4970-923b-901d410f49d1,"	public Noeud(Element filsGauche, Element filsDroit) {
		super();
		this.filsGauche = filsGauche;
		this.filsDroit = filsDroit;
	}
"
1602,c83130da-1813-4351-8030-6cbf7bf7aec8,"	public void setFilsGauche(Element filsGauche) {
		this.filsGauche = filsGauche;
	}
"
1603,7c74388a-3ad3-44f1-9018-52362b0d6e12,"	public void setFilsDroit(Element filsDroit) {
		this.filsDroit = filsDroit;
	}
"
1604,75577ce2-55d6-41fa-8a5b-5ec3f422597b,"	public Element getFilsDroit() {
		return filsDroit;
	}
"
1605,3418587f-3f45-48f0-93a6-13eeab0027c3,"	public Element getFilsGauche() {
		return filsGauche;
	}
"
1606,5a7cdd17-9a66-4d2e-8188-6e632d3afc81,"	public ArbreHuffman() {
		feuilles = new Feuille[taille];
		Feuille diese = new Feuille('#');
		racine = diese;
		feuilles['#'] = diese;
		racine.setPoids(0);
	}
"
1607,cf2232b1-8f3c-451c-8020-719cfb28357b,"	private void traitement(Element Q) {
		if (Q == null) {
			return;
		} else if (Q == feuilles ['#']){
			racine.incrPoids();
		}else if (estIncrementable(Q)) {
			incrementeChemin(Q);
		} else {
			Element m = premierIndice(Q);
			Element b = finBloc(m);
			incrementeChemin(Q, m);

			changerSousArbres(m, b);
			traitement(m.getPere());

		}
	}
"
1608,61bfa97f-261e-49a4-989d-85c0d9e679ef,"	public void modification(char symbole) {
		Element Q = feuilles[symbole];
		Element diese = feuilles['#'];

		// si symbole n'est pas dans l'arbre
		if (Q == null) {
			Feuille f = new Feuille(symbole);

			Noeud nouveauNoeud = new Noeud(diese, f);

			// update de f
			f.setPere(nouveauNoeud);
			feuilles[symbole] = f;

			if (this.racine == diese) {
				diese.setPere(nouveauNoeud);
				this.racine = nouveauNoeud;
			} else {
				Noeud tmp = diese.getPere();
				tmp.setFilsGauche(nouveauNoeud);
				nouveauNoeud.setPere(tmp);
				diese.setPere(nouveauNoeud);
				nouveauNoeud.setSuiv(diese.getSuiv());
				Q = tmp;
			}

			diese.setSuiv(f);
			f.setSuiv(nouveauNoeud);

		} else {
			if (Q.getPere() == diese.getPere() && Q.getPere() == finBloc(Q)) {
				Q = Q.getPere();
			}
		}

		traitement(Q);
	}
"
1609,1198a127-0246-4649-a323-8d8bf25427bc,"	private Element finBloc(Element m) {
		for (; m != racine; m = m.getSuiv())
			if (m.getPoids() < m.getSuiv().getPoids())
				return m;
		return m;
	}
"
1610,9e6978b1-a71b-42af-afa0-52c187c3a38d,"	private boolean estIncrementable(Element e) {
		for (; e != racine; e = e.getPere()) {
			if (e.getPoids() >= e.getSuiv().getPoids())
				return false;
		}
		return true;
	}
"
1611,bf80a200-ee92-460d-b908-ef4d94076395,"	private void incrementeChemin(Element e) {
		this.incrementeChemin(e, racine);
	}
"
1612,3c0f5a40-813b-4320-b45b-9e011cc94172,"	private void incrementeChemin(Element e, Element m) {
		for (;; e = e.getPere()) {
			e.incrPoids();
			if (e == m)
				return;
		}
	}
"
1613,94bf5ec6-5b8e-4ffe-a11c-803cc51c9ed8,"	private Element premierIndice(Element e) {
		for (; e != racine; e = e.getPere())
			if (e.getPoids() == e.getSuiv().getPoids())
				return e;
		return e;
	}
"
1614,ce137a8b-e343-4e19-92be-38af00344882,"	public static String parcoursInfixe(Element a) {
		if (a instanceof Feuille) {
			Feuille f = (Feuille) a;
			return ""("" + f.getSymbole() + "","" + f.getPoids() + "")"";
		} else {
			Noeud n = (Noeud) a;
			return parcoursInfixe(n.getFilsGauche()) + ""["" + n.getPoids() + ""]""
					+ parcoursInfixe(n.getFilsDroit());
		}
	}
"
1615,fbef5189-cf70-4916-a755-7e224e69b002,"	private void changerSousArbres(Element premIndice, Element finBloc) {
		// Swap des deux arbres

		// On met à jour les fils des pères
		if (premIndice.estFilsGauche() && finBloc.estFilsGauche()) {
			premIndice.getPere().setFilsGauche(finBloc);
			finBloc.getPere().setFilsGauche(premIndice);
		} else if (premIndice.estFilsGauche() && !finBloc.estFilsGauche()) {
			premIndice.getPere().setFilsGauche(finBloc);
			finBloc.getPere().setFilsDroit(premIndice);
		} else if (!premIndice.estFilsGauche() && finBloc.estFilsGauche()) {
			premIndice.getPere().setFilsDroit(finBloc);
			finBloc.getPere().setFilsGauche(premIndice);
		} else {
			premIndice.getPere().setFilsDroit(finBloc);
			finBloc.getPere().setFilsDroit(premIndice);
		}

		// On inverse les pères
		Noeud pereFinBloc = finBloc.getPere();
		finBloc.setPere(premIndice.getPere());
		premIndice.setPere(pereFinBloc);

		// On met à jour les suivants
		updateNoeuds();
	}
"
1616,bfad6d77-e962-4331-bbab-25f9502c04b1,"	private void updateNoeuds() {
		List<Couple<Integer, Element>> liste = new ArrayList<Couple<Integer, Element>>();
		parcoursLargeur(racine, 0, liste);
		Map<Integer, List<Element>> hmap = new HashMap<Integer, List<Element>>();
		int max = 0;
		for (Couple<Integer, Element> c : liste) {
			if (hmap.get(c.niveau) == null) {
				hmap.put(c.niveau, new ArrayList<Element>());
			}
			hmap.get(c.niveau).add(c.noeud);
			if (c.niveau > max) {
				max = c.niveau;
			}
		}

		Element n = null;
		for (int i = max; i >= 0; i--) {
			for (Element e : hmap.get(i)) {
				if (n != null)
					n.setSuiv(e);
				n = e;
			}
		}
	}
"
1617,a5388e42-b2e0-4a0e-a187-683206322702,"		public Couple(T niveau, V noeud) {
			this.niveau = niveau;
			this.noeud = noeud;
		}
"
1618,193179ab-4fa7-4425-9d9f-aecf71e3fb53,"	private void parcoursLargeur(Element a, int niveau,
			List<Couple<Integer, Element>> liste) {
		if (a instanceof Feuille) {
			liste.add(new Couple<Integer, Element>(niveau, a));
		} else {
			Noeud n = (Noeud) a;
			liste.add(new Couple<Integer, Element>(niveau, a));
			parcoursLargeur(n.getFilsGauche(), niveau + 1, liste);
			parcoursLargeur(n.getFilsDroit(), niveau + 1, liste);
		}

	}
"
1619,b5ec8ee3-a4b6-4eb4-8ed9-51f0f28ca63c,"	public String toString() {
		StringBuilder str = new StringBuilder();

		List<Couple<Integer, Element>> liste = new ArrayList<Couple<Integer, Element>>();
		parcoursLargeur(racine, 0, liste);
		Map<Integer, List<Element>> hmap = new HashMap<Integer, List<Element>>();
		int max = 0;
		for (Couple<Integer, Element> c : liste) {
			if (hmap.get(c.niveau) == null) {
				hmap.put(c.niveau, new ArrayList<Element>());
			}
			hmap.get(c.niveau).add(c.noeud);
			if (c.niveau > max) {
				max = c.niveau;
			}
		}

		for (int i = 0; i <= max; i++) {
			for (Element e : hmap.get(i)) {
				if (e instanceof Feuille) {
					Feuille f = (Feuille) e;
					str.append(""("" + f.getSymbole() + "","" + f.getPoids()
							+ "")\t"");
				} else {
					Noeud n = (Noeud) e;
					str.append(""["" + n.getPoids() + ""]\t"");
				}
			}
			str.append(""\n"");
		}

		return str.toString();
	}
"
1620,f15e8e0c-7f7f-4f41-8f38-bf35cfc1aba3,"	public boolean estPresent(char symbole) {
		return feuilles[symbole] != null;
	}
"
1621,e751adba-1f9c-4bf5-9588-9c5a16a1bdf6,"	public boolean estDiese() {
		return this.racine == feuilles['#'];
	}
"
1622,152249b5-8714-436b-8037-1b37cb1db8c2,"	public Collection<Boolean> getCode(char symbole) {
		List<Boolean> chemin = new LinkedList<Boolean>();
		for (Element f = feuilles[symbole]; f != racine; f = f.getPere())
			chemin.add(!f.estFilsGauche());

		Collections.reverse(chemin);
		return chemin;
	}
"
1623,101f76c0-dc4d-41b3-8a51-7f59ac104012,"	public boolean estCheminComplet(Collection<Boolean> chemin) {
		Element e = racine;
		for (Boolean b : chemin) {
			if (e instanceof Feuille)
				return true;
			else if (b)
				e = ((Noeud) e).getFilsDroit();
			else
				e = ((Noeud) e).getFilsGauche();
		}
		return false;
	}
"
1624,84a9fef8-ac31-49b8-9c35-87dff7b94b15,"	public char recupererFeuille(LinkedList<Boolean> chemin) {
		Element e = racine;
		while (true) {
			if (e instanceof Feuille)
				return ((Feuille) e).getSymbole();
			else if (chemin.pop())
				e = ((Noeud) e).getFilsDroit();
			else
				e = ((Noeud) e).getFilsGauche();
		}
	}
"
1625,60907ee0-35b4-4143-9d67-693e1b9cfe86,"	public Element getRacine() {
		return racine;
	}
"
1626,2ae6bf7d-5edd-4c9f-815d-e99489917fd2,"	public List<Parameter> findAll();
"
1627,f5b7173c-a89c-4609-8dfb-ac875b02e87b,"	public List<Parameter> findAll(Sort arg0);
"
1628,1d5fc4e2-2b2b-4a15-94a2-7ebf5f75edef,"	public List<Parameter> findAll(Iterable<String> arg0);
"
1629,1338e57f-62be-43bb-9288-17945972c1b4,"	public Parameter getOne(String arg0);
"
1630,4aceae43-e59f-442b-b86d-f9cc573c0832,"	public Page<Parameter> findAll(Pageable arg0);
"
1631,0448ba81-da82-42c9-820a-909a887dcbbb,"	public long count();
"
1632,cee672db-3a00-4605-9888-36fdb59988b4,"	public boolean exists(String arg0);
"
1633,8052482f-f650-40cc-8190-c877babc2dfc,"	public Parameter findOne(String arg0);
"
1634,2f11d2bc-fcb0-4b9a-af46-482e6f24eead,"	public <S extends Parameter> S save(S arg0);
"
1635,99742fbc-9016-464c-b5d3-6c5c53a3219a,"	public void deleteAllInBatch() {
		// TODO Auto-generated method stub
		
	}
"
1636,d8645bcd-9881-4b10-b3b7-4073c9921a3d,"	public void deleteInBatch(Iterable<Parameter> arg0) {
		// TODO Auto-generated method stub
		
	}
"
1637,ad1ac0f9-f789-4e94-85ac-b47a94944110,"	public List<Parameter> findAll() {
		// TODO Auto-generated method stub
		return null;
	}
"
1638,638590d0-b97d-44c3-8fde-4bc2d6299a91,"	public List<Parameter> findAll(Sort arg0) {
		// TODO Auto-generated method stub
		return null;
	}
"
1639,9c2479b8-3eb4-4e23-80bd-7b8ff36d30e0,"	public List<Parameter> findAll(Iterable<String> arg0) {
		// TODO Auto-generated method stub
		return null;
	}
"
1640,e332788c-9a29-4983-83df-64e30f1aec0d,"	public void flush() {
		// TODO Auto-generated method stub
		
	}
"
1641,c667ce4f-7488-4ebe-9107-46040b4ef3c8,"	public Parameter getOne(String arg0) {
		// TODO Auto-generated method stub
		return null;
	}
"
1642,092a7c86-419d-4fcd-aab9-e686c5580c2b,"	public <S extends Parameter> List<S> save(Iterable<S> arg0) {
		// TODO Auto-generated method stub
		return null;
	}
"
1643,1168b85a-8c42-4cd9-9aea-a7f1e9610e64,"	public <S extends Parameter> S saveAndFlush(S arg0) {
		// TODO Auto-generated method stub
		return null;
	}
"
1644,dafa5867-230b-45f1-aa56-3a787aca1a7d,"	public Page<Parameter> findAll(Pageable arg0) {
		// TODO Auto-generated method stub
		return null;
	}
"
1645,7034e920-f380-4a10-bfb7-57c31f62367a,"	public long count() {
		// TODO Auto-generated method stub
		return 0;
	}
"
1646,aee311d8-57e4-4bdf-9546-ee34875c11ab,"	public void delete(String arg0) {
		// TODO Auto-generated method stub
		
	}
"
1647,07c2aa95-0fcb-4db1-87a7-db4ae986895b,"	public void delete(Parameter arg0) {
		// TODO Auto-generated method stub
		
	}
"
1648,6a8795ac-bd8d-46e5-80b7-87b9830c751b,"	public void delete(Iterable<? extends Parameter> arg0) {
		// TODO Auto-generated method stub
		
	}
"
1649,c19ae8fc-4ec7-403f-bc35-b06b539f270b,"	public void deleteAll() {
		// TODO Auto-generated method stub
		
	}
"
1650,cb292475-3dcb-453e-be67-ec6d7b1e3088,"	public boolean exists(String arg0) {
		// TODO Auto-generated method stub
		return false;
	}
"
1651,c759c007-475f-4526-a7ba-91a009d01cee,"	public Parameter findOne(String arg0) {
		// TODO Auto-generated method stub
		return null;
	}
"
1652,eacc2583-f7ef-4e2f-bfee-59d6efac6294,"	public <S extends Parameter> S save(S arg0) {
		// TODO Auto-generated method stub
		return null;
	}
"
1653,8cff29b6-79d7-4971-b5ae-8b7dc9705943,"	public String getCode() {
		return code;
	}
"
1654,babcf870-c7be-4399-95dd-e12151669ae0,"	public void setCode(String code) {
		this.code = code;
	}
"
1655,ec8ae241-f894-4b0f-9e13-8b25c7b93b01,"	public String getType() {
		return type;
	}
"
1656,53414212-66c2-47c3-8153-b5bee2d82650,"	public void setType(String type) {
		this.type = type;
	}
"
1657,08f6f485-227d-4867-818d-0b32eee610ef,"	public String getValue() {
		return value;
	}
"
1658,564ed6ec-fec8-484e-bd18-734da08ac920,"	public void setValue(String value) {
		this.value = value;
	}
"
1659,9ef411df-6b89-4d68-860e-b8559dc2cc94,"	public String getScope() {
		return scope;
	}
"
1660,b4d75ce3-d8c2-40ba-b20e-a48344b27b78,"	public void setScope(String scope) {
		this.scope = scope;
	}
"
1661,501ce79d-0c42-4f3e-9194-a94bf1a287d8,"	public String registerEvent(Event event);
"
1662,1ab84b1f-81ed-47db-8071-709ecde43815,"	public boolean registerNewEventType(EventType eventType);
"
1663,63d7976d-246c-40ce-93c7-78a9131869c6,"	public String getClientKey() {
		return clientKey;
	}
"
1664,0cdf7344-29b4-4dc5-b5d0-2f39fd271bdd,"	public void setClientKey(String clientKey) {
		this.clientKey = clientKey;
	}
"
1665,7f085f7a-6ca2-4c9d-8c24-99fb01c7913e,"	public String getEventType() {
		return eventType;
	}
"
1666,633074c7-fb57-494b-9299-95e0bb1621b4,"	public void setEventType(String eventType) {
		this.eventType = eventType;
	}
"
1667,ad1400a2-d652-4c90-82fa-f29837b69bf8,"	public Date getTimeStamp() {
		return timeStamp;
	}
"
1668,1c568ffe-e4a4-467e-8b03-e11bce16f465,"	public void setTimeStamp(Date timeStamp) {
		this.timeStamp = timeStamp;
	}
"
1669,70eb7df6-5406-4a88-9a2c-2c7ba94db809,"	public String getMiscInfo() {
		return miscInfo;
	}
"
1670,774cf7f7-e701-4e3a-b062-293914dca382,"	public void setMiscInfo(String miscInfo) {
		this.miscInfo = miscInfo;
	}
"
1671,de91b449-ed23-4d76-8d91-bf21654da862,"	public Priority getPriority() {
		return priority;
	}
"
1672,3e7af736-164f-42e3-b309-b30011766588,"	public void setPriority(Priority priority) {
		this.priority = priority;
	}
"
1673,2ba4cc43-10b5-4632-917b-9354fb3d0498,"	public String getEventType() {
		return eventType;
	}
"
1674,e87946af-cfd2-44b2-9199-3d05d98280d0,"	public void setEventType(String eventType) {
		this.eventType = eventType;
	}
"
1675,b278e428-d554-4484-9c29-8e2029f70cb0,"	public String getEventTypeDescription() {
		return eventTypeDescription;
	}
"
1676,589fb875-4cb0-459c-94c2-153690c02563,"	public void setEventTypeDescription(String eventTypeDescrition) {
		this.eventTypeDescription = eventTypeDescrition;
	}
"
1677,7342697f-9209-493a-8d12-82f65692436c,"	public static void main(String[] args) throws NamingException {
		
		System.out.println(new EvenRegistryClient().registerEvent());
		
	}
"
1678,2a953ba9-6034-4e14-8e57-d04293b6d14c,"	public String registerEvent() throws NamingException{
		
		Context context = null;
		
		final Properties ejbProperties = new Properties();
		ejbProperties.put(Context.URL_PKG_PREFIXES, ""org.jboss.ejb.client.naming"");
		
		context = new InitialContext(ejbProperties);
		
		String lookupName = ""ejb:event-tador-ear/event-tador-ejb-impl/EventRegistryEJB!org.event.tador.ejb.api.EventRegistry"";
		
		eventRegistry = (EventRegistry)context.lookup(lookupName);
		
		return eventRegistry.registerEvent(new Event());
		
		
	}
"
1679,7035d0ea-77e0-497d-b9be-edb7229c1bde,"	public String registerEvent(Event event) {
		// TODO Auto-generated method stub
		return ""eventRegistered"";
	}
"
1680,fc17897d-33a3-4c2c-8ccf-13e2efe3dafe,"	public boolean registerNewEventType(EventType eventType) {
		// TODO Auto-generated method stub
		return false;
	}
"
1681,96da4f6f-5246-464a-a93f-85c5d89da98f,"    public String getName() {
        return name;
    }
"
1682,aa642701-4f95-4eb6-bafa-3017445535bc,"    public void setName(String name) {
        this.name = name;
    }
"
1683,b113faf1-f0e5-4621-83a8-e4f5052c783f,"    public String getDisplayName() {
        return displayName;
    }
"
1684,875e4b1a-cd3d-4d0e-a389-f99b4f149c2e,"    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }
"
1685,ce430fbf-9bbf-4898-b501-201c0ddea2df,"    public String getLastName() {
        return lastName;
    }
"
1686,61d20f14-5528-4305-a8a4-7326cdf81f53,"    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
"
1687,56a10e12-04b9-4a7c-aeb2-68e50d1c4a6b,"    public String getFirstName() {
        return firstName;
    }
"
1688,a5e636f1-bbcd-45d8-a76f-0f8ebba45fe0,"    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
"
1689,547ba3a6-e463-4c45-b4d4-53fa73f2c491,"    public String getMail() {
        return mail;
    }
"
1690,de19c2df-fc3a-47c7-9022-f3c0bc0bc333,"    public void setMail(String mail) {
        this.mail = mail;
    }
"
1691,acd71610-72e7-483a-aad2-7199709e43b8,"    public String getUserID() {
        return userID;
    }
"
1692,74f8ac07-237e-4c86-89ab-50d471022935,"    public void setUserID(String userID) {
        this.userID = userID;
    }
"
1693,4424ccf5-ad82-4650-8495-15cd1dd59f43,"    @Override
    public String toString() {
        return ""Person{"" +
                ""name='"" + name + '\'' +
                "", displayName='"" + displayName + '\'' +
                "", lastName='"" + lastName + '\'' +
                "", firstName='"" + firstName + '\'' +
                "", mail='"" + mail + '\'' +
                "", userID='"" + userID + '\'' +
                '}';
    }
"
1694,9588e337-89ae-4410-a090-9fbeda19b91b,"    public void setLdapTemplate(LdapTemplate ldapTemplate) {
        this.ldapTemplate = ldapTemplate;
    }
"
1695,7539c3e2-bf1b-42d2-b9c6-248d68fe3b25,"    @Override
    public List<Person> getAllPersons() {
        List<Person> contacts = new ArrayList<Person>();
        try {
            List search = ldapTemplate.search("""", ""(objectClass=person)"", new PersonAttributesMapper());
            contacts.addAll(search);
        } catch (Exception e) {
            System.out.println(""Exception while listing all users"" + e);
        }

        return contacts;
    }
"
1696,1310db3e-0a5c-4acc-b24c-95bb4ba22f8b,"    @Override
    public List findUserByCommonName(String commonName) {
            AndFilter andFilter = new AndFilter();
            andFilter.and(new EqualsFilter(""objectclass"",""person""));
            andFilter.and(new EqualsFilter(""cn"", commonName));
            return ldapTemplate.search("""", andFilter.encode(), new PersonAttributesMapper());
    }
"
1697,66e9fa99-7754-43d5-958d-7cfd9c71edc9,"    public List<Person> getAllPersons();
"
1698,6daeeed0-ecff-4928-af15-a80bcaa41646,"    public List findUserByCommonName(String commonName);
"
1699,d37f9294-9dec-43a4-b583-a2a7423a6431,"    @RequestMapping(value = ""/ldap"", method = RequestMethod.GET)
    public ModelAndView getLdapData() {

        List<Person> getAllPersons = personDAO.getAllPersons();
        ModelAndView model = new ModelAndView(""ldapAll"");
        model.addObject(""listsLDAP"", getAllPersons);

        return model;

    }
"
1700,dc35bb5b-84ea-4dec-aaec-c71044c3cd71,"    @Override
    public Object mapFromAttributes(Attributes attributes) throws NamingException {
        Person person = new Person();

        Attribute name = attributes.get(""name"");
        if (name != null){
            person.setName((String) name.get());
        }

        Attribute displayname = attributes.get(""displayname"");
        if (displayname != null){
            person.setDisplayName((String) displayname.get());
        }

        Attribute lastname = attributes.get(""sn"");
        if (lastname != null){
            person.setLastName((String) lastname.get());
        }

        Attribute firstname = attributes.get(""givenname"");
        if (firstname != null){
            person.setFirstName((String) firstname.get());
        }

        Attribute mail = attributes.get(""mail"");
        if (mail != null){
            person.setMail((String) mail.get());
        }

        Attribute userid = attributes.get(""uid"");
        if (userid != null){
            person.setUserID((String) userid.get());
        }

        System.out.println(person.toString());

        return person;
    }
"
1701,7aea1b50-466e-4652-8a8d-4181bc3b6721,"	public static void main(String[] args) {
		System.out.println(""Welcome to Luna"");

		System.out.println(""Local Master Go"");

		System.out.println(""Master Remote Edit Here"");

		int k = 0;

	}
"
1702,a62e0974-944c-44da-8b08-81774ba869b9,"	  public void sharedMethod() {
			System.out.println(""GitHub shared Method"");
			System.out.println(""Luna shared Method"");
		}
"
1703,b4d04e24-b9a2-42ec-a37c-79c5b8c079ae,"		public void testM() {
			System.out.println(""GitHub test Method"");
			System.out.println(""Luna test Method"");
		}
"
1704,dbe919da-66a8-40b8-9729-f0f1513003e1,"	public void process() {
		//Remote comment
		//Local description
	}
"
1705,9ad1a9bc-ea71-41ae-a570-3e5ab264ad5e,"	public void excecute() {
	 //Remote Impl 1
     //Local impl of execute
	}
"
1706,72dde1f7-23c8-4924-af86-c5a944aa5a08,"	public abstract void makeAction();
"
1707,3c27b32f-fc8b-4675-9aab-d3e1fcb6a635,"	public static void main(String[] args) {
//		System.out.println(getFibonacci(10));
		performanceTest(3, 24);
	}
"
1708,b5c60948-a1f6-4aef-b9bb-cf1f744a4a63,"	static long getFibonacci(int n){
		
		long f_p = 1;
		long f_pp = 0;
		
		long F_n = 0;
		
		if(n == 0 || n == 1)
			return n;
		else{
			
			for (int i = 2; i <= n; i++) {
				
				F_n = f_p + f_pp;
				
				f_pp = f_p;
				f_p = F_n;		
			}
			
			return F_n;
		}
	}
"
1709,cdfdd538-5701-481f-bc91-30503c5c4594,"	static void performanceTest(int a, int n){
		getNthPower(a, n);
		System.out.println(""\n----------------------------\n"");
		getNthPowerWithArrays(a, n);
	}
"
1710,d0a82721-5be7-4e2e-8af8-31cc04521bec,"	static void getNthPower(int a, int n){
		
		List<Boolean> hList = new ArrayList<Boolean>();
		long startUPNano = System.nanoTime();
		
		while (n > 1){		
			    boolean remainder = (n % 2 == 1);
				hList.add(remainder);
				n = n/2;
		}
		
		
		long result = a;
		
		for(int i = hList.size(); i > 0; i--){
			
			boolean remainder = hList.get(i-1);
			
			result =  remainder ? result * result * a : result * result; 
		}
		
		System.out.println(""Result with ArrayList: ""+ result);
		System.out.println(""Elasped time in Nanos: "" +(System.nanoTime() - startUPNano));
	}
"
1711,09f21b9e-ae9c-4085-ad58-6cdf34513a6a,"    static void getNthPowerWithArrays(int a, int n){
		
    	int height = logOfBase(2, n);	
		boolean[] hArr = new boolean[height];
		long startUPNano = System.nanoTime();
	
		
		while (n > 1){		
			    boolean remainder = (n % 2 == 1);
				hArr[--height] = remainder;
				n = n/2;
		}
		
		long result = a;
		
		for(int i=0; i < hArr.length; i++){
			
			boolean remainder = hArr[i];		
			result =  remainder ? result * result * a : result * result; 
		}
		
		System.out.println(""Results with Array: ""+ result);
		System.out.println(""Elasped time in Nanos: "" +(System.nanoTime() - startUPNano));
	}
"
1712,97c68e8b-64ae-4d34-8b7a-ab5888da1857,"    static int logOfBase(int base, int power){
    	return (int)(Math.log10(power)/Math.log10(base));
    }
"
1713,b26c01f0-7ced-4fa5-855d-f02c4a8e0e0c,"    public Message(String rawMessage){
        prefix = """";
        command = """";
        trailing = """";
        parameters = new ArrayList<String>();

        /*
         * parse optional prefix.
         * we know we have a prefix when there is a ':' leading the message
         */
        if(rawMessage.startsWith("":"")){
            // prefix goes until the first space character
            int prefixEnd = rawMessage.indexOf(' ');
            prefix = rawMessage.substring(1,prefixEnd);
            rawMessage = rawMessage.substring(prefixEnd+1);
        }

        /*
         * parse mandatory command
         * command is either [a-zA-Z]+
         * or [0-9]{3}
         * followed by a space
         */
        int commandEnd = rawMessage.indexOf(' ');
        if(commandEnd < 0){
            commandEnd = rawMessage.length();
        }
        command = rawMessage.substring(0,commandEnd);

        // see if we are out of input
        if(commandEnd == rawMessage.length()){
            validate();
            return;
        }

        // skip over the whitespace before params
        rawMessage = rawMessage.substring(commandEnd);

        /* from here, there are optionally up to 14 parameters
         * followed by the ""trailing"" feild
         */

        // if we have "":"" this indicates the start of the trailing section
        if(rawMessage.contains("" :"")){
            String[] parts = rawMessage.split("" :"");
            trailing = parts[1];

            if (!parts[0].isEmpty()){
                String params = parts[0].substring(1);
                for (String s : params.split("" "")){
                    if (!s.isEmpty()){
                        parameters.add(s);
                    }
                }
            }
        }
        else {
            /* if there is no "" :"", there is either no trailing,
             * or 14 params then trailing
             */
            String[] parts = rawMessage.substring(1).split("" "");
            for(int i=0; i<parts.length; i++){
                if(i < 14){
                    parameters.add(parts[i]);
                }
                else{
                    trailing += parts[i];
                }
            }
        }
        validate();
    }
"
1714,75c3f217-2f39-4b26-945a-a496e5608ec7,"    private void validate(){
        //TODO
    }
"
1715,4ea86ae6-2104-4610-89f0-98ed2f99170f,"    public String getPrefix(){
        return prefix;
    }
"
1716,baee05f2-a0ee-4f19-bba6-2251b702d8cb,"    public String getCommand(){
        return command;
    }
"
1717,f57ae71d-728f-4cf2-947e-bef0dff63399,"    public String getTrailing(){
        return trailing;
    }
"
1718,af06e492-e607-4953-aa2c-791514094dde,"    public List<String> getParameters(){
        return parameters;
    }
"
1719,c3ef54f6-2346-4543-b20d-97d0bd3e42e4,"    public MessageHandler(IRCBot bot){
        this.bot = bot;
    }
"
1720,9b16e262-5066-45b0-9a34-10236ad665ad,"    abstract void handle(Message message);
"
1721,c50c2cf3-ae40-4273-b3cf-d3e4523c1b67,"    public IRCBot(String host, String channel, String nick, int port){
        this.host = host;
        this.channel = channel;
        this.nick = nick;
        this.port = port;

        handlers = new ArrayList<MessageHandler>();

        //Need to respond ""PONG"" when pinged or server drops us
        MessageHandler pingHandler = new MessageHandler(this) {
            void handle(Message message){
                if(message.getCommand().equals(""PING""))
                    bot.writeLine(""PONG :"" + message.getTrailing());
            }
        };
        handlers.add(pingHandler);
    }
"
1722,29c9b45d-913b-471b-9901-de9b56c7cce2,"            void handle(Message message){
                if(message.getCommand().equals(""PING""))
                    bot.writeLine(""PONG :"" + message.getTrailing());
            }
"
1723,00bdadb9-af5b-47c7-a8db-e081d61a7b56,"    public void addHandler(MessageHandler mh){
        handlers.add(mh);
    }
"
1724,aa772912-bbb9-4aad-aa9b-aa0dc09270a6,"    protected void writeLine(String message) {
        try{
            if (!message.endsWith(""\r\n""))
                message = message + ""\r\n"";

            System.out.println("">>> "" + message);
            out.write(message);
            out.flush();
        }
        catch(Exception e){
            System.err.println(""Could not write message : "" + message);
        }
    }
"
1725,e931bb88-962b-4388-a482-ac883a77f671,"    protected void sendPrivmsg(String target, String message){
        writeLine(""PRIVMSG "" + target + "" :"" + message);
    }
"
1726,d6253afd-ef92-4899-8c05-a29f617ad483,"    public void run() {
        try{
            socket = new Socket(host, port);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

            writeLine(""NICK :"" + nick);
            writeLine(""USER "" + nick + "" * * :"" + nick);
            writeLine(""JOIN :"" + channel);

            String line = null;

            while((line = in.readLine()) != null) {
                System.out.println(""<<< "" + line);
                Message msg = new Message(line);

                for (MessageHandler mh : handlers){
                    mh.handle(msg);
                }
            }
        }
        catch(Exception e){
            System.err.println(""Cannot connect and operate bot"");
            e.printStackTrace();
            System.exit(1);
        }
    }
"
1727,971f87a9-9a0c-45a8-a8f0-3551a5d0bfd1,"    public String getNick(){ return this.nick; }
"
1728,fd96d8f5-a236-4e25-88fb-df665bf9585d,"    public String getChannel(){ return this.channel; }
"
1729,d19d17b8-f280-4d80-9360-b1a7880bf131,"    public String getHost(){ return this.host; }
"
1730,f0e50e9e-63ef-4180-8a1a-baaa51d893ea,"    public int getPort(){ return this.port; }
"
1731,bbfc79dc-15b1-4ad0-af9e-855341ddaec0,"    public static void main(String [] args){
        String host = ""irc.freenode.net"";
        String channel = ""#uofa-acm"";
        String nick = ""exampleBot"";
        int port = 6667;
        IRCBot bot = new IRCBot(host, channel, nick, port);

        bot.addHandler(new MessageHandler(bot){
            void handle(Message message){
                if(message.getTrailing().contains(""hello "" + bot.getNick())){
                    bot.sendPrivmsg(bot.getChannel(), ""Hey!"");
                }
            }
        });

        bot.run();

    }
"
1732,c6d1ce64-c6a0-4f41-9d70-9cfe5b96ba75,"            void handle(Message message){
                if(message.getTrailing().contains(""hello "" + bot.getNick())){
                    bot.sendPrivmsg(bot.getChannel(), ""Hey!"");
                }
            }
"
1733,d06e4a8e-107c-4b0d-a3f6-a17a6a680205,"    public MessageTest( String testName ) {
        super( testName );
    }
"
1734,163dc86d-7d34-45a0-92dd-e3e01f9e948a,"    public static Test suite() {
        return new TestSuite( MessageTest.class );
    }
"
1735,4fb24182-4574-4223-9504-81d1f08b5984,"    public void testSimpleMessage() {
        String raw;
        Message msg;

        raw = "":<prefix> command params :<trailing>"";
        msg = new Message(raw);
        assertEquals(""<prefix>"", msg.getPrefix());
        assertEquals(""command"", msg.getCommand());
        assertEquals(1, msg.getParameters().size());
        assertEquals(""params"", msg.getParameters().get(0));
        assertEquals(""<trailing>"", msg.getTrailing());
    }
"
1736,90979cc6-46a9-470d-a922-2d5120ea958c,"    public void testNoPrefix(){
        String raw;
        Message msg;

        raw = ""command params :<trailing>"";
        msg = new Message(raw);
        assertEquals("""", msg.getPrefix());
        assertEquals(""command"", msg.getCommand());
        assertEquals(1, msg.getParameters().size());
        assertEquals(""params"", msg.getParameters().get(0));
        assertEquals(""<trailing>"", msg.getTrailing());
    }
"
1737,9e5a03f2-3e66-4085-b5a6-1614a7960186,"    public void testNoParams(){
        String raw;
        Message msg;

        raw = "":<prefix> command :<trailing>"";
        msg = new Message(raw);
        assertEquals(""<prefix>"", msg.getPrefix());
        assertEquals(""command"", msg.getCommand());
        assertEquals(0, msg.getParameters().size());
        assertEquals(""<trailing>"", msg.getTrailing());
    }
"
1738,acd66ff1-6d77-46ac-9bd4-707b0a300f3b,"    public void testNoPrefixNoParams(){
        String raw;
        Message msg;

        raw = ""command :<trailing>"";
        msg = new Message(raw);
        assertEquals("""", msg.getPrefix());
        assertEquals(""command"", msg.getCommand());
        assertEquals(0, msg.getParameters().size());
        assertEquals(""<trailing>"", msg.getTrailing());
    }
"
1739,66799281-c1e9-410a-a132-720bfd449da3,"    public void testNoPrefixNoParamsNoTrailing(){
        String raw;
        Message msg;

        raw = ""command"";
        msg = new Message(raw);
        assertEquals("""", msg.getPrefix());
        assertEquals(""command"", msg.getCommand());
        assertEquals(0, msg.getParameters().size());
        assertEquals("""", msg.getTrailing());
    }
"
1740,88445a0b-cafb-450a-a943-5c1d0b55b7b1,"    public void testNumericCommand(){
        String raw;
        Message msg;

        raw = ""000"";
        msg = new Message(raw);
        assertEquals("""", msg.getPrefix());
        assertEquals(""000"", msg.getCommand());
        assertEquals(0, msg.getParameters().size());
        assertEquals("""", msg.getTrailing());
    }
"
1741,b6bac440-ac74-4f0e-9d7c-154b42fb1b1e,"    public void testParamList(){
        String raw;
        Message msg;

        raw = "":<prefix> command param1 param2 param3 :<trailing>"";
        msg = new Message(raw);

        assertEquals(""<prefix>"", msg.getPrefix());
        assertEquals(""command"", msg.getCommand());
        assertEquals(3, msg.getParameters().size());
        assertEquals(""param1"", msg.getParameters().get(0));
        assertEquals(""param2"", msg.getParameters().get(1));
        assertEquals(""param3"", msg.getParameters().get(2));
        assertEquals(""<trailing>"", msg.getTrailing());
    }
"
1742,c32f7728-3446-4b4d-932b-ae4f41a66ed5,"    public void testParamListNoTrailing(){
        System.out.println(""param list no trailing"");
        String raw;
        Message msg;

        raw = "":<prefix> command param1 param2 param3"";
        msg = new Message(raw);

        assertEquals(""<prefix>"", msg.getPrefix());
        assertEquals(""command"", msg.getCommand());
        assertEquals(3, msg.getParameters().size());
        assertEquals(""param1"", msg.getParameters().get(0));
        assertEquals(""param2"", msg.getParameters().get(1));
        assertEquals(""param3"", msg.getParameters().get(2));
        assertEquals("""", msg.getTrailing());
    }
"
1743,51ad7913-cbec-417b-8459-6bf3aa1e6e82,"    public void testMaxParamListExplicitTrailing(){
        String raw;
        Message msg;

        raw = "":<prefix> command ""
            + ""param1 param2 param3 param4 param5 param6 ""
            + ""param7 param8 param9 param10 param11 param12 param13 param14 ""
            + "":<trailing>"";
        msg = new Message(raw);

        assertEquals(""<prefix>"", msg.getPrefix());
        assertEquals(""command"", msg.getCommand());
        assertEquals(14, msg.getParameters().size());
        assertEquals(""param1"", msg.getParameters().get(0));
        assertEquals(""param2"", msg.getParameters().get(1));
        assertEquals(""param3"", msg.getParameters().get(2));
        assertEquals(""param4"", msg.getParameters().get(3));
        assertEquals(""param5"", msg.getParameters().get(4));
        assertEquals(""param6"", msg.getParameters().get(5));
        assertEquals(""param7"", msg.getParameters().get(6));
        assertEquals(""param8"", msg.getParameters().get(7));
        assertEquals(""param9"", msg.getParameters().get(8));
        assertEquals(""param10"", msg.getParameters().get(9));
        assertEquals(""param11"", msg.getParameters().get(10));
        assertEquals(""param12"", msg.getParameters().get(11));
        assertEquals(""param13"", msg.getParameters().get(12));
        assertEquals(""param14"", msg.getParameters().get(13));
        assertEquals(""<trailing>"", msg.getTrailing());
    }
"
1744,073efa67-ffd4-4fee-bf8c-6992cd8a6e71,"    public void testMaxParamListImplicitTrailing(){
        String raw;
        Message msg;

        raw = "":<prefix> command ""
            + ""param1 param2 param3 param4 param5 param6 ""
            + ""param7 param8 param9 param10 param11 param12 param13 param14 ""
            + ""<trailing>"";
        msg = new Message(raw);

        assertEquals(""<prefix>"", msg.getPrefix());
        assertEquals(""command"", msg.getCommand());
        assertEquals(14, msg.getParameters().size());
        assertEquals(""param1"", msg.getParameters().get(0));
        assertEquals(""param2"", msg.getParameters().get(1));
        assertEquals(""param3"", msg.getParameters().get(2));
        assertEquals(""param4"", msg.getParameters().get(3));
        assertEquals(""param5"", msg.getParameters().get(4));
        assertEquals(""param6"", msg.getParameters().get(5));
        assertEquals(""param7"", msg.getParameters().get(6));
        assertEquals(""param8"", msg.getParameters().get(7));
        assertEquals(""param9"", msg.getParameters().get(8));
        assertEquals(""param10"", msg.getParameters().get(9));
        assertEquals(""param11"", msg.getParameters().get(10));
        assertEquals(""param12"", msg.getParameters().get(11));
        assertEquals(""param13"", msg.getParameters().get(12));
        assertEquals(""param14"", msg.getParameters().get(13));
        assertEquals(""<trailing>"", msg.getTrailing());
    }
"
1745,0f8b43b5-c00a-4648-9c55-1f0ca3e541d2,"    public void testMaxParamListNoTrailing(){
        String raw;
        Message msg;

        raw = "":<prefix> command ""
            + ""param1 param2 param3 param4 param5 param6 ""
            + ""param7 param8 param9 param10 param11 param12 param13 ""
            + ""param14"";
        msg = new Message(raw);

        assertEquals(""<prefix>"", msg.getPrefix());
        assertEquals(""command"", msg.getCommand());
        assertEquals(14, msg.getParameters().size());
        assertEquals(""param1"", msg.getParameters().get(0));
        assertEquals(""param2"", msg.getParameters().get(1));
        assertEquals(""param3"", msg.getParameters().get(2));
        assertEquals(""param4"", msg.getParameters().get(3));
        assertEquals(""param5"", msg.getParameters().get(4));
        assertEquals(""param6"", msg.getParameters().get(5));
        assertEquals(""param7"", msg.getParameters().get(6));
        assertEquals(""param8"", msg.getParameters().get(7));
        assertEquals(""param9"", msg.getParameters().get(8));
        assertEquals(""param10"", msg.getParameters().get(9));
        assertEquals(""param11"", msg.getParameters().get(10));
        assertEquals(""param12"", msg.getParameters().get(11));
        assertEquals(""param13"", msg.getParameters().get(12));
        assertEquals(""param14"", msg.getParameters().get(13));
        assertEquals("""", msg.getTrailing());
    }
"
1746,144fb9ae-888a-406a-b54f-12e47ad75d9e,"    public AppTest( String testName )
    {
        super( testName );
    }
"
1747,8209e081-462b-4661-8540-b1306bed0cbd,"    public static Test suite()
    {
        return new TestSuite( AppTest.class );
    }
"
1748,ac08a691-bb30-4cfc-a138-ed489ddca0b6,"    public void testApp()
    {
        assertTrue( true );
    }
"
1749,7ca1689e-4031-46f2-8dfe-7e49515cd3da,"	public void add(Item item) {
		items.add(item);
	}
"
1750,ffd7bd09-5a6e-4174-9428-b84dd2b6865f,"	public double total() {
		double total = 0.0;
		for (Item item : items) {
			total += item.total();
		}
		return total;
	}
"
1751,e3ba4079-3bfe-4779-b7a5-1367b5aba9a7,"	public List<Item> getItemsByArticle(Article article) {
		List<Item> articleItems = new ArrayList<Item>();
		for (Item item : items) {
			if (item.isArticle(article)) {
				articleItems.add(item);
			}
		}
		return articleItems;
	}
"
1752,9eca00ae-3a90-4d53-ae40-6e03c9c41e1a,"	public Item(Article article, double amount) {
		this.article = article;
		this.amount = amount;
	}
"
1753,8f3104fd-3c0f-4162-8ed6-f530f4081f72,"	public double total() {
		return article.total(amount);
	}
"
1754,d07c655e-fde7-4dde-b4fa-818691f769c2,"	public double getAmount() {
		return amount;
	}
"
1755,dfc34795-adbe-42c7-96be-d5beea1b573d,"	public boolean isArticle(Article article) {
		return this.article.equals(article);
	}
"
1756,df378ce6-5176-45d4-9fec-9242c6938a7c,"	public Article(int id, Price price) {
		this.id = id;
		this.price = price;
	}
"
1757,b29c8055-0608-4eb1-83c6-b6c8d42d675b,"	public double total(double amount) {
		return price.total(amount);
	}
"
1758,5b02f9c9-089b-4633-a154-785e266dec73,"	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		return result;
	}
"
1759,6dfa82c8-7077-4285-8a19-5e93b043e044,"	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Article other = (Article) obj;
		if (id != other.id)
			return false;
		return true;
	}
"
1760,2260d0a0-6dac-4870-9d7f-9a0d3c368004,"	public Article article(double price) {
		nextId += 1;
		return new Article(nextId, new Price(price));
	}
"
1761,e0976253-2b6b-4037-a879-7da235217ec9,"	public ItemSpecifier create(Article article) {
		return new ItemSpecifier(article);
	}
"
1762,482444a0-3d97-44d5-9d32-e8ff390e5475,"		public ItemSpecifier(Article article) {
			this.article = article;
		}
"
1763,73cfec94-6600-44f0-bee4-16d237926f26,"		public ItemSpecifier amount(int amount) {
			this.amount = amount;
			return this;
		}
"
1764,b7dde96f-e7d8-465c-ae3f-69623c4aabb5,"		public Item item() {
			return new Item(article, amount);
		}
"
1765,c29b758a-e80e-4c6b-9e8f-1adeec4fca4a,"	public XForYDiscount(Article article, double xAmount, double yAmount) {
		this.article = article;
		this.itemAmount = xAmount;
		this.forAmount = yAmount;
	}
"
1766,328b625d-6293-4d17-88ab-353b241c92f7,"	@Override
	public double discount(Cart cart) {
		int amount = 0;
		for (Item item : cart.getItemsByArticle(article)) {
			amount += item.getAmount();
		}
		double discount = (amount / itemAmount) * article.total(itemAmount - forAmount);
		return discount;
	}
"
1767,ed9db921-b033-486e-baa8-a99ac1124a9b,"	public double total(Cart cart) {
		double total = cart.total();
		for (Discount discount : discounts) {
			total -= discount.discount(cart);
		}
		return total;
	}
"
1768,d1579448-661e-4b5e-b7d3-f1229cb0eaa8,"	public void addDiscount(Discount discount) {
		discounts.add(discount);
	}
"
1769,5865a526-1807-46fa-bd61-8b7dc9a61af1,"	double discount(Cart cart);
"
1770,b338533f-840e-4ae5-803c-19f746668e5f,"	public Price(double price) {
		this.price = price;
	}
"
1771,fbc3703d-ff21-447f-bced-0a8ab24df566,"	public double total(double amount) {
		return price * amount;
	}
"
1772,832d857c-cb87-46c4-9cc1-c414cc779d89,"	public AmountForPriceDiscount(Article article, int amount, Price price) {
		this.article = article;
		this.amount = amount;
		this.price = price;
	}
"
1773,8a481289-2f56-4147-9ac2-260c5a3e54fc,"	@Override
	public double discount(Cart cart) {
		int numberOfItems = 0;
		List<Item> allItems = cart.getItemsByArticle(article);
		for (Item item : allItems) {
			numberOfItems += item.getAmount();
		}
		double discount = article.total(numberOfItems) - price.total(numberOfItems / amount);
		return discount;
	}
"
1774,1991c4e8-6423-43aa-8d50-6bc85213a8df,"	@Test
	public void testNoItems() {
		Cassier cassier = new Cassier();
		Cart cart = new Cart();
		double total = cassier.total(cart);
		
		Assert.assertEquals(0.0, total, 0.001);
	}
"
1775,c010ee14-d3e1-472a-ad9b-754b1b018e47,"	@Test
	public void testOneItem() {
		Cassier cassier = new Cassier();
		Cart cart = new Cart();
		cart.add(itemBuilder.create(article0).amount(1).item());
		double total = cassier.total(cart);
		
		Assert.assertEquals(1.0, total, 0.001);
	}
"
1776,cb015207-2fe2-43a7-b2d6-f53ffd21577c,"	@Test
	public void testItems() {
		Cassier cassier = new Cassier();
		Cart cart = new Cart();
		cart.add(itemBuilder.create(article0).amount(1).item());
		cart.add(itemBuilder.create(article1).amount(2).item());
		double total = cassier.total(cart);
		
		Assert.assertEquals(4.0, total, 0.001);
	}
"
1777,3091d796-14ed-460e-aa8f-fe67f2539a19,"	@Test
	public void test3For2() {
		Cassier cassier = new Cassier();
		cassier.addDiscount(new XForYDiscount(article1, 3, 2));
		Cart cart = new Cart();
		cart.add(itemBuilder.create(article0).amount(1).item());
		cart.add(itemBuilder.create(article1).amount(3).item());
		double total = cassier.total(cart);
		
		Assert.assertEquals(4.0, total, 0.001);
	}
"
1778,49da4bca-bc71-4064-b342-8ae2ce501a6d,"	@Test
	public void test3ForPrice() {
		Cassier cassier = new Cassier();
		cassier.addDiscount(new AmountForPriceDiscount(article1, 3, new Price(2.5)));
		Cart cart = new Cart();
		cart.add(itemBuilder.create(article0).amount(1).item());
		cart.add(itemBuilder.create(article1).amount(3).item());
		double total = cassier.total(cart);
		
		Assert.assertEquals(3.5, total, 0.001);
	}
"
1779,e76f56bd-3510-43af-b3a6-ef856f7a6efd,"	public static int getMaxAccount(){
		return (int)(Math.pow(2, 25) - 1);
	}
"
1780,85cd6784-637a-4cad-a2bb-738a836761d0,"	public static int readAccount(int bank) {
		int a = Toolbox.readInt(0, getMaxAccount());
		
		return serializeAccount(bank, a);
	}
"
1781,e2bef778-6575-40d4-bbe1-1e235ce40c12,"	public static int getAccountId(int account){
		account =  account <<  8;
		return account >>> 8;
	}
"
1782,9b142cad-e737-4105-b6a7-44fc8e57b971,"	public static int getBankId(int account){
		return account >> 24;
	}
"
1783,44b9023d-f75e-4d75-8b34-10e86755bfb9,"	public static int serializeAccount(int bank, int account) {
		if (bank > (int)(Math.pow(2,9) - 1)) {
			throw new 
			IllegalArgumentException(""Le numero de banque est trop grand !"");
		}
		if (account < 0 || account > getMaxAccount()) {
			throw new 
			IllegalArgumentException(""Le numero de compte n'est pas valide !"");
		}
		
		bank = bank << 24;
		return bank + account;
	}
"
1784,5db7dd3e-3fe5-4696-82f3-6f9decbfd84c,"	public byte getCode(){
		return (byte)this.ordinal();
	}
"
1785,b3e7cf79-2639-449f-9f09-3273695d3aa8,"	public static LamportUnlockMessage fromCode(byte code){
		return LamportUnlockMessage.values()[(int)code];
	}
"
1786,23127a05-966d-4c60-bb3f-860cf9b02ff6,"	public byte getCode(){
		return (byte)this.ordinal();
	}
"
1787,9e14d5b3-aa3c-4ca6-92ed-e8c4a72bb739,"	public static LamportMessages fromCode(byte code){
		return LamportMessages.values()[(int)code];
	}
"
1788,17bec578-63ef-47cf-9b81-e5327df4eb13,"	private static int getIntFromString(String args, int defaultInt){
		if(Pattern.matches(""[0-9]*"", args)){
			return Integer.parseInt(args);
		}else{
			System.err.printf(""Invalid number %s using %d \n"",args,defaultInt );
		}	
		return defaultInt;
	}
"
1789,5ff9704f-7d1c-431d-8ff8-4075df234906,"	private static int getIntFromArgs(String args[], int index, int def){
		if(args.length > index){
			return getIntFromString(args[index], def);
		}
		return def;	
	}
"
1790,c5b60740-a611-493d-a6e7-836f2ce6f3d4,"	public static int getBankIdFromArg(String args[],int index){
		return ConfigParser.getIntFromArgs(args, index, 0);
	}
"
1791,e8f140af-b917-4044-a012-6fe63a68bf75,"	public LamportState() {
		this(LamportMessages.RELEASE, 0);
	}
"
1792,ae0fc2a9-3c14-4586-ab70-cce2e5d77a05,"	public LamportState(LamportMessages type, int timestamp) {
		this.type = type;
		this.timestamp = timestamp;
	}
"
1793,f6afce6d-528d-4567-84a5-d034a7ca9c5d,"	public void set(LamportMessages type, int timestamp) {
		this.type = type;
		this.timestamp = timestamp;
	}
"
1794,7dfe586f-688b-4e2a-a9c3-6233aedb1fc2,"	public byte[] toByte(int bankId) {
		byte[] data = new byte[1 + 4 + 4];
		// Type [1]
		data[0] = type.getCode();
		// Timestamp [4]
		byte[] temp = Toolbox.int2Byte(timestamp);
		for (int i = 0; i < temp.length; i++) {
			data[1 + i] = temp[i];
		}
		// Bank id [4]
		temp = Toolbox.int2Byte(bankId);
		for (int i = 0; i < temp.length; i++) {
			data[5 + i] = temp[i];
		}		
		
		return data;
	}
"
1795,de6a5917-661b-4bdf-b768-b34e5842bac4,"	public static LamportState fromByte(byte[] data,int length) {
		assert (length >= 9);
		// type [1]
		LamportState state = new LamportState();
		state.type = LamportMessages.fromCode(data[0]);
		// timestamp[4]
		byte[] tempInt = new byte[4];
		for (int i = 0; i < tempInt.length; i++) {
			tempInt[i] = data[i + 1];
		}
		state.timestamp = Toolbox.byte2int(tempInt);
		// Bank ID[4]
		tempInt = new byte[4];
		for (int i = 0; i < tempInt.length; i++) {
			tempInt[i] = data[i + 5];
		}	
		state.remoteBankId = Toolbox.byte2int(tempInt);

		
		return state;
	}
"
1796,719a16f8-22d3-467b-a59a-589edcd28682,"	public static int readBank() {
		int n;
		try {
			Scanner in = new Scanner(System.in);
			n = in.nextInt();
		} catch (Exception e) {
			return -1;
		}
	
		if (n < 0 || n > Config.banksAddresses.length - 1)
			return -1;
		else
			return n;
	}
"
1797,7cf122c3-1468-44a0-9dfe-a5db963047e2,"	public static Menu readMenu() {
		int n;
		try {
			Scanner in = new Scanner(System.in);
			n = in.nextInt();
		} catch (Exception e) {
			return null;
		}
	
		if (n < 0 || n > Menu.values().length)
			return null;
		else
			return Menu.values()[n];
	}
"
1798,719914d4-2aa8-4071-b139-2ff5efff58b8,"	public static int readInt(int min, int max) {
		if (min > max) {
			int tmp = max;
			max = min;
			min = tmp;
		}
	
		int n;
	
		do {
			try {
				Scanner in = new Scanner(System.in);
				n = in.nextInt();
	
				if (n >= min && n <= max) {
					return n;
				}
				String msg = ""Veuillez entrer une valeur entre "" + min + "" et ""
						+ max + "" > "";
	
				if (max == Integer.MAX_VALUE)
					msg = ""Veuillez entrer une valeur superieur a "" + min
							+ "" > "";
	
				System.out.print(msg);
			} catch (Exception e) {
				System.out.println(""Erreur de saisie"");
			}
		} while (true);
	}
"
1799,a9e19b20-6bb7-4954-bbf8-a6322e9d203f,"	public static byte[] long2Byte(long l) {
		ByteBuffer boeuf = ByteBuffer.allocate(8);
		boeuf.order(ByteOrder.BIG_ENDIAN);
		boeuf.putLong(l);
		return boeuf.array();
	}
"
1800,bfa82cb8-3873-4407-b031-a47db3aac2fa,"	public static long byte2Long(byte[] b) {
		ByteBuffer bb = ByteBuffer.wrap(b);
		return bb.getLong();
	}
"
1801,e3d93a9d-0b05-4b78-9e13-e5f718c4dc8b,"	public static byte[] int2Byte(int i) {
		ByteBuffer boeuf = ByteBuffer.allocate(4);
		boeuf.order(ByteOrder.BIG_ENDIAN);
		boeuf.putInt(i);
		return boeuf.array();
	}
"
1802,217aca6b-5e33-4bff-a500-770c746ea3e6,"	public static int byte2int(byte[] b) {
		ByteBuffer bb = ByteBuffer.wrap(b);
		return bb.getInt();
	}
"
1803,2f5b3d10-723c-4abb-9e17-0417003cb657,"	public static byte[] buildMessage(byte code, int... datas) {
		byte[] message = new byte[1 + datas.length * 4];

		message[0] = code;

		int indice = 1;
		for (int i = 0; i < datas.length; i++) {
			byte[] data = Toolbox.int2Byte(datas[i]);

			for (int j = 0; j < data.length; j++) {
				message[indice++] = data[j];
			}
		}

		return message;
	}
"
1804,800596cd-c6b5-4ffc-9ccc-1bbb8e5eca49,"	public static int[] buildData(DatagramPacket packet) {
		return buildData(packet.getData(), packet.getLength(),0);
	}
"
1805,d0fa0d43-b57c-45bb-ad71-647dec369891,"	public static int[] buildData(byte[] message, int length,int offset) {
		// Attention: Ne pas utiliser message.length,
		// renvoie la taille du buffer et pas du contenu

		if (length <= 1)
			throw new IllegalArgumentException();

		// le code du message se trouve dans message[0];
		// Le reste des donnees sont des entiers..

		// Si pas de donnees, renvoie un tableau vide (eviter le null)
		if ((length - 1) % 4 != 0) {
			return new int[0];
		}
		// Si des donnees
		int nbInt = (length - 1) / 4;
		int data[] = new int[nbInt];

		if (message.length > 1) {
			for (int index = 0; index < nbInt; index++) {
				byte temp[] = new byte[4];
				temp[0] = message[offset + 1 + index * 4];
				temp[1] = message[offset + 2 + index * 4];
				temp[2] = message[offset + 3 + index * 4];
				temp[3] = message[offset + 4 + index * 4];
				data[index] = Toolbox.byte2int(temp);
			}
		}
		return data;
	}
"
1806,d5305c1d-8332-4dbf-a46f-2bb3cd81dfff,"	public static Byte getDataCode(DatagramPacket p) {
		if (p == null || p.getLength() == 0)
			return null;

		return p.getData()[0];
	}
"
1807,7ad09d85-2453-4bf2-9b16-b5883e8c6de2,"	public static byte[] concat(byte[] d1, byte[] d2) {
		byte[] data = new byte[d1.length + d2.length];
		for (int i = 0; i < d1.length; i++) {
			data[i] = d1[i];
		}
		for (int i = 0; i < d2.length; i++) {
			data[i + d2.length] = d2[i];
		}
		return data;
	}
"
1808,92136802-0141-4a66-9833-e4fba919ea26,"	public Lamport(Bank bank) throws SocketException {
		this.bank = bank;
		this.port = Config.bank2bankLamportPort[bank.getId()];
		System.out.println(""La banque "" + bank.getId() + "" ecoute sur le port ""
				+ port);
		socket = new DatagramSocket(port);

		// Initialise le tableau d'etat
		state = new LamportState[Config.banksAddresses.length];
		for (int i = 0; i < state.length; i++)
			state[i] = new LamportState();

		new Thread(this).start();

	}
"
1809,a925537f-3ab7-40c2-878c-5d5b3efc126d,"	private boolean localAccesGranted() {
		// Il peut si etat[bankid]=requete
		// et que son estampille est la plus ancienne !
		if (state[bank.getId()].type != LamportMessages.REQUEST)
			return false;

		int myTimeStamp = state[bank.getId()].timestamp;
		for (int i = 0; i < state.length; i++) {
			if (myTimeStamp > state[i].timestamp) {
				return false;
			} else if (myTimeStamp == state[i].timestamp && i != bank.getId()) {
				if (bank.getId() > i)
					return false;
			}
		}
		return true;
	}
"
1810,448d0231-f9b8-41ed-94f8-a472bd6ac433,"	public void lock() throws IOException {
		System.out.println(""Lamport.lock()"");
		// Mise a jour de l'estampille
		// FIXME Synchronise a mettre
		localTimestamp++;
		// Envoi d'une requete
		state[bank.getId()].set(LamportMessages.REQUEST, localTimestamp);
		sendToAllOthersBank(state[bank.getId()].toByte(this.bank.getId()));
		// Indique si l'on peut avoir le mutex

		// Si on a pas le mutex, on est en attente !
		synchronized (this) {
			hasMutex = localAccesGranted();

			while (!hasMutex) {
				try {
					if (DEBUG) {
						System.out.println(""Wait() sur la banque ""
								+ bank.getId());
					}
					wait();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				hasMutex = localAccesGranted();

			}
		}
	}
"
1811,d9eeeb2c-8c26-4dbc-9e34-a2e63a9241e6,"	public void accountCreated(int account, int money) throws IOException {

		// Infos de creation de compte
		byte[] temp = Toolbox.buildMessage(
				LamportMessages.NEW_ACCOUNT.getCode(), account, money);

		// Envoi
		sendToAllOthersBank(temp);
	}
"
1812,5d55eaf8-dfaf-413f-b9dd-39b036bb1a1d,"	public void unlock(LamportUnlockMessage unlockType, int... data)
			throws IOException {
		System.out.println(""Lamport.unlock()"");

		// Construction du message a envoyer
		state[bank.getId()].set(LamportMessages.RELEASE, localTimestamp);
		byte[] messageData = state[bank.getId()].toByte(bank.getId());
		// Ajout des infos de liberation
		byte[] temp = Toolbox.buildMessage(unlockType.getCode(), data);
		// Envoi
		sendToAllOthersBank(Toolbox.concat(messageData, temp));
		synchronized (this) {
			hasMutex = false;
		}
	}
"
1813,22cbfe6c-26cc-4a7a-b0a7-faad67b8aeb1,"	public void sendToAllOthersBank(byte[] data) throws IOException {
		for (int i = 0; i < state.length; i++) {
			if (i != bank.getId()) {
				send(i, data);
			}
		}
	}
"
1814,6c542454-34cf-4004-8557-a10741ef4bce,"	public void send(int bankId, byte[] data) throws IOException {
		// Construction de l'adresse et du datagramme
		int port = Config.bank2bankLamportPort[bankId];
		InetAddress host = InetAddress.getByName(Config.banksAddresses[bankId]);
		DatagramPacket packet = new DatagramPacket(data, data.length, host,
				port);
		// Envoi
		socket.send(packet);
	}
"
1815,4c8b3f24-c935-46b8-adae-a97860a58d0a,"	public void run() {
		byte[] buffer = new byte[Config.bufferSize];
		DatagramPacket data = new DatagramPacket(buffer, buffer.length);

		while (true) {
			try {
				// 1. Reception d'un message
				socket.receive(data);

				// 2. Regarde si une autre banque replique un nouveau compte
				LamportMessages type = LamportMessages
						.fromCode(data.getData()[0]);
				if (type == LamportMessages.NEW_ACCOUNT) {
					// 2b. Si oui, on l'ajout a la banque
					int[] newAccountData = Toolbox.buildData(data.getData(),
							data.getLength(), 0);
					bank.handleOnCreate(newAccountData[0], newAccountData[1]);

				} else {
					// 3. Sinon on a un message lamport normal
					LamportState state = LamportState.fromByte(data.getData(),
							data.getLength());
					acceptReceive(state, data);
				}

			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
"
1816,68da157d-8c67-4cca-a2eb-b1844d4bc1d1,"	private void acceptReceive(LamportState state, DatagramPacket data)
			throws IOException {

		int remoteBankId = state.remoteBankId;

		// 1. Met a jour l'estampille
		// FIXME Synchronized
		localTimestamp = Math.max(localTimestamp, state.timestamp) + 1;

		// 2. Effectue les actions suivant le type de message recu
		switch (state.type) {
		case NEW_ACCOUNT:
			// Deja traite car pas un message lamport standard
			break;
		case REQUEST:
			// Mise a jour de la table locale
			this.state[remoteBankId].set(LamportMessages.REQUEST,
					state.timestamp);

			// Envoi du recu
			LamportState data2send = new LamportState(LamportMessages.RECEIPT,
					localTimestamp);

			send(remoteBankId, data2send.toByte(bank.getId()));
			break;
		case RELEASE:
			// Mise a jour de la table locale
			this.state[remoteBankId].set(LamportMessages.RELEASE,
					state.timestamp);
			// Recupe des donnees en plus dans le message de release
			if (state.type == LamportMessages.RELEASE && data.getLength() >= 9){
				// Construction des donnees
				byte code = data.getData()[9]; // Code
				int[] releaseData = Toolbox.buildData(data.getData(),
						data.getLength() - 9, 9); // Donnee repliquee

				// Conversion en enum
				LamportUnlockMessage lum = LamportUnlockMessage.fromCode(code);

				// Mise a jour de la banque suivant les donnees recues
				switch (lum) {
				case DELETE_ACCOUNT:
					bank.handleOnDelete(releaseData[0]);
					break;
				case UPDATE_MONEY:
					bank.handleOnUpdate(releaseData[0], releaseData[1]);
					break;
				default:
					System.err
					  .println(""LamportRelease: non implementee"");
					break;
				}

			}

			break;
		case RECEIPT:
			// Met a jour si on avait pas de requete dans le tableau
			if (this.state[remoteBankId].type != LamportMessages.REQUEST) {
				this.state[remoteBankId].set(LamportMessages.RECEIPT,
						state.timestamp);
			}
			break;

		}
		// Indique si l'on peut avoir le mutex
		synchronized (this) {
			hasMutex = (this.state[bank.getId()].type == 
					LamportMessages.REQUEST) && localAccesGranted();
			if (DEBUG) {
				System.out.println(""Lamport.acceptReceive()"");
			}
			if (hasMutex) {
				if (DEBUG)
					System.out
					  .println(""Notify() sur la banque "" + bank.getId());
				notify();
			}
		}

	}
"
1817,cb0363b6-a606-40fb-867e-0e2c34139b9d,"	public Teller(int bankId) throws UnknownHostException, SocketException {
		if (bankId < 0 || bankId > Config.banksAddresses.length - 1)
			throw new IllegalArgumentException(
					""No de banque invalide pour le guichetier !"");

		port = Config.banks2ClientPorts[bankId];
		host = InetAddress.getByName(Config.banksAddresses[bankId]);

		socket = new DatagramSocket();

	}
"
1818,164651c9-9803-4401-9183-587c8cfa5963,"	private void sendPacket(byte[] tampon) throws IOException {
		DatagramPacket packet = new DatagramPacket(tampon, tampon.length, host,
				port);

		socket.send(packet);
	}
"
1819,bb41ac39-e64e-4044-8181-4bfed371ec30,"	private DatagramPacket receivePacket() throws IOException {
		byte[] tampon = new byte[Config.bufferSize];

		DatagramPacket packet = new DatagramPacket(tampon, tampon.length);
		//System.out.println(""Attente de la reponse de la banque"");
		socket.receive(packet);

		return packet;
	}
"
1820,e37597be-59fa-45fb-a226-dd30f5bbdaf4,"	public int addAccount(int money) {
		try {
			// Envoi de la requete
			sendPacket(Toolbox.buildMessage(Menu.ADD_ACCOUNT.getCode(), money));

			// Reception de la reponse
			DatagramPacket p = receivePacket();
			ErrorServerClient code = ErrorServerClient.fromCode(p.getData()[0]);

			// Si aucune erreur
			if (code == ErrorServerClient.OK) {
				// Renvoie le numero de compte
				int[] data = Toolbox.buildData(p);
				return data[0];
			} else {
				return -1;
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
		return -1;

	}
"
1821,b39faf47-3e1d-40da-8d06-c907858a86cb,"	public ErrorServerClient deleteAccount(int account) {
		try {
			// Envoi de la requete
			sendPacket(Toolbox.buildMessage(Menu.DELETE_ACCOUNT.getCode(),
					account));
			
			// Reception de la reponse
			DatagramPacket p = receivePacket();
			return ErrorServerClient.fromCode(p.getData()[0]);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		return ErrorServerClient.AUTRE;
	}
"
1822,26b1143d-99c5-44c4-9128-7bd3d256114a,"	public ErrorServerClient addMoney(int account, int money) {
		try {
			// Envoi de la requete
			sendPacket(Toolbox.buildMessage(Menu.ADD_MONEY.getCode(),
					account, money));
			
			// Reception de la reponse
			DatagramPacket p = receivePacket();
			return ErrorServerClient.fromCode(p.getData()[0]);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		return ErrorServerClient.AUTRE;
	}
"
1823,e450aa56-9697-4f95-bdec-87ea738f69b7,"	public ErrorServerClient takeMoney(int account, int money) {
		try {
			// Envoi de la requete
			sendPacket(Toolbox.buildMessage(Menu.TAKE_MONEY.getCode(),
					account, money));
			
			// Reception de la reponse
			DatagramPacket p = receivePacket();
			return ErrorServerClient.fromCode(p.getData()[0]);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		return ErrorServerClient.AUTRE;
	}
"
1824,de08ca61-c5cf-443b-97ad-d25eeb903970,"	public int getBalance(int account) {
		try {
			// Envoi de la requete
			sendPacket(Toolbox.buildMessage(Menu.GET_BALANCE.getCode(),
					account));
			
			// Reception de la reponse
			DatagramPacket p = receivePacket();
			ErrorServerClient code = ErrorServerClient.fromCode(p.getData()[0]);
			
			if (code == ErrorServerClient.OK) {
				return Toolbox.buildData(p)[0];
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		return -1;
	}
"
1825,1253f4a9-85d7-429c-b174-3401b681fbb5,"	public byte getCode(){
		return (byte)this.ordinal();
	}
"
1826,75a0004a-f979-47da-886e-eff95921b9e8,"	public static ErrorServerClient fromCode(byte code){
		return ErrorServerClient.values()[(int)code];
	}
"
1827,d36c1b7d-dcd6-4f69-8a2c-1b56eb5383ea,"	Menu(String text) {
		this.text = text;
	}
"
1828,bc180a75-030e-4ccc-b13e-7eebdcf03e9e,"	public String toString() {
		return text;
	}
"
1829,ebe2c16b-d3e0-4652-99c7-355752f9f2f1,"	public byte getCode(){
		return (byte)this.ordinal();
	}
"
1830,aedb3bb7-82f8-4da9-806c-64613f65f165,"	public static Menu fromCode(byte code){
		return Menu.values()[(int)code];
	}
"
1831,36cf2ba9-289d-46c4-b300-8f1d1f5a7e35,"	StatsDType(String statType)
	{
		this.statType = statType;
	}
"
1832,ff59589a-f52e-488f-a93e-2730b887e552,"	public String getShortString()
	{
		return statType;
	}
"
1833,5349ee78-0b1c-4e26-bf58-71e063b3afd9,"	void increment(String key);
"
1834,aaf18d77-c521-4e30-a3a3-59c478cc345f,"	void count(String key, int delta);
"
1835,39a2d062-779d-46de-929c-3b30f12fedb2,"	void count(String key, Object delta, double rate);
"
1836,a8247bdc-3f3b-4395-a4ba-2b7f20a6165a,"	void gauge(String key, double value);
"
1837,545913df-5079-49eb-a234-c781a625463b,"	void gauge(String key, long value);
"
1838,627a50b6-7293-4dcb-b001-840dac407b50,"	void time(String key, int timeInMs);
"
1839,b726b0d5-a1e2-474a-bf01-699062c4f382,"	public StatsDMetric(String key, StatsDType type, Object value)
	{
		this(key, type, value, null);
	}
"
1840,d7e1e0f5-4507-48ac-87ed-5956ee97cf4c,"	public StatsDMetric(String key, StatsDType type, Object value, Double rate)
	{
		this.key = key;
		this.type = type;
		this.value = value;
		this.rate = rate;
	}
"
1841,bad19413-6378-4ed4-afdf-60119529a52e,"	public String getKey()
	{
		return key;
	}
"
1842,28c3a878-7022-4493-a05f-f04dded960fa,"	public StatsDType getType()
	{
		return type;
	}
"
1843,206ae9e1-b262-4684-a3ae-5df7b6e4d9ef,"	public Object getValue()
	{
		return value;
	}
"
1844,ea2027da-13de-4fae-be25-7b85051c112f,"	public Double getRate()
	{
		return rate;
	}
"
1845,a2ffe0be-2bda-457b-99c8-3d261b441f72,"	@Override
	public void increment(String key)
	{
		// noop
	}
"
1846,2bbc7649-ade8-4df3-8e08-846c7e903f32,"	@Override
	public void count(String key, int delta)
	{
		// noop
	}
"
1847,885b8b11-7c5a-4326-ac93-ed4e2f84dad7,"	@Override
	public void count(String key, Object delta, double rate)
	{
		// noop
	}
"
1848,67d8a9bf-3678-4e31-a45b-ebe17cd4a577,"	@Override
	public void gauge(String key, double value)
	{
		// noop
	}
"
1849,bb0090cb-3de2-4cec-8639-4ceadeb8b726,"	@Override
	public void gauge(String key, long value)
	{
		// noop
	}
"
1850,20897125-9d8b-4287-843f-89015953edaa,"	@Override
	public void time(String key, int timeInMs)
	{
		// noop
	}
"
1851,9f3aebcc-a61d-4460-be05-7f98ab49b5f3,"	public StatsDClientImpl(String host, int port)
	{
		this(host, port, Executors.newSingleThreadExecutor(new ThreadFactory()
		{
			private ThreadFactory delegate = Executors.defaultThreadFactory();

			@Override
			public Thread newThread(Runnable r)
			{
				Thread thread = delegate.newThread(r);
				thread.setName(""Statsd flusher"");
				return thread;
			}
		}));
	}
"
1852,9db384c4-6693-43f6-b425-7d4e80842869,"			@Override
			public Thread newThread(Runnable r)
			{
				Thread thread = delegate.newThread(r);
				thread.setName(""Statsd flusher"");
				return thread;
			}
"
1853,8c59724b-6933-4406-9d6b-7602681098ee,"	public StatsDClientImpl(String hostname, int port, ExecutorService service)
	{
		try
		{
			channel = DatagramChannel.open();
			channel.connect(new InetSocketAddress(hostname, port));
		}
		catch( Exception e )
		{
			throw new RuntimeException(""Failed to start StatSD client"", e);
		}
		service.submit(new Runnable()
		{

			@Override
			public void run()
			{
				DecimalFormat format = new DecimalFormat(RATE_FORMAT);
				ByteBuffer buffer = ByteBuffer.allocate(1400);
				while( true )
				{
					try
					{
						StatsDMetric metric = queue.poll();
						if( metric == null )
						{
							if( buffer.position() > 0 )
							{
								flush(buffer);
							}
							metric = queue.take();
						}
						byte[] bytes = convert(format, metric).getBytes(UTF_8);
						if( buffer.remaining() < bytes.length )
						{
							flush(buffer);
						}
						buffer.put(bytes);
					}
					catch( InterruptedException e )
					{
						// nothing
					}
				}
			}

			private void flush(ByteBuffer buffer)
			{
				buffer.flip();
				try
				{
					channel.write(buffer);
				}
				catch( IOException e )
				{
					LOGGER.warn(""Failed to send statsd packet"", e);
				}
				buffer.clear();
			}

		});
	}
"
1854,c7763b8b-d325-48c6-9bcf-6055cc44e734,"			@Override
			public void run()
			{
				DecimalFormat format = new DecimalFormat(RATE_FORMAT);
				ByteBuffer buffer = ByteBuffer.allocate(1400);
				while( true )
				{
					try
					{
						StatsDMetric metric = queue.poll();
						if( metric == null )
						{
							if( buffer.position() > 0 )
							{
								flush(buffer);
							}
							metric = queue.take();
						}
						byte[] bytes = convert(format, metric).getBytes(UTF_8);
						if( buffer.remaining() < bytes.length )
						{
							flush(buffer);
						}
						buffer.put(bytes);
					}
					catch( InterruptedException e )
					{
						// nothing
					}
				}
			}
"
1855,40e87198-770e-4e59-b919-f8724cfd3889,"			private void flush(ByteBuffer buffer)
			{
				buffer.flip();
				try
				{
					channel.write(buffer);
				}
				catch( IOException e )
				{
					LOGGER.warn(""Failed to send statsd packet"", e);
				}
				buffer.clear();
			}
"
1856,347f31ff-6238-4911-a710-bb8b8fc2a1a6,"	public static String convert(StatsDMetric metric)
	{
		return convert(new DecimalFormat(RATE_FORMAT), metric);
	}
"
1857,2e85ab13-f6ef-4ce7-a8d1-a00d63cf124e,"	static String convert(DecimalFormat format, StatsDMetric metric)
	{
		String rateString = """";
		Double rate = metric.getRate();
		if( rate != null )
		{
			rateString = format.format(rate);
		}
		return String.format(Locale.ENGLISH, ""%s:%s|%s%s\n"", metric.getKey(), metric.getValue(), metric.getType()
			.getShortString(), rateString);
	}
"
1858,958df02d-b813-460f-b646-c9ab4503de4b,"	@Override
	public void increment(String key)
	{
		queue.add(new StatsDMetric(key, StatsDType.COUNTER, 1));
	}
"
1859,ab45bae8-368b-4899-a980-b3b6bd2807f1,"	@Override
	public void count(String key, int delta)
	{
		queue.add(new StatsDMetric(key, StatsDType.COUNTER, delta));
	}
"
1860,5ceaaf21-decf-4643-b5cb-ebc85432823a,"	@Override
	public void gauge(String key, double value)
	{
		queue.add(new StatsDMetric(key, StatsDType.GAUGE, value));
	}
"
1861,4a212dac-9ea0-4737-848b-799f9c307d75,"	@Override
	public void time(String key, int timeInMs)
	{
		queue.add(new StatsDMetric(key, StatsDType.TIMER, timeInMs));
	}
"
1862,c4668a70-e63e-474a-83de-e10e2d7e155d,"	@Override
	public void count(String key, Object delta, double rate)
	{
		queue.add(new StatsDMetric(key, StatsDType.COUNTER, delta, rate));
	}
"
1863,e8e9cbc3-6c1f-4c2d-b2e8-ca2b9be88ba4,"	@Override
	public void gauge(String key, long value)
	{
		queue.add(new StatsDMetric(key, StatsDType.GAUGE, value));
	}
"
1864,e3d5616e-a7a7-4a8d-b037-a7c32749ed6c,"	public ConvertTest(String testName)
	{
		super(testName);
	}
"
1865,96e9d117-d2e3-4e86-adba-5c2768c31847,"	public static Test suite()
	{
		return new TestSuite(ConvertTest.class);
	}
"
1866,3367bb64-6bde-4da0-8ad1-6941c616ebeb,"	public void testConversions()
	{
		assertEquals(""test:1|c\n"", StatsDClientImpl.convert(new StatsDMetric(""test"", StatsDType.COUNTER, 1)));
		assertEquals(""test:2|c|@0.1\n"", StatsDClientImpl.convert(new StatsDMetric(""test"", StatsDType.COUNTER, 2, 0.1)));
		assertEquals(""test:2|c|@1.01\n"",
			StatsDClientImpl.convert(new StatsDMetric(""test"", StatsDType.COUNTER, 2, 1.01)));
		assertEquals(""test:2|g\n"", StatsDClientImpl.convert(new StatsDMetric(""test"", StatsDType.GAUGE, 2)));
		assertEquals(""test:3.0|g\n"", StatsDClientImpl.convert(new StatsDMetric(""test"", StatsDType.GAUGE, 3.0)));
		assertEquals(""test:123|ms\n"", StatsDClientImpl.convert(new StatsDMetric(""test"", StatsDType.TIMER, 123)));
	}
"
1867,72c1cecc-0025-48c9-82d2-0890930b6fce,"    public MySQLDatabase(FigAdmin instance) {
        plugin = instance;
    }
"
1868,faf9b8aa-0a70-4072-9e35-52e6e883f9b2,"    public Connection getSQLConnection(String mysqlDatabase) {
        FileConfiguration Config = plugin.getConfig();
        String mysqlUser = Config.getString(""mysql-user"", ""root"");
        String mysqlPassword = Config.getString(""mysql-password"", ""root"");
        try {

            return DriverManager.getConnection(mysqlDatabase + ""?autoReconnect=true&user="" + mysqlUser + ""&password=""
                    + mysqlPassword);

        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""Unable to retreive connection"", ex);
        }
        return null;
    }
"
1869,33f648c9-7ad5-42f2-9583-2661621c5e09,"    public Connection getSQLConnection() {
        String mysqlDatabase = plugin.getConfig().getString(""mysql-database"", ""jdbc:mysql://localhost:3306/minecraft"");
        return getSQLConnection(mysqlDatabase);

    }
"
1870,8d481089-c804-4e57-8ede-4a2be4f87294,"    public boolean initialize(FigAdmin plugin) {
        this.plugin = plugin;
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        String table = plugin.getConfig().getString(""mysql-table"");
        try {
            conn = getSQLConnection();
            DatabaseMetaData dbm = conn.getMetaData();
            // Table create if not it exists
            if (!dbm.getTables(null, null, table, null).next()) {
                getLogger().log(Level.INFO, ""[FigAdmin] Creating table "" + table + ""."");
                ps = conn.prepareStatement(""CREATE TABLE `"" + table + ""` ( \n"" + ""  `name` varchar(32) NOT NULL, \n""
                        + ""  `reason` text NOT NULL, \n "" + ""  `admin` varchar(32) NOT NULL, \n""
                        + ""  `time` bigint(20) NOT NULL, \n "" + ""  `temptime` bigint(20) NOT NULL DEFAULT '0', \n""
                        + ""  `type` int(11) NOT NULL DEFAULT '0', \n"" + ""  `id` int(11) NOT NULL AUTO_INCREMENT, \n""
                        + ""  `ip` varchar(16) DEFAULT NULL, \n"" + ""  PRIMARY KEY (`id`) USING BTREE \n""
                        + "") ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ROW_FORMAT=DYNAMIC;"");
                ps.execute();
                if (!dbm.getTables(null, null, table, null).next())
                    throw new SQLException(""Table "" + table + "" not found; tired to create and failed"");
            }
            // Clean up old temp bans
            ps = conn.prepareStatement(""DELETE FROM "" + table
                    + "" WHERE (type = 0 OR type = 1) AND (temptime > 0) AND (temptime < ?)"");
            ps.setLong(1, System.currentTimeMillis() / 1000);
            ps.execute();
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
            return false;
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
                if (rs != null)
                    rs.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }

        }

        return true;

    }
"
1871,eefe558b-2d86-42a9-ae76-1cf753491958,"    public String getAddress(String pName) {

        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        String mysqlTable = plugin.getConfig().getString(""mysql-table"");
        try {
            conn = getSQLConnection();
            ps = conn.prepareStatement(""SELECT `ip` FROM `"" + mysqlTable + ""` WHERE name = ?"");
            ps.setString(1, pName);
            rs = ps.executeQuery();
            while (rs.next()) {
                String ip = rs.getString(""ip"");
                return ip;
            }
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
                if (rs != null)
                    rs.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }

        }
        return null;
    }
"
1872,22cb3a12-effb-4224-aafa-e30ea7259ba0,"    public boolean removeFromBanlist(String player) {

        String mysqlTable = plugin.getConfig().getString(""mysql-table"");

        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = getSQLConnection();
            ps = conn.prepareStatement(""DELETE FROM "" + mysqlTable
                    + "" WHERE name = ? AND (type = 0 or type = 1) ORDER BY time DESC"");
            ps.setString(1, player);
            ps.executeUpdate();
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
            return false;
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }
        }
        return true;

    }
"
1873,4bfe3741-a456-4791-8ec7-499a7198148c,"    public void addPlayer(EditBan e) {

        String mysqlTable = plugin.getConfig().getString(""mysql-table"");

        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = getSQLConnection();
            ps = conn.prepareStatement(""INSERT INTO `"" + mysqlTable
                    + ""` (name,reason,admin,temptime,type,time) VALUES(?,?,?,?,?,?)"");
            ps.setString(1, e.name);
            ps.setString(2, e.reason);
            ps.setString(3, e.admin);
            if (e.endTime < 1) {
                ps.setLong(4, 0);
            } else
                ps.setLong(4, e.endTime);
            ps.setInt(5, e.type);
            ps.setLong(6, System.currentTimeMillis() / 1000);
            ps.executeUpdate();
            // Update banedit ID
            PreparedStatement getID = conn.prepareStatement(""SELECT LAST_INSERT_ID()"");
            ResultSet rsID = getID.executeQuery();
            rsID.next();
            e.id = rsID.getInt(1);
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }
        }
    }
"
1874,a3883c7b-bfa6-4038-8093-498a599923fb,"    public String getBanReason(String player) {
        Connection conn = getSQLConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String mysqlTable = plugin.getConfig().getString(""mysql-table"");
        try {
            ps = conn.prepareStatement(""SELECT * FROM `"" + mysqlTable + ""` WHERE name = ? ORDER BY id DESC LIMIT 1"");
            ps.setString(1, player);
            rs = ps.executeQuery();
            while (rs.next()) {
                String reason = rs.getString(""reason"");
                return reason;
            }
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }
        }
        return null;
    }
"
1875,8861c5d8-ee55-4ece-89af-a1c446fe364c,"    public void updateAddress(String p, String ip) {

        Connection conn = null;
        PreparedStatement ps = null;
        String mysqlTable = plugin.getConfig().getString(""mysql-table"");
        try {
            conn = getSQLConnection();
            ps = conn.prepareStatement(""UPDATE `"" + mysqlTable + ""` SET ip = ? WHERE name = ?"");
            ps.setString(1, ip);
            ps.setString(2, p);
            ps.executeUpdate();
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }
        }

    }
"
1876,1e7753b8-3263-42e0-92e0-388ab2b811ba,"    public ArrayList<EditBan> listRecords(String name, boolean exact) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String mysqlTable = plugin.getConfig().getString(""mysql-table"");
        try {
            conn = getSQLConnection();
            ps = conn.prepareStatement(""SELECT * FROM `"" + mysqlTable + ""` WHERE name ""
                    + ((exact) ? ""= ?"" : ""LIKE ?"") + "" ORDER BY time DESC LIMIT 10"");
            if (exact) {
                ps.setString(1, name);
            } else {
                ps.setString(1, ""'%"" + name + ""%'"");
            }
            rs = ps.executeQuery();
            ArrayList<EditBan> bans = new ArrayList<EditBan>();
            while (rs.next()) {
                bans.add(getEditBan(rs));
            }
            return bans;
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
                if (rs != null)
                    rs.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }
        }
        return null;
    }
"
1877,1b697783-525b-4c3c-a3da-2639f59f5dac,"    protected EditBan loadFullRecord(String pName) {
        return loadFullRecord(pName, -1);
    }
"
1878,f6617ebc-47a5-45df-a159-ab326fed49e9,"    protected EditBan loadFullRecord(int id) {
        return loadFullRecord(null, id);
    }
"
1879,a05510ee-4f11-432b-905c-90e6e77d9e10,"    private EditBan loadFullRecord(String pName, int id) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String mysqlTable = plugin.getConfig().getString(""mysql-table"");
        try {
            String statement = ""SELECT * FROM "" + mysqlTable + "" WHERE name = ? ORDER BY time DESC LIMIT 1"";
            if (pName == null) {
                statement = ""SELECT * FROM "" + mysqlTable + "" WHERE id = ?"";
            }
            conn = getSQLConnection();
            ps = conn.prepareStatement(statement);
            if (pName == null) {
                ps.setInt(1, id);
            } else {
                ps.setString(1, pName);
            }
            rs = ps.executeQuery();
            while (rs.next()) {
                return new EditBan(rs.getInt(""id""), rs.getString(""name""), rs.getString(""reason""),
                        rs.getString(""admin""), rs.getLong(""time""), rs.getLong(""temptime""), rs.getInt(""type""), rs
                                .getString(""ip""));
            }
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
                if (rs != null)
                    rs.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }
        }
        return null;
    }
"
1880,858eee0c-ecbd-4d7a-ae4d-cdb71ab9c35f,"    public boolean saveFullRecord(EditBan ban) {

        String mysqlTable = plugin.getConfig().getString(""mysql-table"");

        Connection conn = null;
        PreparedStatement ps = null;

        boolean success = false;
        try {
            conn = getSQLConnection();
            ps = conn.prepareStatement(""UPDATE "" + mysqlTable
                    + "" SET name = ?, reason = ?, admin = ?, time = ?, temptime = ?, type = ? WHERE id = ? LIMIT 1"");
            ps.setLong(5, ban.endTime);
            ps.setString(1, ban.name);
            ps.setString(2, ban.reason);
            ps.setString(3, ban.admin);
            ps.setLong(5, ban.time);
            ps.setLong(6, ban.type);
            ps.setInt(7, ban.id);
            success = ps.executeUpdate() > 0;
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }
        }
        return success;
    }
"
1881,8118ddcd-5b89-4a77-a356-a62bcdb754b6,"    @Override
    public ArrayList<EditBan> getBannedPlayers() {
        ArrayList<EditBan> list = new ArrayList<EditBan>();
        Connection conn = getSQLConnection();
        String mysqlTable = plugin.getConfig().getString(""mysql-table"");
        if (conn == null) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Could not establish SQL connection. Disabling FigAdmin"");
            plugin.getServer().getPluginManager().disablePlugin(plugin);
            return list;
        } else {

            PreparedStatement ps = null;
            ResultSet rs = null;
            try {
                ps = conn.prepareStatement(""SELECT * FROM "" + mysqlTable
                        + "" WHERE (type = 0 OR type = 1) AND (temptime > ? OR temptime = 0)"");
                ps.setLong(1, System.currentTimeMillis() / 1000);
                rs = ps.executeQuery();
                while (rs.next()) {
                    EditBan e = getEditBan(rs);
                    list.add(e);
                }
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
            } finally {
                try {
                    if (ps != null)
                        ps.close();
                    if (rs != null)
                        rs.close();
                    if (conn != null)
                        conn.close();
                } catch (SQLException ex) {
                    FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
                }
            }

            try {
                conn.close();
                FigAdmin.log.log(Level.INFO, ""[FigAdmin] Initialized db connection"");
            } catch (SQLException e) {
                e.printStackTrace();
                plugin.getServer().getPluginManager().disablePlugin(plugin);
            }
        }
        return list;

    }
"
1882,8dbce9cd-8d8a-43ee-89ad-1abbc6c0abac,"    private EditBan getEditBan(ResultSet rs) throws SQLException {
        return new EditBan(rs.getInt(""id""), rs.getString(""name""), rs.getString(""reason""), rs.getString(""admin""), rs
                .getLong(""time""), rs.getLong(""temptime""), rs.getInt(""type""), rs.getString(""ip""));
    }
"
1883,095f6e67-40e7-459a-b869-29c3f566a414,"    @Override
    protected boolean deleteFullRecord(int id) {

        String mysqlTable = plugin.getConfig().getString(""mysql-table"");

        Connection conn = null;
        PreparedStatement ps = null;
        boolean success = false;
        try {
            conn = getSQLConnection();
            ps = conn.prepareStatement(""DELETE FROM "" + mysqlTable + "" WHERE id = ?  ORDER BY time DESC"");
            ps.setInt(1, id);
            ps.executeUpdate();
            success = ps.getUpdateCount() > 0;
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
            return false;
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }
        }
        return success;
    }
"
1884,0990deab-648b-4355-8c6b-01258ff10ab3,"    protected String importFromKiwi(String table, String database) {
        if (database == null) {
            database = plugin.getConfig().getString(""mysql-database"");
        } else {
            database = ""jdbc:mysql://localhost:3306/"" + database;
        }
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            conn = getSQLConnection(database);
            if (conn == null || !conn.isValid(5)) {
                return ""Can't connect to database `"" + database + ""`; does it exist?"";
            }
            DatabaseMetaData dbm = conn.getMetaData();
            if (!dbm.getTables(null, null, table, null).next()) {
                return ""Table `"" + table + ""` doesn't exit!"";
            }
            ps = conn.prepareStatement(""SELECT * FROM `"" + table + ""`"");
            rs = ps.executeQuery();
            while (rs.next()) {
                String name = rs.getString(""name"");
                System.out.println(""Added banned player: "" + name);
                long temptime = 0;
                if (rs.getLong(""temptime"") > 0) {
                    temptime = rs.getDate(""temptime"").getTime() / 1000;
                }
                EditBan e = new EditBan(0, name, rs.getString(""reason""), rs.getString(""admin""),
                        rs.getLong(""time"") / 1000, temptime, EditBan.BAN, null);
                addPlayer(e);
                plugin.bannedPlayers.add(e);
            }
            return ""Done!"";
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin][KiwiImport] Couldn't execute MySQL statement: "", ex);
            return ""Error!"";
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
                if (rs != null)
                    rs.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }
        }
    }
"
1885,acb6fcfa-58f9-464a-9c91-48002e66ee92,"    @Override
    public int getWarnCount(String player) {

        int warns = 0;
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String mysqlTable = plugin.getConfig().getString(""mysql-table"");
        try {
            conn = getSQLConnection();
            ps = conn.prepareStatement(""SELECT * FROM `"" + mysqlTable + ""` WHERE name = ? AND type = 2"");

            ps.setString(1, player);

            rs = ps.executeQuery();
            while (rs.next()) {
                warns++;
            }
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
                if (rs != null)
                    rs.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }
        }
        return warns;
    }
"
1886,dfe75a7a-a63e-4ffb-9630-ac4be1b2c450,"    @Override
    public int clearWarnings(String player) {
        String mysqlTable = plugin.getConfig().getString(""mysql-table"");

        Connection conn = null;
        PreparedStatement ps = null;
        int warns = 0;
        try {
            conn = getSQLConnection();
            ps = conn.prepareStatement(""DELETE FROM "" + mysqlTable + "" WHERE name = ? AND type = 2"");
            ps.setString(1, player);
            ps.executeUpdate();
            warns = ps.getUpdateCount();
        } catch (SQLException ex) {
            FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Couldn't execute MySQL statement: "", ex);
        } finally {
            try {
                if (ps != null)
                    ps.close();
                if (conn != null)
                    conn.close();
            } catch (SQLException ex) {
                FigAdmin.log.log(Level.SEVERE, ""[FigAdmin] Failed to close MySQL connection: "", ex);
            }
        }
        return warns;
    }
"
1887,2e4e71d7-8afc-4c3b-9fc1-1f3b6c7ef793,"    EditCommand(FigAdmin plugin) {
        this.plugin = plugin;
    }
"
1888,056aca49-7aa3-439c-bd7b-dbc5b12d9f5c,"    private static String banType(int num) {
        switch (num) {
        case 0:
            return ""Ban   "";
        case 1:
            return ""IP-Ban"";
        case 2:
            return ""Warn  "";
        default:
            return ""?"";
        }
    }
"
1889,b406131c-61aa-4ee2-a08a-f5ed10a10845,"    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {

        try {
            if (!plugin.hasPermission(sender, ""figadmin.editban"")) {
                sender.sendMessage(plugin.formatMessage(plugin.getConfig().getString(""messages.noPermission"")));
                return true;
            }

            if (args.length < 1)
                return false;

            if (args[0].equalsIgnoreCase(""list"")) {
                return list(sender, args);
            }

            if (args[0].equalsIgnoreCase(""load"")) {
                return load(sender, args);
            }
            if (args[0].equalsIgnoreCase(""id"")) {
                return id(sender, args);
            }
            if (args[0].equalsIgnoreCase(""delete"")) {
                return delete(sender, args);
            }
            if (args[0].equalsIgnoreCase(""search"")) {
                return search(sender, args);
            }

            if (args[0].equalsIgnoreCase(""save"")) {
                if (ban == null) {
                    sender.sendMessage(ChatColor.RED + ""You aren't editing a ban"");
                    return true;
                }
                return save(sender, args);
            }

            if (args[0].equalsIgnoreCase(""cancel"")) {
                if (ban == null) {
                    sender.sendMessage(ChatColor.RED + ""You aren't editing a ban"");
                    return true;
                }
                return cancel(sender, args);
            }

            if (args[0].equalsIgnoreCase(""show"") || args[0].equalsIgnoreCase(""view"")) {
                if (ban == null) {
                    sender.sendMessage(ChatColor.RED + ""You aren't editing a ban"");
                    return true;
                }
                return view(sender, args);
            }
            if (args[0].equalsIgnoreCase(""reason"")) {
                if (ban == null) {
                    sender.sendMessage(ChatColor.RED + ""You aren't editing a ban"");
                    return true;
                }
                return reason(sender, args);
            }
            if (args[0].equalsIgnoreCase(""time"")) {
                if (ban == null) {
                    sender.sendMessage(ChatColor.RED + ""You aren't editing a ban"");
                    return true;
                }
                return time(sender, args);
            }
        } catch (Exception exc) {
            System.out.println(""[FigAdmin] Error: EditCommand"");
            exc.printStackTrace();
        }
        return false;

    }
"
1890,c0b5603c-3123-4257-8959-06cdde5db64d,"    public static void showBanInfo(EditBan eb, CommandSender sender) {
        DateFormat shortTime = DateFormat.getDateTimeInstance();
        sender.sendMessage(ChatColor.AQUA + banType(eb.type));
        sender.sendMessage(ChatColor.GOLD + "" | "" + ChatColor.WHITE + eb.name + ChatColor.YELLOW + "" was banned by ""
                + ChatColor.WHITE + eb.admin + ChatColor.YELLOW);
        sender.sendMessage(ChatColor.GOLD + "" | at "" + shortTime.format((new Date(eb.time * 1000))));
        if (eb.endTime > 0)
            sender.sendMessage(ChatColor.GOLD + "" | "" + ChatColor.YELLOW + ""Will be unbanned at ""
                    + shortTime.format((new Date(eb.endTime * 1000))));
        sender.sendMessage(ChatColor.GOLD + "" | "" + ChatColor.YELLOW + ""Reason: "" + ChatColor.GRAY + eb.reason);
    }
"
1891,a2c1aa40-1fc2-4c90-9088-62bdda4c7c14,"    private boolean list(CommandSender sender, String[] args) {
        if (args.length < 2) {
            sender.sendMessage(ChatColor.RED + ""Usage: list <player>"");
            return true;
        }
        if (!FigAdmin.validName(args[1])) {
            sender.sendMessage(plugin.formatMessage(plugin.getConfig().getString(""messages.badPlayerName"",
                    ""bad player name"")));
            return true;
        }
        List<EditBan> bans = plugin.db.listRecords(args[1], true);
        if (bans.isEmpty()) {
            sender.sendMessage(ChatColor.RED + ""No records"");
            return true;
        }
        sender.sendMessage(ChatColor.GOLD + ""Found "" + bans.size() + "" records for user "" + bans.get(0).name + "":"");
        for (EditBan ban : bans) {
            sender.sendMessage(ChatColor.AQUA + banType(ban.type) + ChatColor.YELLOW + ban.id + "": "" + ChatColor.GREEN
                    + ban.reason + ChatColor.YELLOW + "" by "" + ban.admin);
        }
        return true;
    }
"
1892,2cb757ca-aaa9-4490-9191-6c1e916307ea,"    private boolean search(CommandSender sender, String[] args) {
        if (args.length < 2) {
            sender.sendMessage(ChatColor.RED + ""Usage: search <player>"");
            return true;
        }
        List<EditBan> bans = plugin.db.listRecords(args[1], false);
        if (bans.isEmpty()) {
            sender.sendMessage(ChatColor.RED + ""No records"");
            return true;
        }
        sender.sendMessage(ChatColor.GOLD + ""Found "" + bans.size() + "" records for keyword "" + args[1] + "":"");
        for (EditBan ban : bans) {
            sender.sendMessage(ChatColor.AQUA + banType(ban.type) + ChatColor.YELLOW + ban.id + "" "" + ban.name + "": ""
                    + ChatColor.GREEN + ban.reason + ChatColor.YELLOW + "" by "" + ban.admin);
        }
        return true;
    }
"
1893,67e2aaf0-ceb2-4784-8fd3-1c9fe688eb65,"    private boolean load(CommandSender sender, String[] args) {
        if (ban != null) {
            sender.sendMessage(ChatColor.RED + ""Finish what you're doing first!"");
            return true;
        }

        if (args.length < 2) {
            sender.sendMessage(ChatColor.RED + ""Usage: load <player>"");
            return true;
        }
        if (!FigAdmin.validName(args[1])) {
            sender.sendMessage(ChatColor.RED
                    + plugin.formatMessage(plugin.getConfig().getString(""messages.badPlayerName"", ""bad player name"")));
            return true;
        }
        EditBan eb = plugin.db.loadFullRecord(args[1]);
        if (eb == null) {
            sender.sendMessage(ChatColor.RED + ""Unable to find the last ban/warn of this player"");
            return true;
        }
        ban = eb;
        sender.sendMessage(ChatColor.GREEN + ""Editing the last ban/warn of player "" + eb.name + "": "");
        showBanInfo(eb, sender);
        return true;
    }
"
1894,561a111d-0380-49bf-825e-44efa5bd638d,"    private boolean id(CommandSender sender, String[] args) {

        if (ban != null) {
            sender.sendMessage(ChatColor.RED + ""Finish what you're doing first!"");
            return true;
        }

        if (args.length < 2) {
            sender.sendMessage(ChatColor.RED + ""Usage: load <ban id>"");
            return true;
        }

        int id;
        try {
            id = Integer.parseInt(args[1]);
        } catch (NumberFormatException exc) {
            sender.sendMessage(ChatColor.RED + ""ID has to be a number!"");
            return true;
        }

        EditBan eb = plugin.db.loadFullRecord(id);
        if (eb == null) {
            sender.sendMessage(ChatColor.RED + ""Unable to find a ban of this player"");
            return true;
        }
        ban = eb;
        sender.sendMessage(ChatColor.GREEN + ""Editing the last ban/warn of player "" + eb.name + "": "");
        showBanInfo(eb, sender);
        return true;
    }
"
1895,db656a8f-c6a3-4be9-85f9-33ed8ac9c14b,"    private boolean save(CommandSender sender, String[] args) {
        if (plugin.db.saveFullRecord(ban)) {
            for (int i = 0; i < plugin.bannedPlayers.size(); i++) {
                EditBan eb = plugin.bannedPlayers.get(i);
                if (eb.name.equals(ban.name) && eb.type == ban.type) {
                    plugin.bannedPlayers.set(i, eb);
                    break;
                }
            }
            sender.sendMessage(ChatColor.GREEN + ""Saved ban!"");
        } else {
            sender.sendMessage(ChatColor.RED + ""Saving Failed!"");
        }
        ban = null;
        return true;

    }
"
1896,8d5b4990-190c-4646-9dd1-51a3641a845c,"    private boolean view(CommandSender sender, String[] args) {
        showBanInfo(ban, sender);
        return true;

    }
"
1897,4fa2051c-2810-413b-8bc1-24367a5f4262,"    private boolean reason(CommandSender sender, String[] args) {

        if (args.length < 2) {
            sender.sendMessage(ChatColor.RED + ""Usage: reason <add/set/show> (text)"");
            return true;
        }

        if (args[1].equalsIgnoreCase(""add"")) {
            if (args.length < 3) {
                sender.sendMessage(ChatColor.RED + ""Usage: reason add <text>"");
                return true;
            }
            ban.reason += "" "" + plugin.combineSplit(2, args, "" "");
            ban.reason = plugin.formatMessage(ban.reason);
            return true;

        }

        boolean show = false;
        if (args[1].equalsIgnoreCase(""set"")) {
            if (args.length < 3) {
                sender.sendMessage(ChatColor.RED + ""Usage: reason set <text>"");
                show = true;
            }
            ban.reason = plugin.combineSplit(2, args, "" "");
            ban.reason = plugin.formatMessage(ban.reason);
            show = true;
        }
        if (show || args[1].equalsIgnoreCase(""show"")) {
            sender.sendMessage(ChatColor.YELLOW + ""Reason: "" + ChatColor.WHITE + ban.reason);
            return true;
        }
        return false;
    }
"
1898,a2dc0f10-6af9-4a24-ac08-0e388507e9ad,"    private boolean time(CommandSender sender, String[] args) {
        if (args.length < 4) {
            sender.sendMessage(ChatColor.RED + ""Usage: time <add/sub/set> <time> <sec/min/hour/day/week/month>"");
            return true;
        }

        long time = plugin.parseTimeSpec(args[2], args[3]);
        if (time == 0) {
            sender.sendMessage(ChatColor.RED + ""Invalid time format"");
            return true;
        }

        boolean add = args[1].equalsIgnoreCase(""add""), set = args[1].equalsIgnoreCase(""set""), sub = args[1]
                .equalsIgnoreCase(""sub"");
        if (add || set || sub) {
            if (ban.endTime == 0) {
                ban.endTime = ban.time;
            }
            if (add) {
                ban.endTime += time;
            } else if (set) {

                ban.endTime = ban.time + time;
            } else if (sub) {
                ban.endTime -= time;
            }
            Date date = new Date();
            date.setTime(ban.endTime * 1000);
            sender.sendMessage(ChatColor.YELLOW + ""New time: "" + ChatColor.WHITE + date.toString());
            return true;
        }
        return false;
    }
"
1899,2e1ec0d1-bc4a-43cb-a38c-f6d5e6200297,"    private boolean delete(CommandSender sender, String[] args) {
        if (ban != null) {
            sender.sendMessage(ChatColor.RED + ""Finish what you're doing first!"");
            return true;
        }
        if (args.length < 2) {
            sender.sendMessage(ChatColor.RED + ""Usage: delete [id]"");
            return true;
        }
        int id;
        try {
            id = Integer.parseInt(args[1]);
        } catch (NumberFormatException exc) {
            sender.sendMessage(ChatColor.RED + ""ID has to be a number!"");
            return true;
        }
        for (int i = 0; i < plugin.bannedPlayers.size(); i++) {
            if (plugin.bannedPlayers.get(i).id == id) {
                plugin.bannedPlayers.remove(i);
                break;
            }
        }
        boolean success = plugin.db.deleteFullRecord(id);
        if (success)
            sender.sendMessage(ChatColor.GREEN + ""Deleted record "" + id);
        else
            sender.sendMessage(ChatColor.RED + ""Can't find record "" + id);
        return success;
    }
"
1900,54a08e79-f74e-4eaa-a6d9-d896f913d660,"    private boolean cancel(CommandSender sender, String[] args) {
        ban = null;
        sender.sendMessage(ChatColor.YELLOW + ""Cancelled."");
        return true;
    }
"
1901,8de1dd5c-7b38-46c3-9ec5-a7211d7c5a7e,"    public FigAdminPlayerListener(FigAdmin instance) {
        this.plugin = instance;
    }
"
1902,bf19a2ea-d947-48ff-b3c6-de4e20edd5a8,"    @EventHandler(priority = EventPriority.HIGH)
    public void onPlayerLogin(PlayerLoginEvent event) {
        Player player = event.getPlayer();
        for (int i = 0; i < plugin.bannedPlayers.size(); i++) {
            EditBan e = plugin.bannedPlayers.get(i);
            if (e.name.equals(player.getName().toLowerCase())) {
                long tempTime = e.endTime;
                boolean tempban = false;
                if (tempTime > 0) {
                    // Player is banned. Check to see if they are still banned
                    // if it's a tempban
                    long now = System.currentTimeMillis()/1000;
                    long diff = tempTime - now;
                    if (diff <= 0) {
                        plugin.bannedPlayers.remove(i);
                        return;
                    }
                    tempban = true;
                }
                Date date = new Date();
                date.setTime(tempTime * 1000);
                String kickerMsg = null;
                if (tempban) {
                    kickerMsg= plugin.formatMessage(plugin.getConfig().getString(""messages.LoginTempban""));
                    kickerMsg = kickerMsg.replaceAll(""%time%"", date.toString());
                    kickerMsg = kickerMsg.replaceAll(""%reason%"", e.reason);
                } else if (e.type == EditBan.BAN) { // make sure it isn't an ipban
                    kickerMsg  = plugin.formatMessage(plugin.getConfig().getString(""messages.LoginBan""));
                    kickerMsg = kickerMsg.replaceAll(""%time%"", date.toString());
                    kickerMsg = kickerMsg.replaceAll(""%reason%"", e.reason);
                }
                if (kickerMsg != null) {
                    event.disallow(PlayerLoginEvent.Result.KICK_OTHER, kickerMsg);
                    return;
                }
            }
            
        }
    }
"
1903,7bf5be2e-a36b-49a6-9269-35bc4ec8ce04,"    public boolean initialize(FigAdmin plugin) {

        this.plugin = plugin;
        banlist = new File(""plugins/FigAdmin/banlist.txt"");
        if (!banlist.exists()) {
            try {
                banlist.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
                return false;
            }
        }
        return true;
    }
"
1904,78abfa51-a6d5-4aa0-ba6e-d8b8092a3744,"    @Override
    public boolean removeFromBanlist(String player) {

        player = player.toLowerCase();
        try {

            File tempFile = new File(banlist.getAbsolutePath() + "".tmp"");

            BufferedReader br = new BufferedReader(new FileReader(banlist));
            PrintWriter pw = new PrintWriter(new FileWriter(tempFile));

            String line = null;

            // Loops through the temporary file and deletes the player
            while ((line = br.readLine()) != null) {
                boolean match = false;
                if (!line.startsWith(""#"")) {
                    String[] data = line.split(""\\|"");
                    if (data.length > 1) {
                        match = data[0].equals(player) && Integer.parseInt(data[1]) != 2;
                    }
                }
                if (!match) {
                    pw.println(line);
                    pw.flush();
                }
            }
            pw.close();
            br.close();

            // Let's delete the old banlist.txt and change the name of our
            // temporary list!
            banlist.delete();
            tempFile.renameTo(banlist);

            return true;

        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
    }
"
1905,6d6d88cd-cd24-40f7-a185-baf83463a49f,"    @Override
    public void addPlayer(EditBan b) {
        b.id = id++;
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(banlist, true));
            writer.write(b.toString());
            writer.newLine();
            writer.close();
        } catch (IOException e) {
            FigAdmin.log.log(Level.SEVERE, ""FigAdmin: Couldn't write to banlist.txt"");
        }

    }
"
1906,344a8b9d-8d9a-406d-a8a3-27539c6caa43,"    @Override
    public ArrayList<EditBan> getBannedPlayers() {
        id = 0;
        if (!banlist.exists()) {
            try {
                banlist.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        ArrayList<EditBan> list = new ArrayList<EditBan>();
        try {
            BufferedReader in = new BufferedReader(new FileReader(banlist));
            String data = null;
            while ((data = in.readLine()) != null) {
                // Checking for blank lines
                if (!data.startsWith(""#"")) {
                    if (data.length() > 0) {
                        EditBan e = EditBan.loadBan(data);
                        if (e != null && e.type != 2) {
                            list.add(e);
                            id = Math.max(e.id, id);
                        }
                    }

                }
            }
            id++;
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return list;
    }
"
1907,ec106bc2-512b-4d46-a191-683934bcfb7d,"    @Override
    public void updateAddress(String player, String ip) {

        player = player.toLowerCase();
        try {

            File tempFile = new File(banlist.getAbsolutePath() + "".temp"");

            BufferedReader br = new BufferedReader(new FileReader(banlist));
            PrintWriter pw = new PrintWriter(new FileWriter(tempFile));

            String line = null;

            // Loops through the temporary file and deletes the player
            while ((line = br.readLine()) != null) {
                if (!line.startsWith(""#"")) {
                    String[] data = line.split(""\\|"");
                    if (data.length > 7) {
                        if (data[0].equals(player)) {
                            data[4] = ip;
                            line = EditBan.loadBan(data).toString();
                        } else if (data[4].equals(ip)) {
                            data[0] = player;
                            line = EditBan.loadBan(data).toString();

                        }
                    }
                }
                pw.println(line);
                pw.flush();

            }
            pw.close();
            br.close();

            // Let's delete the old banlist.txt and change the name of our
            // temporary list!
            banlist.delete();
            tempFile.renameTo(banlist);

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }
"
1908,f10bf61b-e82f-465f-94d9-9116fb1f6ee4,"    @Override
    protected EditBan loadFullRecord(String pName) {
        return loadFullRecord(pName, 0);
    }
"
1909,ade393a8-53d5-42e3-b815-64c681d06ae8,"    @Override
    protected EditBan loadFullRecord(int id) {
        return loadFullRecord(null, id);
    }
"
1910,cfe08950-9a11-4e38-b790-54726acf44a1,"    private EditBan loadFullRecord(String player, int id) {
        if (player != null)
            player = player.toLowerCase();
        EditBan ban = null;
        try {
            BufferedReader br = new BufferedReader(new FileReader(banlist));

            String line = null;

            // Loops through the temporary file and deletes the player
            while ((line = br.readLine()) != null) {
                if (line.startsWith(""#""))
                    continue;
                String[] data = line.split(""\\|"");
                if (data.length > 7) {
                    if (player != null && data[0].equals(player)) {
                        ban = EditBan.loadBan(data);
                        break;
                    } else if (Integer.parseInt(data[1]) == id) {
                        ban = EditBan.loadBan(data);
                        break;
                    }
                }
            }
            br.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return ban;
    }
"
1911,bb738aec-5e1a-4662-a8dd-3d3593189406,"    @Override
    public boolean saveFullRecord(EditBan ban) {
        try {
            File tempFile = new File(banlist.getAbsolutePath() + "".tmp"");

            BufferedReader br = new BufferedReader(new FileReader(banlist));
            PrintWriter pw = new PrintWriter(new FileWriter(tempFile));
            boolean written = false;

            String line = null;

            // Loops through the temporary file and deletes the player
            while ((line = br.readLine()) != null) {
                if (line.startsWith(""#""))
                    continue;

                if (!written) {
                    String[] data = line.split(""\\|"");
                    if (data.length > 7) {
                        if (Integer.parseInt(data[1]) == ban.id) {
                            line = ban.toString();
                            written = true;
                        }
                    }
                }
                pw.println(line);
                pw.flush();
            }
            br.close();
            pw.close();

            banlist.delete();
            tempFile.renameTo(banlist);

            return written;

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return false;
    }
"
1912,3d600b6a-667a-449e-b755-6b168e4b1876,"    @Override
    public ArrayList<EditBan> listRecords(String name, boolean exact) {
        name = name.toLowerCase();
        ArrayList<EditBan> bans = new ArrayList<EditBan>();
        try {
            BufferedReader br = new BufferedReader(new FileReader(banlist));

            String line = null;

            // Loops through the temporary file and deletes the player
            while ((line = br.readLine()) != null) {
                if (line.startsWith(""#""))
                    continue;
                String[] data = line.split(""\\|"");
                if (data.length > 7) {

                    if ((exact && data[0].equalsIgnoreCase(name)) || (!exact && data[0].contains(name))) {
                        EditBan ban = EditBan.loadBan(data);
                        if (ban != null) {
                            bans.add(ban);
                            if (bans.size() > 9) {
                                break;
                            }
                        }
                    }
                }
            }
            br.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return bans;
    }
"
1913,7cd59b7f-582a-4d30-a10b-dd504763d092,"    @Override
    protected boolean deleteFullRecord(int id) {
        try {

            File tempFile = new File(banlist.getAbsolutePath() + "".tmp"");

            BufferedReader br = new BufferedReader(new FileReader(banlist));
            PrintWriter pw = new PrintWriter(new FileWriter(tempFile));

            String line = null;

            // Loops through the temporary file and deletes the player
            while ((line = br.readLine()) != null) {
                boolean match = false;
                if (!line.startsWith(""#"")) {
                    String[] data = line.split(""\\|"");
                    if (data.length > 1) {
                        match = Integer.parseInt(data[1]) == id;
                    }
                }
                if (!match) {
                    pw.println(line);
                    pw.flush();
                }
            }
            pw.close();
            br.close();

            // Let's delete the old banlist.txt and change the name of our
            // temporary list!
            banlist.delete();
            tempFile.renameTo(banlist);

            return true;

        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
    }
"
1914,1cafe47d-e6c7-4120-ba36-19af0b4e4856,"    @Override
    public int getWarnCount(String player) {
        ArrayList<EditBan> records = listRecords(player, true);
        int warns = 0;
        for (EditBan e : records) {
            if (e.type == EditBan.WARN)
                warns++;
        }
        return warns;
    }
"
1915,09150408-8505-4d28-b2b8-7d37f02921ed,"    @Override
    public int clearWarnings(String player) {
        int warns = 0;
        try {
            File tempFile = new File(banlist.getAbsolutePath() + "".tmp"");

            BufferedReader br = new BufferedReader(new FileReader(banlist));
            PrintWriter pw = new PrintWriter(new FileWriter(tempFile));

            String line = null;

            // Loops through the temporary file and deletes the player's
            // warnings
            while ((line = br.readLine()) != null) {
                if (line.startsWith(""#""))
                    continue;

                boolean skip = false;
                EditBan b = EditBan.loadBan(line);
                if (b != null) {
                    if (b.name.equalsIgnoreCase(player) && b.type == EditBan.WARN) {
                        skip = true;
                        warns++;
                    }
                }
                if (!skip)
                    pw.println(line);
                skip = false;
                pw.flush();
            }
            br.close();
            pw.close();

            banlist.delete();
            tempFile.renameTo(banlist);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return warns;
    }
"
1916,38280a7b-c51c-443a-ba7d-033ea3bb8748,"    EditBan(int id, String name, String reason, String admin, long time, long endTime, int type, String IP) {
        this.id = id;
        this.name = name.toLowerCase();
        this.reason = reason;
        this.admin = admin;
        this.time = time;
        this.endTime = endTime;
        this.type = type;
        this.IP = IP;
    }
"
1917,339461fe-6375-440c-b241-d3bc037e7914,"    EditBan(String name, String reason, String admin, int type) {
        this.id = 0;
        this.name = name.toLowerCase();
        this.reason = reason;
        this.admin = admin;
        this.time = System.currentTimeMillis();
        this.endTime = 0;
        this.type = type;
        this.IP = null;
    }
"
1918,6b119f31-f512-48b1-8db9-b53e0ced5b89,"    EditBan(String name, String reason, String admin, String IP, int type) {
        this.id = 0;
        this.name = name.toLowerCase();
        this.reason = reason;
        this.admin = admin;
        this.time = System.currentTimeMillis();
        this.endTime = 0;
        this.type = type;
        this.IP = IP;
    }
"
1919,d93ea6f1-b64d-41f3-822b-3e94ffcfde06,"    EditBan(String name, String reason, String admin, long endTime, int type) {
        this.id = 0;
        this.name = name.toLowerCase();
        this.reason = reason;
        this.admin = admin;
        this.time = System.currentTimeMillis();
        this.endTime = endTime;
        this.type = type;
        this.IP = null;
    }
"
1920,0f673486-3f35-408b-a03b-945abbc670ca,"    private EditBan() {
    }
"
1921,f9ecac37-1131-4e0a-88ac-8604e8011dd0,"    public static EditBan loadBan(String data) {
        String[] d = data.split(""\\|"");
        return loadBan(d);
    }
"
1922,58efaa24-e9ae-4a7c-a6f4-05bc5e33bb4c,"    public static EditBan loadBan(String[] d) {
        if (d.length < 7) {
            return null;
        }
        EditBan e = new EditBan();
        e.name = d[0].toLowerCase();
        e.id = Integer.parseInt(d[1]);
        e.reason = d[2];
        e.admin = d[3];
        e.IP = (d[4].equals(""null"")) ? null : d[4];
        e.time = Long.parseLong(d[5]);
        e.endTime = Long.parseLong(d[6]);
        e.type = Integer.parseInt(d[7]);
        return e;
    }
"
1923,f7fedf42-a64c-4025-8188-7fc295e3932f,"    public String toString() {
        StringBuffer s = new StringBuffer(id);
        s.append(name);
        s.append(""|"");
        s.append(id);
        s.append(""|"");
        s.append(reason);
        s.append(""|"");
        s.append(admin);
        s.append(""|"");
        s.append(IP);
        s.append(""|"");
        s.append(time);
        s.append(""|"");
        s.append(endTime);
        s.append(""|"");
        s.append(type);
        return s.toString();
    }
"
1924,ac61f564-7f76-41df-b08b-714f29bc66db,"    public boolean equals(Object object) {
        if (object instanceof String) {
            return ((String)object).toLowerCase().equals(this.name);
        } else if (object instanceof EditBan) {
            EditBan o = (EditBan) object;
            return o.name.equals(this.name) && o.admin.equals(this.admin) && o.reason.equals(this.reason)
                    && o.IP.equals(this.IP) && o.time == this.time && o.endTime == this.endTime && o.type == this.type;
        }
        return false;

    }
"
1925,8cd27a07-3ae4-422f-934e-42507d4dd13a,"	public abstract boolean initialize(FigAdmin plugin);
"
1926,87d08547-bb88-4fb2-a0f5-1fc9e9aa0ee4,"	public abstract boolean removeFromBanlist(String player);
"
1927,7d143e26-fbe0-4055-8bca-997ca3bccc80,"	public abstract void addPlayer(EditBan e);
"
1928,f8c9efdb-d42e-4262-86df-999c8786dfd7,"	public abstract ArrayList<EditBan> getBannedPlayers();
"
1929,889be6a2-7ef2-4655-be4e-b815a90e7cd5,"	public abstract void updateAddress(String p, String ip);
"
1930,e076297b-ec8c-47b8-a413-41e1d00fdae2,"	protected abstract EditBan loadFullRecord(String pName);
"
1931,137b649d-78af-47f5-93cd-5df91c4f7183,"    protected abstract EditBan loadFullRecord(int id);
"
1932,a5ef2c8e-4f69-4793-bbff-53777f9ebde3,"    protected abstract boolean deleteFullRecord(int id);
"
1933,8cc8c93c-b778-4f99-a714-313ca32b0498,"    public abstract ArrayList<EditBan> listRecords(String name, boolean exact);
"
1934,7c602b2e-6c52-4e5c-b488-448e513d97c3,"    public abstract boolean saveFullRecord(EditBan ban);
"
1935,23566244-6fb4-4b46-9208-3a87ba1496ec,"    public abstract int getWarnCount(String player);
"
1936,af5655b9-46d3-4a5a-8fe8-538c0fadba4a,"    public abstract int clearWarnings(String player);
"
1937,8e9fd19c-193f-43ea-893f-4c1c643989aa,"	public TTree() {
		nodes = new ArrayList<TNode>();
	}
"
1938,d2105df0-84e4-4c1a-bb7b-0b59917e89f4,"	public TTree(List<TNode> input) {
		this.nodes = input;
	}
"
1939,460a5508-c335-4895-86c4-bf6a0401497c,"	public List<TNode> getNodes() {
		return nodes;
	}
"
1940,bd021084-6e28-47ea-ae07-e6fc8cfba4e7,"	public void setNodes(List<TNode> nodes) {
		this.nodes = nodes;
	}
"
1941,0c51d121-4dd6-4bf4-97e7-6b1eff2ba046,"	public void addNode(TNode toAdd) {
		if (toAdd != null) {
			List<String> titles = new ArrayList<String>();
			TNode exists = null;
			for(TNode n : nodes) {
				titles.add(n.getTitle());
				if(n.getTitle().equals(toAdd.getTitle())) {
					exists = n;
				}
			}
			
			if(!titles.contains(toAdd.getTitle())) {
				nodes.add(toAdd);
			} else {
				List<TConnection> connects = toAdd.getConnections();
				for(TConnection con : connects) {
					exists.addConnection(con);
				}
			}
				
		}
	}
"
1942,2aed54ad-0639-4995-a5b0-06aa4b58c488,"	public void removeNode(TNode toRemove) {
		if(toRemove != null) 
			for(TNode n : nodes)
				if(n.equals(toRemove))
					nodes.remove(n);
	}
"
1943,c33570db-1873-405d-aebe-decb44e352c6,"	public void addNodes(List<TNode> toAdd) {
		if (toAdd != null) {
			for(TNode n : toAdd)
				if(!hasNode(n))
					nodes.add(n);
		}
	}
"
1944,400824c7-5d84-4987-93d2-7177f80e8b6d,"	public boolean hasNode(String in) {
		boolean hasNode = false;
		for(TNode node : this.nodes) {
			if(node.getTitle().equalsIgnoreCase(in)) {
				hasNode = true;
				break;
			}
		}
		return hasNode;
	}
"
1945,a8c50c88-0e5c-47a9-b3c7-70fac5986ee3,"	public boolean hasNode(TNode in) {
		boolean hasNode = false;
		for (TNode node : this.nodes) {
			if (node.equals(in)) {
				hasNode = true;
				break;
			}
		}
		return hasNode;

	}
"
1946,ddf1998e-4768-4dd6-a90d-7b803b399d66,"	@Override
	public String toString() {
		String ret = """";
		if (nodes != null && nodes.size() > 0) {
			StringBuilder sb = new StringBuilder();
			List<TConnection> printed = new ArrayList<TConnection>();
			for (TNode n : nodes) {
				for (TConnection c : n.getConnections()) {
					if(!printed.contains(c))
						printed.add(c);
				}
			}
			for(TConnection c : printed) {
				sb.append(c + ""\n"");
			}
			ret = sb.toString();
		} else
			ret = ""Empty Tree"";
		return ret;
	}
"
1947,cbb31880-8d73-481a-8040-968f280f35fd,"	public TNode(String title) {
		this.title = title;
		connections = new ArrayList<TConnection>();
	}
"
1948,4bc612ee-8b89-4560-88e6-3f092bf15e17,"	public List<TConnection> getConnections() {
		return connections;
	}
"
1949,29e5473a-0739-482f-89a7-5c0cf42ea161,"	public String getTitle() {
		return title;
	}
"
1950,ef4fcdbe-ef7b-4d06-8981-16d8fa4d54d5,"	public void setTitle(String title) {
		this.title = title;
	}
"
1951,c0718740-5e36-408e-96a3-b7eb64865d7a,"	public void setConnections(List<TConnection> connections) {
		this.connections = connections;
	}
"
1952,275bd411-2dcb-49b1-a40f-ab2e77384a97,"	public void addConnection(TConnection t) {
		if (t != null)
			connections.add(t);
	}
"
1953,6285294a-0dde-463c-8dfe-9a4916d40982,"	private void trimConnections() {
//		List<String> toEndPoints = new ArrayList<String>();
//		List<String> dups = new ArrayList<String>();
//		for(TConnection t : connections) {
//			if(toEndPoints.contains(t.getTNodeTwo()) &&
//					!dups.contains(t.getTNodeTwo())) {
//				dups.add(t.getTNodeTwo());
//			} else {
//				toEndPoints.add(t.getTNodeTwo());
//			}
//		}
//		
//		for(String s : dups) {
//			List<TConnection> toTrim = new ArrayList<TConnection>();
//			for(TConnection connect : connections) {
//				if(connect.getTNodeTwo().equals(s)) 
//					toTrim.add(connect);
//			}
//			if(toTrim.size() > 0) {
//				int min = toTrim.get(0).getWeight();
//				for(TConnection connect : toTrim) {
//					if(connect.getWeight() < min) 
//						min = connect.getWeight();
//				}
//			}
//		}
	}
"
1954,c5d09519-05c9-4bb1-86a0-7e4e07aec731,"	@Override
	public String toString() {
		return this.getTitle();
	}
"
1955,f0f1e8db-4e4e-45a6-a381-d57a3cb7e646,"	public boolean equals(TNode o) {
		return o.getTitle().equals(this.title);
	}
"
1956,283287e7-f4b0-45a8-accc-c5ab9d7cbed5,"	public static TNode copyNode(TNode in) {
		TNode newNode = new TNode(in.getTitle());
		List<TConnection> connects = newNode.getConnections();
		for(TConnection c : connects) {
			newNode.addConnection(c);
		}
		
		return newNode;
	}
"
1957,e042fb71-151b-47c4-9595-2b3ca03e2d03,"	public TConnection() {}
"
1958,f84c9019-8338-413d-9569-7070ccefaf53,"	public TConnection(TNode one, String two, int weight) {
		this.TNodeOne = one;
		this.TNodeTwoTitle = two;
		this.weight = weight;
	}
"
1959,d27ca397-d206-4ce5-9ab8-30f8328c1332,"	public int getWeight() {
		return weight;
	}
"
1960,e63a2026-e2f7-40ad-8b59-fd8e06a7f9be,"	public void setWeight(int weight) {
		this.weight = weight;
	}
"
1961,64b782b7-0d45-48f0-aad0-bcaec9545ae5,"	public TNode getTNodeOne() {
		return TNodeOne;
	}
"
1962,f63f5446-e12d-4846-b8f3-6cedfde6bbf1,"	public void setTNodeOne(TNode tNodeOne) {
		TNodeOne = tNodeOne;
	}
"
1963,4ed97b79-2c4d-49c4-947c-13dba26e9451,"	public String getTNodeTwo() {
		return TNodeTwoTitle;
	}
"
1964,cccb87ac-7d9d-449c-8f05-e357db947780,"	public void setTNodeTwo(String in) {
		TNodeTwoTitle  = in;
	}
"
1965,ac550a7d-6cd0-49fa-99f8-be8361eb2084,"	public String notMe(TNode in) {
		String ret = """";
		if(TNodeOne.equals(in)) 
			ret = TNodeTwoTitle;
		else
			ret = TNodeOne.getTitle();
		return ret;
	}
"
1966,c4f43ca5-15fa-41d1-8da9-303204d87100,"	public TNode isMe(TNode in) {
		return TNodeOne;
	}
"
1967,2d54ad4c-25cf-4bd8-9078-b9f0e6e43b35,"	@Override 
	public String toString() {
		return TNodeOne + ""-""+this.weight
				+""-""+TNodeTwoTitle;
	}
"
1968,6d444bba-ec2c-42f2-b6f5-d48a88d31108,"	@Override
	public boolean equals(Object o) {
		boolean areEqual = true;
		if(o.getClass().equals(this.getClass())) {
			TConnection c = (TConnection)o;
			areEqual = (c.getTNodeOne().equals(this.getTNodeOne()) &&
					c.getTNodeTwo().equals(this.getTNodeTwo()) &&
							c.getWeight() == this.weight);
		}else 
			areEqual = false;
		return areEqual;
	}
"
1969,22a77d54-f320-4f99-b1f5-72ac97483ffb,"	public static TConnection makeCopy(TConnection in) {
		TConnection toRet = new TConnection();
		
		return toRet;
	}
"
1970,c5c12811-0780-4d6a-8c2e-5ade9a27e48e,"	public static void main(String[] args) {
		TTree input = TreeInput.getTreeFromConsole();
//		TTree input = TreeInput.getTreeFromFile();
		System.out.println(input);
		TTree output = new PrimSolution(input).solveTree();
		System.out.println(""Got to end"");
		System.out.println(output);
	}
"
1971,179b486c-510c-4f29-b4c0-c5facb80f91b,"	public PrimSolution(TTree inputTree) {
		this.tree = inputTree;
	}
"
1972,4fd8c470-774a-44af-a8b8-bb1b739704d0,"	public TTree getTree() {
		return tree;
	}
"
1973,1c907956-1821-435a-a4f5-dc8181d234ea,"	public void setTree(TTree tree) {
		this.tree = tree;
	}
"
1974,901d80ae-16ff-44ae-a003-34b5caf5264f,"	public TTree solveTree() {
		

		// Take a vertex (randomly)
		TNode first = tree.getNodes().get(0);
		List<TNode> solution = new ArrayList<TNode>();
		solution.add(first);

		while (solution.size() < tree.getNodes().size()) {

			TConnection lowest = new TConnection(null, null, Integer.MAX_VALUE);
			
			for (TNode n : solution) {
				for (TConnection c : n.getConnections()) {
					TNode temp = new TNode(c.getTNodeTwo());
					
					boolean solHasNode = solution.contains(temp);
					boolean weightLower = c.getWeight() < lowest.getWeight();
					if (!solHasNode && weightLower) {
						lowest = c;
						solution.add(TNode.copyNode(findNodeByName(lowest.getTNodeTwo())));
					}
				}
			}

		}
		TTree solved = new TTree();
		solved.addNodes(solution);
		return solved;
		
	}
"
1975,f5b077df-2e4c-442f-a2b1-ecd3e87fff17,"	private TNode findNodeByName(String name) {
		TNode ret = null;
		for (TNode n : tree.getNodes()) {
			if (n.getTitle().equalsIgnoreCase(name)) {
				ret = n;
				break;
			}
		}

		return ret;
	}
"
1976,c932eecb-020a-44fa-b265-4cf7fa8ba3cd,"	public static TTree getTreeFromConsole() {
		TTree tree = new TTree();

		System.out
				.println(""Please input connections in this tree in the following format:\n""
						+ "": Title-NumericalWeight-Title2 or a-2-b\nDo not add any spaces or numbers (other than the weight).""
						+ ""\nType 'stop' when you are finished entering connections"");

		Scanner scan = new Scanner(System.in);

		String input = """";
		while (!input.equalsIgnoreCase(""stop"")) {
			input = scan.nextLine();
			List<TConnection> connect = ConnectionInput
					.getConnectionFromString(input);

			for (TConnection c : connect) {
				tree.addNode(c.getTNodeOne());
			}

		}

		return tree;
	}
"
1977,8c9c44c6-b078-4af9-a0be-09b2d6bc07d9,"	public static int getInt(String prompt) {
		int ret = 0;
		Scanner s = new Scanner(System.in);
		int input = -1;
		while (input == -1) {
			System.out.println(prompt);
			try {
				input = Integer.parseInt(s.nextLine());
			} catch (IOError e) {
				System.out.println(e.getMessage());
			} catch (NumberFormatException e) {
				System.out.println(""Please input a valid positive integer"");

			} finally {
				s.close();
				s = new Scanner(System.in);
			}
		}
		return ret;
	}
"
1978,a4375874-735d-4389-b6a3-2d6b055c6cb8,"	public static String getString(String prompt) {
		String ret = null;
		Scanner s = new Scanner(System.in);
		while(ret == null) {
			System.out.println(prompt);
			ret = s.nextLine();
			if(ret.isEmpty())
				ret = null;
		}
		return ret;
	}
"
1979,e3d1fc7a-444b-43c6-b085-dc3467d66440,"	public static List<TConnection> getConnectionFromString(String input) {
		List<TConnection> returnConnections = new ArrayList<TConnection>();
		TConnection connectionOne = null;
		TConnection connectionTwo = null;
		if(input.matches(CONNECTION_PATTERN)) {
			String[] parts = input.split(""-"");
			connectionOne = new TConnection();
			connectionTwo = new TConnection();
			if(parts != null && parts.length == 3) {
				
				TNode one = new TNode(parts[0]);
				connectionOne.setTNodeOne(one);
				
				try {
					int weight = Integer.parseInt(parts[1]);
					connectionOne.setWeight(weight);
					connectionTwo.setWeight(weight);
				}catch (NumberFormatException e) {
					System.out.println(e.getMessage());
					connectionOne = null;
					connectionTwo = null;
				}
				
				TNode two = new TNode(parts[2]);
				connectionTwo.setTNodeOne(two);
				connectionTwo.setTNodeTwo(one.getTitle());
				connectionOne.setTNodeTwo(two.getTitle());
				
				one.addConnection(connectionOne);
				two.addConnection(connectionTwo);
				returnConnections.add(connectionOne);
				returnConnections.add(connectionTwo);
	
			}
		}
		
		return returnConnections;
	}
"
1980,00deb46b-846e-4053-bcf8-f6921484871b,"    @Before
    public void init() {
        fibonacciCalc = new FibCalcImpl();
    }
"
1981,39391e55-1bee-40ae-b922-7bb5bf00a3ae,"    @Test
    public void testFib() {
        assertEquals(55, fibonacciCalc.fib(10));
        assertEquals(6765, fibonacciCalc.fib(20));
    }
"
1982,273e4cc2-495c-451f-86ea-602d25a1be4c,"    public long fib(int n);
"
1983,cb259d54-7c15-466a-aa3e-b6a7edef3637,"    public PerformanceTestResult(long totalTime, long minTime, long maxTime) {
        this.totalTime = totalTime;
        this.minTime = minTime;
        this.maxTime = maxTime;
    }
"
1984,259e7ba0-a72b-4fa6-904a-bc932e9ee6f7,"    public long getMaxTime() {
        return maxTime;
    }
"
1985,682ba7dd-3170-400a-83ec-235df3d2f178,"    public long getMinTime() {
        return minTime;
    }
"
1986,011dfdc2-18b0-4d00-aa1f-81facdf5de4d,"    public long getTotalTime() {
        return totalTime;
    }
"
1987,057bb831-70dc-467e-b25e-c11423e0dbf3,"    public PerformanceTestResult runPerformanceTest(
            Runnable task,
            int executionCount,
            int threadPoolSize) throws InterruptedException;
"
1988,76a419c8-bf5c-46cc-894e-52c6688e1174,"    @Override
    public long fib(int n) {
        int[] fibArray = new int[n + 1];
        fibArray[0] = 0;
        fibArray[1] = 1;
        for (int i = 2; i < fibArray.length; i++) {
            fibArray[i] = fibArray[i - 1] + fibArray[i - 2];
        }
        return fibArray[fibArray.length - 1];
    }
"
1989,39d3496a-263d-469f-b627-974530a1e76a,"    public static void main(String[] args) throws InterruptedException {
        if (args.length != 3)
            throw new IllegalArgumentException(""Please provide valid parameters: fibonacci number, task quantity, threads quantity"");
        try {

            Integer n = Integer.valueOf(args[0]);
            Integer numberOfTasks = Integer.valueOf(args[1]);
            Integer threadQuantity = Integer.valueOf(args[2]);

            if (n <= 0 || numberOfTasks <= 0 || threadQuantity <= 0)
                throw new IllegalArgumentException(""All input parameters should be greater than 0"");

            startCalculation(n, numberOfTasks, threadQuantity);

        } catch (NumberFormatException ex) {
            throw new IllegalAccessError(""You have to provide integer numbers as a parameters"");
        }
    }
"
1990,2d452cc7-a96e-4c48-89fe-0730f5853964,"    public static void startCalculation(int n, int numberOfTasks, int threadsQuantity) throws InterruptedException {
        PerformanceTester performanceTester = new PerformanceTesterImpl();
        PerformanceTestResult performanceTestResult = performanceTester.runPerformanceTest(createRunnableTask(n),
                                                                                            numberOfTasks,
                                                                                            threadsQuantity);
        System.out.println(String.format(""Total execution time: %s"", performanceTestResult.getTotalTime()));
        System.out.println(String.format(""Minimum execution time: %s"", performanceTestResult.getMinTime()));
        System.out.println(String.format(""Maximum execution time: %s"", performanceTestResult.getMaxTime()));
    }
"
1991,f6d3da87-ce06-4fde-8c67-c0821afdca39,"    private static Runnable createRunnableTask(final int n) {
        return new Runnable() {
            @Override
            public void run() {
                FibCalc fibCalc = new FibCalcImpl();
                fibCalc.fib(n);
            }
        };
    }
"
1992,ffb35e3c-d5ae-4690-988e-8481ea2b629f,"            @Override
            public void run() {
                FibCalc fibCalc = new FibCalcImpl();
                fibCalc.fib(n);
            }
"
1993,8669c0ac-2c48-4aeb-add5-391d06bb8b78,"    @Override
    public PerformanceTestResult runPerformanceTest(Runnable task, int executionCount, int threadPoolSize) throws InterruptedException {
        return reduce(map(task, executionCount, threadPoolSize));
    }
"
1994,84c1f982-7057-427d-8471-8b7ff17a6a43,"    private Long[] map(final Runnable task, final int executionCount, int threadPoolSize) throws InterruptedException {
        final Map<Thread, Long[]> calculationResults = new HashMap<>();

        //Initialize working threads
        for (int i = 0; i < threadPoolSize; i++) {
            Thread thread = new Thread() {

                @Override
                public void run() {
                    Long[] calcs = calculationResults.get(this);
                    for (int j = 0; j < calcs.length; j++) {
                        long startTime = System.currentTimeMillis();
                        task.run();
                        calcs[j] = System.currentTimeMillis() - startTime;
                    }
                }
            };
            calculationResults.put(thread, new Long[executionCount]);
        }

        //Start jobs
        for (Thread thread : calculationResults.keySet()) {
            thread.start();
        }

        //Prepare results
        Long[] results = new Long[0];
        for (Map.Entry<Thread, Long[]> entry : calculationResults.entrySet()) {
            entry.getKey().join();
            results = ArrayUtils.addAll(results, entry.getValue());
        }
        return results;
    }
"
1995,f39550e3-088e-4af3-b0a2-7da7db1c84be,"                @Override
                public void run() {
                    Long[] calcs = calculationResults.get(this);
                    for (int j = 0; j < calcs.length; j++) {
                        long startTime = System.currentTimeMillis();
                        task.run();
                        calcs[j] = System.currentTimeMillis() - startTime;
                    }
                }
"
1996,768e4486-efac-4e94-9dcb-bc9e51b5f73c,"    private PerformanceTestResult reduce(Long[] values) {
        long totalTime = 0;
        long minTime = 0;
        long maxTime = 0;

        for (Long result : values) {
            totalTime += result;
            minTime = minTime==0 ? result : Math.min(result, minTime);
            maxTime = Math.max(result, maxTime);
        }

        return new PerformanceTestResult(totalTime, minTime, maxTime);
    }
"
1997,698c68cd-b3d0-477d-abb8-2f584309e841,"    public void setUp() throws Exception {
        Clock.setTime(1000);
        cache = new CacheMapImpl<>();
        cache.setTimeToLive(TIME_TO_LIVE);
    }
"
1998,41b6e520-57c6-43c1-8d57-4c8d42cfdb82,"    public void testExpiry() throws Exception {
        cache.put(1, ""apple"");
        assertEquals(""apple"", cache.get(1));
        assertFalse(cache.isEmpty());

        Clock.setTime(3000);
        assertNull(cache.get(1));
        assertTrue(cache.isEmpty());

    }
"
1999,523f1a59-6959-42f4-aca1-961f42d2d564,"    public void testSize() throws Exception {
        assertEquals(0, cache.size());

        cache.put(1, ""apple"");
        assertEquals(1, cache.size());

        Clock.setTime(3000);
        assertEquals(0, cache.size());
    }
"
2000,51f47f38-5f34-4df9-ae95-b60bc2025d3c,"    public void testPartialExpiry() throws Exception {
        //Add an apple, it will expire at 2000
        cache.put(1, ""apple"");
        Clock.setTime(1500);
        //Add an orange, it will expire at 2500
        cache.put(2, ""orange"");
        assertEquals(""apple"", cache.get(1));
        assertEquals(""orange"", cache.get(2));
        assertEquals(2, cache.size());

        //Set time to 2300 and check that only the apple has disappeared
        Clock.setTime(2300);
        assertNull(cache.get(1));
        assertEquals(""orange"", cache.get(2));
        assertEquals(1, cache.size());
    }
"
2001,f537ff3a-38ed-4220-8783-e10040af1a32,"    public void testPutReturnValue() {
        cache.put(1, ""apple"");
        assertNotNull(cache.put(1, ""banana""));

        Clock.setTime(3000);
        assertNull(cache.put(1, ""mango""));
    }
"
2002,49a6c06a-3135-4294-a592-d45042a3ff7b,"    public void testRemove() throws Exception {
        assertNull(cache.remove(1));

        cache.put(1, ""apple"");
        assertEquals(""apple"", cache.remove(1));
        assertNull(cache.get(1));
        assertEquals(0, cache.size());

    }
"
2003,4adbdd51-8022-4aed-896d-4deb2cbe8387,"    public void testContainsKeyAndContainsValue() {
        assertFalse(cache.containsKey(1));
        assertFalse(cache.containsValue(""apple""));
        assertFalse(cache.containsKey(2));
        assertFalse(cache.containsValue(""orange""));

        cache.put(1, ""apple"");
        assertTrue(cache.containsKey(1));
        assertTrue(cache.containsValue(""apple""));
        assertFalse(cache.containsKey(2));
        assertFalse(cache.containsValue(""orange""));

        Clock.setTime(3000);
        assertFalse(cache.containsKey(1));
        assertFalse(cache.containsValue(""apple""));
        assertFalse(cache.containsKey(2));
        assertFalse(cache.containsValue(""orange""));


    }
"
2004,ec4e9cd1-1b2a-4c26-a79a-e079e828e0c1,"    public static long getTime() {
        if (time == null) {
            return System.currentTimeMillis();
        } else {
            return time;
        }
    }
"
2005,a1fd1820-3600-4a27-9024-4cfd1c5c3d04,"    public static void setTime(long time) {
        Clock.time = time;
    }
"
2006,3b6ebe5c-9d25-4e7b-afde-a69acf8b970d,"    public static void clearTime() {
        Clock.time = null;
    }
"
2007,edb5fde4-3ce7-4b5d-b6e4-d9256f7b52b9,"    public Person(String name, String phoneNumber) {
        this.name = name;
    }
"
2008,c57ceff2-cd88-4a82-baff-c538200688b7,"    public String getName() {
        return name;
    }
"
2009,337e5f1d-c2ae-4073-b771-af5ddd8679ca,"    public void setName(String name) {
        name = name;
    }
"
2010,311d4df1-c08c-453b-8d29-c7139c127486,"    public String getPhoneNumber() {
        return phoneNumber;
    }
"
2011,159e02f4-5241-42a7-b911-6d08cac74817,"    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }
"
2012,f41efda4-e71c-4384-a4fa-e7c13d369103,"    public boolean hasMobile(String name) {
        final Person person = addressDb.findPerson(name);
        return person != null && hasSwissMobileNumber(person);
    }
"
2013,0780f6d4-abca-4c54-a81a-a69f877a810c,"    public int getSize() {
        return addressDb.getAll().size();
    }
"
2014,29324baa-3f2b-44b4-9206-2a39e6b3da4d,"    public String getMobile(String name) {
        Person person = addressDb.findPerson(name);
        return hasMobile(name) ? person.getPhoneNumber() : null;
    }
"
2015,443a4ba6-d6a0-41b9-a0df-8c6c97344e7d,"    public List getNames(int maxLength) {
        List<String> names = new LinkedList<>();
        for (Person person : addressDb.getAll()) {
            String name = person.getName();
            if (name.length() > maxLength) {
                names.add(name.substring(0, maxLength));
            }
        }
        return names;
    }
"
2016,38c29f4e-89a0-4fcc-a9b6-4e563cc58b03,"    public List getList() {
        List<Person> listOfPersonWithMobilePhones = new LinkedList<>();
        for (Person person : addressDb.getAll()) {
            if (hasMobile(person.getName())) {
                listOfPersonWithMobilePhones.add(person);
            }
        }
        return listOfPersonWithMobilePhones;
    }
"
2017,fb10bf4a-fb2c-4c9a-a128-d771af6c861d,"    private boolean hasSwissMobileNumber(Person person) {
        return person.getPhoneNumber().startsWith(SWISS_CODE);
    }
"
2018,46f79841-7343-402d-b98a-3efe529acc3b,"    public static AddressDb getInstance() {
        if (instance == null) {
            synchronized (AddressDb.class) {
                if (instance == null) {
                    instance = new AddressDb();
                }
            }
        }
        return instance;
    }
"
2019,8610a30b-9930-401b-a371-04188ec65fc0,"    private AddressDb() {
        try {
            Class.forName(JDBC_DRIVER);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }
"
2020,00a7616b-6dd6-40d3-86bf-a46d4c855e8b,"    public void addPerson(Person person) {
        if (person == null) return;
        try (
                Connection connection = getDBConnection();
                PreparedStatement statement = connection.prepareStatement(ADD_PERSON_QUERY)
        ) {
            statement.setLong(1, System.currentTimeMillis());
            statement.setString(2, person.getName());
            statement.setString(3, person.getPhoneNumber());
            statement.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
"
2021,5641d058-b327-47b4-b6c1-14f1bf8a891f,"    public Person findPerson(String name) {
        if (name == null) return null;
        try (
                Connection connection = getDBConnection();
                PreparedStatement statement = connection.prepareStatement(FIND_PERSON_QUERY)
        ) {
            ResultSet personResultSet = statement.executeQuery();
            return personResultSet.next() ? getPersonFromResultSet(personResultSet) : null;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
"
2022,b56463ba-153f-43ee-9006-950cf5a7ea8e,"    public List<Person> getAll() {
        try (
                Connection connection = getDBConnection();
                PreparedStatement statement = connection.prepareStatement(GET_ALL_PEOPLE_QUERY)
        ) {
            List<Person> entries = new LinkedList<>();
            ResultSet personResultSet = statement.executeQuery();
            while (personResultSet.next()) {
                entries.add(getPersonFromResultSet(personResultSet));
            }
            return entries;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
"
2023,05ff2e78-b38d-496f-b539-4ef1beb936a1,"    private Connection getDBConnection() throws SQLException {
        return DriverManager.getConnection(DB_CONNECTION_URI, DB_CONNECTION_USERNAME, DB_CONNECTION_PASSWORD);
    }
"
2024,57cf6524-f0b0-4089-86bd-3ce4ebb8e6f0,"    private Person getPersonFromResultSet(ResultSet personResultSet) throws SQLException {
        String name = personResultSet.getString(NAME_COLUMN);
        String phoneNumber = personResultSet.getString(PHONE_NUMBER_COLUMN);
        return new Person(name, phoneNumber);
    }
"
2025,054c26c1-2e54-4e7e-96f2-500046f7c917,"	private Rating(int ratingVal) {
		this.ratingVal = ratingVal;
	}
"
2026,7836177c-a430-4d7b-ae65-2cd5ee46172a,"	public int getRatingVal() {
		return ratingVal;
	}
"
2027,8e8211cc-b3ca-4a47-90ba-dbfbeebc3ec8,"	@Override
	public String toString() {
		return metricValue + "" "" + metric + "" "" + label;
	}
"
2028,3b1a2a41-8ce3-4d7c-bd92-0f55fbdb2df7,"	private Metric(String name) {
		this.name = name;
	}
"
2029,9410f307-a988-4e1c-b4ad-b66d3e12c8a2,"	public String getName() {
		return name;
	}
"
2030,38b1837e-7397-4236-acd4-cac65341913c,"	public T getById(int id);
"
2031,9f42df02-4403-409c-9e2d-bc1850f3f474,"	public List<T> getAll();
"
2032,e99090e2-6fd3-46e7-bed6-9db727bdd607,"	public void store(T t);
"
2033,5805f9d2-a988-4b92-b3b3-781db759b247,"	public void update(T t);
"
2034,b7eaf5d9-e4f8-4a6d-87dd-55cceed05d2d,"	public void delete(T t);
"
2035,f22f7d30-2dfb-40f1-b71e-295b0ccf76e3,"	public void deleteByID(int id);
"
2036,16462f3c-df9f-447c-aec7-7e42d8c029f2,"	public Recipe getById(int recipeId) {
		return entityManager.find(Recipe.class, recipeId);
	}
"
2037,64465214-dca1-477d-af09-0a306280a611,"	public List<Recipe> getWithIngredients(Ingredient[] ingredients) {
		Query withIngredientsQuery = entityManager
				.createNamedQuery(""Recipe.withIngredients"");
		for (Ingredient ingredient : ingredients) {
			withIngredientsQuery.setParameter(""ingreds"", ingredient.getLabel());
		}
		List<Recipe> recipes = withIngredientsQuery.getResultList();
		log.debug(""{} recipes with the ingredients ({}) found."", recipes.size(), ingredients);
		return null;
	}
"
2038,c56d97dd-7265-40c4-a98a-b993dc730689,"	public void store(Recipe recipe) {
		entityManager.persist(recipe);
		entityManager.flush();
	}
"
2039,3b819e21-c82b-4e9b-9674-24c9a499fc99,"	public void update(Recipe recipe) {
		entityManager.merge(recipe);
	}
"
2040,63866b4d-43f9-4b22-a71e-1686cc9ad8f9,"	public void delete(Recipe recipe) {
		Recipe recipeToRemove = recipe;
		if (!entityManager.contains(recipe)) {
			recipeToRemove = entityManager.merge(recipe);
		}
		entityManager.remove(recipeToRemove);

	}
"
2041,f3f859a0-282f-414a-9058-5bbd44ee8588,"	public void deleteByID(int recipeId) {
		delete(getById(recipeId));

	}
"
2042,c021a3e9-9c84-4a16-9090-6961707ac09f,"	public List<Recipe> getAll() {
		return entityManager.createQuery(""SELECT r FROM Recipe r"").getResultList();
	}
"
2043,6c419832-3a52-433f-b07c-3301fac19cbb,"	@PostConstruct
	public void init() {
		String id = FacesContext.getCurrentInstance().getExternalContext()
				.getRequestParameterMap().get(""id"");
		recipe = recipeDataService.getById(Integer.valueOf(id));
	}
"
2044,eff143e2-ae3c-49f5-af2c-977b11671e4c,"	public static void main(String args[]){
		Player player = new Player();
		int player_health = player.getHealth();
		
		Monster monster = new Monster();
		int monster_health = monster.getMonsterHealth();
		
		Attack attack = new Attack();
		int special_attack = attack.getSepcialAttack();
		
		//Game loop
		boolean running = true;
		
		//User Options
		String user_option = """";
		String attack_option = """";
		String potion_option = """";
		String restart_option = """";
		
		//Potions
		Potions potions = new Potions();
		int weak_potion = potions.getWeakPotion();
		int weak_count = 5;
		
		int strong_potion = potions.getStrongPotion();
		int strong_count = 3;
		
		int super_potion = potions.getSuperPotion();
		int super_count = 1;
		
		while(running){
			System.out.println(""1 --> Attack Monster!\n""
					         + ""2 --> Run Away like a chicken!\n""
					         + ""3 --> QUIT THE DAMN GAME!!!"");
			user_option = input.nextLine();
			
			if (user_option.equals(""1"")){
				while(player_health > 0 || monster_health > 0){
					System.out.println(""1 --> Attack\n""
							         + ""2 --> Special Attack\n""
							         + ""3 --> Drink Health Potion"");
					attack_option = input.nextLine();
					
					if (attack_option.equals(""1"")){
						//Attack
						player_health = attack.monsterDamage(player_health);
						monster_health = attack.playerDamage(monster_health);
						System.out.printf(""Player Health: %d\n""
								        + ""Monster Health: %d\n"", attack.monsterDamage(player_health), attack.playerDamage(monster_health));
						
					}
					
					else if (attack_option.equals(""2"")){
						//Special Attack
						if (special_attack > 0){
							special_attack -= 25;
							
							player_health = attack.monsterDamage(player_health);
							monster_health = attack.playerSpecialDamage(monster_health);
							
							System.out.printf(""Player Health: %d\n""
							        + ""Monster Health: %d\n"", player_health, monster_health);
						}
						
						else {
							System.out.println(""Let your special attack recharge!"");
						}
					}
					
					//Potion Option
					else if (attack_option.equals(""3"")){
						System.out.println(""1 --> Weak Health Potion (Restore 10 health)\n""
								         + ""2 --> Strong Health Potion (Restore 20 health)\n""
								         + ""3 --> Super Health Potion (Restore 50 health)\n""
								         + ""4 --> Quit"");
						potion_option = input.nextLine();
						
						while (!potion_option.equals(""4"")){
							
							if (potion_option.equals(""1"")){
								//Weak Health Potion
								if (weak_count > 0){
									weak_count -= 1;
									
									player_health += weak_potion;
									System.out.println(player_health);
									break;
								}
								
								else {
									System.out.println(""You have run out of Weak Health Potion"");
									break;
								}
							}
							
							else if (potion_option.equals(""2"")){
								//Strong Health Potion
								if (strong_count > 0){
									strong_count -= 1;
									
									player_health += strong_potion;
									System.out.println(player_health);
									break;
								}
								
								else {
									System.out.println(""You have run out of Strong Health Potion."");
									break;
								}
							}
							
							else if (potion_option.equals(""3"")){
								//Super Health Potion
								if (super_count > 0){
									super_count -= 1;
									
									player_health += super_potion;
									System.out.println(player_health);
									break;
								}
								
								else {
									System.out.println(""You have run out of Super Health Potion."");
									break;
								}
							}
							
							else if (potion_option.equals(""4"")){
								break;
							}
							
							else {
								System.out.println(""1 --> Weak Health Potion (10)\n""
								         + ""2 --> Strong Health Potion (20)\n""
								         + ""3 --> Super Health Potion (50)\n""
								         + ""4 --> Quit"");
								potion_option = input.nextLine();
							}	
						}
						if (monster_health < 0 || player_health < 0){
							break;
						}
					} // End of User Option 3
					
					//Restart the game
					if (monster_health < 0){
						System.out.println(""You Won! Would you like to restart?\n""
								         + ""1 --> Yes\t2 --> No"");
						restart_option = input.nextLine();
						
						if (restart_option.equals(""1"")){
							//Yes
							player_health = 100;
							player.setHealth(player_health);
							
							monster_health = 100;
							monster.setMonsterHealth(monster_health);
							
							weak_count = 5;
							strong_count = 3;
							super_count = 1;
							
							attack.setSepcialAttack(50);
						}
						
						else if (restart_option.equals(""2"")){
							//No
							System.out.println(""Thank you for playing an awesome game!"");
							running = false;
							break;
						}
						
						else {
							//If user does not enter valid text
							System.out.println(""You Won! Would you like to restart?\n""
							         + ""1 --> Yes\t2 --> No"");
							restart_option = input.nextLine();
						}
					}
					
					else if (player_health < 0){
						System.out.println(""You Lost! Would you like to restart?\n""
								         + ""1 --> Yes\t2 --> No"");
						restart_option = input.nextLine();
						
						if (restart_option.equals(""1"")){
							//Yes
							player_health = 100;
							player.setHealth(player_health);
							
							monster_health = 100;
							monster.setMonsterHealth(monster_health);
							
							weak_count = 5;
							strong_count = 3;
							super_count = 1;
							
							attack.setSepcialAttack(50);
						}
						
						else if(restart_option.equals(""2"")){
							System.out.println(""Thank you for playing an awesome game!"");
							running = false;
							break;
							
						}
					}
				} // End of Combat Loop
			}	
		
		else if (user_option.equals(""2"")){
			//Run away like a chicken
			System.out.println(""You run away like a chiekn!"");
			running = false;
		}
		
		else if (user_option.equals(""3"")){
			System.out.println(""You successfully closed the game!"");
			running = false;
		}
			
			else {
				System.out.println(""1 --> Attack Monster!\n""
				         + ""2 --> Run Away like a chicken!\n""
				         + ""3 --> QUIT THE DAMN GAME!!!"");
				user_option = input.nextLine();
				
			}
		}
	}
"
2045,b2aff49a-7b1a-4839-b884-e131fb98b98c,"	public Player(String name, int health, int special){
		this.name = name;
		this.health = health;
		this.special = special;
	}
"
2046,67031c7b-2418-45d2-b8cb-f65a8dec9df2,"	public Player(String name){
		this(name, 100, 50);
	}
"
2047,741230b4-a8a9-4423-b561-15f2bc2f53b4,"	public Player(){
		this(""No Name"", 100, 50);
	}
"
2048,5103eb3d-8a2d-486d-9ddc-b9323870929d,"	public void setName(String name){
		this.name = name;
	}
"
2049,c9e60ea0-1fe7-4996-af43-5802e3f0d08e,"	public String getName(){
		return name;
	}
"
2050,5d61dd77-ea90-4c35-ad57-f8280d944ea6,"	public void setHealth(int health){
		this.health = health;
	}
"
2051,d3f7b5e8-d9f3-4cff-b921-550dbebaa774,"	public int getHealth(){
		return health;
	}
"
2052,83607ff9-d369-49f5-9d78-c05b497c95dd,"	public void setSpecial(int special){
		this.special = special;
	}
"
2053,e7307442-e536-47ea-9970-6f1aa4814d09,"	public int getSpecial(){
		return special;
	}
"
2054,248a6b6f-9e40-4f2b-a39e-6ab5bc143ffa,"	public int  playerDamage(int monster_health){
		int player_dmg = rand.nextInt(PLAYERATTACK);
		monster_health -= player_dmg;
		return monster_health;
	}
"
2055,a75dede2-8db3-4143-b80a-c7ba4b510131,"	public int playerSpecialDamage(int monster_health){
		int player_dmg = rand.nextInt(PLAYERATTACK) + 15;
		monster_health -= player_dmg;	
		return monster_health;
	}
"
2056,8acaf821-c352-4eb6-b64e-6df32f6910de,"	public int monsterDamage(int player_health){
		int monster_dmg = rand.nextInt(MONSTERATTACK);
		player_health -= monster_dmg;
		return player_health;
	}
"
2057,cff30621-c5ee-493e-bad0-38feb982f2d9,"	public void setSepcialAttack(int special_attack){
		this.special_attack = special_attack;
	}
"
2058,48afb6e3-d777-49c3-a46f-325fa8b72157,"	public int getSepcialAttack(){
		return special_attack;
	}
"
2059,d1c43f5b-66db-4f93-aea9-7e0659823e43,"	public void setWeakPotion(int weak_potion){
		this.weak_potion = weak_potion;
	}
"
2060,4418a1b0-baa3-4835-ad0c-9cd9d52956c8,"	public void setStrongPotion(int strong_potion){
		this.strong_potion = strong_potion;
	}
"
2061,9adbfbb1-2e17-4d35-a9da-9f42db6f63d7,"	public void setSuperPotion(int super_potion){
		this.super_potion = super_potion;
	}
"
2062,374617e3-be8d-4053-a170-fd236dad3c60,"	public int getWeakPotion(){
		return weak_potion;
	}
"
2063,0d2b6bcb-06b5-4b74-a706-8156de718a7f,"	public int getStrongPotion(){
		return strong_potion;
	}
"
2064,6cb308be-b087-47e7-ba44-62c6030e1494,"	public int getSuperPotion(){
		return super_potion;
	}
"
2065,f354cb9c-ccf7-4d8c-84c7-32aed1d97758,"	public Monster(){
		this(getMonsterName(), 100, level);
	}
"
2066,2c80930c-109b-4c88-abd3-59eca0a57616,"	public Monster(String name, int health, int level) {
		this.name = name;
		this.health = health;
		this.level = level;
	}
"
2067,de8b4658-d69b-4ac8-8b66-db04bc58919a,"	public static String getMonsterName(){
		Vector<String> monsterlist = new Vector<String>();
		Random rand = new Random();
		int select = rand.nextInt(3);
		
		monsterlist.add(""Skeleton"");
		monsterlist.add(""Spider"");
		monsterlist.add(""Snake"");
		
		return monsterlist.get(select);
		
	}
"
2068,90c955ac-901d-4536-9118-bf1fcb88e1e8,"	public void setMonsterName(String name){
		this.name = name;
	}
"
2069,49b360fe-fcc0-4b4f-bdab-499820538a25,"	public void setMonsterHealth(int health){
		this.health = health;
	}
"
2070,456a4842-d7b2-46e1-88e0-99de0d7718ec,"	public int getMonsterHealth(){
		return health;
	}
"
2071,29cca83c-f49b-44f2-a4a0-c51632340b8b,"	public void setMonsterLevel(int level){
		this.level = level;
	}
"
2072,5cf5aad1-ec3b-4a9b-ae8d-b1d665c62986,"	public int getMonsterLevel(){
		return level;
	}
"
2073,895b6b21-b282-4cfb-90e5-b175964207dc,"    public Metrics(final Plugin plugin) throws IOException {
        if (plugin == null) {
            throw new IllegalArgumentException(""Plugin cannot be null"");
        }

        this.plugin = plugin;

        configurationFile = getConfigFile();
        configuration = YamlConfiguration.loadConfiguration(configurationFile);

        configuration.addDefault(""opt-out"", false);
        configuration.addDefault(""guid"", UUID.randomUUID().toString());
        configuration.addDefault(""debug"", false);

        if (configuration.get(""guid"", null) == null) {
            configuration.options().header(""http://mcstats.org"").copyDefaults(true);
            configuration.save(configurationFile);
        }

        guid = configuration.getString(""guid"");
        debug = configuration.getBoolean(""debug"", false);
    }
"
2074,e6dd8fd8-5a4a-4ea3-a3a1-50c4f644e452,"    public Graph createGraph(final String name) {
        if (name == null) {
            throw new IllegalArgumentException(""Graph name cannot be null"");
        }

        final Graph graph = new Graph(name);

        graphs.add(graph);

        return graph;
    }
"
2075,f5c5a673-31de-4b53-ba26-01145eb81be0,"    public void addGraph(final Graph graph) {
        if (graph == null) {
            throw new IllegalArgumentException(""Graph cannot be null"");
        }

        graphs.add(graph);
    }
"
2076,416dee57-7462-4cc2-91cf-246a2437c548,"    public void addCustomData(final Plotter plotter) {
        if (plotter == null) {
            throw new IllegalArgumentException(""Plotter cannot be null"");
        }

        defaultGraph.addPlotter(plotter);

        graphs.add(defaultGraph);
    }
"
2077,df903aa1-42c1-4a6b-b0bf-68d5749072e9,"    public boolean start() {
        synchronized (optOutLock) {
            if (isOptOut()) {
                return false;
            }

            if (task != null) {
                return true;
            }

            task = plugin.getServer().getScheduler().runTaskTimerAsynchronously(plugin, new Runnable() {
                private boolean firstPost = true;

                public void run() {
                    try {
                        synchronized (optOutLock) {
                            if (isOptOut() && task != null) {
                                task.cancel();
                                task = null;
                                for (Graph graph : graphs) {
                                    graph.onOptOut();
                                }
                            }
                        }

                        postPlugin(!firstPost);

                        firstPost = false;
                    } catch (IOException e) {
                        if (debug) {
                            Bukkit.getLogger().log(Level.INFO, ""[Metrics] "" + e.getMessage());
                        }
                    }
                }
            }, 0, PING_INTERVAL * 1200);

            return true;
        }
    }
"
2078,e63e2ccb-2b2d-4d40-86ec-c864abd9eac0,"                public void run() {
                    try {
                        synchronized (optOutLock) {
                            if (isOptOut() && task != null) {
                                task.cancel();
                                task = null;
                                for (Graph graph : graphs) {
                                    graph.onOptOut();
                                }
                            }
                        }

                        postPlugin(!firstPost);

                        firstPost = false;
                    } catch (IOException e) {
                        if (debug) {
                            Bukkit.getLogger().log(Level.INFO, ""[Metrics] "" + e.getMessage());
                        }
                    }
                }
"
2079,2f136ff8-098e-42fe-a74a-3016c23db944,"    public boolean isOptOut() {
        synchronized (optOutLock) {
            try {
                configuration.load(getConfigFile());
            } catch (IOException ex) {
                if (debug) {
                    Bukkit.getLogger().log(Level.INFO, ""[Metrics] "" + ex.getMessage());
                }
                return true;
            } catch (InvalidConfigurationException ex) {
                if (debug) {
                    Bukkit.getLogger().log(Level.INFO, ""[Metrics] "" + ex.getMessage());
                }
                return true;
            }
            return configuration.getBoolean(""opt-out"", false);
        }
    }
"
2080,831d10ea-bb76-4a07-b9da-bf174b11cf4d,"    public void enable() throws IOException {
        synchronized (optOutLock) {
            if (isOptOut()) {
                configuration.set(""opt-out"", false);
                configuration.save(configurationFile);
            }

            if (task == null) {
                start();
            }
        }
    }
"
2081,3f7ba4ae-8628-473c-a332-783c83d8e89d,"    public void disable() throws IOException {
        synchronized (optOutLock) {
            if (!isOptOut()) {
                configuration.set(""opt-out"", true);
                configuration.save(configurationFile);
            }

            if (task != null) {
                task.cancel();
                task = null;
            }
        }
    }
"
2082,e5a01cfe-751a-4b6c-b6bd-6a99020cb77b,"    public File getConfigFile() {
        File pluginsFolder = plugin.getDataFolder().getParentFile();

        return new File(new File(pluginsFolder, ""PluginMetrics""), ""config.yml"");
    }
"
2083,7f4ba4a3-458d-450e-9967-2e10073efd0d,"    private void postPlugin(final boolean isPing) throws IOException {
        PluginDescriptionFile description = plugin.getDescription();
        String pluginName = description.getName();
        boolean onlineMode = Bukkit.getServer().getOnlineMode();
        String pluginVersion = description.getVersion();
        String serverVersion = Bukkit.getVersion();
        int playersOnline = Bukkit.getServer().getOnlinePlayers().length;

        final StringBuilder data = new StringBuilder();

        data.append(encode(""guid"")).append('=').append(encode(guid));
        encodeDataPair(data, ""version"", pluginVersion);
        encodeDataPair(data, ""server"", serverVersion);
        encodeDataPair(data, ""players"", Integer.toString(playersOnline));
        encodeDataPair(data, ""revision"", String.valueOf(REVISION));

        String osname = System.getProperty(""os.name"");
        String osarch = System.getProperty(""os.arch"");
        String osversion = System.getProperty(""os.version"");
        String java_version = System.getProperty(""java.version"");
        int coreCount = Runtime.getRuntime().availableProcessors();

        if (osarch.equals(""amd64"")) {
            osarch = ""x86_64"";
        }

        encodeDataPair(data, ""osname"", osname);
        encodeDataPair(data, ""osarch"", osarch);
        encodeDataPair(data, ""osversion"", osversion);
        encodeDataPair(data, ""cores"", Integer.toString(coreCount));
        encodeDataPair(data, ""online-mode"", Boolean.toString(onlineMode));
        encodeDataPair(data, ""java_version"", java_version);

        if (isPing) {
            encodeDataPair(data, ""ping"", ""true"");
        }

        synchronized (graphs) {
            final Iterator<Graph> iter = graphs.iterator();

            while (iter.hasNext()) {
                final Graph graph = iter.next();

                for (Plotter plotter : graph.getPlotters()) {
                    final String key = String.format(""C%s%s%s%s"", CUSTOM_DATA_SEPARATOR, graph.getName(), CUSTOM_DATA_SEPARATOR, plotter.getColumnName());

                    final String value = Integer.toString(plotter.getValue());

                    encodeDataPair(data, key, value);
                }
            }
        }

        URL url = new URL(BASE_URL + String.format(REPORT_URL, encode(pluginName)));

        URLConnection connection;

        if (isMineshafterPresent()) {
            connection = url.openConnection(Proxy.NO_PROXY);
        } else {
            connection = url.openConnection();
        }

        connection.setDoOutput(true);

        final OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
        writer.write(data.toString());
        writer.flush();

        final BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        final String response = reader.readLine();

        writer.close();
        reader.close();

        if (response == null || response.startsWith(""ERR"")) {
            throw new IOException(response);
        } else {
            if (response.contains(""OK This is your first update this hour"")) {
                synchronized (graphs) {
                    final Iterator<Graph> iter = graphs.iterator();

                    while (iter.hasNext()) {
                        final Graph graph = iter.next();

                        for (Plotter plotter : graph.getPlotters()) {
                            plotter.reset();
                        }
                    }
                }
            }
        }
    }
"
2084,58f360c8-2717-4626-9bca-4b919cd51ad2,"    private boolean isMineshafterPresent() {
        try {
            Class.forName(""mineshafter.MineServer"");
            return true;
        } catch (Exception e) {
            return false;
        }
    }
"
2085,baef3c87-90b3-492b-91fd-b8e057f3f31f,"    private static void encodeDataPair(final StringBuilder buffer, final String key, final String value) throws UnsupportedEncodingException {
        buffer.append('&').append(encode(key)).append('=').append(encode(value));
    }
"
2086,c4ef34dc-18d2-4b3f-8468-ad52cc962448,"    private static String encode(final String text) throws UnsupportedEncodingException {
        return URLEncoder.encode(text, ""UTF-8"");
    }
"
2087,a4a600c2-78bc-4bfd-b3dc-2533337de17e,"        private Graph(final String name) {
            this.name = name;
        }
"
2088,a367a4d0-1882-4eab-9a68-dd14293133a4,"        public String getName() {
            return name;
        }
"
2089,f5923178-7fa3-4fc2-bd46-e7b9cd730f09,"        public void addPlotter(final Plotter plotter) {
            plotters.add(plotter);
        }
"
2090,1c1824fc-d9b9-4ef4-b828-581a475aad8f,"        public void removePlotter(final Plotter plotter) {
            plotters.remove(plotter);
        }
"
2091,5dda02a9-004d-486c-8dee-9731b3a45c93,"        public Set<Plotter> getPlotters() {
            return Collections.unmodifiableSet(plotters);
        }
"
2092,0378aaad-2dcf-4b4f-a3ab-c99a04a11668,"        @Override
        public int hashCode() {
            return name.hashCode();
        }
"
2093,1d9816a8-ddab-499c-992c-771705766890,"        @Override
        public boolean equals(final Object object) {
            if (!(object instanceof Graph)) {
                return false;
            }

            final Graph graph = (Graph) object;
            return graph.name.equals(name);
        }
"
2094,356a5622-0d54-4505-a939-2d666a5d0d74,"        protected void onOptOut() {
        }
"
2095,2a83c278-d299-49ce-947f-88aa74d2ae94,"        public Plotter() {
            this(""Default"");
        }
"
2096,09365888-103c-41ca-924f-e65c39a1c8a5,"        public Plotter(final String name) {
            this.name = name;
        }
"
2097,87168e9f-f01c-4a58-ad50-d30ce45bf531,"        public abstract int getValue();
"
2098,809da670-993a-4141-af22-1d855512776e,"        public String getColumnName() {
            return name;
        }
"
2099,fac02cc8-2c39-45e9-8b1f-5374b41cdf12,"        public void reset() {
        }
"
2100,2953a33b-c9cd-4016-9de5-3845430521c2,"        @Override
        public int hashCode() {
            return getColumnName().hashCode();
        }
"
2101,18b759d2-cb22-4ad1-834b-0c033beee92c,"        @Override
        public boolean equals(final Object object) {
            if (!(object instanceof Plotter)) {
                return false;
            }

            final Plotter plotter = (Plotter) object;
            return plotter.name.equals(name) && plotter.getValue() == getValue();
        }
"
2102,b9cab2b7-7458-46c5-921f-28c91f72fbcc,"    public Listeners(Censornizer main) {
        this.main = main;
    }
"
2103,1a38e5fe-5d52-4e15-8861-f7552ae8bd7e,"    @EventHandler
    public void onPlayerCommand(PlayerCommandPreprocessEvent event) {
        if (main.getConfig().getBoolean(""Config.CheckCommands"", true)) {
            Player p = event.getPlayer();
            String space = null;
            if (!p.hasPermission(""censornizer.bypass"")) {
                String msg = event.getMessage().toLowerCase();
                if (main.getConfig().getBoolean(""Config.checkWithoutSpaces"", true)) {
                    space = msg.replaceAll("" "", """");
                } else {
                    space = msg;
                }

                if (main.getConfig().getBoolean(""Config.UseBanlist"", true)) {
                    for (int i = 0; i < main.bancommands.size(); i++) {
                        if (space.contains(main.bancommands.get(i))) {
                            p.kickPlayer(main.getConfig().getString(""Messages.banmsg"").replaceAll(""&((?i)[0-9a-fk-or])"", ""§$1""));
                            p.setBanned(true);
                            return;
                        }
                    }
                }

                for (int i = 0; i < main.white.size(); i++) {
                    if (space.contains(main.white.get(i))) {
                        return;
                    }
                }

                for (int i = 0; i < main.blacklist.size(); i++) {
                    if (main.getConfig().getString(""Config.Punishment"").equalsIgnoreCase(""replace"")) {
                        String replace = main.getConfig().getString(""Config.replace.word"");
                        if (space.contains(main.blacklist.get(i))) {
                            msg = msg.replace(main.blacklist.get(i), replace);
                            event.setMessage(msg);
                        }
                    }
                    if (main.getConfig().getString(""Config.Punishment"").equalsIgnoreCase(""kick"")) {
                        if (space.contains(main.blacklist.get(i))) {
                            event.setCancelled(true);
                            p.kickPlayer(main.getConfig().getString(""Messages.kickmsg"").replaceAll(""&((?i)[0-9a-fk-or])"", ""§$1""));
                        }
                    }
                    if (main.getConfig().getString(""Config.Punishment"").equalsIgnoreCase(""mute"")) {
                        if (space.contains(main.blacklist.get(i))) {
                            if (!main.map.containsKey(p.getName())) {
                                main.map.put(p.getName(), System.currentTimeMillis());
                            }
                        }
                    }
                }
            }
        }
    }
"
2104,c3baf369-d359-4f08-a782-09bf343ec36f,"    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerChat(AsyncPlayerChatEvent event) {
        Player p = event.getPlayer();
        if (!p.hasPermission(""censornizer.bypass"")) {
            String msg = event.getMessage().toLowerCase();
            if (main.getConfig().getBoolean(""Config.checkWithoutSpaces"", true)) {
                msg = msg.replaceAll("" "", """");
            }

            if (main.getConfig().getBoolean(""Config.UseBanlist"", true)) {
                for (int i = 0; i < main.bancommands.size(); i++) {
                    if (msg.contains(main.bancommands.get(i))) {
                        p.kickPlayer(main.getConfig().getString(""Messages.banmsg"").replaceAll(""&((?i)[0-9a-fk-or])"", ""§$1""));
                        p.setBanned(true);
                        return;
                    }
                }
            }

            for (int i = 0; i < main.white.size(); i++) {
                if (msg.contains(main.white.get(i))) {
                    return;
                }
            }

            for (int i = 0; i < main.blacklist.size(); i++) {
                if (main.getConfig().getString(""Config.Punishment"").equalsIgnoreCase(""replace"")) {
                    String replace = main.getConfig().getString(""Config.replace.word"");
                    msg = msg.replace(main.blacklist.get(i), replace);
                    event.setMessage(msg);
                } else if (main.getConfig().getString(""Config.Punishment"").equalsIgnoreCase(""kick"")) {
                    if (msg.contains(main.blacklist.get(i))) {
                        p.kickPlayer(main.getConfig().getString(""Messages.kickmsg"").replaceAll(""&((?i)[0-9a-fk-or])"", ""§$1""));
                        event.setCancelled(true);
                    }
                } else if (main.getConfig().getString(""Config.Punishment"").equalsIgnoreCase(""mute"")) {
                    if (msg.contains(main.blacklist.get(i))) {
                        if (!main.map.containsKey(p.getName())) {
                            main.map.put(p.getName(), System.currentTimeMillis());
                        }
                    }
                } else {
                    return;
                }
            }
            Player player = event.getPlayer();
            if (main.map.containsKey(player.getName())) {
                long diff = (System.currentTimeMillis() - main.map.get(p.getName())) / 1000;
                if (diff < main.mutetime) {
                    String mutemsg = main.getConfig().getString(""Messages.mutemsg"");
                    p.sendMessage(main.format(mutemsg).replaceAll(""%duration%"", String.valueOf(main.mutetime)));
                    event.setCancelled(true);
                } else {
                    main.map.remove(player.getName());
                }
            }
            if (main.getConfig().getBoolean(""Config.BlockIPs"", true)) {
                String[] domains = getDomains();
                for (int i = 0; i < domains.length; i++) {
                    String domain = domains[i];
                    if (event.getMessage().contains(domain)) {
                        player.sendMessage(main.getConfig().getString(""Messages.IPfound"").replaceAll(""&((?i)[0-9a-fk-or])"", ""§$1""));
                        event.setCancelled(true);
                    }
                }
                String[] message = event.getMessage().split(""\\."");
                if (message.length >= 3) {
                    player.sendMessage(main.getConfig().getString(""Messages.IPfound"").replaceAll(""&((?i)[0-9a-fk-or])"", ""§$1""));
                    event.setCancelled(true);
                }
            }
        }
    }
"
2105,bda34aa6-73b0-4e2c-9c95-e0fe8c89fb21,"    public String[] getDomains() {
        String values = "".ac .au .biz .ci .com .cz .de .fr .ge .info .io .mobi .net .org .to .uk .us .eu"";
        return values.split("" "");
    }
"
2106,d7f0f30e-ff2e-4e18-88d8-0df2a4522811,"    public TestCapsProtection(Censornizer main) {
        this.main = main;
    }
"
2107,14349f6f-34c5-492d-b870-e3836879dac7,"    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPlayerChat(AsyncPlayerChatEvent event) {
        if (main.getConfig().getBoolean(""Config.BlockCaps"", true)) {
            event.setMessage(event.getMessage().toLowerCase());
        }
    }
"
2108,e8fe19b6-3d55-4f60-a311-bed23c735dcf,"    public Updatechecker(Censornizer main) {
        this.main = main;
    }
"
2109,882270f2-fa76-4bbc-9202-53d52c1476a6,"    private int updateCheck(int currentVersion) throws Exception {
        String pluginUrlString = ""http://dev.bukkit.org/server-mods/CensorNizer/files.rss"";
        try {
            URL url = new URL(pluginUrlString);
            Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(url.openConnection().getInputStream());
            doc.getDocumentElement().normalize();
            NodeList nodes = doc.getElementsByTagName(""item"");
            Node firstNode = nodes.item(0);
            if (firstNode.getNodeType() == 1) {
                Element firstElement = (Element) firstNode;
                NodeList firstElementTagName = firstElement.getElementsByTagName(""title"");
                Element firstNameElement = (Element) firstElementTagName.item(0);
                NodeList firstNodes = firstNameElement.getChildNodes();
                this.newerversion = firstNodes.item(0).getNodeValue().replace(""CensorNizer "", """");
                return Integer.valueOf(firstNodes.item(0).getNodeValue().replace(""CensorNizer "", """").replaceAll(""\\."", """"));
            }
        } catch (UnknownHostException e) {
            System.out.println(""[CensorNizer] Could not check for updates! Maybe you have an internet protection?"");
        } catch (Exception e) {
            System.out.println(""[CensorNizer] Error on UpdateCheck \n"" + e.getMessage() + ""\n"");
            System.out.println(e);
        }
        return currentVersion;
    }
"
2110,5400983f-6e95-4001-99ba-5ee16b89caea,"    public void checkUpdate() {
        if (main.getConfig().getBoolean(""Config.CheckForUpdates"", true)) {
            currentversion = Integer.valueOf(main.getDescription().getVersion().replaceAll(""\\."", """"));
            updateChecker = main.getServer().getScheduler().runTaskTimerAsynchronously(main, new Runnable() {
                @Override
                public void run() {
                    try {
                        newversion = updateCheck(currentversion);
                        if (newversion > currentversion) {
                            System.out.println(""[CensorNizer] version "" + newerversion + "" has been released! You can download it at http://dev.bukkit.org/server-mods/CensorNizer/"");
                        } else if (currentversion > newversion) {
                            System.out.println(""[CensorNizer] your version ("" + main.getDescription().getVersion() + "") is higher than the newest version on bukkitDev ("" + newerversion + ""), do you use a development build?"");
                        }
                    } catch (FileNotFoundException e) {
                        System.err.println(""[CensorNizer] Could not check for updates! Maybe you have an internet protection?"");
                    } catch (UnknownHostException e) {
                        System.err.println(""[CensorNizer] Could not check for updates! Maybe you have an internet protection?"");
                    } catch (Exception e) {
                        System.out.println(""[CensorNizer] Error on UpdateCheck \n"" + e.getMessage() + ""\n"");
                        System.out.println(e);
                    }
                }
            }, 0, 36000);
        }
    }
"
2111,28accd5c-3df5-46c5-872d-db184a9c283e,"                @Override
                public void run() {
                    try {
                        newversion = updateCheck(currentversion);
                        if (newversion > currentversion) {
                            System.out.println(""[CensorNizer] version "" + newerversion + "" has been released! You can download it at http://dev.bukkit.org/server-mods/CensorNizer/"");
                        } else if (currentversion > newversion) {
                            System.out.println(""[CensorNizer] your version ("" + main.getDescription().getVersion() + "") is higher than the newest version on bukkitDev ("" + newerversion + ""), do you use a development build?"");
                        }
                    } catch (FileNotFoundException e) {
                        System.err.println(""[CensorNizer] Could not check for updates! Maybe you have an internet protection?"");
                    } catch (UnknownHostException e) {
                        System.err.println(""[CensorNizer] Could not check for updates! Maybe you have an internet protection?"");
                    } catch (Exception e) {
                        System.out.println(""[CensorNizer] Error on UpdateCheck \n"" + e.getMessage() + ""\n"");
                        System.out.println(e);
                    }
                }
"
2112,023e2908-5e87-474d-88d3-23c416a033b1,"    public Files(Censornizer main) {
        this.main = main;
    }
"
2113,3d104456-126c-4c1f-8213-2ba895e66673,"    public void loadFiles() {
        if (new File(""plugins/CensorNizer/config.yml"").exists()) {
            main.config = main.getConfig();
            main.config.options().copyDefaults(true);
        } else {
            main.saveDefaultConfig();
            main.config = main.getConfig();
            main.config.options().copyDefaults(true);
        }
        if (!list.exists()) {
            try {
                list.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(Censornizer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (!banlist.exists()) {
            try {
                banlist.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(Censornizer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (!whitelist.exists()) {
            try {
                whitelist.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(Censornizer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            Scanner s = new Scanner(list);
            while (s.hasNextLine()) {
                main.blacklist.add(s.nextLine());
            }
            s.close();
        } catch (Exception ex) {
            System.err.println(""[CensorNizer] "" + ex + ex.getMessage());
            System.out.println("""");
            ex.printStackTrace();
        } finally {
            System.out.println(""["" + main.getDescription().getName() + "" by JeterLP"" + "" Version: "" + main.getDescription().getVersion() + ""] loaded "" + main.blacklist.size() + "" words to be censored!"");
        }

        try {
            Scanner s = new Scanner(whitelist);
            while (s.hasNextLine()) {
                main.white.add(s.nextLine());
            }
            s.close();
        } catch (Exception ex) {
            System.err.println(""[CensorNizer] "" + ex + ex.getMessage());
            System.out.println("""");
            ex.printStackTrace();
        } finally {
            System.out.println(""["" + main.getDescription().getName() + "" by JeterLP"" + "" Version: "" + main.getDescription().getVersion() + ""] loaded "" + main.white.size() + "" words to be not censored!"");
        }

        if (main.getConfig().getBoolean(""Config.UseBanlist"", true)) {
            try {
                Scanner s = new Scanner(banlist);
                while (s.hasNextLine()) {
                    main.bancommands.add(s.nextLine());
                }
                s.close();
            } catch (Exception ex) {
                System.err.println(""[CensorNizer] "" + ex + ex.getMessage());
                System.out.println("""");
                ex.printStackTrace();
            } finally {
                System.out.println(""["" + main.getDescription().getName() + "" by JeterLP"" + "" Version: "" + main.getDescription().getVersion() + ""] loaded "" + main.bancommands.size() + "" words to ban players!"");
            }
        } else {
            System.out.println(""["" + main.getDescription().getName() + "" by JeterLP"" + "" Version: "" + main.getDescription().getVersion() + ""] banlist is disabled!"");
        }
    }
"
2114,2308275f-1489-4852-b867-c99cba59b9d9,"    public void reload() throws FileNotFoundException {
        main.reloadConfig();
        main.bancommands.clear();
        main.blacklist.clear();
        main.white.clear();
        if (main.getConfig().getBoolean(""Config.UseBanlist"", true)) {
            Scanner s = new Scanner(banlist);
            while (s.hasNextLine()) {
                main.bancommands.add(s.nextLine());
            }
            s.close();
        }
        Scanner s = new Scanner(list);
        Scanner s2 = new Scanner(whitelist);
        while (s.hasNextLine()) {
            main.blacklist.add(s.nextLine());
        }
        while (s2.hasNextLine()) {
            main.white.add(s2.nextLine());
        }
        s.close();
        s2.close();
    }
"
2115,befa8402-c139-4145-9e4e-98966f3890b1,"    public Metricschecker(Censornizer main) {
        this.main = main;
    }
"
2116,eb002a09-227d-4fdf-98fd-3a4160bf161f,"    public void checkMetrics() {
        try {
            Metrics metrics = new Metrics(main);
            metrics.start();
        } catch (Exception e) {
            System.out.println(""CensorNizer: Could not send information to: http://mcstats.org!"");
        }
    }
"
2117,6364afb3-a3d4-41e5-8469-64720d12abdc,"    public CensorNizer(Censornizer t) {
        this.main = t;
    }
"
2118,4bb1b0b3-a1b0-4959-9668-db80c43dfa29,"    @Override
    public boolean onCommand(CommandSender sender, Command cmd, String commandlabel, String[] args) {
        if (cmd.getName().equalsIgnoreCase(""censornizer"")) {
            if (args.length >= 2) {
                sender.sendMessage(""§cUsage: §a/censornizer <unmute Player|reload>"");
                return true;
            }
            if (args[0].equalsIgnoreCase(""unmute"")) {
                Player target = main.getServer().getPlayer(args[1]);
                try {
                    if (sender.hasPermission(""censornizer.unmute"")) {
                        if (!main.map.containsKey(target.getName())) {
                            sender.sendMessage(""§4The Player "" + ChatColor.GREEN + target.getDisplayName() + ChatColor.DARK_RED + "" is not muted!"");
                            return true;
                        } else {
                            sender.sendMessage(""§aThe Player "" + ChatColor.GOLD + target.getDisplayName() + ChatColor.GREEN + "" is now unmuted!"");
                            main.map.remove(target.getName());
                            return true;
                        }
                    } else {
                        sender.sendMessage(""§4You dont have permission!"");
                        return true;
                    }
                } catch (NullPointerException e) {
                    sender.sendMessage(""§4The Player "" + args[0] + ""is not online!"");
                    return true;
                }
            } else if (args[0].equalsIgnoreCase(""reload"")) {
                if (sender.hasPermission(""censornizer.reload"")) {
                    try {
                        main.files.reload();
                        sender.sendMessage(""§aSuccessfully reloaded!"");
                        return true;
                    } catch (FileNotFoundException ex) {
                        sender.sendMessage(""§cError on reload."");
                        ex.printStackTrace();
                        return true;
                    }
                } else {
                    sender.sendMessage(""§4You dont have permission!"");
                    return true;
                }
            } else {
                sender.sendMessage(""§cUsage: §a/censornizer <unmute player|reload>"");
                return true;
            }
        }
        return false;
    }
"
2119,cfe8ae52-5548-4026-9ff6-6fb2629fd9fb,"    public Metrics(final Plugin plugin) throws IOException {
        if (plugin == null) {
            throw new IllegalArgumentException(""Plugin cannot be null"");
        }

        this.plugin = plugin;

        configurationFile = getConfigFile();
        configuration = YamlConfiguration.loadConfiguration(configurationFile);

        configuration.addDefault(""opt-out"", false);
        configuration.addDefault(""guid"", UUID.randomUUID().toString());
        configuration.addDefault(""debug"", false);

        if (configuration.get(""guid"", null) == null) {
            configuration.options().header(""http://mcstats.org"").copyDefaults(true);
            configuration.save(configurationFile);
        }

        guid = configuration.getString(""guid"");
        debug = configuration.getBoolean(""debug"", false);
    }
"
2120,c1bd7faf-e09e-48a0-be32-ca68429c46ce,"    public Graph createGraph(final String name) {
        if (name == null) {
            throw new IllegalArgumentException(""Graph name cannot be null"");
        }

        final Graph graph = new Graph(name);

        graphs.add(graph);

        return graph;
    }
"
2121,7a335bbe-4c84-4ec1-80e1-561f7d241a3b,"    public void addGraph(final Graph graph) {
        if (graph == null) {
            throw new IllegalArgumentException(""Graph cannot be null"");
        }

        graphs.add(graph);
    }
"
2122,3d998236-5356-4832-8a69-55ab2958134a,"    public void addCustomData(final Plotter plotter) {
        if (plotter == null) {
            throw new IllegalArgumentException(""Plotter cannot be null"");
        }

        defaultGraph.addPlotter(plotter);

        graphs.add(defaultGraph);
    }
"
2123,e95117fa-97fc-421d-901a-9f585479e874,"    public boolean start() {
        synchronized (optOutLock) {
            if (isOptOut()) {
                return false;
            }

            if (task != null) {
                return true;
            }

            task = plugin.getServer().getScheduler().runTaskTimerAsynchronously(plugin, new Runnable() {
                private boolean firstPost = true;

                public void run() {
                    try {
                        synchronized (optOutLock) {
                            if (isOptOut() && task != null) {
                                task.cancel();
                                task = null;
                                for (Graph graph : graphs) {
                                    graph.onOptOut();
                                }
                            }
                        }

                        postPlugin(!firstPost);

                        firstPost = false;
                    } catch (IOException e) {
                        if (debug) {
                            Bukkit.getLogger().log(Level.INFO, ""[Metrics] "" + e.getMessage());
                        }
                    }
                }
            }, 0, PING_INTERVAL * 1200);

            return true;
        }
    }
"
2124,75ee0494-9894-40f1-a2ab-5e3d0160a4c3,"                public void run() {
                    try {
                        synchronized (optOutLock) {
                            if (isOptOut() && task != null) {
                                task.cancel();
                                task = null;
                                for (Graph graph : graphs) {
                                    graph.onOptOut();
                                }
                            }
                        }

                        postPlugin(!firstPost);

                        firstPost = false;
                    } catch (IOException e) {
                        if (debug) {
                            Bukkit.getLogger().log(Level.INFO, ""[Metrics] "" + e.getMessage());
                        }
                    }
                }
"
2125,3fce1b83-f6cb-44ec-860d-f9438ad696de,"    public boolean isOptOut() {
        synchronized (optOutLock) {
            try {
                configuration.load(getConfigFile());
            } catch (IOException ex) {
                if (debug) {
                    Bukkit.getLogger().log(Level.INFO, ""[Metrics] "" + ex.getMessage());
                }
                return true;
            } catch (InvalidConfigurationException ex) {
                if (debug) {
                    Bukkit.getLogger().log(Level.INFO, ""[Metrics] "" + ex.getMessage());
                }
                return true;
            }
            return configuration.getBoolean(""opt-out"", false);
        }
    }
"
2126,c0dc9688-f41a-42c7-b4ba-5750163af66f,"    public void enable() throws IOException {
        synchronized (optOutLock) {
            if (isOptOut()) {
                configuration.set(""opt-out"", false);
                configuration.save(configurationFile);
            }

            if (task == null) {
                start();
            }
        }
    }
"
2127,bbfe1601-9a5d-487c-ba8d-aa3f7209f210,"    public void disable() throws IOException {
        synchronized (optOutLock) {
            if (!isOptOut()) {
                configuration.set(""opt-out"", true);
                configuration.save(configurationFile);
            }

            if (task != null) {
                task.cancel();
                task = null;
            }
        }
    }
"
2128,472d9009-2760-4015-beb6-9de7bd67398e,"    public File getConfigFile() {
        File pluginsFolder = plugin.getDataFolder().getParentFile();

        return new File(new File(pluginsFolder, ""PluginMetrics""), ""config.yml"");
    }
"
2129,9643fe66-be58-42ce-a51e-c9af1e2195e4,"    private void postPlugin(final boolean isPing) throws IOException {
        PluginDescriptionFile description = plugin.getDescription();
        String pluginName = description.getName();
        boolean onlineMode = Bukkit.getServer().getOnlineMode();
        String pluginVersion = description.getVersion();
        String serverVersion = Bukkit.getVersion();
        int playersOnline = Bukkit.getServer().getOnlinePlayers().length;

        final StringBuilder data = new StringBuilder();

        data.append(encode(""guid"")).append('=').append(encode(guid));
        encodeDataPair(data, ""version"", pluginVersion);
        encodeDataPair(data, ""server"", serverVersion);
        encodeDataPair(data, ""players"", Integer.toString(playersOnline));
        encodeDataPair(data, ""revision"", String.valueOf(REVISION));

        String osname = System.getProperty(""os.name"");
        String osarch = System.getProperty(""os.arch"");
        String osversion = System.getProperty(""os.version"");
        String java_version = System.getProperty(""java.version"");
        int coreCount = Runtime.getRuntime().availableProcessors();

        if (osarch.equals(""amd64"")) {
            osarch = ""x86_64"";
        }

        encodeDataPair(data, ""osname"", osname);
        encodeDataPair(data, ""osarch"", osarch);
        encodeDataPair(data, ""osversion"", osversion);
        encodeDataPair(data, ""cores"", Integer.toString(coreCount));
        encodeDataPair(data, ""online-mode"", Boolean.toString(onlineMode));
        encodeDataPair(data, ""java_version"", java_version);

        if (isPing) {
            encodeDataPair(data, ""ping"", ""true"");
        }

        synchronized (graphs) {
            final Iterator<Graph> iter = graphs.iterator();

            while (iter.hasNext()) {
                final Graph graph = iter.next();

                for (Plotter plotter : graph.getPlotters()) {
                    final String key = String.format(""C%s%s%s%s"", CUSTOM_DATA_SEPARATOR, graph.getName(), CUSTOM_DATA_SEPARATOR, plotter.getColumnName());

                    final String value = Integer.toString(plotter.getValue());

                    encodeDataPair(data, key, value);
                }
            }
        }

        URL url = new URL(BASE_URL + String.format(REPORT_URL, encode(pluginName)));

        URLConnection connection;

        if (isMineshafterPresent()) {
            connection = url.openConnection(Proxy.NO_PROXY);
        } else {
            connection = url.openConnection();
        }

        connection.setDoOutput(true);

        final OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
        writer.write(data.toString());
        writer.flush();

        final BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        final String response = reader.readLine();

        writer.close();
        reader.close();

        if (response == null || response.startsWith(""ERR"")) {
            throw new IOException(response);
        } else {
            if (response.contains(""OK This is your first update this hour"")) {
                synchronized (graphs) {
                    final Iterator<Graph> iter = graphs.iterator();

                    while (iter.hasNext()) {
                        final Graph graph = iter.next();

                        for (Plotter plotter : graph.getPlotters()) {
                            plotter.reset();
                        }
                    }
                }
            }
        }
    }
"
2130,d05e8afe-8018-4158-87c3-c6b697ab8e35,"    private boolean isMineshafterPresent() {
        try {
            Class.forName(""mineshafter.MineServer"");
            return true;
        } catch (Exception e) {
            return false;
        }
    }
"
2131,e2b3a7e6-3c55-4729-a268-1013ae1d6c51,"    private static void encodeDataPair(final StringBuilder buffer, final String key, final String value) throws UnsupportedEncodingException {
        buffer.append('&').append(encode(key)).append('=').append(encode(value));
    }
"
2132,4fc66719-224f-4894-b7f5-e1fcb5a335cb,"    private static String encode(final String text) throws UnsupportedEncodingException {
        return URLEncoder.encode(text, ""UTF-8"");
    }
"
2133,04710f82-2870-4ec1-989e-e9bacd97e0ec,"        private Graph(final String name) {
            this.name = name;
        }
"
2134,af6cf076-e9de-434b-898a-039df1ddeb3f,"        public String getName() {
            return name;
        }
"
2135,84fbf45a-9847-42cf-9c8b-5488f1fdb23a,"        public void addPlotter(final Plotter plotter) {
            plotters.add(plotter);
        }
"
2136,7ca141f4-4836-4970-90d2-ae253f3eb3fa,"        public void removePlotter(final Plotter plotter) {
            plotters.remove(plotter);
        }
"
2137,ca098979-7070-4f84-9cdb-84dead1a2e1b,"        public Set<Plotter> getPlotters() {
            return Collections.unmodifiableSet(plotters);
        }
"
2138,d3742689-46af-4791-9076-6b625ce9fa65,"        @Override
        public int hashCode() {
            return name.hashCode();
        }
"
2139,2b482b47-61d8-49b7-baaa-b40cd193730b,"        @Override
        public boolean equals(final Object object) {
            if (!(object instanceof Graph)) {
                return false;
            }

            final Graph graph = (Graph) object;
            return graph.name.equals(name);
        }
"
2140,6f91377c-79b9-47e7-a283-07ae8a5fdff8,"        protected void onOptOut() {
        }
"
2141,148bc04b-abbe-4b7b-8c5c-bc4979cfdec5,"        public Plotter() {
            this(""Default"");
        }
"
2142,baed928b-b673-4f34-8d15-f6f0af0c3062,"        public Plotter(final String name) {
            this.name = name;
        }
"
2143,33eeab65-ebae-46e7-b4bc-5e531ba65f1c,"        public abstract int getValue();
"
2144,fbd514f0-b3a9-4279-b50e-512e5745ebe4,"        public String getColumnName() {
            return name;
        }
"
2145,14bc4f24-35d1-4bf7-98a0-34c071e3346b,"        public void reset() {
        }
"
2146,c19bb778-4e88-4466-be44-3676e5c3162f,"        @Override
        public int hashCode() {
            return getColumnName().hashCode();
        }
"
2147,525c68e4-0591-475c-958f-9968871eb14a,"        @Override
        public boolean equals(final Object object) {
            if (!(object instanceof Plotter)) {
                return false;
            }

            final Plotter plotter = (Plotter) object;
            return plotter.name.equals(name) && plotter.getValue() == getValue();
        }
"
2148,26be9731-448c-4245-b1ab-95df7ab96aa5,"	public void execute();
"
2149,afcdb166-9af7-401e-b61c-f9d117a38083,"	public void parse(Element xml);
"
2150,18fffc7b-7115-484f-86ec-77b5353e2ce7,"	public ActivePhenomena(String instanceId) {
		super(instanceId);
	}
"
2151,a75caa98-2cb3-46ca-8df5-4252943f1c10,"		private PhenomenaUpdater(String id) {
			super(id);
		}
"
2152,a966354b-c79f-4404-bbfa-eb293bb3362a,"		public void run() {
			while(running) {
				// Updates the phenomena
				try {
					updatePhenomena();
				} catch (InterruptedException e) {
					break;
				}
				// Notifies the observers (if any)
				ActivePhenomena.this.setChanged();
				ActivePhenomena.this.notifyObservers();
				// Sleeps for a while
				try {
					sleep(sleepTime*1000);
				} catch (InterruptedException e) {
					break;
				}
			}
		}
"
2153,30ed7cbd-b290-49e8-aeff-eda19288b90f,"	public synchronized void start() {
		if (updater == null || !updater.isAlive()) {
			this.updater = new PhenomenaUpdater(instanceName);
			running = true;
			updater.start();
		}
	}
"
2154,e4dfb4a3-87b4-47bc-8e5d-41bfda5d2cb7,"	public synchronized void stop() {
		if (updater!=null && updater.isAlive()) {
			running = false;
			updater.interrupt();
			updater = null;
		}
	}
"
2155,516ab1f9-a174-4df8-aa5d-5b991fa71e8b,"	public synchronized int getSleepTime() {
		return sleepTime;
	}
"
2156,fcda263e-e224-4d35-9320-e50a267b2077,"	public synchronized void setSleepTime(int sleepTime) {
		this.sleepTime = sleepTime;
	}
"
2157,3d835161-81c7-4284-99fc-47cd6336c82a,"	@Override
	abstract public void configure(String configXML);
"
2158,300443b4-bd5e-4820-9368-f9b0fc865bad,"	@Override
	abstract public void restore();
"
2159,d0834d87-89ad-4e84-af68-e2e61678c3a3,"	abstract protected void updatePhenomena() throws InterruptedException;
"
2160,de64345c-4fd2-4b7a-bafd-89c9a902ca68,"	public PhenomenaCommand(Phenomena target, PhenomenaWindow origin) {
		this.target = target;
		this.origin = origin;
	}
"
2161,3ea77558-8fd5-4061-a75f-9054c70c3099,"	public PassivePhenomena(String instanceId) {
		super(instanceId);
	}
"
2162,0898b0c6-d0f9-4b2d-b5b4-fec1c46fb614,"	public synchronized void start() {
		running = true;
	}
"
2163,ff14d17e-ff19-4702-888d-dbe7ed6a50d6,"	public synchronized void stop() {
		running = false;
	}
"
2164,b78b9276-46ca-4f32-94c2-f0b48ededfea,"	@Override
	abstract public void configure(String configXML);
"
2165,a0f573df-f58f-41df-8edf-4f20efb86123,"	@Override
	abstract public void restore();
"
2166,91a8a427-de9b-4fd0-ad41-1dccca0fb437,"	private Phenomena() {
	}
"
2167,0910a448-a0ee-431f-8dd9-6fb1d2704a1d,"	public Phenomena(String instanceId) {
		this();
		this.instanceName = instanceId;
		this.phenWindows = new ArrayList<PhenomenaWindow>();
	}
"
2168,3652a921-197e-43b3-9bb6-c668d64d323b,"	public String getInstanceName() {
		return instanceName;
	}
"
2169,800d6e40-0dfa-415f-9db6-4f61a9a00b24,"	public List<PhenomenaWindow> getWindows() {
		return phenWindows;
	}
"
2170,abaf6aa4-efd4-413f-8d66-f89f8767917e,"	public synchronized boolean isRunning() {
		return running;
	}
"
2171,b1bfe98b-4f89-4b94-b607-0c6a1124ecd7,"	@Override
	public void notifyObservers() {
		this.setChanged();
		super.notifyObservers();
	}
"
2172,3194d5f3-c72a-4191-a655-6fb5fb334a45,"	public abstract void start();
"
2173,d5a973ae-bc8f-459b-bcc1-bb52420f1936,"	public abstract void stop();
"
2174,80107aef-3f0e-4a3e-ab84-b0616aee86b3,"	abstract public void configureWindows(String configXML);
"
2175,011ca8ba-b139-463d-83db-ffff23cde858,"	abstract public void configure(String configXML);
"
2176,28591fb2-2a4d-4734-afef-128385b779d5,"	abstract public void restore();
"
2177,e45ea6f2-e216-4853-81a6-7e9c80700c52,"	abstract public void cleanup();
"
2178,2d9ecef0-9861-48bd-9e3a-39cb73227eda,"	public PhenomenaWindow(String windowName) {
		// TODO before this check this is unique!!!
		this.windowId = windowName;
	}
"
2179,5ea5a20d-a498-49dd-b9f7-c2287ce1d4d1,"	@Override
	public void update(Observable o, Object arg){
		update((Phenomena)o);
	}
"
2180,52901531-f43f-4028-8d0f-8c11b600b3c5,"	abstract public void update(Phenomena p);
"
2181,13621f64-db10-4a35-b0d6-9082e31e14b3,"	abstract public String toXML();
"
2182,b6347aa0-92a5-4f7c-abd4-abd626814b7e,"	public String getWindowId() {
		return windowId;
	}
"
2183,bac238ed-a85e-43cb-82f1-0f5074851695,"    public String getAddress() {
        return address;
    }
"
2184,c193578f-83ec-4cfd-b5bc-0412d9574e5e,"    public Person(String name){
        super(name);
    }
"
2185,01111678-73c7-4cca-ad23-89d8adfd162e,"    public void setAddress(String address) {
        this.address = address;
    }
"
2186,b7903cd5-40d6-40e6-be1b-b464c9651f86,"    public String getPhone() {
        return phone;
    }
"
2187,008c5582-6e83-44e9-a0e3-f4b2b80538e8,"    public void setPhone(String phone) {
        this.phone = phone;
    }
"
2188,9935b06f-4375-4bc9-aa8a-3c7fbdeeb9f3,"    public String getMail() {

        return mail;
    }
"
2189,d42ab93e-67d3-4a98-8176-76313352ebd5,"    public void setMail(String mail) {
        this.mail = mail;
    }
"
2190,ee4f4d07-3ac0-4eaf-8002-7eb94028a24d,"    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Node node = (Node) o;

        if (!children.equals(node.children)) return false;
        if (!name.equals(node.name)) return false;
        if (!weight.equals(node.weight)) return false;

        return true;
    }
"
2191,3fd3a536-7099-49de-9f10-836e294587e1,"    @Override
    public int hashCode() {
        int result = name.hashCode();
        result = 31 * result + children.hashCode();
        result = 31 * result + weight.hashCode();
        return result;
    }
"
2192,ccb8658c-a7b9-42aa-a9e4-5d45996d03da,"    public Node(String name){

        this.weight = 100;
        this.name = name;
        children = new ArrayList<Node>();
    }
"
2193,688864f6-5d31-4cf2-855a-328e1172e78f,"    public String getName() {
        return name;
    }
"
2194,6f0d2f7f-50eb-41ae-b3bc-1bd1e3a64229,"    @Override
    public String toString() {
        return ""Node{"" +
                ""name='"" + name + '\'' +
                "", children="" + children +
                "", weight="" + weight +
                '}';
    }
"
2195,755ca42e-7cc3-433a-9ad0-a4fd70e9f30d,"    public String toJson() {
        List<String> json = Lists.newArrayList();
        for (Node node : children) {
            json.add(String.format(""{\""name\"":\""%s\""}"", node.getName()));
        }
        return ""["" + Joiner.on("","").join(json) + ""]"";
    }
"
2196,4fa7296d-057b-4c77-b1e3-acb08e266980,"    public void setName(String name) {
        this.name = name;
    }
"
2197,47da3535-0ab0-4c0e-81d0-44bf316ea87c,"    public Node getChild(int index) {
        return children.get(index);
    }
"
2198,f42eec00-925f-412b-854c-5ad494ec358c,"    public void addChild(Node project) {
        this.children.add(project);
    }
"
2199,e1aca4b0-4da0-43f6-bdde-6c751a6bb299,"    public Integer getWeight() {
        return weight;
    }
"
2200,fada4bf1-9a76-4688-a74d-446b536de15a,"    public void setWeight(Integer weight) {
        this.weight = weight;
    }
"
2201,df6b01cf-1029-444b-8968-c295efe5a53a,"    public Main() {
        root = new Node(""SeaMe"");

        Project gamification = new Project(""gamification"");

        root.addChild(new Person(""npelloux""));
        root.addChild(new Person(""scauch""));
        root.addChild(new Person(""jLeclert""));
    }
"
2202,cda107de-63ee-4b6e-9ea1-3cdcb4b463ea,"    public static void main(String[] args) throws Exception {
        int port = Integer.parseInt(System.getenv(""PORT""));

        HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);
        server.createContext(""/"", new HttpHandler() {
            final Main main = new Main();

            @Override
            public void handle(HttpExchange exchange) throws IOException {
                String body = """";

                if (""/update"".equals(exchange.getRequestURI().getPath())) {
                    // main.updateQuality();
                } else {
                    body = itemsAsJson();

                    String query = exchange.getRequestURI().getQuery();
                    if (null != query) {
                        String callback = query.split(""[&=]"")[1];
                        body = callback + ""("" + body + "")"";
                    }
                }

                byte[] response = body.getBytes();
                exchange.sendResponseHeaders(200, response.length);
                exchange.getResponseBody().write(response);
                exchange.close();
            }

            private String itemsAsJson() {
                return main.getRoot().toJson();
            }
        });
        server.start();

    }
"
2203,c30df024-4a2d-439b-84d0-e10c1a1b7255,"            @Override
            public void handle(HttpExchange exchange) throws IOException {
                String body = """";

                if (""/update"".equals(exchange.getRequestURI().getPath())) {
                    // main.updateQuality();
                } else {
                    body = itemsAsJson();

                    String query = exchange.getRequestURI().getQuery();
                    if (null != query) {
                        String callback = query.split(""[&=]"")[1];
                        body = callback + ""("" + body + "")"";
                    }
                }

                byte[] response = body.getBytes();
                exchange.sendResponseHeaders(200, response.length);
                exchange.getResponseBody().write(response);
                exchange.close();
            }
"
2204,1b855062-e626-4035-9345-c4a06dfcbb18,"            private String itemsAsJson() {
                return main.getRoot().toJson();
            }
"
2205,a0ee3656-2a68-4a9e-b335-8427c9a58a8b,"    public Node getRoot() {
        return root;
    }
"
2206,5ee05865-1acf-4f1d-a03d-80c4fcd4d2c6,"    public void setRoot(Node root) {
        this.root = root;
    }
"
2207,601824d4-2d2a-48cc-a8b5-7a5303a0755c,"    public Project(String name){
        super(name);
    }
"
2208,0696eafc-fad4-43ca-9879-53e49d5b3af5,"    @BeforeMethod
    public void setUp() throws Exception {

    }
"
2209,11054a02-cb43-48d3-8de0-b80b7c27e5c7,"    @Test
    public void shouldCreateObject() {
        Node node = new Node(""testNode"");

        assertThat(node).isNotNull();
    }
"
2210,58bd3ac7-facc-4acb-a0f4-e71817f72c4a,"    @Test
    public void shouldBeAbleToAddChild() {
        Node parent = new Node(""parent"");
        Node child = new Node(""child"");

        parent.addChild(child);

        assertThat(parent.getChild(0)).isNotNull();
    }
"
2211,4070547d-4d59-454b-ab52-a61f3af68276,"    @Test
    public void shouldWriteValidJson() {
        Node parent = new Node(""parent"");
        Node child = new Node(""child"");

        parent.addChild(child);

        assertThat(parent.toJson()).isEqualTo(""[{\""name\"":\""parent\""}]"");
    }
"
2212,97cecfd6-376e-4091-b42b-2bd59532bc40,"	public static void main(String args[]) {
		
		Injector injector = Guice.createInjector(new JeneverModule());
		injector.getInstance(Jenever.class).parseArgs(args);
		
	}
"
2213,a4c960d9-abc7-4cbf-9ecc-27e8935f1aff,"	@Inject
	public Jenever(JeneverOptions jo, JeneverOptionsHandler joh) {
		this.jo = jo;
		this.handler = joh;
	}
"
2214,f9bcd0df-9feb-4108-87cf-64597dfea715,"	public void parseArgs(String[] args) {
		Options options = new Options();
		for (Option o : jo.options) {
			options.addOption(o);
		}
		
		CommandLine parser; 
		try {
			parser = new GnuParser().parse(options, args);
		} catch (ParseException e) {
			log.info(""Unable to parse options."");
			return;
		}
		
		if (parser.hasOption(""help"") || parser.getOptions().length == 0) {
			new HelpFormatter().printHelp(""jen <args>"", ""jenever - A package manager for java"", options, """");
			System.exit(0);
		} else if (parser.hasOption(""init"")) {
			handler.checkParamsSet();
		} else {
			handler.checkParamsSet();
			handler.handle(parser);
		}
	}
"
2215,a774ff68-895e-4f41-a90c-0e792841aac7,"	@Inject
	public FileSystem(JeneverOptions options) {
		this.options = options;
	}
"
2216,3a75a657-802e-4244-94e7-8327299cc409,"	public void makeLibs(String envName) {
		
		final File file = new File(""lib"");
				
		log.info(""Creating lib folder at {}"",file.getAbsolutePath());
		
		if (file.exists()) {
			log.info(""File called 'lib' already exists, aborting"");
			return;
		}
		
		file.mkdir();
		
		log.info(""Successfully created folder, copying jars."");
		
		final File jarDir;
		
		if (null == envName) {
			jarDir = new File(options.jenEnv);
		} else {
			jarDir = new File(options.jenHome+File.separator+envName);
		}
		
		for (final File jar : jarDir.listFiles()) {
			
			if (!jar.getName().endsWith("".jar"")) 
				continue;
			
			log.info(""Copying {}"",jar.getName());
			
			try {
				Files.copy(jar, new File(file.getAbsolutePath()+File.separator+jar.getName()));
			} catch (IOException e) {
				log.error(""Error copying across {}, ignoring."",jar.getName());
			}
					
		}
		
		log.info(""Lib folder generation complete"");
		
	}
"
2217,75c47061-267b-4cbf-ad87-72be2600375a,"	public void makeManifest(String envName) {
		
		final File manifestFile = new File(""libs.txt"");
		
		log.info(""Creating manifest file at {}"",manifestFile.getAbsolutePath());
		
		if (manifestFile.exists()) {
			log.info(""File called 'libs.txt' already exists, aborting"");
			return;
		}
		
		try {
			manifestFile.createNewFile();
		} catch (IOException e) {
			log.error(""Unable to create file, aborting"");
			log.error(""Exception: {}"",e);
			return;
		}
		
		log.info(""Successfully created file, inserting manifest."");
		
		final File jarDir;
		
		if (null == envName) {
			jarDir = new File(options.jenEnv);
		} else {
			jarDir = new File(options.jenHome+File.separator+envName);
		}
		
		Set<String> jarNames = new HashSet<String>();
		
		for (final File jar : jarDir.listFiles()) {
			
			if (!jar.getName().endsWith("".jar"")) 
				continue;
			
			log.debug(""Adding {} to manifest"",jar.getName());
			
			jarNames.add(jar.getName());
					
		}
		
		try {
			log.debug(""Writing to file."");
			Files.write(Joiner.on(""\n"").join(jarNames).getBytes(), manifestFile);
		} catch (IOException e) {
			log.error(""Unable to write to file, aborting"");
			log.error(""Exception: {}"",e);
		}
		
		log.info(""Manifest generation complete"");
		
	}
"
2218,9f6e2401-22cf-405c-aff8-c3afbe396c5f,"	@Inject
	public JeneverOptionsHandler(JeneverOptions jo, PackageDownloader jd, FileSystem fs) {
		this.options = jo;
		this.jd = jd;
		this.fs = fs;
	}
"
2219,54400d12-6887-4134-8d99-1b25fdf587b8,"	@SuppressWarnings(""static-access"")
	public void handle(CommandLine parser) {

		//Handle listing files
		if (parser.hasOption(""ls"")) {
			final File jenHome = new File(options.jenHome);
			if (jenHome.listFiles().length == 0) {
				log.info(""No jen environments found."");
				return;
			}
			for (File f : jenHome.listFiles()) {
				log.info(""{}"",f.getName());
			}
		}
		
		//Increase verbosity
		if (parser.hasOption(""v"")) {
			ch.qos.logback.classic.Logger log = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(this.log.ROOT_LOGGER_NAME);
			log.setLevel(Level.DEBUG);
		}
		//Decrease verbosity
		if (parser.hasOption(""q"")) {
			ch.qos.logback.classic.Logger log = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(this.log.ROOT_LOGGER_NAME);
			log.setLevel(Level.ERROR);
		}
		
		//Install packages
		if (parser.hasOption(""i"")) {
			jd.process(parser.getOptionValues(""i""));
		}
		
		//Change environment
		if (parser.hasOption(""e"")) {
			log.debug(""Attempting to change environment to {}"",parser.getOptionValues(""e""));
			writeConfig(parser.getOptionValues(""e""));
			log.info(""Succesfully changed environment to {}"",parser.getOptionValue(""e""));
		}
		
		if (parser.hasOption(""l"")) {
			fs.makeLibs(parser.getOptionValue(""l""));
		}
		
		if (parser.hasOption(""m"")) {
			fs.makeManifest(parser.getOptionValue(""m""));
		}
		
	}
"
2220,039993c4-64a6-49a2-a61d-a07e05b75542,"	public void checkParamsSet() {
		if (!new File(options.jenHome).exists()) {
			log.info(""Cannot find JEN_HOME directory at {} - creating..."", options.jenHome);
			try {
				log.debug(""Creating file ... "");
				final File file = new File(options.jenHome);
				file.mkdir();
				log.info(""Successfully created environment directory at {}"",options.jenEnv);
			} catch (Exception e) {
				log.error(""Error: could not create file at {}, exiting."",options.jenEnv);
				log.error(""{}"",e);
				System.exit(-1);
			}
		}
		
		if (!new File(options.jenEnv).exists()) {
			log.info(""Cannot find current environment directory at {} - creating..."", options.jenEnv);
			try {
				log.debug(""Creating file ... "");
				final File file = new File(options.jenEnv);
				file.mkdir();
				log.info(""Successfully created environment directory at {}"",options.jenEnv);
			} catch (Exception e) {
				log.error(""Error: could not create file at {}, exiting."",options.jenEnv);
				log.error(""{}"",e);
				System.exit(-1);
			}
			
		}
		
		writeConfig(new String[] { ""default"" });
	
	}
"
2221,8c4ac536-f7eb-4d8a-af0e-ff6f00683235,"	public void writeConfig(String[] env) {
		String filename;
		String contents;
		
		if (System.getProperty(""os.name"").startsWith(""Windows"")) {
			filename = ""config.bat"";
			contents = String.format(""set JEN_ENV=%s"", env[0]);
		} else if (System.getProperty(""os.name"").startsWith(""Linux"")) {
			filename = ""config"";
			contents = String.format(""export JEN_ENV=%s"", env[0]);
		} else {
			//Handle other os here
			return;
		}
		
		
		try {
			Files.write(contents.getBytes(), new File(options.jenHome+File.separator+filename));
		} catch (IOException e) {
			log.error(""Could not write to config file - {}"",e);
		}
		
		
	}
"
2222,b5100d21-ea0e-45cb-90a4-aaad6ecca248,"	@Override
	protected void configure() {
		bind(Jenever.class);
		bind(JeneverOptionsHandler.class);
		bind(PackageDownloader.class);
		bind(JeneverOptions.class);
		bind(FileSystem.class);
		bind(PomParser.class).to(DefaultDomParser.class);
		
		
	}
"
2223,051f0750-8c5b-4f62-83f2-afc0f7290e87,"	@Inject
	public DefaultDomParser(JeneverOptions jo) {
		this.options = jo;
	}
"
2224,3a5775ec-1ab9-4658-967d-a4b11390604e,"	public List<Package> getDependencies(Package p) {
		
		final String pom = p.artifactId+""-""+p.version+"".pom"";
		final String path = p.groupId.replaceAll(""\\."", ""/"");
		
		final String url = Joiner.on(""/"").join(new String[] {  options.BASE_URL,
				path,
				p.artifactId, 
				p.version, 
				pom });
		
		Document doc;
		try {
			log.debug(""Attempting to parse xml file at {}"",url);
			doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new URL(url).openStream());
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		} catch (IOException e) {
			log.error(""File does not exist at {}"",url);
			return null;
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		
		XPath xpath = XPathFactory.newInstance().newXPath();
		NodeList links;
		try {
			links = (NodeList) xpath.evaluate(""//dependencies/dependency[not(scope)]"", doc,
			    XPathConstants.NODESET);
		} catch (XPathExpressionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		
		List<Package> deps = new ArrayList<Package>();
		
		for (int i = 0; i < links.getLength(); i++) {
			Package pa = nodeToPackage(links.item(i));
			if (pa != null) {
				deps.add(pa);
			}
		}
	
		return deps;
	}
"
2225,082cd45c-0a9f-4d5f-9d88-e483374b3613,"	private Package nodeToPackage(Node item) {
		
		Package p = new Package();
		
		NodeList params = item.getChildNodes();
		for (int i = 0; i < params.getLength(); i++) {
			
			Node current = params.item(i);
			if (current instanceof Element) {
				
				if (current.getNodeName().equals(""groupId"")) {
					p.groupId = current.getFirstChild().getNodeValue();
				}
				
				if (current.getNodeName().equals(""artifactId"")) {
					p.artifactId = current.getFirstChild().getNodeValue();
				}
				
				if (current.getNodeName().equals(""version"")) {
					p.version = current.getFirstChild().getNodeValue();
				}
				
			}
			
		}

		if (p.groupId.contains(""${"") || p.artifactId.contains(""${"") || p.version.contains(""${"")) {
			return null;
		}
		
		return p;
	}
"
2226,a927752e-357b-4f85-9427-6a613ca59aa9,"	public String mostRecentVersion(Package p) {
		String path = p.groupId.replaceAll(""\\."", ""/"");
		
		String url = Joiner.on(""/"").join(new String[] {  
				options.BASE_URL, 
				path , 
				p.artifactId, 
				""maven-metadata.xml"" });
		
		Document doc;
		try {
			doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new URL(url).openStream());
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		} catch (IOException e) {
			log.error(""File does not exist at {}"",url);
			return null;
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		
		XPath xpath = XPathFactory.newInstance().newXPath();
		NodeList links;
		try {
			links = (NodeList) xpath.evaluate(""//versioning/release"", doc,
			    XPathConstants.NODESET);
		} catch (XPathExpressionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		
		return links.item(links.getLength()-1).getChildNodes().item(0).getNodeValue();
			
		}
"
2227,61726fea-c88c-433e-96d6-d82b2d88f49d,"	@Inject
	public PackageDownloader(JeneverOptions jo, PomParser parser) {
		this.options = jo;
		this.parser = parser;
	}
"
2228,097a6cbb-e780-4c11-9dee-bd0dea9e1f67,"	public void process(String[] optionValues) {
		for(String packageString : optionValues) {
			 try {
				log.info(""Processing: {}"",packageString);
				downloadPackage(new Package().setSignature(packageString));
				log.info("""");
			} catch (IOException e) {
				log.info(""Could not download package {}, exiting..."",packageString);
				System.exit(1);
			}
		}
	}
"
2229,85e267a1-7c0b-430b-88bd-7aa7779f8355,"	public void downloadPackage(Package p) throws IOException {
		
		if (p.version == null) {
			p.version = parser.mostRecentVersion(p);
		}
				
		final List<Package> deps;
		try {
			deps = parser.getDependencies(p);
		} catch (RuntimeException e) {
			log.error(""Error: Unable to resolve package data from {}, aborting."",p.toString());
			return;
		}
		
		if (deps.size() > 0) {
			log.info(""{} has {} dependencies, resolving..."",p.toString(),deps.size());
			for(Package dependency : deps) {
				downloadPackage(dependency);
			}
		}
		
		log.info(""Downloading {} ..."",p.toString());
		
		String downloadUrl = getDownloadUrl(p);
		
		URL jarRequest = new URL(downloadUrl);

		ReadableByteChannel rbc = Channels.newChannel(jarRequest.openStream());

		FileOutputStream fos = new FileOutputStream(options.jenEnv+File.separator+p.artifactId+""-""+p.version+"".jar"");

		fos.getChannel().transferFrom(rbc, 0, 1 << 24);

		fos.close();
		
		log.info(""Download complete."");

		
	}
"
2230,8298694b-8b26-4bd8-98cd-30a7c4d40088,"	private String getDownloadUrl(Package p) {
		
		return Joiner.on(""/"").join(new String[] { 
				options.BASE_URL,
				p.groupId.replaceAll(""\\."", ""/""),
				p.artifactId,
				p.version,
				p.artifactId+""-""+p.version+"".jar""
		});
		
		
	}
"
2231,f21e98a0-1652-48cb-a5c3-d146180eeb5b,"	List<Package> getDependencies(Package p);
"
2232,85bc0209-3cc0-4c23-95d1-98b524039924,"	String mostRecentVersion(Package p);
"
2233,0af41070-6d9d-4014-a3e1-c496e26d0305,"	public Package() {
	}
"
2234,3ef5a45a-6653-41b0-bb5e-8fc25902ad4e,"	public Package setSignature(String string) {
		String[] splitted = string.split("":"");
		
		if (splitted.length >= 2) {
			this.groupId = splitted[0];
			this.artifactId = splitted[1];
		} else {
			this.artifactId = splitted[0];
		}
		
		if (splitted.length == 3) {
			this.version = splitted[2];
		} else {
			this.version = null;
		}
		
		return this;
	}
"
2235,21465d0e-b8f8-4c5d-9671-29d1e2c67ce4,"	@Override
	public String toString() {
		String name = artifactId;
		
		if (groupId != null) {
			name = groupId+"".""+name;
		}
		
		if (version != null) {
			name = name+""-""+version;
		}
		return name;
	}
"
2236,dcd3f8a8-1efb-418e-9105-307476eb4391,"	@Test
	public void testCanonicalName() {
		String[] params = new String[]{""foo.bar"",""baz"",""1.0""};
		
		Package p = new Package().setSignature(Joiner.on("":"").join(params));
		assertEquals(p.groupId,params[0]);
		assertEquals(p.artifactId,params[1]);
		assertEquals(p.version, params[2]);
		assertEquals(p.toString(),""foo.bar.baz-1.0"");
	}
"
2237,68667fbd-45b4-44c6-b108-a50df516960e,"	@Test	
	public void testNoVersion() {
		String[] params = new String[]{""foo.bar"",""baz""};
		
		Package p = new Package().setSignature(Joiner.on("":"").join(params));
		assertEquals(p.groupId,params[0]);
		assertEquals(p.artifactId,params[1]);
		assertEquals(p.version, null);
		assertEquals(p.toString(),""foo.bar.baz"");
	}
"
2238,7acc03f0-9510-4e7b-ae7a-a341bb22c6c3,"	@Test	
	public void testJustArtifact() {
		String[] params = new String[]{""baz""};
		
		Package p = new Package().setSignature(Joiner.on("":"").join(params));
		assertEquals(p.groupId,null);
		assertEquals(p.artifactId,params[0]);
		assertEquals(p.version, null);
		assertEquals(p.toString(),""baz"");
	}
"
2239,00bffe02-f716-4269-9c44-113502aec6d4,"	public void setValue(String path) {
		this.value = path;
	}
"
2240,5c9b264b-b656-4e2c-b1fc-95351c6404e7,"	public void add(String name) {
		value += PATH_SEPARATOR + name;
	}
"
2241,3266c9ee-cb20-4925-a3c0-06b8d4e29fc4,"	public String getValue() {

		return value;
	}
"
2242,f0b8e3ef-164d-4e7f-ae79-2d8931432b01,"	public UrlDocument() {
	}
"
2243,3aa4dfd9-6cac-4a9a-9baf-cc65c1dc1635,"	public UrlDocument(String name, String url, TreeNode parent) {

		setName(name);
		setUrl(url);
		setParentNode(parent);
		pathUpdate();

	}
"
2244,9063c886-c2b1-40aa-bdee-66f1208b5378,"	public void pathUpdate() {

		Path fullPathProxy = new Path();
		Path parentPathProxy = new Path();

		if (isTop()) {
			parentPathProxy.setValue(null);
			fullPathProxy.setValue(null);
		} else {
			if (isRoot()) {
				parentPathProxy.setValue("""");
				fullPathProxy.setValue(name);
			} else {
				UrlDocument parentDoc = (UrlDocument) getParentNode().getData();
				parentPathProxy.setValue(parentDoc.getFullPath());
				fullPathProxy.setValue(parentPathProxy.getValue());
				fullPathProxy.add(name);
			}
		}

		fullPath = fullPathProxy.getValue();
		parentPath = parentPathProxy.getValue();
	}
"
2245,8e6e8605-fae6-41d0-b67e-330d35f31909,"	public String getFullPath() {
		return fullPath;
	}
"
2246,8e112d6b-e4c3-44f9-a235-86ae050a24d9,"	public void setFullPath(String path) {
		this.fullPath = path;
	}
"
2247,3f3fa657-bbdf-4894-961a-5d62049a8a4a,"	public boolean isRoot() {
		return getParentNode().getParent() == null;
	}
"
2248,43a3a137-ea36-4225-84d7-a136e2661c88,"	public boolean isTop() {
		return getParentNode() == null;
	}
"
2249,b6d97131-650d-42f9-ad08-c9bbc8549af1,"	public String getName() {
		return name;
	}
"
2250,9ba5dab7-fd09-4aa3-b65b-13230a608fc9,"	public void setName(String name) {
		this.name = name;
		pathUpdate();
	}
"
2251,a1a67765-b4b3-4bda-b776-965517e7398a,"	public String getUrl() {
		return url;
	}
"
2252,8e4d4cac-7146-4f15-9d70-925de912a501,"	public void setUrl(String url) {
		this.url = url;
	}
"
2253,cecd2d7d-6dec-4652-813b-1fc2d5a944ed,"	public TreeNode getParentNode() {
		return parentNode;
	}
"
2254,aafc8fef-661c-4285-9a32-feb336ac4d9f,"	public void setParentNode(TreeNode node) {
		this.parentNode = node;
	}
"
2255,c2b5cfef-fa68-4080-982a-8f72077d2024,"	public String getParentPath() {
		return parentPath;
	}
"
2256,fda29ba5-7954-4261-bcd1-f26e6a0a1c53,"	public void setParentPath(String parentPath) {
		this.parentPath = parentPath;
	}
"
2257,e330a478-d623-45d5-9704-d37e9b469eb6,"	@Override
	public String toString() {
		return fullPath;
	}
"
2258,2f5b05ac-f339-4762-b59f-92f5af0bf766,"	public TreeController() {

		root = new DefaultTreeNode(new UrlDocument(""Base"", ""about:blank"",
				(TreeNode) null), (TreeNode) null);

		DefaultTreeNode top = new DefaultTreeNode(new UrlDocument(""Root"",
				""about:blank"", root), root);

		selectedNode = top;
		nodePath = ""/Root"";

		DefaultTreeNode folder1 = new DefaultTreeNode(new UrlDocument(
				""Newspapers"", ""about:blank"", top), top);

		new DefaultTreeNode(new UrlDocument(""libe"", ""http://www.liberation.fr"",
				folder1), folder1);

		new DefaultTreeNode(new UrlDocument(""lemonde"", ""http://www.lemonde.fr"",
				folder1), folder1);

		DefaultTreeNode folder2 = new DefaultTreeNode(new UrlDocument(
				""Web Design"", ""about:blank"", top), top);

		new DefaultTreeNode(new UrlDocument(""w3schools"",
				""http://www.w3schools.com/"", folder2), folder2);

		new DefaultTreeNode(new UrlDocument(""primefaces"",
				""http://www.primefaces.org/showcase/ui/home.jsf"", folder2),
				folder2);

		new DefaultTreeNode(new UrlDocument(""prettyfaces"",
				""http://ocpsoft.org/docs/prettyfaces/3.3.2/en-US/html_single/"",
				folder2), folder2);

	}
"
2259,e588e1e4-c633-4dfb-a631-d01eeaa5a625,"	public void setSelectedNode(TreeNode selectedNode) {
		this.selectedNode.setSelected(false);
		this.selectedNode = (DefaultTreeNode) selectedNode;
		this.selectedNode.setSelected(true);

	}
"
2260,18464aca-0924-474b-a9b8-ea73946caa38,"	public String displayNode() {

		String[] path = getNodePath().split(""/"");
		expandTree(root, path);

		return null;

	}
"
2261,05c52d05-16a2-42d0-be20-763e443ccad8,"	private void expandTree(TreeNode start, String[] path) {

		for (String item : path) {
			for (TreeNode node : start.getChildren()) {
				UrlDocument doc = (UrlDocument) node.getData();
				if (doc.getName().matches(item)) {
					node.getParent().setExpanded(true);
					start = node;
					break;
				}
			}
		}
		setSelectedNode(start);
		UrlDocument doc = (UrlDocument) start.getData();
		displayDoc.setDoc(doc);
		crudDoc.setTreeControl(this);
		crudDoc.setDoc(doc);

	}
"
2262,82355442-d9f3-414a-afce-8dc9438d6725,"	public TreeNode getRoot() {
		return root;
	}
"
2263,0c74dbed-70b6-4d1b-ab47-72ad4a40057a,"	public void setRoot(TreeNode node) {
		root = node;
	}
"
2264,972a6e22-e798-49a5-b6bd-9f554971a340,"	public TreeNode getSelectedNode() {
		return selectedNode;
	}
"
2265,87a669af-44bb-4ff3-9d59-bdc17bfc3776,"	public String getNodePath() {
		return nodePath;
	}
"
2266,91a183d6-0249-4ab3-8f24-eebea431e2e0,"	public void setNodePath(String nodePath) {
		this.nodePath = nodePath;
	}
"
2267,2b73b33e-d7e6-4e68-b023-b695bfddd668,"	public DisplayController getDisplayDoc() {
		return displayDoc;
	}
"
2268,a4df985d-dbbd-493d-9e56-b2cd4202f4e9,"	public void setDisplayDoc(DisplayController displayDoc) {
		this.displayDoc = displayDoc;
	}
"
2269,6af0d596-ba25-4438-959f-d78157b66f6e,"	public CrudController getCrudDoc() {
		return crudDoc;
	}
"
2270,d7e040ba-e7a2-418c-a515-3bbb720eaf14,"	public void setCrudDoc(CrudController crudDoc) {
		this.crudDoc = crudDoc;
	}
"
2271,1c316672-1a6f-4749-8436-e8297c4d6092,"	public String getName() {
		return name;
	}
"
2272,143a374d-87d1-4796-b19a-b5b4e32af67e,"	public void setName(String name) {
		this.name = name;
	}
"
2273,69203579-e6af-4d89-913f-85ce78eb35fe,"	public String getUrl() {
		return url;
	}
"
2274,7873892e-0a35-4470-b8a3-7bbb44cd330f,"	public void setUrl(String url) {
		this.url = url;
	}
"
2275,431e9e5a-a0b8-48ea-a3b9-35623182a49c,"	public void setDoc(UrlDocument doc) {

		name = doc.getName();
		url = doc.getUrl();

	}
"
2276,68ee3061-85a6-49f6-aada-2baae3aacdb3,"	public void setTreeControl(TreeController treeControl) {
		this.treeControl = treeControl;
	}
"
2277,4c115c64-26f4-460a-b281-ec508fbb98c3,"	public void createNode() {

		TreeNode selectedNode = treeControl.getSelectedNode();
		UrlDocument doc = new UrlDocument(name, url, selectedNode);

		new DefaultTreeNode(doc, selectedNode);

		treeControl.setNodePath(doc.getFullPath());

	}
"
2278,2b37041c-9bc6-462a-9e02-90c98e9bddeb,"	public void copyNode() {

		TreeNode selectedNode = treeControl.getSelectedNode();

		clipboard = new DefaultTreeNode(new UrlDocument(""Base"", ""about:blank"",
				(TreeNode) null), (TreeNode) null);

		duplicateTree(selectedNode, clipboard);

	}
"
2279,d9e91b45-2832-4123-9627-5d7cfb2557cc,"	private void duplicateTree(TreeNode source, TreeNode target) {

		TreeNode node = duplicateNode(source, target);

		for (TreeNode item : source.getChildren()) {
			duplicateTree(item, node);
		}
	}
"
2280,823b6d71-5312-4e62-b091-4729c1401b67,"	private TreeNode duplicateNode(TreeNode source, TreeNode target) {
		UrlDocument doc = (UrlDocument) source.getData();
		TreeNode node = new DefaultTreeNode(new UrlDocument(doc.getName(),
				doc.getUrl(), target), target);
		return node;
	}
"
2281,eb71a41b-55a6-427f-938f-d3d6c8764cc0,"	public void pasteNode() {

		TreeNode selectedNode = treeControl.getSelectedNode();
		TreeNode node = clipboard.getChildren().get(0);
		boolean duplicated = false;
		for (TreeNode item : selectedNode.getChildren()) {
			UrlDocument doc = (UrlDocument) item.getData();
			UrlDocument docClipboard = (UrlDocument) node.getData();
			if (doc.getName().matches(docClipboard.getName())) {
				duplicated = true;
				break;
			}
		}
		if (!duplicated) {
			node.setParent(selectedNode);
			UrlDocument urlDocument = (UrlDocument) node.getData();
			urlDocument.setParentNode(selectedNode);
			urlDocument.pathUpdate();
			updateChildren(node);
			treeControl.setNodePath(urlDocument.getFullPath());
		}

	}
"
2282,873a889b-b349-443c-80c7-423287487df3,"	public void deleteNode() {

		TreeNode selectedNode = treeControl.getSelectedNode();

		if (selectedNode.getParent() != treeControl.getRoot()) {

			selectedNode.getChildren().clear();

			DefaultTreeNode parent = (DefaultTreeNode) selectedNode.getParent();

			parent.getChildren().remove(selectedNode);

			UrlDocument doc = (UrlDocument) parent.getData();

			treeControl.setNodePath(doc.getFullPath());

		}
	}
"
2283,67f5a980-38df-4bd8-93fa-3e1f865c8a40,"	public void updateNode() {

		DefaultTreeNode selectedNode = (DefaultTreeNode) treeControl
				.getSelectedNode();

		TreeNode parent = selectedNode.getParent();
		UrlDocument doc = new UrlDocument(name, url, parent);

		selectedNode.setData(doc);

		treeControl.setNodePath(doc.getFullPath());

		updateChildren(selectedNode);

	}
"
2284,59477258-d173-4c11-9915-643d73d971b9,"	private void updateChildren(TreeNode node) {
		for (TreeNode item : node.getChildren()) {
			((UrlDocument) item.getData()).pathUpdate();
			updateChildren(item);
		}
	}
"
2285,d84f44d7-674c-4108-b74c-b32b2d2db142,"	@Override
	public String toString() {
		return name + "": "" + url;
	}
"
2286,b6a1de50-8b70-43f2-9f9b-f10daea6d74d,"	public String getName() {
		return name;
	}
"
2287,9c4ea396-f673-4831-8d77-df4a00ee6e6d,"	public String getUrl() {
		return url;
	}
"
2288,40650273-74e3-481b-a314-7885378a3a10,"	public String getFullPath() {
		return fullPath;
	}
"
2289,4713cd72-6349-4a1b-9235-2612b56a00df,"	public void setDoc(UrlDocument doc) {
		this.doc = doc;
		name = doc.getName();
		url = doc.getUrl();
		fullPath = doc.getFullPath();
	}
"
2290,11817553-6096-43ab-ab00-7cd3a5360f1b,"	@Override
	public String toString() {
		return doc.getFullPath();
	}
"
2291,f7eb6e4f-31cd-4a49-995c-90d1bdc22976,"	@Test
	public void getValidateCardMethod() {
		Card card = mock(Card.class);
		Account acc = mock(Account.class);
		ATM atm = new ATM(acc, card);
		card.isBlocked();
		atm.validateCard();
		verify(card, atLeastOnce()).isBlocked();
	}
"
2292,67cdde76-2a8a-4bbb-a3b4-25dcd51c233b,"	@Test
	public void ValidateCardParametr() {
		Card card = mock(Card.class);
		Account acc = mock(Account.class);
		ATM atm = new ATM(acc, card);
		when(card.isBlocked()).thenReturn(true);
		boolean result = atm.validateCard();
		assertEquals(true, result);
	}
"
2293,7f6e3f8b-ec93-4768-987c-a5aea1317ddf,"	@Test
	public void getValidatePinCodeMethod() {
		Card card = mock(Card.class);
		Account acc = mock(Account.class);
		ATM atm = new ATM(acc, card);
		card.checkPin(1234);
		atm.validatePincode(1234);
		verify(card, atLeastOnce()).checkPin(1234);
	}
"
2294,869101e4-75d3-4daa-845d-8b28b98d3a4c,"	@Test
	public void PinCodeParametr() {
		Card card = mock(Card.class);
		Account acc = mock(Account.class);
		ATM atm = new ATM(acc, card);
		when(card.checkPin(1234)).thenReturn(true);
		boolean result = atm.validatePincode(1234);
		assertEquals(true, result);
	}
"
2295,6c1ffb31-ab45-43ee-9dbc-27da794b5701,"	@Test(expected = NoCardInserted.class)
	public void checkIfCardIsNotBlockedThrowsException() throws NoCardInserted {
		Card card = mock(Card.class);
		Account acc = mock(Account.class);
		ATM atm = new ATM(acc, card);
		when(card.isBlocked()).thenReturn(true);
		atm.checkValidCard(card,1234);
	}
"
2296,2d9ddc7b-5d16-4cc5-89d1-c62aba7c8e9e,"	@Test(expected = NoCardInserted.class)
	public void checkIfPincodeCorrectThrowsException() throws NoCardInserted {
		Card card = mock(Card.class);
		Account acc = mock(Account.class);
		ATM atm = new ATM(acc, card);
		when(card.checkPin(1234)).thenReturn(true);
		atm.checkValidCard(card, 2345);
	}
"
2297,109bb950-c86a-434e-bc45-346ca9cee2fc,"	@Test
	public void getGettingBalanceMethod() {
		Account acc = mock(Account.class);
		Card card = mock(Card.class);
		ATM atm = new ATM(acc, card);
		when(acc.getBalance()).thenReturn(500.0);
		atm.getBalance();
		verify(acc, atLeastOnce()).getBalance();
	}
"
2298,3323eb23-3443-4d72-ac77-412f9638f42c,"	@Test
	public void checkBalanceGetting() {
		Account acc = mock(Account.class);
		Card card = mock(Card.class);
		ATM atm = new ATM(acc, card);
		when(acc.getBalance()).thenReturn(500.0);
		double expected = 500;
		double actual = atm.getBalance();
		assertEquals(expected, actual, 0.01);
	}
"
2299,2ed262db-2b5e-4f41-8ba3-78a283a8f5ca,"	@Test(expected = NotEnoughMoneyInAccount.class)
	public void checkGettingAmountFromAccount() throws NotEnoughMoneyInAccount,
			NotEnoughMoneyInATM {
		Account acc = mock(Account.class);
		Card card = mock(Card.class);
		ATM atm = new ATM(acc, card);
		double ammount = 500.0;
		double accountBalance = 200;
		double moneyFromATM = 1000;
		when(acc.getBalance()).thenReturn(accountBalance);
		atm.getCash(ammount, accountBalance, moneyFromATM);
		assertEquals(ammount, accountBalance, 0.01);
	}
"
2300,c105fbb2-932d-4fab-aafa-c857edd2256a,"	@Test(expected = NotEnoughMoneyInATM.class)
	public void checkMoneyEnoughInATMThrowsException()
			throws NotEnoughMoneyInATM, NotEnoughMoneyInAccount {
		double ammount = 500;
		double moneyInATM = 200;
		double accountBalance = 1000;
		Account acc = mock(Account.class);
		Card card = mock(Card.class);
		ATM atm = new ATM(acc, card);
		when(acc.getBalance()).thenReturn(accountBalance);
		atm.getCash(ammount, accountBalance, moneyInATM);
		assertEquals(ammount, moneyInATM, 0.01);
	}
"
2301,89a0bd51-5784-43b1-9521-44b3cdffc9b4,"	@Test
	public void getInCorrectOrderCashMethod() throws NotEnoughMoneyInAccount,
			NotEnoughMoneyInATM {
		Account acc = mock(Account.class);
		Card card = mock(Card.class);
		ATM atm = new ATM(acc, card);
		double ammount = 500.0;
		double accountBalance = 700;
		double moneyFromATM = 1000;
		when(acc.getBalance()).thenReturn(accountBalance);
		atm.getCash(ammount, accountBalance, moneyFromATM);
		InOrder order = inOrder(acc);
		order.verify(acc, times(1)).getBalance();
		order.verify(acc, times(1)).withdraw(anyDouble());
	}
"
2302,bbdd11f4-60c0-4f47-b5fd-a9610eecea60,"  public void f() throws NotEnoughMoneyInATM {
    System.out.println(
      ""Throwing NotEnoughMoneyInATM"");
    throw new NotEnoughMoneyInATM ();
  }
"
2303,de783539-d430-4673-a628-02e9abaa41b3,"  public static void main(String[] args) {
	  NotEnoughMoneyInATMDemo sed = 
      new NotEnoughMoneyInATMDemo();
    try {
      sed.f();
    } catch(NotEnoughMoneyInATM e) {
      System.err.println(""Caught it!"");
    }
  }
"
2304,61604f5a-a742-4909-af12-631adb4c7c4a,"	  public void f() throws NotEnoughMoneyInAccount {
	    System.out.println(
	      ""Throwing NotEnoughMoneyInAccount"");
	    throw new NotEnoughMoneyInAccount ();
	  }
"
2305,81f052e3-9f9b-4382-a7f0-1177570c792b,"	  public static void main(String[] args) {
		  NotEnoughMoneyInAccountDemo sed = 
	      new NotEnoughMoneyInAccountDemo();
	    try {
	      sed.f();
	    } catch(NotEnoughMoneyInAccount e) {
	      System.err.println(""Caught it!"");
	    }
	  }
"
2306,027f12f1-1c33-480a-bf9d-b5fa11e73aaa,"	  public void f() throws NoCardInserted {
	    System.out.println(
	      ""Throwing NoCardInserted"");
	    throw new NoCardInserted ();
	  }
"
2307,9d30768a-7b2c-457e-8d8c-f706e5faed5a,"	  public static void main(String[] args) {
		  NoCardInsertedDemo sed = 
	      new NoCardInsertedDemo();
	    try {
	      sed.f();
	    } catch(NoCardInserted e) {
	      System.err.println(""Caught it!"");
	    }
	  }
"
2308,045685ff-fd56-410b-872a-afd440215523,"	public ISAACAlgorithm() {
		mem = new int[SIZE];
		rsl = new int[SIZE];

		init(false);
	}
"
2309,40848f26-df75-4aa4-a515-7c8bc805db38,"	public ISAACAlgorithm(int[] seed) {
		mem = new int[SIZE];
		rsl = new int[SIZE];

		// This is slow and throws an ArrayIndexOutOfBoundsException if
		// seed.length > rsl.length ...
		/* for (int i = 0; i < seed.length; ++i) rsl[i] = seed[i]; */
		// ... this is faster and safe:
		System.arraycopy(seed, 0, rsl, 0,
				seed.length <= rsl.length ? seed.length : rsl.length);

		init(true);
	}
"
2310,127bb504-4504-40e7-b6c5-8f9ca51d3b72,"	private final void isaac() {
		int i, x, y;

		b += ++c;
		for (i = 0; i < SIZE; ++i) {
			x = mem[i];
			switch (i & 3) {
			case 0:
				a ^= a << 13;
				break;
			case 1:
				a ^= a >>> 6;
				break;
			case 2:
				a ^= a << 2;
				break;
			case 3:
				a ^= a >>> 16;
				break;
			}
			a += mem[i + SIZE / 2 & SIZE - 1];
			mem[i] = y = mem[(x & MASK) >> 2] + a + b;
			rsl[i] = b = mem[(y >> SIZEL & MASK) >> 2] + x;
		}
	}
"
2311,6a85daa7-f845-49cd-b126-e08595e902ba,"	private final void init(boolean flag) {
		int i;
		int a, b, c, d, e, f, g, h;
		a = b = c = d = e = f = g = h = 0x9e3779b9; // The golden ratio

		for (i = 0; i < 4; ++i) {
			a ^= b << 11;
			d += a;
			b += c;
			b ^= c >>> 2;
			e += b;
			c += d;
			c ^= d << 8;
			f += c;
			d += e;
			d ^= e >>> 16;
			g += d;
			e += f;
			e ^= f << 10;
			h += e;
			f += g;
			f ^= g >>> 4;
			a += f;
			g += h;
			g ^= h << 8;
			b += g;
			h += a;
			h ^= a >>> 9;
			c += h;
			a += b;
		}

		for (i = 0; i < SIZE; i += 8) { // Fill in mem[] with messy stuff
			if (flag) {
				a += rsl[i];
				b += rsl[i + 1];
				c += rsl[i + 2];
				d += rsl[i + 3];
				e += rsl[i + 4];
				f += rsl[i + 5];
				g += rsl[i + 6];
				h += rsl[i + 7];
			}
			a ^= b << 11;
			d += a;
			b += c;
			b ^= c >>> 2;
			e += b;
			c += d;
			c ^= d << 8;
			f += c;
			d += e;
			d ^= e >>> 16;
			g += d;
			e += f;
			e ^= f << 10;
			h += e;
			f += g;
			f ^= g >>> 4;
			a += f;
			g += h;
			g ^= h << 8;
			b += g;
			h += a;
			h ^= a >>> 9;
			c += h;
			a += b;
			mem[i] = a;
			mem[i + 1] = b;
			mem[i + 2] = c;
			mem[i + 3] = d;
			mem[i + 4] = e;
			mem[i + 5] = f;
			mem[i + 6] = g;
			mem[i + 7] = h;
		}

		if (flag) { // Second pass: makes all of seed affect all of mem[]
			for (i = 0; i < SIZE; i += 8) {
				a += mem[i];
				b += mem[i + 1];
				c += mem[i + 2];
				d += mem[i + 3];
				e += mem[i + 4];
				f += mem[i + 5];
				g += mem[i + 6];
				h += mem[i + 7];
				a ^= b << 11;
				d += a;
				b += c;
				b ^= c >>> 2;
				e += b;
				c += d;
				c ^= d << 8;
				f += c;
				d += e;
				d ^= e >>> 16;
				g += d;
				e += f;
				e ^= f << 10;
				h += e;
				f += g;
				f ^= g >>> 4;
				a += f;
				g += h;
				g ^= h << 8;
				b += g;
				h += a;
				h ^= a >>> 9;
				c += h;
				a += b;
				mem[i] = a;
				mem[i + 1] = b;
				mem[i + 2] = c;
				mem[i + 3] = d;
				mem[i + 4] = e;
				mem[i + 5] = f;
				mem[i + 6] = g;
				mem[i + 7] = h;
			}
		}

		isaac();
		count = SIZE;
	}
"
2312,d7e6f4b6-3ab0-4e90-b2a4-9f26acb4a03e,"	public final int nextInt() {
		if (0 == count--) {
			isaac();
			count = SIZE - 1;
		}

		return rsl[count];
	}
"
2313,67321ca2-6f04-4432-94ec-bbb841fc2159,"	final void supplementSeed(int[] seed) {
		for (int i = 0; i < seed.length; i++)
			mem[i % mem.length] ^= seed[i];
	}
"
2314,2b4bece4-2bcb-4017-8d80-edada86787d0,"	public static void main(String[] args) {
		logger.info(""Starting the server application..."");
		
		// we load the networking related stuff now	
		try {
			new GameServerBootstrap().bind();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
"
2315,5f326bfc-2d32-4cc6-a306-a7025134c0e9,"	@Override
	public ChannelPipeline getPipeline() throws Exception {
		ChannelPipeline p = Channels.pipeline();
		
		return p;
	}
"
2316,25af8dde-5938-454f-82ed-33ffe0e1c16a,"	public GameServerBootstrap() throws IOException {
		
	}
"
2317,d3e9d1bc-bc9d-484e-8b8f-883e5b476757,"	public void bind() {
		logger.info(""Starting the networking..."");
		
		// We set the netty up now
		bootstrap.setFactory(new NioServerSocketChannelFactory(executor, executor));
		bootstrap.setPipelineFactory(new GameServerPipelineFactory());
		
		// The address the server will be listening too
		SocketAddress game = new InetSocketAddress(GameConstants.PORT);
		
		logger.info(""The game server is now listening to "" +GameConstants.PORT+ ""."");
		// we now are listening on this port
		bootstrap.bind(game);
	}
"
2318,e2d681be-0bd0-4fc9-afac-1a94d6efd929,"	public Entity(int index) {
		this.index = index;
	}
"
2319,813f403c-0f4e-41ff-8178-25da652f8fb1,"	public final int getIndex() {
		return index;
	}
"
2320,862f8d15-aec5-4c19-8a55-80ae58d15ef4,"	public Position getPosition() {
		return position;
	}
"
2321,76169eb1-1b76-4b7e-aa68-2ee6252c1b2d,"	public void setPosition(Position position) {
		this.position = position;
	}
"
2322,4a909cd2-67ef-40a2-886f-9f84657de692,"	private GameConstants() {
		
	}
"
2323,e278d895-60af-436d-8b93-67a1d0f6c91d,"	public Position(int x, int y, int z) {
		this.x = (short)x;
		this.y = (short)y;
		this.z = (byte)z;
	}
"
2324,1788a314-169d-4069-b1f1-6bad33f319e9,"	public short getX() {
		return x;
	}
"
2325,aca81606-dbbf-448d-b91d-d877c2e0b594,"	public short getY() {
		return y;
	}
"
2326,cd528e01-412d-40c7-a124-809abd359371,"	public byte getZ() {
		return z;
	}
"
2327,9f8424e2-296a-4e1b-bcde-0f63bde72095,"	public boolean isUpdateRequired() {
		return !flags.isEmpty();
	}
"
2328,dc1dabca-edc4-4a0c-81c0-60357c97ae72,"	public Combatable(int index) {
		super(index);
		// TODO Auto-generated constructor stub
	}
"
2329,7f990212-1147-4adc-aa0f-46f97e26d4bb,"	public Actor(int index) {
		super(index);
		// TODO Auto-generated constructor stub
	}
"
2330,5b7bab8e-82bb-4949-8a3c-1bf7bf753a2d,"	public Player(int index) {
		super(index);
		// TODO Auto-generated constructor stub
	}
"
2331,920a0684-fe74-4e34-96fe-e433a67774a9,"	public Mob(int index) {
		super(index);
		// TODO Auto-generated constructor stub
	}
"
2332,6a45d01b-25f1-49f7-9273-c85c97fd48a5,"	public CombatableMob(int index) {
		super(index);
		// TODO Auto-generated constructor stub
	}
"
2333,57194d5d-1db0-40dc-8e51-6d761b722c3f,"	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		ClientLoginFrame clientLoginFrame=new ClientLoginFrame();
		clientLoginFrame.setSize(450,300);
		clientLoginFrame.setVisible(true);
		clientLoginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
	}
"
2334,e869ea8a-65e3-4b3c-b14a-e268d52bcaa3,"	public ClientLoginFrame() {
		getContentPane().setLayout(null);
		System.out.println(""Want to connect to Server?"");
		panel = new JPanel();
		panel.setBounds(40, 41, 349, 186);
		getContentPane().add(panel);
		panel.setLayout(null);

		JLabel lblIpAddress = new JLabel(""Ip Address"");
		lblIpAddress.setBounds(31, 36, 81, 14);
		panel.add(lblIpAddress);

		JLabel lblPort = new JLabel(""Port"");
		lblPort.setBounds(31, 67, 46, 14);
		panel.add(lblPort);

		tfPort = new JTextField();
		tfPort.setBounds(139, 64, 169, 20);
		panel.add(tfPort);
		tfPort.setColumns(10);

		textField = new JTextField();
		textField.setText(""127.0.0.1"");
		textField.setBounds(139, 33, 169, 20);
		panel.add(textField);
		textField.setColumns(10);

		JLabel lblYourName = new JLabel(""Your Roll"");
		lblYourName.setBounds(31, 101, 81, 14);
		panel.add(lblYourName);

		txtRakin = new JTextField();
		txtRakin.setText(""201005009"");
		txtRakin.setColumns(10);
		txtRakin.setBounds(139, 95, 169, 20);
		panel.add(txtRakin);

		JButton btnConnect = new JButton(""Connect"");
		btnConnect.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				String ipAddress = textField.getText();
				String name = txtRakin.getText();
				int port = Integer.parseInt(tfPort.getText());

				try {
					System.out.println(""Trying to connect to Server."");
					Socket socket = new Socket(ipAddress, port);
					System.out.println(""Connected to Server."");

					InputStream is = socket.getInputStream();
					OutputStream os = socket.getOutputStream();

					byte[] bytes = name.getBytes();
					os.write(bytes);

					DataInputStream dis = new DataInputStream(is);

					while (dis.available() == 0) {
					}

					String response = dis.readUTF();
					if (response.equals(""ValidStudentId"")) {
						ClientFrame clientFrame = new ClientFrame(socket);
						clientFrame.setSize(450, 300);
						clientFrame
								.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
						clientFrame.setVisible(true);
						dispose();
					} else {

						String errorMessage="""";
						if (response.equals(""InvalidIpAddress""))
						{
							errorMessage=""The ip address for you device is not allowed to connect with the given Student Id."";
						}
						else if(response.equals(""InvalidStudentId""))
						{
							errorMessage=""The student id you provided is invalid. Please re-enter a valid student id."";
						}
						
						JOptionPane.showMessageDialog(null, errorMessage);
						socket.close();
					}

				} catch (UnknownHostException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				// new ClientThread().start();

			}
		});
		btnConnect.setBounds(113, 152, 89, 23);
		panel.add(btnConnect);

		lblwarning = new JLabel("""");
		lblwarning.setFont(new Font(""Arial"", Font.BOLD, 14));
		lblwarning.setForeground(Color.RED);
		lblwarning.setBounds(31, 11, 308, 14);
		panel.add(lblwarning);

	}
"
2335,b327a187-66e2-4172-8cb5-a301eea4060c,"			public void actionPerformed(ActionEvent arg0) {

				String ipAddress = textField.getText();
				String name = txtRakin.getText();
				int port = Integer.parseInt(tfPort.getText());

				try {
					System.out.println(""Trying to connect to Server."");
					Socket socket = new Socket(ipAddress, port);
					System.out.println(""Connected to Server."");

					InputStream is = socket.getInputStream();
					OutputStream os = socket.getOutputStream();

					byte[] bytes = name.getBytes();
					os.write(bytes);

					DataInputStream dis = new DataInputStream(is);

					while (dis.available() == 0) {
					}

					String response = dis.readUTF();
					if (response.equals(""ValidStudentId"")) {
						ClientFrame clientFrame = new ClientFrame(socket);
						clientFrame.setSize(450, 300);
						clientFrame
								.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
						clientFrame.setVisible(true);
						dispose();
					} else {

						String errorMessage="""";
						if (response.equals(""InvalidIpAddress""))
						{
							errorMessage=""The ip address for you device is not allowed to connect with the given Student Id."";
						}
						else if(response.equals(""InvalidStudentId""))
						{
							errorMessage=""The student id you provided is invalid. Please re-enter a valid student id."";
						}
						
						JOptionPane.showMessageDialog(null, errorMessage);
						socket.close();
					}

				} catch (UnknownHostException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				// new ClientThread().start();

			}
"
2336,6fc3fd82-fcff-4048-8e86-4efa020e167f,"	public ClientFrame(final Socket socket) {
		getContentPane().setLayout(null);

		this.socket = socket;

		fileChooser = new JFileChooser();
		fileChooser.setMultiSelectionEnabled(true);
		folderChooser = new JFileChooser();
		folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		folderChooser.setMultiSelectionEnabled(true);

		JPanel panel = new JPanel();
		panel.setName(""Client"");
		panel.setBorder(new TitledBorder(UIManager
				.getBorder(""TitledBorder.border""), ""File Sender"",
				TitledBorder.LEADING, TitledBorder.TOP, null, new Color(70,
						130, 180)));

		panel.setForeground(new Color(0, 0, 0));
		panel.setBounds(40, 28, 351, 204);
		getContentPane().add(panel);
		panel.setLayout(null);

		tfFilePath = new JTextField();
		tfFilePath.setBounds(10, 41, 239, 20);
		tfFilePath
				.setText(""E:\\Android Workplace\\Server-Client-Architecture\\src\\Client\\ClientFrame.java"");
		panel.add(tfFilePath);
		tfFilePath.setColumns(10);

		JLabel lblFilePath = new JLabel(""File Path"");
		lblFilePath.setBounds(10, 16, 81, 14);
		panel.add(lblFilePath);

		JButton btnSendAFile = new JButton(""Send A File"");
		btnSendAFile.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				String[] paths = tfFilePath.getText().split("";"");

				try {

					for (String path : paths) {
						OutputStream os = socket.getOutputStream();

						DataOutputStream dos = new DataOutputStream(os);
						dos.writeUTF(""ConfigurationRequest"");

						DataInputStream dis = new DataInputStream(socket
								.getInputStream());

						while (dis.available() == 0) {
						}

						configurations = new Configurations();

						int length = dis.readInt();
						String[] extensions = new String[length];
						for (int i = 0; i < length; i++) {
							extensions[i] = dis.readUTF();
						}
						configurations.setExtensions(extensions);
						configurations.setNumberOfFiles(dis.readInt());
						configurations.setMaximumSize(dis.readLong());
						configurations.setMinId(dis.readLong());
						configurations.setMaxId(dis.readLong());
						configurations.setFolderAllowed(dis.readBoolean());

						File file = new File(path);
						
						if (configurations.isValidExtension(file.getName())
								&& configurations.isValidSize(file.length())) {
							
							dos.writeUTF(""FileCount"");
							int count=dis.readInt();
							if(configurations.isValidFileCount(count))
							{
								dos.writeUTF(""Valid"");

								transmitFile(path);

								JOptionPane.showMessageDialog(null,
										""Successfully Transfered."");
							}
							else{
								dos.writeUTF(""Invalid"");
								String msg=""More Than Allowed Number Of Files!!!!"";
								JOptionPane.showMessageDialog(null, msg);
							}
						} else {
							dos.writeUTF(""Invalid"");
							String msg = """";
							if (!configurations.isValidExtension(file.getName())) {
								msg+=""Invalid Extension!!!!"";
							}
							if (!configurations.isValidSize(file.length())) {
								msg+=""Very Large File!!!!"";
							}

							JOptionPane.showMessageDialog(null, msg);

						}


					}
				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

			}

		});
		btnSendAFile.setBounds(89, 72, 152, 23);
		panel.add(btnSendAFile);

		JLabel lblDirectiry = new JLabel(""Directory"");
		lblDirectiry.setBounds(10, 103, 166, 14);
		panel.add(lblDirectiry);

		tfFolderPath = new JTextField();
		tfFolderPath.setBounds(10, 128, 239, 20);
		tfFolderPath
				.setText(""E:\\Android Workplace\\Server-Client-Architecture\\src"");
		panel.add(tfFolderPath);
		tfFolderPath.setColumns(10);

		JButton btnSendAFolder = new JButton(""Send A Folder"");
		btnSendAFolder.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				String path = tfFolderPath.getText();
				

				// FileInputStream fis = null;
				try {

					OutputStream os = socket.getOutputStream();

					DataOutputStream dos = new DataOutputStream(os);
					dos.writeUTF(""ConfigurationRequest"");

					DataInputStream dis = new DataInputStream(socket
							.getInputStream());

					while (dis.available() == 0) {
					}

					configurations = new Configurations();

					int length = dis.readInt();
					String[] extensions = new String[length];
					for (int i = 0; i < length; i++) {
						extensions[i] = dis.readUTF();
					}
					configurations.setExtensions(extensions);
					configurations.setNumberOfFiles(dis.readInt());
					configurations.setMaximumSize(dis.readLong());
					configurations.setMinId(dis.readLong());
					configurations.setMaxId(dis.readLong());
					configurations.setFolderAllowed(dis.readBoolean());

					// System.out.println(configurations.toString());

					File file = new File(path);

					if (configurations.isValidSize(file.length())
							&& configurations.isFolderAllowed()) {

						dos.writeUTF(""Valid"");
						// lblWarning.setText(""Success"");
						transmitFolder(path);

						JOptionPane.showMessageDialog(null,
								""Successfully Transfered."");
					} else {
						String msg = """";
						dos.writeUTF(""Invalid"");
						if (configurations.isValidExtension(file.getName())) {
							msg += ""Invalid Extension!!!!"";
						}
						if (configurations.isValidSize(file.length())) {
							msg += ""Very Large File!!!!"";
						}
						if (configurations.isFolderAllowed()) {
							msg += ""Folder Not Allowed!!!!"";
						}
						// lblWarning.setText(msg);

						JOptionPane.showMessageDialog(null, msg);

					}

					System.out.println(""end"");

				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				System.out.println(""end"");
			}
		});
		btnSendAFolder.setBounds(89, 159, 152, 23);
		panel.add(btnSendAFolder);

		JButton btnBrowseFile = new JButton(""Browse"");
		btnBrowseFile.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (fileChooser.showOpenDialog(getFrames()[0]) == JFileChooser.APPROVE_OPTION) {
					tfFilePath.setText(getAllFileName(fileChooser.getSelectedFiles()));
				}
			}

			
		});
		btnBrowseFile.setBounds(252, 40, 89, 23);
		panel.add(btnBrowseFile);

		JButton btnBrowseFolder = new JButton(""Browse"");
		btnBrowseFolder.setBounds(252, 127, 89, 23);
		panel.add(btnBrowseFolder);

		btnBrowseFolder.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (folderChooser.showOpenDialog(getFrames()[0]) == JFileChooser.APPROVE_OPTION) {
					tfFolderPath.setText(folderChooser.getSelectedFile()
							.getAbsolutePath());
				}
			}
		});

	}
"
2337,c0f5495d-d076-41ae-a869-eecc8e7b303e,"			public void actionPerformed(ActionEvent e) {

				String[] paths = tfFilePath.getText().split("";"");

				try {

					for (String path : paths) {
						OutputStream os = socket.getOutputStream();

						DataOutputStream dos = new DataOutputStream(os);
						dos.writeUTF(""ConfigurationRequest"");

						DataInputStream dis = new DataInputStream(socket
								.getInputStream());

						while (dis.available() == 0) {
						}

						configurations = new Configurations();

						int length = dis.readInt();
						String[] extensions = new String[length];
						for (int i = 0; i < length; i++) {
							extensions[i] = dis.readUTF();
						}
						configurations.setExtensions(extensions);
						configurations.setNumberOfFiles(dis.readInt());
						configurations.setMaximumSize(dis.readLong());
						configurations.setMinId(dis.readLong());
						configurations.setMaxId(dis.readLong());
						configurations.setFolderAllowed(dis.readBoolean());

						File file = new File(path);
						
						if (configurations.isValidExtension(file.getName())
								&& configurations.isValidSize(file.length())) {
							
							dos.writeUTF(""FileCount"");
							int count=dis.readInt();
							if(configurations.isValidFileCount(count))
							{
								dos.writeUTF(""Valid"");

								transmitFile(path);

								JOptionPane.showMessageDialog(null,
										""Successfully Transfered."");
							}
							else{
								dos.writeUTF(""Invalid"");
								String msg=""More Than Allowed Number Of Files!!!!"";
								JOptionPane.showMessageDialog(null, msg);
							}
						} else {
							dos.writeUTF(""Invalid"");
							String msg = """";
							if (!configurations.isValidExtension(file.getName())) {
								msg+=""Invalid Extension!!!!"";
							}
							if (!configurations.isValidSize(file.length())) {
								msg+=""Very Large File!!!!"";
							}

							JOptionPane.showMessageDialog(null, msg);

						}


					}
				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

			}
"
2338,eb9d9010-fe0c-47d8-b5d2-1ed9f53d3576,"			public void actionPerformed(ActionEvent arg0) {

				String path = tfFolderPath.getText();
				

				// FileInputStream fis = null;
				try {

					OutputStream os = socket.getOutputStream();

					DataOutputStream dos = new DataOutputStream(os);
					dos.writeUTF(""ConfigurationRequest"");

					DataInputStream dis = new DataInputStream(socket
							.getInputStream());

					while (dis.available() == 0) {
					}

					configurations = new Configurations();

					int length = dis.readInt();
					String[] extensions = new String[length];
					for (int i = 0; i < length; i++) {
						extensions[i] = dis.readUTF();
					}
					configurations.setExtensions(extensions);
					configurations.setNumberOfFiles(dis.readInt());
					configurations.setMaximumSize(dis.readLong());
					configurations.setMinId(dis.readLong());
					configurations.setMaxId(dis.readLong());
					configurations.setFolderAllowed(dis.readBoolean());

					// System.out.println(configurations.toString());

					File file = new File(path);

					if (configurations.isValidSize(file.length())
							&& configurations.isFolderAllowed()) {

						dos.writeUTF(""Valid"");
						// lblWarning.setText(""Success"");
						transmitFolder(path);

						JOptionPane.showMessageDialog(null,
								""Successfully Transfered."");
					} else {
						String msg = """";
						dos.writeUTF(""Invalid"");
						if (configurations.isValidExtension(file.getName())) {
							msg += ""Invalid Extension!!!!"";
						}
						if (configurations.isValidSize(file.length())) {
							msg += ""Very Large File!!!!"";
						}
						if (configurations.isFolderAllowed()) {
							msg += ""Folder Not Allowed!!!!"";
						}
						// lblWarning.setText(msg);

						JOptionPane.showMessageDialog(null, msg);

					}

					System.out.println(""end"");

				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				System.out.println(""end"");
			}
"
2339,5f7dbbce-1476-471d-a3d1-c6c0cc2b9899,"			public void actionPerformed(ActionEvent arg0) {
				if (fileChooser.showOpenDialog(getFrames()[0]) == JFileChooser.APPROVE_OPTION) {
					tfFilePath.setText(getAllFileName(fileChooser.getSelectedFiles()));
				}
			}
"
2340,0e8fd0c1-1946-40df-b010-53721d9760e7,"			public void actionPerformed(ActionEvent arg0) {
				if (folderChooser.showOpenDialog(getFrames()[0]) == JFileChooser.APPROVE_OPTION) {
					tfFolderPath.setText(folderChooser.getSelectedFile()
							.getAbsolutePath());
				}
			}
"
2341,50f01eec-fe43-4543-a30f-348aa300345c,"	private void transmitFile(String path) throws Exception {
		// TODO Auto-generated method stub
		
		int read = 0, firstByte = 0;
		File file = new File(path);
		FileInputStream fis = new FileInputStream(file);
		BufferedInputStream bufStream = new BufferedInputStream(fis);

		OutputStream os = socket.getOutputStream();
		DataOutputStream dos = new DataOutputStream(os);

		DataInputStream dis = new DataInputStream(socket.getInputStream());

		dos.writeUTF(""File"");

		// checking over-writing
		dos.writeUTF(file.getName());
		while (dis.available() == 0) {
		}
		if (dis.readUTF().equals(""Exists"")) {
			if (JOptionPane
					.showOptionDialog(
							null,
							""The file you want to transfer already exists in the server directory.\nDo you want to overwrite?"",
							""Over Write ?"", JOptionPane.YES_NO_OPTION,
							JOptionPane.QUESTION_MESSAGE, null, null, null)!=JOptionPane.YES_OPTION)
			{
				dos.writeUTF(""DoNotOverWrite"");
				return;
			}else dos.writeUTF(""Overwrite"");
		}

		System.out.println(""File"");
		byte[] bytes = new byte[512];

		while (true) {
			read = bufStream.read(bytes);
			dos.writeUTF(file.getName());
			System.out.println(file.getName());
			dos.writeInt(firstByte);
			System.out.println(firstByte);
			if (read == -1)
				read = 0;
			dos.writeInt(read);
			System.out.println(read);
			dos.write(bytes, 0, read);
			// System.out.println(new String(bytes,0,read));

			while (dis.available() == 0) {
			}

			if (dis.readUTF().equals(""Acknowledgement"")) {
				System.out.println(""Acknowledgement"");
				if (read < 512) {
					System.out.println(""loop broken"");
					break;
				}
				firstByte += read;
			}

		}
		
		dos.writeUTF(""CheckSum"");
		dos.writeUTF(Checksum.md5(bufStream));
		
		bufStream.close();
		
	}
"
2342,00db772e-b9a9-4e50-9606-38201f3633fd,"	private void transmitFolder(String path) throws Exception {
		File fileOrDir = new File(path);
		// System.out.println(path);
		DataOutputStream dos = new DataOutputStream(socket.getOutputStream());

		String absolutePath = fileOrDir.getAbsolutePath();
		if (fileOrDir.isDirectory()) {
			dos.writeUTF(""Folder"");
			dos.writeUTF(fileOrDir.getName());
			dos.writeInt(fileOrDir.list().length);
			System.out.println(""Folder"");
			System.out.println(fileOrDir.getName());
			System.out.println(fileOrDir.list().length);
			for (String s : fileOrDir.list()) {
				// System.out.println(absolutePath + s);
				transmitFolder(absolutePath + File.separator + s);

			}
		} else {
			if (configurations.isValidExtension(fileOrDir.getName())
					&& configurations.isValidSize(fileOrDir.length())) {
				transmitFile(path);
			} else
				JOptionPane.showMessageDialog(null, ""This File Named ""
						+ fileOrDir.getName()
						+ "" Is Not Allowed. Send Another File"");
		}
	}
"
2343,5c568ec1-10a9-4777-af8f-76cd6ee34c99,"	private String getAllFileName(File[] selectedFiles) {
		// TODO Auto-generated method stub
		String allNames="""";
		int count=0;
		
		
		for (File f : selectedFiles) {
			allNames+=f.getAbsolutePath();
			if(count!=selectedFiles.length)allNames+="";"";
			count++;
		}
		
		return allNames;
	}
"
2344,ed5992ac-abe8-4088-af53-1e8359a76fc5,"	public ClientThread(String ipAddress, String name) {
		super();
		this.ipAddress = ipAddress;
		this.name = name;
	}
"
2345,1bb4d0b6-1d2e-4494-bf8d-483d7fdf3c52,"	@Override
	public void run() {
		// TODO Auto-generated method stub
		
		
		
	}
"
2346,8dff6258-3106-4dbd-997f-f0714da90674,"	public Configurations() {
		
	}
"
2347,f3131ce4-058a-4034-a343-d8eb7089fcba,"	public String getRootPath() {
		return rootPath;
	}
"
2348,d542902c-f567-4f8b-8479-55938f6e6eea,"	public void setRootPath(String rootPath) {
		this.rootPath = rootPath;
	}
"
2349,d84560c9-147c-4467-b655-064625c7a4ef,"	public String[] getExtensions() {
		return extensions;
	}
"
2350,d070686e-c13c-42c5-81bf-308d91d25338,"	public void setExtensions(String[] extensions) {
		this.extensions = extensions;
	}
"
2351,00808b1e-b5c8-40ed-803d-535cb412027e,"	public int getNumberOfFiles() {
		return numberOfFiles;
	}
"
2352,be1ae64d-e173-4f21-92dc-a10e4ea3f71a,"	public void setNumberOfFiles(int numberOfFiles) {
		this.numberOfFiles = numberOfFiles;
	}
"
2353,dcdd0687-3a00-452d-ab50-f642e1c13567,"	public Long getMaximumSize() {
		return maximumSize;
	}
"
2354,85603d0a-4d86-4185-8679-4af8e5acfeeb,"	public void setMaximumSize(Long maximumSize) {
		this.maximumSize = maximumSize;
	}
"
2355,49e79313-98cf-4aed-ba68-c7741c280a01,"	public Long getMinId() {
		return minId;
	}
"
2356,7578fbb6-fa23-407a-820e-05a2f1746465,"	public void setMinId(Long minId) {
		this.minId = minId;
	}
"
2357,3fa5dc53-5151-49f8-87c9-0e2ee0ba21b4,"	public Long getMaxId() {
		return maxId;
	}
"
2358,08ad646f-ae28-4e7a-bd57-e17d2ee65181,"	public void setMaxId(Long maxId) {
		this.maxId = maxId;
	}
"
2359,0512345d-fa7d-4bc9-b42e-82f81dfe908c,"	public boolean isFolderAllowed() {
		return folderAllowed;
	}
"
2360,6f7bb7d1-a5c8-4a15-ad0e-23eeb1bd0fae,"	public void setFolderAllowed(boolean folderAllowed) {
		this.folderAllowed = folderAllowed;
	}
"
2361,caa317ec-da3f-4ecd-baa4-c3cc4360b5ed,"	public Configurations(String rootPath, String[] extensions,
			int numberOfFiles, Long maximumSize, Long minId, Long maxId,
			boolean folderAllowed) {
		super();
		this.rootPath = rootPath;
		this.extensions = extensions;
		this.numberOfFiles = numberOfFiles;
		this.maximumSize = maximumSize;
		this.minId = minId;
		this.maxId = maxId;
		this.folderAllowed = folderAllowed;
	}
"
2362,3b682c25-04c1-4943-b2ff-d0dd373708ae,"	@Override
	public String toString() {
		return ""Configurations [rootPath="" + rootPath + "", extensions=""
				+ Arrays.toString(extensions) + "", numberOfFiles=""
				+ numberOfFiles + "", maximumSize="" + maximumSize + "", minId=""
				+ minId + "", maxId="" + maxId + "", folderAllowed=""
				+ folderAllowed + ""]"";
	}
"
2363,d646942c-4797-4b2b-9518-b33305543ad7,"	public boolean isValidExtension(String fileName)
	{
		
		for (String s : extensions) {
			if(fileName.endsWith(s)) return true;
		}
		
		return false;
	}
"
2364,8bc430c8-85a3-484c-a217-33f508e81a25,"	public boolean isValidSize(Long fileSize)
	{
		if(fileSize<=maximumSize)return true;
		return false;
	}
"
2365,8b5fdde5-9df8-4dea-aaa4-915b310498fa,"	public boolean isValidStudentId(Long studentId)
	{
		if(studentId>=minId && studentId<=maxId)return true;
		return false;
	}
"
2366,c47692b8-2c6b-4f19-891d-f4288486db56,"	public boolean isValidIpAddress(Long studentId,InetAddress ipAddress)
	{
		InetAddress requiredIpAddress= (InetAddress)ServerRunningFrame.ipIdMap.get(studentId);
		if(requiredIpAddress==null)
		{
			return false;
		}
		else if(requiredIpAddress.equals(ipAddress))
		{
			return true;
		}
		
		return false;
		
	}
"
2367,09ce6ab5-7dd0-491c-b3b9-ca377ed6992c,"	public void insertNewIdIpMap(Long studentId,InetAddress inetAddress)
	{
		if(ServerRunningFrame.ipIdMap.containsValue(inetAddress))
		{
			return;
		}
		else
		{
			ServerRunningFrame.ipIdMap.put(studentId, inetAddress);
			ServerRunningFrame.idNumOfFilesMap.put(studentId,0);
		}
	}
"
2368,d85a2cd7-104f-4771-bd38-746998ada622,"	public boolean isValidFileCount(int count)
	{
		return count<numberOfFiles;
	}
"
2369,c3b38c20-e649-49fd-abf8-50d46bb59573,"    public static String md5(InputStream is) throws IOException {
        String md5 = """";
 
        try {
            byte[] bytes = new byte[4096];
            int read = 0;
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
 
            while ((read = is.read(bytes)) != -1) {
                digest.update(bytes, 0, read);
            }
 
            byte[] messageDigest = digest.digest();
 
            StringBuilder sb = new StringBuilder(32);
 
            for (byte b : messageDigest) {
                sb.append(hexDigits[(b >> 4) & 0x0f]);
                sb.append(hexDigits[b & 0x0f]);
            }
 
            md5 = sb.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
 
        return md5;
    }
"
2370,8ab1c7e7-bd52-4372-a5b4-91dca0438ca6,"	public FileOrFolderRecieverThread(Socket socket, Long studentId,
			Configurations configurations) throws Exception {

		this.configurations = configurations;
		this.studentId = studentId;
		this.socket = socket;
		bufStream = new BufferedInputStream(socket.getInputStream());
		dis = new DataInputStream(bufStream);
	}
"
2371,479ebfe1-6f45-42d5-86bb-52b7e759a145,"	@Override
	public void run() {
		// TODO Auto-generated method stub

		try {

			while (true) {
				while (bufStream.available() == 0) {
				}

				String configreq = dis.readUTF();
				ServerRunningFrame.println(configreq);
				if (configreq.equals(""ConfigurationRequest"")) {

					DataOutputStream dOutputStream = new DataOutputStream(
							socket.getOutputStream());

					String[] extensions = configurations.getExtensions();
					dOutputStream.writeInt(extensions.length);
					for (String s : extensions) {
						dOutputStream.writeUTF(s);
					}

					dOutputStream.writeInt(configurations.numberOfFiles);
					dOutputStream.writeLong(configurations.maximumSize);
					dOutputStream.writeLong(configurations.minId);
					dOutputStream.writeLong(configurations.maxId);
					dOutputStream.writeBoolean(configurations.folderAllowed);
					
					
					while (dis.available() == 0) {
					}
					dis.readUTF();
					dOutputStream.writeInt(ServerRunningFrame.idNumOfFilesMap.get(studentId));
					if (dis.readUTF().equals(""Valid""))
						recieveFolder(configurations.rootPath + File.separator
								+ studentId.toString());
				}

				/*
				 * String fileNameString= dis.readUTF(); FileOutputStream
				 * fos=new FileOutputStream(fileNameString);
				 * BufferedOutputStream bufoutStream = new
				 * BufferedOutputStream(fos);
				 * 
				 * int available = dis.readInt();
				 * 
				 * byte[] buffer = new byte[available];
				 * dis.readFully(buffer,0,buffer.length);
				 * bufoutStream.write(buffer, 0, buffer.length);
				 * bufoutStream.flush(); System.out.println(new
				 * String(buffer,0,buffer.length)); bufoutStream.close();
				 * bufStream.close();
				 */

			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
"
2372,611c80a4-99df-4bfc-9391-6ea45388a452,"	private void recieveFile(String abstractPath) throws Exception {
		// TODO Auto-generated method stub

		DataOutputStream dos = new DataOutputStream(socket.getOutputStream());

		// check overwrite
		String fileNameString = dis.readUTF();
		if (fileExists(abstractPath, fileNameString)) {
			dos.writeUTF(""Exists"");
			while (dis.available() == 0) {
			}
			String choice = dis.readUTF();
			System.out.println(""choice :"" + choice);
			if (!choice.equals(""Overwrite""))
				return;
		} else
			dos.writeUTF(""DoesNotExists"");

		while (dis.available() == 0) {
		}
		fileNameString = dis.readUTF();
		System.out.println(fileNameString);
		FileOutputStream fos = new FileOutputStream(abstractPath
				+ File.separator + fileNameString);
		BufferedOutputStream bufoutStream = new BufferedOutputStream(fos);

		while (bufStream.available() == 0) {
		}

		byte[] bytes = new byte[512000];
		int firstByte = dis.readInt();
		int segmentSize = dis.readInt();
		System.out.println(firstByte);
		System.out.println(segmentSize);
		while (true) {
			dis.read(bytes, 0, segmentSize);
			String s = new String(bytes, 0, 512);
			bufoutStream.write(bytes, 0, segmentSize);
			bufoutStream.flush();

			dos.writeUTF(""Acknowledgement"");
			if (segmentSize < 512) {

				break;
			}
			while (dis.available() == 0) {
			}

			fileNameString = dis.readUTF();
			firstByte = dis.readInt();
			segmentSize = dis.readInt();

			System.out.println(fileNameString);
			System.out.println(firstByte);
			System.out.println(segmentSize);

		}
		System.out.println(""loop break"");
		bufoutStream.flush();
		bufoutStream.close();

		fos.close();
		dis.readUTF();

		File file = new File(abstractPath + File.separator + fileNameString);
		FileInputStream fis = new FileInputStream(file);

		String checksum = dis.readUTF();
		if (!isEqualChecksum(fis, checksum))
			JOptionPane
					.showMessageDialog(null,
							""The checksums of the recieved and sent file are not equal."");
		else
			JOptionPane
					.showMessageDialog(null,
							""Both the checksum of the recieved and sent files are equal."");

		ServerRunningFrame.idNumOfFilesMap.put(studentId,
				ServerRunningFrame.idNumOfFilesMap.get(studentId) + 1);
		System.out.println(""Recieved A File:"" + fileNameString);

	}
"
2373,4962b09a-37e7-48ee-8e64-f88204b9c2a9,"	private boolean isEqualChecksum(InputStream fos, String checkSum)
			throws Exception {
		// TODO Auto-generated method stub

		String curCheckSum = Checksum.md5(fos);
		System.out.println(checkSum);
		System.out.println(curCheckSum);
		return curCheckSum.equals(checkSum);
	}
"
2374,2189f910-17dd-4d2c-a406-972ca31c16b8,"	private void recieveFolder(String abstractPath) throws Exception {
		// TODO Auto-generated method stub
		while (bufStream.available() == 0) {
		}

		String choice = dis.readUTF();
		System.out.println(choice);

		if (choice.equals(""Folder"")) {
			String folderName = dis.readUTF();
			System.out.println(folderName);

			File directory = new File(abstractPath + File.separator
					+ folderName);
			directory.mkdir();

			int numDir = dis.readInt();
			System.out.println(numDir);
			for (int i = 0; i < numDir; i++) {
				while (bufStream.available() == 0) {
				}

				recieveFolder(abstractPath + File.separator + folderName);
			}
			System.out.println(""Recieved A Folder:"" + folderName);
		} else {
			recieveFile(abstractPath);
		}

	}
"
2375,279e44a3-4e01-4afe-87f4-67a3939a34c0,"	public boolean fileExists(String abstractpath, String fileName) {
		File directory = new File(abstractpath + File.separator + fileName);
		return directory.exists();
	}
"
2376,caed1707-763a-4b99-8f54-0001a64a34c4,"	public ServerRunningFrame(Configurations configurations) {
		getContentPane().setLayout(null);

		this.configurations = configurations;

		setSize(500, 500);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true);

		thread = new Thread(this);

		JPanel panel = new JPanel();
		panel.setBorder(new EmptyBorder(5, 5, 5, 5));
		panel.setBackground(Color.WHITE);
		panel.setForeground(Color.BLACK);
		panel.setBounds(10, 11, 414, 239);
		getContentPane().add(panel);
		panel.setLayout(null);

		textArea = new JTextArea();
		textArea.setBackground(Color.PINK);
		textArea.setLineWrap(true);
		textArea.setWrapStyleWord(true);
		textArea.setBounds(10, 11, 394, 217);
		panel.add(textArea);

		thread.start();
	}
"
2377,c84da801-d3c7-46f9-aafd-b75fff7f873c,"	@Override
	public void run() {
		// TODO Auto-generated method stub

		ipIdMap = new HashMap<Long, InetAddress>();
		idNumOfFilesMap= new HashMap<Long, Integer>();
		Random random = new Random();
		int port = random.nextInt(64000);

		try {
			System.out.println(""Connecting to server socket at port "" + port);
			textArea.append(""Connecting to server socket at port "" + port
					+ ""\n"");
			// repaint();
			serverSocket = new ServerSocket(port);

			System.out.println(""Waiting for socket"");
			textArea.append(""Waiting for socket\n"");
			while (true) {
				Socket socket = serverSocket.accept();

				InputStream is = socket.getInputStream();
				OutputStream os = socket.getOutputStream();

				byte[] bytes = new byte[100];
				int readBytes = is.read(bytes);
				studentId = new Long(new String(bytes, 0, readBytes));

				DataOutputStream dos = new DataOutputStream(os);
				//System.out.println(configurations.toString());
				if (configurations.isValidStudentId(studentId)) {

					if (!ipIdMap.containsKey(studentId))
						configurations.insertNewIdIpMap(studentId, socket.getInetAddress());
					
					if (configurations.isValidIpAddress(studentId,
							socket.getInetAddress())) {
						
						System.out.println(""valid ip + id"");
						dos.writeUTF(""ValidStudentId"");
						File directory = new File(configurations.rootPath
								+ File.separator + studentId.toString());
						directory.mkdir();
						new FileOrFolderRecieverThread(socket, studentId,
								configurations).start();
					} else {
						
						
						int selection = JOptionPane
								.showOptionDialog(
										null,
										""The student wants to connect from a different ip adress.Do you want to accept the connection?"",
										""Allow Connection"",
										JOptionPane.YES_NO_OPTION,
										JOptionPane.QUESTION_MESSAGE, null,
										null, null);
						if (selection == JOptionPane.OK_OPTION) {
							
							System.out.println(""valid id not ip allowed ip"");
							dos.writeUTF(""ValidStudentId"");
							File directory = new File(configurations.rootPath
									+ File.separator + studentId.toString());
							directory.mkdir();
							new FileOrFolderRecieverThread(socket, studentId,
									configurations).start();
						}
						else
						{
							dos.writeUTF(""InvalidIpAddress"");
							socket.close();
						}
					}
				} else {
					dos.writeUTF(""InvalidStudentId"");
					socket.close();
				}
				// userName=new String(bytes,0,readBytes);
				// System.out.println(userName);
				println(studentId.toString());

			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
"
2378,b61fb356-c6f3-44dc-98e8-f3f69b415859,"	public static void println(String s) {
		textArea.append(s + ""\n"");
	}
"
2379,43333bad-3ef0-4c7b-a71c-5ebf23c30dcd,"	public ServerConfigurationFrame() {
		getContentPane().setLayout(null);
		
		jFileChooser= new JFileChooser();
		jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		
		JPanel panel = new JPanel();
		panel.setBounds(10, 11, 464, 313);
		getContentPane().add(panel);
		panel.setLayout(null);
		
		JLabel lblNewLabel = new JLabel(""Root Directory :"");
		lblNewLabel.setBounds(10, 11, 97, 14);
		panel.add(lblNewLabel);
		
		tfRootDirectory = new JTextField();
		tfRootDirectory.setBounds(117, 8, 241, 20);
		panel.add(tfRootDirectory);
		tfRootDirectory.setText(""C:\\Users\\Rakin Haider\\Desktop\\New folder"");
		tfRootDirectory.setColumns(10);
		
		JLabel lblNewLabel_1 = new JLabel(""File Types :"");
		lblNewLabel_1.setBounds(9, 36, 78, 14);
		panel.add(lblNewLabel_1);
		
		tfFileTypes = new JTextField();
		tfFileTypes.setBounds(117, 33, 241, 20);
		tfFileTypes.setEditable(false);
		panel.add(tfFileTypes);
		tfFileTypes.setColumns(10);
		
		JButton btnBrowse = new JButton(""Browse"");
		btnBrowse.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (jFileChooser.showOpenDialog(getFrames()[0]) == JFileChooser.APPROVE_OPTION) {
					tfRootDirectory.setText(jFileChooser.getSelectedFile()
							.getAbsolutePath());
				}
			}
		});
		btnBrowse.setBounds(368, 7, 86, 23);
		panel.add(btnBrowse);
		
		JButton btnAdd = new JButton(""Add"");
		btnAdd.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(tfFileTypes.getText().equals(""""))
					tfFileTypes.setText(tfNewType.getText());
				else tfFileTypes.setText(tfFileTypes.getText()+"";""+tfNewType.getText());
				tfNewType.setText("""");
			}
		});
		btnAdd.setBounds(368, 66, 86, 23);
		panel.add(btnAdd);
		
		JLabel lblNumberOfFiles = new JLabel(""Number Of FIles"");
		lblNumberOfFiles.setBounds(10, 103, 78, 14);
		panel.add(lblNumberOfFiles);
		
		tfNumbeOfFiles = new JTextField();
		tfNumbeOfFiles.setText(""10"");
		tfNumbeOfFiles.setBounds(117, 100, 241, 20);
		panel.add(tfNumbeOfFiles);
		tfNumbeOfFiles.setColumns(10);
		
		JLabel lblFolderAllowed = new JLabel(""Folder Allowed ?"");
		lblFolderAllowed.setBounds(10, 148, 78, 14);
		panel.add(lblFolderAllowed);
		
		final JCheckBox chckbxYes = new JCheckBox(""Yes"");
		chckbxYes.setSelected(true);
		chckbxYes.setBounds(117, 144, 97, 23);
		panel.add(chckbxYes);
		
		JLabel lblMaximumSize = new JLabel(""Maximum Size :"");
		lblMaximumSize.setBounds(10, 189, 78, 14);
		panel.add(lblMaximumSize);
		
		tfFileSize = new JTextField();
		tfFileSize.setText(""2097152"");
		tfFileSize.setBounds(128, 186, 86, 20);
		panel.add(tfFileSize);
		tfFileSize.setColumns(10);

		
		JLabel lblIdRange = new JLabel(""Id Range :"");
		lblIdRange.setBounds(10, 233, 78, 14);
		panel.add(lblIdRange);
		
		tfMinId = new JTextField();
		tfMinId.setText(""201005001"");
		tfMinId.setBounds(128, 230, 86, 20);
		panel.add(tfMinId);
		tfMinId.setColumns(10);
		
		tfMaxId = new JTextField();
		tfMaxId.setText(""201005120"");
		tfMaxId.setBounds(249, 230, 86, 20);
		panel.add(tfMaxId);
		tfMaxId.setColumns(10);
		
		JLabel label = new JLabel(""-"");
		label.setFont(new Font(""Tahoma"", Font.BOLD, 13));
		label.setBounds(227, 232, 46, 14);
		panel.add(label);
		
		JButton btnStartServer = new JButton(""Start Server"");
		btnStartServer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				String rootPath=tfRootDirectory.getText();
				String fileType=tfFileTypes.getText();
				String[] extensions=fileType.split("";"");
				int numberOfFiles=Integer.parseInt(tfNumbeOfFiles.getText());
				long maxFileSize= Long.parseLong(tfFileSize.getText());
				long maxId =Long.parseLong(tfMaxId.getText());
				long minId= Long.parseLong(tfMinId.getText());
				Configurations configurations= 
						new Configurations(
								rootPath,
								extensions,
								numberOfFiles,
								maxFileSize,
								minId,
								maxId,
								chckbxYes.isSelected()
								);
				
				dispose();
				ServerRunningFrame serverRunningFrame=new ServerRunningFrame(configurations);
				
			}
		});
		btnStartServer.setBounds(182, 279, 106, 23);
		panel.add(btnStartServer);
		
		JLabel lblNewType = new JLabel(""New Type :"");
		lblNewType.setBounds(10, 70, 68, 14);
		panel.add(lblNewType);
		
		tfNewType = new JTextField();
		tfNewType.setBounds(117, 67, 241, 20);
		panel.add(tfNewType);
		tfNewType.setColumns(10);
	}
"
2380,e36f6ac6-4a84-43a7-b9e9-deaf8839f5e8,"			public void actionPerformed(ActionEvent e) {
				if (jFileChooser.showOpenDialog(getFrames()[0]) == JFileChooser.APPROVE_OPTION) {
					tfRootDirectory.setText(jFileChooser.getSelectedFile()
							.getAbsolutePath());
				}
			}
"
2381,e7091de5-b243-4b6b-a8c1-c5fe6febeb9c,"			public void actionPerformed(ActionEvent e) {
				if(tfFileTypes.getText().equals(""""))
					tfFileTypes.setText(tfNewType.getText());
				else tfFileTypes.setText(tfFileTypes.getText()+"";""+tfNewType.getText());
				tfNewType.setText("""");
			}
"
2382,fcf2cd2b-35a0-4209-bc32-4f4246af32c9,"			public void actionPerformed(ActionEvent arg0) {
				
				String rootPath=tfRootDirectory.getText();
				String fileType=tfFileTypes.getText();
				String[] extensions=fileType.split("";"");
				int numberOfFiles=Integer.parseInt(tfNumbeOfFiles.getText());
				long maxFileSize= Long.parseLong(tfFileSize.getText());
				long maxId =Long.parseLong(tfMaxId.getText());
				long minId= Long.parseLong(tfMinId.getText());
				Configurations configurations= 
						new Configurations(
								rootPath,
								extensions,
								numberOfFiles,
								maxFileSize,
								minId,
								maxId,
								chckbxYes.isSelected()
								);
				
				dispose();
				ServerRunningFrame serverRunningFrame=new ServerRunningFrame(configurations);
				
			}
"
2383,e1144b95-52ad-4f57-a7d5-5e65ff706090,"	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		ServerConfigurationFrame serverConfigurationFrame= new ServerConfigurationFrame();
		
		serverConfigurationFrame.setSize(500,400);
		serverConfigurationFrame.setVisible(true);
		serverConfigurationFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		/*
		
		
		*/
		
	}
"
2384,81b6e791-a3ce-4960-9b6a-94387fe08f77,"    void conversationCreated(Conversation conversation);
"
2385,1e0bc4b1-bb4c-4216-99c1-628cbf0bd8ba,"    void conversationResuming(Conversation conversation, HttpServletRequest request);
"
2386,50deb7ce-5433-4ecf-bc5f-87692e7e2ce5,"    void conversationPausing(Conversation conversation);
"
2387,6dc93e37-77c6-43c9-8580-f2d66fab0801,"    void conversationEnding(Conversation conversation);
"
2388,5fe9ed91-2d15-41a6-abb9-aa0e85be5e41,"    public ConversationCallBack() {
    }
"
2389,5470c0cd-e10b-4edf-80a9-94210f0fc062,"    public final String ok(T entity) {
        incrementPopContextOnNextPauseCounter();
        onOk(entity);
        return nextView();
    }
"
2390,eccf660d-a7ee-423c-ba6a-6d5c3b701d38,"    protected void onOk(T entity) {
    }
"
2391,abebb10f-ed34-47bb-bbff-bf1076d98a34,"    public final String selected(T entity) {
        incrementPopContextOnNextPauseCounter();
        onSelected(entity);
        return nextView();
    }
"
2392,1f2acef5-8308-48dd-af15-832fdf2f3737,"    public final String selected(T... entities) {
        incrementPopContextOnNextPauseCounter();
        for (T entity : entities) {
            onSelected(entity);
        }
        return nextView();
    }
"
2393,8e818f2c-aac4-4526-8cc5-4f9214b92f13,"    protected void onSelected(T entity) {
    }
"
2394,62d5f6ce-4847-4b95-a5a4-bd8c211d72bf,"    public final String saved(T entity) {
        incrementPopContextOnNextPauseCounter();
        onSaved(entity);
        return nextView();
    }
"
2395,f68d3d83-84dc-4f0d-b167-66b21db7a54b,"    protected void onSaved(T entity) {
    }
"
2396,cc3596f4-75c7-4994-a649-aa0eef2075b0,"    public final String notSaved(T entity) {
        incrementPopContextOnNextPauseCounter();
        onNotSaved(entity);
        return nextView();
    }
"
2397,8e40be65-c326-40dd-8a6a-1d2dc2b93190,"    protected void onNotSaved(T entity) {
    }
"
2398,6a5b22ac-09dd-4ddc-a8a6-1da47c265b0a,"    public final String deleted(T entity) {
        incrementPopContextOnNextPauseCounter();
        onDeleted(entity);
        return nextView();
    }
"
2399,ae87a7f8-0e55-407d-8e1c-10f158b88527,"    protected void onDeleted(T entity) {
    }
"
2400,5864d8a4-bd7b-44d9-b36c-cb4fd6a279ce,"    public final String back() {
        incrementPopContextOnNextPauseCounter();
        onBack();
        return nextView();
    }
"
2401,312f9c6e-9911-4181-88d6-b2f328e868d2,"    protected void onBack() {
    }
"
2402,af29a31a-5449-426c-b747-c7b36ad7d5c6,"    private void incrementPopContextOnNextPauseCounter() {
        getCurrentConversation().incrementPopContextOnNextPauseCounter();
    }
"
2403,1ee3045a-5b57-47f1-af2b-5a2dcb4dc512,"    private String nextView() {
        return getCurrentConversation().nextView();
    }
"
2404,57d963f1-6693-42d4-9827-ebdd69a3e769,"    public static Conversation newConversation(HttpSession session) {
        AtomicInteger counter = (AtomicInteger) session.getAttribute(CONVERSATION_COUNTER_KEY);
        if (counter == null) {
            counter = new AtomicInteger(0);
            session.setAttribute(CONVERSATION_COUNTER_KEY, counter);
        }

        return new Conversation(String.valueOf(counter.incrementAndGet()));
    }
"
2405,922cb1f3-05a8-48ac-ba57-5b960b257fff,"    public static Conversation newConversation(HttpSession session, ConversationContext<?> conversationContext) {
        Conversation newInstance = newConversation(session);
        newInstance.setNextContext(conversationContext);
        return newInstance;
    }
"
2406,9fc98a8e-8ea4-4df5-928e-72f91fe1323b,"    public Conversation() {
    }
"
2407,d3476b0b-efac-46b0-80b2-92ca53534ad3,"    public Conversation(String id) {
        this.id = id;
    }
"
2408,0073da0b-311e-448c-b4b7-b8857a8a8615,"    public String getId() {
        return id;
    }
"
2409,966de78e-1843-451b-8d63-35c31a923c04,"    public String getCid() {
        return cidParamValue(id, nextContext().getId());
    }
"
2410,a94e4f6e-c365-4e53-b09d-3eaefcc3636a,"    public void addBean(String name, Object bean) {
        beans.put(name, bean);
    }
"
2411,f62c9439-c412-4a6a-bceb-8bca9b208a09,"    public Object getBean(String name) {
        return beans.get(name);
    }
"
2412,9fb066e9-cf75-4bd2-9fde-bb441abccc33,"    protected void handleOutOfSynchContext(String ccid, HttpServletRequest request) throws UnexpectedConversationException {
        ConversationContext<?> requestedContext = null;

        for (ConversationContext<?> ctx : contextes) {
            if (requestedContext == null) {
                if (ctx.getId().equals(ccid)) {
                    requestedContext = ctx;
                }
            } else {
                // we pop all contextes that are placed after the contexId requested
                incrementPopContextOnNextPauseCounter();
            }
        }

        if (requestedContext != null) {
            popContextesIfNeeded();
        } else {
            throw new UnexpectedConversationException(""Uri not in sync with conversation expecting _ccid_="" + getCurrentContext().getId() + "" but got "" + ccid,
                    request.getRequestURI(), getUrl());
        }
    }
"
2413,7ad04039-1f9d-4ba6-b26c-91697118e4bb,"    public void incrementPopContextOnNextPauseCounter() {
        popContextOnNextPauseCounter++;
    }
"
2414,bd7626df-87f7-48d8-844c-817329455386,"    public int getPopContextOnNextPauseCounter() {
        return popContextOnNextPauseCounter;
    }
"
2415,ca2deeca-a516-490f-a123-4a36fcf05b72,"    public void setNextContext(ConversationContext<?> newContext) {
        newContext.setId(String.valueOf(++conversationContextIdCounter));
        newContext.setConversationId(getId());
        // we delay the context push because apparently some EL is invoked after bean action is performed
        // which it leads in some cases to re-creation of 'conversation scoped' bean.
        nextContext = newContext; // will be pushed at next request during resuming...
    }
"
2416,87ffced7-f90e-4be9-af54-a133e2ca11b1,"    public ConversationContext<?> nextContext(ConversationContext<?> newContext) {
        setNextContext(newContext);
        return newContext;
    }
"
2417,ae3eacab-cab7-44d8-babc-358c4e0515dd,"    protected void pushNextContextIfNeeded() {
        if (nextContext != null) {
            contextes.push(nextContext);
            log.debug(""pushed 1 context on stack: {}"", nextContext.getLabel());
            nextContext = null;
        }
    }
"
2418,a626782b-deff-4fcf-a8f5-f4ea48168cfb,"    public void setNextContextSub(ConversationContext<?> newContext) {
        setNextContext(newContext.sub());
    }
"
2419,73a9b0cd-3daf-43e2-b7ec-8d5551953f2a,"    public void setNextContextSubReadOnly(ConversationContext<?> newContext) {
        setNextContext(newContext.sub().readonly());
    }
"
2420,fa5072f2-7942-4e79-864c-68ad9c16ec19,"    public void setNextContextReadOnly(ConversationContext<?> newContext) {
        setNextContext(newContext.readonly());
    }
"
2421,03aadcd4-ff48-4895-9519-5f2a38765011,"    public final int getConversationContextesCount() {
        return contextes.size();
    }
"
2422,f6da9dd8-ed71-48f7-8359-c90f846bf11c,"    @SuppressWarnings(""unchecked"")
    public <T extends ConversationContext<?>> T getCurrentContext() {
        return (T) contextes.peek();
    }
"
2423,ac6428ce-da19-4f8d-89bf-d37065d1185e,"    protected Stack<ConversationContext<?>> getConversationContextes() {
        return contextes;
    }
"
2424,0883e0c8-7c84-44ef-a190-1b9db7de1ec0,"    protected void popContextesIfNeeded() {
        if (popContextOnNextPauseCounter > 1) {
            log.debug(""There are {} to pop from the stack"", popContextOnNextPauseCounter);
        }

        for (int i = 0; i < popContextOnNextPauseCounter; i++) {
            if (!contextes.isEmpty()) {
                ConversationContext<?> ccPopped = contextes.pop();
                log.debug(""popped 1 context from stack: {}"", ccPopped.getLabel());
            } else {
                log.warn(""Attention, too many pop requested! Could be source of potential bug"");
            }
        }

        popContextOnNextPauseCounter = 0;

        if (contextes.isEmpty()) {
            log.info(""All contextes have been popped. Natural conversation ending will be performed"");
        }
    }
"
2425,36928f49-c0b2-466d-bedc-5ae1b627dd8a,"    public String nextView() {
        ConversationContext<?> context = nextContext();
        return context != null ? context.view() : ""/home.faces?faces-redirect=true"";
    }
"
2426,d016a9ae-3cc1-483c-805a-9556ce6c1717,"    public String nextUrl() {
        ConversationContext<?> context = nextContext();
        return context != null ? context.getUrl() : ""/home.faces"";
    }
"
2427,c7e1bdba-ec4d-4bad-9d62-338803d1d37d,"    @SuppressWarnings(""unchecked"")
    public <T extends ConversationContext<?>> T nextContext() {
        if (nextContext != null) {
            return (T) nextContext;
        }

        if (popContextOnNextPauseCounter > 0) {
            int nextActiveContextIndex = contextes.size() - 1 - popContextOnNextPauseCounter;
            if (nextActiveContextIndex >= 0) {
                ConversationContext<?> contextOnTopOfStackOnNextResume = contextes.elementAt(nextActiveContextIndex);
                return (T) contextOnTopOfStackOnNextResume;
            } else {
                return null;
            }
        }

        return (T) contextes.peek();
    }
"
2428,d55746e3-a31b-47b6-932c-37bcec00292c,"    public String getLabel() {
        return contextes.peek().getLabel();
    }
"
2429,d1985c63-9b68-4f31-87c5-152bf675e396,"    public String getUrl() {
        return contextes.peek().getUrl();
    }
"
2430,fd188d88-1620-4240-aa41-b3f7dab6ff04,"    public String getViewUri() {
        return contextes.peek().getViewUri();
    }
"
2431,96c28826-66b2-4889-b6f2-c2f7b39b1da7,"    public void setVar(String name, Object var) {
        contextes.peek().setVar(name, var);
    }
"
2432,d7b8b3e7-747b-44ee-9e39-5d8ee7f41f3c,"    public Object getVar(String name) {
        return contextes.peek().getVar(name);
    }
"
2433,5d1b8de2-a99f-4962-8a17-ab8b80073ad5,"    public <T> T getVar(String name, Class<T> expectedType) {
        return contextes.peek().getVar(name, expectedType);
    }
"
2434,8d3722e4-354e-4509-b949-ae5313f00adf,"    public ConversationContext() {
    }
"
2435,fa9f0c04-0396-4c2e-bdd5-f631d7da100c,"    public ConversationContext(String viewUri) {
        this.viewUri = viewUri;
    }
"
2436,e684f399-ed90-4e61-97d8-79aaa40015ee,"    protected void setId(String id) {
        this.id = id;
    }
"
2437,813b93c9-d4d9-4d1f-8b61-361fa69b71bb,"    public ConversationContext<T> id(String id) {
        setId(id);
        return this;
    }
"
2438,3faaf24d-815a-4d98-a228-58eb3c03746f,"    public String getId() {
        return id;
    }
"
2439,37a52579-5f19-4631-8815-d7a1792b9d8f,"    protected void setConversationId(String conversationId) {
        this.conversationId = conversationId;
    }
"
2440,5d2513cb-a25b-4e64-9373-f190a0d48322,"    public ConversationContext<T> conversationId(String conversationId) {
        setConversationId(conversationId);
        return this;
    }
"
2441,355b9989-688e-4f8c-8fc4-f91a55705c2f,"    public void setEntity(T entity) {
        setVar(""_entity"", entity);
    }
"
2442,a167427c-29eb-4a0c-a0e7-ad398fb094de,"    public ConversationContext<T> entity(T entity) {
        setEntity(entity);
        return this;
    }
"
2443,96d2e99e-89ec-4bc5-a42a-6e5589996572,"    @SuppressWarnings(""unchecked"")
    public T getEntity() {
        return (T) vars.get(""_entity"");
    }
"
2444,c1103c2a-10d2-4ffe-af3a-3ea662d2cf06,"    public void setIsNewEntity(boolean isNewEntity) {
        this.isNewEntity = isNewEntity;
    }
"
2445,d5815722-5fa8-4f50-b087-169bd3a59575,"    public ConversationContext<T> isNewEntity(boolean isNewEntity) {
        setIsNewEntity(isNewEntity);
        return this;
    }
"
2446,53363f4a-36ba-43df-907a-bfe627e79103,"    public ConversationContext<T> newEntity() {
        return isNewEntity(true);
    }
"
2447,92f372a4-5e22-45fa-8d63-89c70e184f91,"    public boolean isNewEntity() {
        return isNewEntity;
    }
"
2448,5878a573-4f49-4fb5-8c28-037f409fa0ce,"    public void setEntityId(Serializable entityId) {
        setVar(""entityId"", entityId);
    }
"
2449,6df9820e-261d-42f8-a8d2-b35de6fbb039,"    public ConversationContext<T> entityId(Serializable entityId) {
        setEntityId(entityId);
        return this;
    }
"
2450,b05d0572-f541-48df-95c9-dac2aa54490f,"    @SuppressWarnings(""unchecked"")
    public <PK> PK getEntityIdAndRemove() {
        return (PK) vars.remove(""entityId"");
    }
"
2451,94339f08-4ba2-46e3-9305-feebc7483c3d,"    public void setLabelKey(String labelKey, Object... labelKeyArgs) {
        this.labelKey = labelKey;
        this.labelKeyArgs = labelKeyArgs;
    }
"
2452,690fcd0e-c4c8-45a8-8123-7cfa8e68e8c4,"    public ConversationContext<T> labelKey(String labelKey, Object... labelKeyArgs) {
        setLabelKey(labelKey, labelKeyArgs);
        return this;
    }
"
2453,efb067d1-7ffd-4ff9-af73-f16b49dc4bef,"    public String getLabel() {
        return getProperty(labelKey, labelKeyArgs);
    }
"
2454,65a28fa1-bc87-462a-b2af-fc9cbbf49553,"    public abstract String getProperty(String labelKey, Object[] labelKeyArgs);
"
2455,62eb3ff7-a2fc-4043-8de9-1626e86b50b0,"    public void setViewUri(String viewUri) {
        this.viewUri = viewUri;
    }
"
2456,0407d81a-6368-42f4-af93-dfa7ace3c0fb,"    public ConversationContext<T> viewUri(String viewUri) {
        setViewUri(viewUri);
        return this;
    }
"
2457,3d77b075-8d88-45af-b6a4-dd7882cf789f,"    public String getViewUri() {
        return viewUri;
    }
"
2458,53ba5afe-7be2-4de6-880b-23de2d2faafa,"    public void setSub(boolean sub) {
        setVar(""sub"", sub);
    }
"
2459,c0076838-1ca4-437a-b671-14714af9ec99,"    public ConversationContext<T> sub(boolean sub) {
        setSub(sub);
        return this;
    }
"
2460,57b563b4-e901-4dee-baf1-e5437e73470a,"    public ConversationContext<T> sub() {
        return sub(true);
    }
"
2461,d5a4240a-3622-4081-a322-c93d2d6696fa,"    public boolean isSub() {
        return getVar(""sub"", Boolean.class) != null ? getVar(""sub"", Boolean.class) : false;
    }
"
2462,cd3ae602-78e1-411e-a366-2f2f2d699eb9,"    public void setReadonly(boolean readonly) {
        setVar(""readonly"", readonly);
    }
"
2463,53f00f65-30c8-4f67-8a41-82d6c150446b,"    public ConversationContext<T> readonly(boolean readonly) {
        setReadonly(readonly);
        return this;
    }
"
2464,7499950f-1d75-4020-8421-87ad137f3d96,"    public ConversationContext<T> readonly() {
        return readonly(true);
    }
"
2465,abda7411-9ec9-473c-8e27-3f85f3a3c2c5,"    public boolean isReadOnly() {
        return getVar(""readonly"", Boolean.class) != null ? getVar(""readonly"", Boolean.class) : false;
    }
"
2466,0b15578d-ec2c-46a3-9e5f-c6f4a937614e,"    public void setPrint(boolean print) {
        setVar(""print"", print);
    }
"
2467,5ef07ee8-4caf-4a89-82f8-7fe3476ba6f0,"    public ConversationContext<T> print(boolean print) {
        setPrint(print);
        return this;
    }
"
2468,97b11bd8-91d9-460a-bcb6-2a6ece1f4bd7,"    public ConversationContext<T> print() {
        return print(true);
    }
"
2469,277f1e25-c8c5-4df3-ad3e-6f6b74ff881a,"    public boolean isPrint() {
        return getVar(""print"", Boolean.class) != null ? getVar(""print"", Boolean.class) : false;
    }
"
2470,932afc87-b88a-489d-a5e9-c2553bdf272e,"    public void setCallBack(ConversationCallBack<T> callBack) {
        this.callBack = callBack;
    }
"
2471,91bcd794-3ff5-4b52-ac91-dea09d78d887,"    public ConversationContext<T> callBack(ConversationCallBack<T> callBack) {
        setCallBack(callBack);
        return this;
    }
"
2472,004f1d64-f9ff-4a5a-9d72-8257f368798b,"    public ConversationCallBack<T> getCallBack() {
        return callBack;
    }
"
2473,ad953c5d-5012-474f-9dc5-32bae99ea1fb,"    public String getUrl() {
        checkViewUriAndConversationId();
        return viewUri + ""?"" + cidParamNameValue(conversationId, getId());
    }
"
2474,f4567c4c-8448-4f0e-bbf9-b92eaf00c673,"    public String view() {
        checkViewUriAndConversationId();
        return viewUri + ""?faces-redirect=true&"" + cidParamNameValue(conversationId, getId());
    }
"
2475,3a5d917b-2cc9-4498-ac85-be91a5a36065,"    private void checkViewUriAndConversationId() {
        if (viewUri == null) {
            throw new IllegalStateException(""Developer! viewUri is null, it must be set before calling view() or getUrl() methods"");
        }

        if (conversationId == null) {
            throw new IllegalStateException(""Developer! conversationId is null, it must be set before calling view() or getUrl() methods"");
        }
    }
"
2476,df3c10f0-4340-485d-9349-578cb5fd5b9c,"    public void addBean(String name, Object bean) {
        beans.put(name, bean);
    }
"
2477,95e5ffbb-b1fb-43c7-bd0d-1652098ecae3,"    @SuppressWarnings(""unchecked"")
    public <E> E getBean(String name, Class<E> expectedType) {
        return (E) beans.get(name);
    }
"
2478,c974fe7e-f65d-4cf2-9f05-44d844c71a90,"    public void setVar(String name, Object var) {
        vars.put(name, var);
    }
"
2479,e1d5d3bb-631c-4a0d-bec6-2aae528d6b33,"    public Object getVar(String name) {
        return vars.get(name);
    }
"
2480,fe9d5605-b3e0-47e8-927d-47ffad5f1354,"    @SuppressWarnings(""unchecked"")
    public <E> E getVar(String name, Class<E> expectedType) {
        return (E) vars.get(name);
    }
"
2481,f1c864dc-3823-4034-b57b-5f513ffc67ac,"    public List<Entry<String, Object>> getBeanEntries() {
        return newArrayList(beans.entrySet());
    }
"
2482,3f6876fb-0c05-4c99-aaa2-f863ea3e202c,"    public List<Entry<String, Object>> getVarEntries() {
        return newArrayList(vars.entrySet());
    }
"
2483,72ea574c-a9eb-43ec-9469-13dbeca4a0fc,"    public static Conversation getCurrentConversation() {
        return currentConversationHolder.get();
    }
"
2484,e834c755-bedb-4724-819c-bcaccc816a5c,"    public static void setCurrentConversation(Conversation conversation) {
        currentConversationHolder.set(conversation);
    }
"
2485,67ef9aaf-4aad-43fe-8647-6c91c5ad2b37,"    public static String cidParamValue(String conversationId, String conversationContextId) {
        return conversationId + CID_PARAM_SEPARATOR + conversationContextId;
    }
"
2486,4be1f26b-50f5-481d-b745-414fb9d444d6,"    public static String cidParamNameValue(String conversationId, String conversationContextId) {
        return CID_PARAM_NAME + ""="" + cidParamValue(conversationId, conversationContextId);
    }
"
2487,d15314be-991b-4e46-85a6-b1a258393a31,"    public static String getConversationId(HttpServletRequest request) {
        String _cid = request.getParameter(CID_PARAM_NAME);
        return _cid != null ? substringBefore(_cid, CID_PARAM_SEPARATOR) : null;
    }
"
2488,6a582b91-870e-456f-8204-1e5f903d6a74,"    public static String getConversationContextId(HttpServletRequest request) {
        String _cid = request.getParameter(CID_PARAM_NAME);
        return _cid != null ? substringAfter(_cid, CID_PARAM_SEPARATOR) : null;
    }
"
2489,27985c0d-7f81-4535-b2cc-5912daa0b2fc,"    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        HttpServletRequest request = (HttpServletRequest) servletRequest;
        HttpServletResponse response = (HttpServletResponse) servletResponse;

        String cid = getConversationId(request);

        if (cid != null) {
            String ccid = getConversationContextId(request);

            // -----------------------------
            // RESUME existing conversation
            // -----------------------------
            try {
                conversationManager.resumeConversation(cid, ccid, request);
                log.debug(""Conv. {} resumed. Nb ctx: {}"", cid, getCurrentConversation().getConversationContextesCount());
            } catch (UnexpectedConversationException uue) {
                log.error(uue.getMessage());
                response.sendRedirect(request.getContextPath() + uue.getRedirectUrl());
                return;
            }

            try {
                filterChain.doFilter(request, response);
            } finally {
                conversationManager.pauseCurrentConversation(request);
            }
        } else if (!request.getRequestURI().contains(""/javax.faces.resource/"") && ""true"".equals(request.getParameter(""_ncid_""))) {
            throw new IllegalArgumentException(""This version does not support ncid parameter"");
        } else {
            // -----------------------------
            // Not related to conversations
            // -----------------------------
            filterChain.doFilter(request, response);
        }
    }
"
2490,1f1e1bc7-be4f-421b-a215-468a9f8c7c7b,"    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
    }
"
2491,7d604fe2-3024-428b-a380-c23e61215a0d,"    @Override
    public void destroy() {
    }
"
2492,fd934772-ff3b-4534-b4c6-0205c1ae5232,"    public UnexpectedConversationException(String reason, String unexpectedUrl, String redirectUrl) {
        super(reason + "". requested url: "" + unexpectedUrl + "" => we redirect her to "" + redirectUrl);
        this.redirectUrl = redirectUrl;
    }
"
2493,17afb3ad-c3ce-4163-a135-4939a4f2c394,"    public String getRedirectUrl() {
        return redirectUrl;
    }
"
2494,24953cd7-112c-4086-9bd7-9e27ae4112ce,"    public HttpRequest(OpenMRSDataProperties properties) {
        this.properties = properties;
    }
"
2495,9c346fdc-1851-479f-bf36-be989d44c3b5,"    public void post(String relativeUrl, String postContent) throws IOException {
        Response execute = Request.Post(properties.getOpenMRSUrl() + relativeUrl)
                .addHeader(""Content-Type"", ""application/json"")
                .addHeader(""Accept"", ""application/json"")
                .addHeader(""Authorization"", basicAuthHeader())
                .bodyString(postContent, ContentType.APPLICATION_JSON)
                .execute();
        System.out.println(execute.returnContent().asString());
    }
"
2496,a67dcedf-1873-4bd5-8489-cb23c6328722,"    private String basicAuthHeader() {
        return ""Basic "" + new String(Base64.encodeBase64(identity()));
    }
"
2497,c203529e-d77e-4c81-9b7a-8f0e66fa203a,"    private byte[] identity() {
        return (properties.getOpenMRSUser() + "":"" + properties.getOpenMRSPassword()).getBytes();
    }
"
2498,3b2c2bfb-9506-4087-98ea-6b7d6abfc849,"    public static String createConcept(String name, ConceptDataType dataType, ConceptClass conceptClass, List<String> setMembers) throws JSONException {
        JSONObject jsonObject = new JSONObject();

        jsonObject.append(""names"", new JSONObject().put(""name"", name).put(""locale"", ""en"")
                .put(""conceptNameType"", ""FULLY_SPECIFIED""))
                .put(""datatype"", dataType)
                .put(""conceptClass"", conceptClass);

        if (setMembers == null || setMembers.size() < 1) return jsonObject.toString();

        jsonObject.put(""set"", true)
                .put(""setMembers"", setMembers);

        return jsonObject.toString();
    }
"
2499,0e6937cc-502c-4c59-b870-000a24bd76f4,"    public static String createConcept(String name, ConceptDataType dataType, ConceptClass conceptClass) throws JSONException {
        return createConcept(name, dataType, conceptClass, null);
    }
"
2500,de01ed71-89ca-475f-b56b-529cda0c3c03,"    ConceptDataType(String displayName) {
        this.displayName = displayName;
    }
"
2501,fb69c15f-0b23-4884-9886-fd393b9f1533,"    @Override
    public String toString() { return displayName; }
"
2502,cca68a6e-b6d3-4435-a149-a1af81dace48,"    public static OpenMRSDataProperties getInstance() throws IOException {
        if (instance == null) instance = new OpenMRSDataProperties();

        String propertyFile = System.getenv(""OPENMRS_PROP_FILE"");
        if (propertyFile == null) throw new IllegalArgumentException(""Environment variable OPENMRS_PROP_FILE missing."");
        FileInputStream propFile =  new FileInputStream(propertyFile);

        properties = new Properties(System.getProperties());
        properties.load(propFile);
        return instance;
    }
"
2503,7d76a15c-b964-4dc9-bed2-47a6134d9ba3,"    public String getOpenMRSUrl() {
        throw new RuntimeException(""Not used right now"");
    }
"
2504,75ea28bf-b7b5-45d7-8f33-a1c68372218b,"    public String getOpenMRSUser() {
        return ""admin"";
    }
"
2505,7e0b8457-54d7-45f6-aa67-0552b508aa22,"    public String getOpenMRSPassword() {
        return properties.getProperty(""openmrs.password"");
    }
"
2506,696b4324-3e29-4c9f-962c-db77bbcafcef,"    public void migrate(Connection connection) throws Exception {
        deleteTask(connection, ""Update Concept Index"");
        deleteTask(connection, ""Auto Close Visits Task"");
        updateGlobalProperty(connection, ""scheduler.username"", OpenMRSDataProperties.getInstance().getOpenMRSUser());
        updateGlobalProperty(connection, ""scheduler.password"", OpenMRSDataProperties.getInstance().getOpenMRSPassword());
    }
"
2507,d1b72f9c-e124-4ff5-8984-59e676e0a334,"    private void updateGlobalProperty(Connection connection, String propertyName, String propertyValue) throws SQLException {
        try (PreparedStatement preparedStatement = connection.prepareStatement(UpdateSchedulerLogin)) {
            preparedStatement.setString(1, propertyValue);
            preparedStatement.setString(2, propertyName);
            preparedStatement.executeUpdate();
        }
    }
"
2508,3092654b-d876-4aa4-a43b-70807d4425ee,"    private void deleteTask(Connection connection, String taskName) throws SQLException {
        try (PreparedStatement preparedStatement = connection.prepareStatement(DeleteScheduledTasks)) {
            preparedStatement.setString(1, taskName);
            preparedStatement.executeUpdate();
        }
    }
"
2509,e32fcc2b-0d52-4afc-8a55-f79384da3bc1,"    public void migrate(Connection connection) throws Exception {
        HttpRequest http = new HttpRequest(OpenMRSDataProperties.getInstance());
        http.post(""/concept"", ConceptJson.createConcept(""CHIEF COMPLAINT"", ConceptDataType.Text, ConceptClass.Symptom));
        http.post(""/concept"", ConceptJson.createConcept(""REGISTRATION FEES"", ConceptDataType.Numeric, ConceptClass.Misc));
        http.post(""/concept"", ConceptJson.createConcept(""HEIGHT"", ConceptDataType.Numeric, ConceptClass.Test));
        http.post(""/concept"", ConceptJson.createConcept(""WEIGHT"", ConceptDataType.Numeric, ConceptClass.Test));
        http.post(""/concept"", ConceptJson.createConcept(""BMI"", ConceptDataType.Numeric, ConceptClass.Test));

        http.post(""/concept"", ConceptJson.createConcept(""REGISTRATION_CONCEPTS"", ConceptDataType.NA, ConceptClass.ConvSet ,
                new ArrayList<>(Arrays.asList(""CHIEF COMPLAINT"", ""REGISTRATION FEES"", ""HEIGHT"", ""WEIGHT"", ""BMI""))));
    }
"
2510,5c7ab465-d9d7-475f-ac5a-c16832dc879a,"	RoomReservation(String name_, LocalDateTimeInterval period_) {
		name = name_;
		period = period_;
	}
"
2511,0ad6f83c-3f23-4e8f-921a-039f45391d16,"	public static void main(String[] args) {
		System.out.println(""I'm a reservation!"");
		
	}
"
2512,86f806fe-5a9e-49ff-a880-dc8489829c23,"	public static void main(String[] args) {
		System.out.print(""I'm a room!\n"");
	
		LocalDateTime now = new LocalDateTime();
		//System.out.println(now);
		System.out.println(now.toString(""hh:mm:SS MM/dd/YYYY""));
		System.out.println(new Point(5,5));
		Room a = new Room(""Magic"");
		a.add_reservation(5);
	}
"
2513,09870244-00c2-4fde-b83b-7b09b3894dd2,"	public Room(String name_) {
		name = name_;
		location = new Point(0,0);
		reservations = new TreeSet<Integer>();
		
	}
"
2514,0f53d2aa-4cce-4429-8c7b-1a501dc22af3,"	public Room(String name_, Point p_) {
		name = name_;
		location = p_;
		reservations = new TreeSet<Integer>();
	}
"
2515,4f922c5d-1695-4ca4-8b72-af296dfca7da,"	public String get_name() {
		return name;
	}
"
2516,032caab4-0d5d-45f9-8fc2-4304342a4ee4,"	public Point get_location() {
		return location;
	}
"
2517,691268f9-8d81-42e6-87ae-fd6d9f4122df,"	public void add_reservation(int x) {
		reservations.add(x);
		System.out.println(x + "" was added"");
	}
"
2518,9cff0344-881c-4aaf-9fb4-089784d669d2,"	public void add_reservation(LocalDateTime start, LocalDateTime end) {
		System.out.println(""Do nothing for now"");
	}
"
2519,f8a542c9-12c1-4337-8761-e3bb763bfd66,"	public String toString() {
		StringBuilder result = new StringBuilder();
		result.append(name + "" Location: ("" + location.x + "", "" + location.y + "")"");
		result.append(System.getProperty(""line.separator""));
		if (!reservations.isEmpty()) {
			for (int i: reservations) {
				result.append(i + "" "");
			}
			result.append(System.getProperty(""line.separator""));
		}
		return result.toString();
	}
"
2520,8d57e611-caa0-4b30-a745-3df3f90afa8c,"	public abstract void execute();
"
2521,9cd53c17-0329-4c8c-9ebf-b62dea325cef,"	public Reservation(String name_, Interval interval_) {
		name = name_;
		description = """";
		interval = interval_;
	}
"
2522,aa8d0b9c-128e-467c-92e6-35e1c0432db5,"	public Reservation(String name_, Interval interval_, String description_) {
		name = name_;
		description = description_;
		interval = interval_;
	}
"
2523,2f58cd1a-2c97-4100-b84a-2742d835b2f8,"	public static void main(String[] args) {
		//year, month, day of month, hour, minute of hour
		DateTime start = new DateTime(2004, 12, 25, 5, 18);
		DateTime end = new DateTime(2005, 1, 1, 6, 17);
		
		
		//Interval i = new Interval(DateTime.parse(start.toString(), fmt), end);
		Reservation r = new Reservation(""David Li"", new Interval(start, end));
		//System.out.println(""i: "" + i);
		System.out.println(r);
		
		Reservation PR = new Reservation(""Bianca Ng"", new Interval(start, end), ""For a PR meeting!"");
		System.out.println(PR);
	}
"
2524,f799977d-df0c-4ccb-a7ff-f704102d1203,"	public String toString() {
		StringBuilder result = new StringBuilder();
		DateTimeFormatter fmt = DateTimeFormat.forPattern(""HH:mm MM/dd"");
		//result.append(System.getProperty(""line.separator""));
		result.append(name + "": "" + fmt.print(interval.getStart()) + "" - "" + fmt.print(interval.getEnd()));
		result.append(System.getProperty(""line.separator""));
		if (description.equals("""")) {
			result.append("" None"");
		} else { //a description was specified 
			result.append("" "" + description);
		}
		return result.toString();
	}
"
2525,9309cd7b-116c-42ac-b829-8fbb0401366d,"	public RoomScheduler() {
		// TODO Auto-generated constructor stub
	}
"
2526,d3841e37-1ed5-4d43-aade-76b42268b0b8,"	public RoomScheduler(int numRooms) {
		Rooms = new TreeMap<String, Integer>();
		System.out.println(""RoomScheduler with "" + numRooms + "" rooms created"");
		for (int i = 0; i < numRooms; ++i) {
			Rooms.put(""Room #"" + i, i);
		}
	}
"
2527,bd33f202-433f-4126-a5aa-95448bd9117b,"	public static void main(String[] args) {
		//args[0] = # of rooms
		int num_rooms = 5;
		if (args.length == 1) {
			num_rooms = Integer.parseInt(args[0]);
		}
		RoomScheduler rs = new RoomScheduler(5);
		
		if (args.length == 1) {
			num_rooms = Integer.parseInt(args[0]);
			System.out.println(""Num_rooms: "" + num_rooms);
		}
		
		String[] names = {""April's"", ""Bahamas"", ""Charley's"", ""David's"", ""Eugene's""};
		rooms = new TreeMap<String, Room>();
		for (int i = 0; i < num_rooms; ++i) {
			rooms.put(names[i], new Room(names[i]));
			//rooms.put(""room "" + i, new Room(""room "" + i));
			//Rooms.put(""Room #"" + i, i);
		}
		DateTime now = new DateTime();
		
		System.out.println(""Welcome to Meeting Scheduler!"");
		
		//pointers to functions ? NOT POSSIBLE
		Scanner cin = new Scanner(System.in);
		while (true) {
			System.out.print(""Enter command: "");
			String line = cin.next();
			//show, reserve any room, reserve specific room, removed reservation
			if (line.equals(""quit"")) {
				break;
			} else if (line.equals(""show"")) {
				for (Entry<String, Room> entry: rooms.entrySet()) {
					String key = entry.getKey();
					Room r = entry.getValue();
					System.out.println(key + "" => "" + r.toString());
				}
			} else if (line.equals(""add_room"")) {
				//add <room_name> <loc_x> <loc_y>
				String room_name = cin.next(); 
				String loc_x = cin.next();
				String loc_y = cin.next();
				try { 
					rooms.put(room_name, new Room(room_name, new Point(Integer.parseInt(loc_x), Integer.parseInt(loc_y))));
				} catch(NumberFormatException nfe) {
					System.out.println(""Value must be an integer!"");
				}
			} else if (line.equals(""add_reservation"")) {
				//<room_name> <integer>
				//find room by Name, throw exception if doesnt exist
				String name = cin.next();
				if (!rooms.containsKey(name)) {
					continue;
				}
				String val = cin.next(); 
				try {
					int n = Integer.parseInt(val);
					rooms.get(name).add_reservation(n);
				} catch(NumberFormatException nfe) {
					System.out.println(""Value must be an integer!"");
				}
				//add an integer
				//throw exception if not possible
			} else {
				System.out.println(""Unrecognized command!"");
			}
			//Rooms.put(line, 5);
			//System.out.println(line);
		}
		
		return;
	}
"
2528,b4b6e2c2-fd02-4073-b6c3-761c0b83758e,"	public Directory(String name){
		this.name = name;
	}
"
2529,ac93d2bb-3a75-473e-ab6c-93d9cd4d8f82,"	@Override
	public String getName() {
		return name;
	}
"
2530,8aa1d6f1-24d3-4b0e-a434-bb04251e753f,"	@Override
	public int getSize() {
		int size = 0;
		Iterator it = directory.iterator();
		while(it.hasNext()){
			Entry entry = (Entry)it.next();
			size += entry.getSize();
		}
		return size;
	}
"
2531,51ffc4e5-8d43-4f8b-bc71-bc0e074529bc,"	public Entry add(Entry entry){
		directory.add(entry);
		return this;
	}
"
2532,7caf3bfe-4cf4-4859-97a2-f4310f46e51f,"	@Override
	protected void printList(String prefix) {
		System.out.println(prefix + ""/"" + this);
		Iterator it = directory.iterator();
		while(it.hasNext()){
			Entry entry = (Entry)it.next();
			entry.printList(prefix + ""/"" + name);
		}
	}
"
2533,782e4368-bad3-4dee-b652-e24f2fe32889,"	public File(String name, int size){
		this.name = name;
		this.size = size;
	}
"
2534,0471abf5-2e93-45b3-894f-1f931aad9d53,"	@Override
	public String getName() {
		return name;
	}
"
2535,114e560c-adf4-48f5-9d88-dead1972b10d,"	@Override
	public int getSize() {
		return size;
	}
"
2536,9210b555-469f-421d-8e35-30a4ac4d9eef,"	@Override
	protected void printList(String prefix) {
		System.out.println(prefix + ""/"" + this);
	}
"
2537,e417bc8d-c530-4ac0-a359-7a58d5c771ea,"	public abstract String getName();
"
2538,d87de9bd-5499-4e7c-97ba-690cd356e145,"	public abstract int getSize();
"
2539,d500c55e-6d7d-45b5-a315-f26cb136c93f,"	public Entry add(Entry entry) throws FileTreatmentException {
		throw new FileTreatmentException();
	}
"
2540,ee3df6db-f588-4596-a568-10801d819bb9,"	public void printList(){
		printList("""");
	}
"
2541,86dae415-89c3-4a1b-b227-d740e49f38be,"	protected abstract void printList(String prefix);
"
2542,fc9fc179-c793-44a8-9216-60a7ccdfd978,"	public String toString(){
		return getName() + ""("" + getSize() + "")"";
	}
"
2543,47d5dfe9-fb2a-4e88-8ddc-355f3076540c,"	public static void main(String[] args) {
		System.out.println(""Making root entries..."");
		Directory rootdir = new Directory(""root"");
		Directory bindir = new Directory(""bin"");
		Directory tmpdir = new Directory(""tmp"");
		Directory usrdir = new Directory(""usr"");
		rootdir.add(bindir);
		rootdir.add(tmpdir);
		rootdir.add(usrdir);
		bindir.add(new File(""vi"", 10000));
		bindir.add(new File(""latex"", 20000));
		rootdir.printList();

		System.out.println("""");
		System.out.println(""Making user entries..."");
		Directory yuki = new Directory(""yuki"");
		Directory hanako = new Directory(""hanako"");
		Directory tomura = new Directory(""tomura"");
		usrdir.add(yuki);
		usrdir.add(hanako);
		usrdir.add(tomura);
		yuki.add(new File(""diary.html"", 100));
		yuki.add(new File(""Composite.java"", 200));
		hanako.add(new File(""memo.tex"", 300));
		tomura.add(new File(""game.doc"", 400));
		tomura.add(new File(""junk.mail"", 500));
		rootdir.printList();

		// I dont know why but I dont have to write ""try&catch"" for some reason.
		// The textbook says I need to do tho...
	}
"
2544,ede5b2a5-1e88-48e3-845e-85ad4821b76a,"	public FileTreatmentException(){
	}
"
2545,41491e2e-7bcf-40f1-86d2-a2b7e19c8c52,"	public FileTreatmentException(String msg){
		super(msg);
	}
"
2546,2f863cc2-6538-4327-83d2-af09692aa621,"	public StringDisplay (String str) {       // 引数で表示文字列を指定
		this.str = str;
	}
"
2547,ca719ae5-07bb-416a-b3df-9ee8fe7fb943,"	@Override
	public int getColumns() {                 // 文字数
		return str.getBytes().length;
	}
"
2548,f1384511-809c-461c-9cdb-3fbba930ae1e,"	@Override
	public int getRows() {                    // 行数は１
		return 1;
	}
"
2549,9203224e-9f01-4de0-a213-d41dae1e9821,"	@Override
	public String getRowText(int row) {       // rowが0のときのみ返す
		if (row == 0) {
			return str;
		}else{
			return null;
		}
	}
"
2550,21f1c470-bb74-4930-b95e-b0aa337627aa,"	public abstract int getColumns(); // 横の文字を得る
"
2551,24fe60fa-57e2-43fa-88d6-8fbbc80e1c57,"	public abstract int getRows(); // 縦の行数を得る
"
2552,c37a6b5f-778a-451d-8cfd-a8e228090f3b,"	public abstract String getRowText(int row); // row番目の文字列を得る
"
2553,22b065a4-d654-419b-b00c-90ac4588aa18,"	public final void show(){
		for (int i = 0; i < getRows(); i++) {
			System.out.println(getRowText(i));
		}
	}
"
2554,92411157-e576-46bb-b3c8-8890ee786e42,"	protected Border (Display display) {         // インスタンス生成時に「中身」を引数で指定
		this.display = display;
	}
"
2555,89048627-81f0-4d38-95fc-a7154d1d178b,"	protected SideBorder(Display display, char ch) {        // コンストラクタでDisplayと飾り文字を指定
		super(display);
		this.borderChar = ch;
	}
"
2556,c4133480-1dac-4adb-b1af-e9ead4b61f4b,"	@Override
	public int getColumns() {                              // 文字数は中身の両側に飾り文字分を加えたもの
		return 1 + display.getColumns() + 1;
	}
"
2557,a74e1429-94c0-4994-bfc4-92cd262d9b08,"	@Override
	public int getRows() {                                 // 行数は中身の行数に同じ
		return display.getRows();
	}
"
2558,dd1ae556-3ac6-44ee-98aa-8df2ba7cb705,"	@Override
	public String getRowText(int row) {                    // 指定行の内容は、中身の指定行の両側に飾り文字をつけたもの
		return borderChar + display.getRowText(row) + borderChar;
	}
"
2559,d58f4769-7e3b-45f3-869a-af82f1174e80,"	public static void main(String[] args) {
		Display b1 = new StringDisplay(""Hello, world!"");
		Display b2 = new SideBorder(b1, '#');
		Display b3 = new FullBorder(b2);
		b1.show();
		b2.show();
		b3.show();Display b4 = new SideBorder(new FullBorder(new FullBorder(new SideBorder(new FullBorder(new StringDisplay(""こんにちは。"")),'*'))), '/');
		b4.show();
	}
"
2560,1e655035-2ea1-4910-bbc8-4a5560e42c5a,"	protected FullBorder(Display display) {
		super(display);
	}
"
2561,98222e80-1f3d-4836-92a8-62856483df64,"	@Override
	public int getColumns() {                        // 文字数は中身の両側に飾り文字分を足したもの
		return 1 + display.getColumns() + 1;
	}
"
2562,9ca76f4c-f8ca-4aa4-8f6e-7385413836bd,"	@Override
	public int getRows() {                           // 行数は中身の行数に上下の飾りも自分を加えたもの
		return 1 + display.getRows() + 1;
	}
"
2563,1b7fa69f-c65b-4e81-a13b-692e7d86b7dc,"	@Override
	public String getRowText(int row) {              // 指定した行の内容
		if (row == 0) {                                                     // 枠の上端
			return ""+"" + makeLine('-', display.getColumns()) + ""+"";
		} else if (row == display.getRows() + 1) {                          // 枠の下端
			return ""+"" + makeLine('-', display.getColumns()) + ""+"";
		} else {                                                            // それ以外
			return ""|"" + display.getRowText(row - 1) + ""|"";
		}
	}
"
2564,f20fa129-ae60-4567-8212-055b4b4ef665,"	private String makeLine (char ch, int count) {   // 文字chをcount個連結させた文字列を作る
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < count; i++) {
			sb.append(ch);
		}
		return sb.toString();
	}
"
2565,9de20ce2-30d5-4a29-8e63-eb34cb119211,"    public Type getType() {
        return type;
    }
"
2566,f942f980-4201-4081-9d90-eb08cd361a52,"    public void setType(Type type) {
        this.type = type;
    }
"
2567,c29ff15d-4bd6-421a-a389-6ab111e74156,"    public boolean isAppears() {
        return appears;
    }
"
2568,6282e2d8-31e6-4e8d-b66f-9b5ad9b8c394,"    public void setAppears(boolean appears) {
        this.appears = appears;
    }
"
2569,460405cc-d55f-4f72-94e8-88369acb0fee,"    public int getFrequency() {
        return frequency;
    }
"
2570,1e6cfb65-5ec9-4e5f-b197-7cad8318ae12,"    public void setFrequency(int frequency) {
        this.frequency = frequency;
    }
"
2571,abf6f5c5-8dfa-460c-a5fd-15aed3fd6a60,"    public Date getLastSeen() {
        return lastSeen;
    }
"
2572,706f532e-a378-490b-bf26-39db034913c2,"    public void setLastSeen(Date lastSeen) {
        this.lastSeen = lastSeen;
    }
"
2573,1c5c0ad8-3ac8-4693-b70a-fef0f49ca2fe,"    public String getValue() {
        return value;
    }
"
2574,c2a84d92-a667-4261-b654-fa3d6903799c,"    public void setValue(String value) {
        this.value = value;
    }
"
2575,0f616aa9-4a4f-4de9-947e-2ae47d8a2ae7,"    @Override
    public String toString() {
        return ""Answer{"" +
                ""appears="" + appears +
                "", type="" + type +
                "", value="" + value +
                "", lastSeen="" + lastSeen +
                "", frequency="" + frequency +
                '}';
    }
"
2576,05b52559-2b6e-45da-aded-36b0112de92a,"    public Answer query(Type type, String value) throws IOException, SAXException {
        return request(type.asQueryString(value)).get(0);
    }
"
2577,58408d6f-8d18-45a4-ac68-44ec3a9455b0,"    public Answer ip(String value) throws IOException, SAXException {
        return query(Type.IP, value);
    }
"
2578,4c7078cb-cf30-4385-bd8d-9c819cd8f12b,"    public Answer email(String value) throws IOException, SAXException {
        return query(Type.EMAIL, value);
    }
"
2579,3bb72311-e7ff-4772-8bb9-5ae0cc9ff9c6,"    public Answer username(String value) throws IOException, SAXException {
        return query(Type.USERNAME, value);
    }
"
2580,e193d959-3cda-487e-a487-f0aad35579a0,"    public Builder build() {
        return new Builder(this);
    }
"
2581,35b8649c-aa00-4d49-89d6-3566ba0a656e,"    List<Answer> request(String query) throws SAXException, IOException {
        try {
            URL url = new URL(String.format(""http://www.stopforumspam.com/api?%s&f=xmlcdata"", query));
            List<Answer> answers = new ArrayList<Answer>();

            Document dom = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(url.openStream());
            for (Node child = dom.getDocumentElement().getFirstChild(); child!=null; child=child.getNextSibling()) {
                if (child instanceof Element) {
                    Element e = (Element) child;
                    String name = e.getTagName();
                    if (name.equals(""success"")) {
                        if (!getTextValue(e).equals(""1""))
                            throw new IOException(""Request failed"");
                    }
                    if (name.equals(""ip"") || name.equals(""username"") || name.equals(""email"")) {
                        answers.add(parseAnswer(e));
                    }
                }
            }

            return answers;
        } catch (ParserConfigurationException e) {
            throw new Error(e);
        }
    }
"
2582,82d9c702-8f74-4f48-9986-6a9b14808399,"    private Answer parseAnswer(Element parent) {
        Answer a = new Answer();
        a.setType(Type.valueOf(parent.getTagName().toUpperCase(Locale.ENGLISH)));
        for (Node child=parent.getFirstChild(); child!=null; child=child.getNextSibling()) {
            if (child instanceof Element) {
                Element e = (Element) child;
                String name = e.getTagName();
                String v = getTextValue(e);

                if (name.equals(""value"")) {
                    a.setValue(v);
                }
                if (name.equals(""lastseen"")) {
                    try {
                        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
                        a.setLastSeen(format.parse(v));
                    } catch (ParseException e1) {
                        throw new IllegalArgumentException(""Unexpected date format: ""+ v);
                    }
                }
                if (name.equals(""frequency"")) {
                    a.setFrequency(Integer.parseInt(v));
                }
                if (name.equals(""appears"")) {
                    a.setAppears(!v.equals(""0""));
                }
            }
        }
        return a;
    }
"
2583,37032ac0-8300-4a64-9141-13d8d140831c,"    private String getTextValue(Element e) {
        StringBuilder buf = new StringBuilder();
        for (Node child=e.getFirstChild(); child!=null; child=child.getNextSibling()) {
            if (child instanceof CharacterData) {
                CharacterData cd = (CharacterData) child;
                buf.append(cd.getData());
            }
        }
        return buf.toString();
    }
"
2584,f2521699-88e0-4bf6-ad77-1e05027099b9,"    String lowerName() {
        return name().toLowerCase(Locale.ENGLISH);
    }
"
2585,ecae65aa-f281-4750-8c1f-36fa3351689e,"    String asQueryString(String value) {
        return lowerName()+""[]=""+value;
    }
"
2586,0da92e23-981f-4ba5-a5d1-e15f86fa45a3,"    Builder(StopForumSpam parent) {
        this.parent = parent;
    }
"
2587,d7153ef8-8c28-4bef-ab3b-2e229e4c6dd7,"    public Builder ip(String value) {
        return add(Type.IP,value);
    }
"
2588,1ebe9b1d-e8b6-479c-aa74-9434ca7e34bc,"    public Builder email(String value) {
        return add(Type.EMAIL,value);
    }
"
2589,8e12503f-a95c-463f-bd20-dd25ddf92304,"    public Builder username(String value) {
        return add(Type.USERNAME,value);
    }
"
2590,50264b99-2c3b-4573-b3fe-93ad627eb842,"    public Builder add(Type type, String value) {
        types.add(type);
        values.add(value);
        return this;
    }
"
2591,fe831ed8-63d3-4475-98b7-258999890373,"    public List<Answer> query() throws IOException, SAXException {
        StringBuilder buf = new StringBuilder();
        for (int i=0; i<types.size(); i++) {
            if (buf.length()>0) buf.append('&');
            buf.append(types.get(i).asQueryString(values.get(i)));
        }
        return parent.request(buf.toString());
    }
"
2592,0afbd305-7bcf-489f-bf64-4147c8d51484,"    public void testApp() throws IOException, SAXException {
        StopForumSpam sfs = new StopForumSpam();
        List<Answer> a = sfs.build().ip(""199.15.234.84"").username(""kohsuke"").query();
        System.out.println(a);

        System.out.println(sfs.ip(""199.15.234.84""));
    }
"
2593,0626f5ac-a28b-460b-9d56-cc3ca15ac039,"    public static boolean IsPrime(int n)
    {
        double upper = Math.sqrt(n);
        
        if (upper < 2)
            return false;
        
        for (int i = 2; i <= upper; i++)
            if (n % i == 0)
                return false;
        
        return true;
    }
"
2594,d1ff7a16-4943-4718-b65c-de2da8a78bdc,"    public static String Primes(int n)
    {
        String result = """";
        for (int i = 0; i <= n; i++)
            if (IsPrime(i))
                result += i + "" "";
        
        return result;
    }
"
2595,bd6ed46d-0f7f-4a81-8b40-8a857d752030,"    public static void main(String[] args) {
        
        int n = Integer.parseInt(JOptionPane.showInputDialog
            (""Enter number n"")
        );
        JOptionPane.showMessageDialog(null, Primes(n));
    }
"
2596,0c64bda1-9a3e-43a8-b4ac-052a1e0f1d00,"    native static double spotf5(String name);
"
2597,7c765b39-70ef-4d6d-88be-6ba4f06076b6,"    public static void main(final String[] args) {

        if (args.length < 1 || args[0].equals(""-h"") || args[0].equals(""--help"")) {
            System.out.println(""HIYA! Welcome to AutoSteg, which is basically a wrapper that allows you to pass directories as argument to the F5 algo."");
        System.out.println(""Format is: java AutoSteg directory_name e [-e msg_name.txt] [-p password] [-q quality_factor]"");
        } 

        else{
            String inputDirectory = args[0]; //get directory name
            String outputDirectory = inputDirectory+""/stego_output"";  //it appears that the folder stego_ouput must exist OR THE PROGRAM GETS MAD
            File folder = new File(inputDirectory);
            File[] allFiles = folder.listFiles();  //get all files in directory. please don't break this by giving a directory with non-pic files. thank you.
            String[] newArgs = new String[args.length+1]; 

            //there's probably a better way to copy arguments, eh. Java.
            for (int i = 0; i<args.length-1; i++){
                newArgs[i] = args[i+1];
            }

            for (File file: allFiles) {
                String filename = String.format(""%s"", file); //get filename with path and everything
                String picNameWithJpg = filename.substring(filename.lastIndexOf(""/"")); //get only the pic name with jpg extensions
                String picName = picNameWithJpg.substring(0, picNameWithJpg.lastIndexOf(""."")); //get only the pic name with jpg extensions
                String outputFilename = String.format(""%s%sSTEGO.jpg"", outputDirectory, picName);
                
                //System.out.printf(""here are your strings FILENAME: %s\n PICNAME: %s\n Picname: %s\n OUTPUT: %s\n"", filename, picNameWithJpg, picName, outputFilename); //just for debugging

                newArgs[args.length-1] = filename; //input file parameter
                newArgs[args.length] = outputFilename; //output file parameter

                //System.out.println(Arrays.toString(newArgs)); //just for debugging

                //again, probably a more efficient way to do this without constantly copying arrays
                if (newArgs[0].equals(""e"")) {
                    Embed.main(Arrays.copyOfRange(newArgs, 1, newArgs.length));
                    
                    double beta = spotf5(newArgs[args.length]);
                    if(beta > 0.25){
                        System.out.println(""\t\tWE SEE THE STEGO."");
                        System.out.printf(""\t\tWE DETECTED: %f\n"", beta);
                    }
                    else{
                        System.out.println(""\t\tNO STEGO HERE. MOVING ALONG."");
                    }

                    try{
                        String resultsFileOutputDirectory = outputDirectory + "".csv"";

                        FileWriter fstream = new FileWriter(resultsFileOutputDirectory, true); 
                        BufferedWriter out = new BufferedWriter(fstream);

                        String output = String.format(""%s, %s, %f\n"", picName, beta>0.25?""detected"":""not detected"", beta);
                        out.write(output);
                        out.close();
                    }
                    catch (Exception e)
                    {
                        System.err.println(""Error: "" + e.getMessage());
                    }

                }

                //hmm, would anyone want the extraction process?
                if (newArgs[0].equals(""x"")) {
                    Extract.main(Arrays.copyOfRange(newArgs, 1, newArgs.length));
                }

            } //end of for loop for each file in directory

        } //end of reading arguments

    } //end of main
"
2598,5f632f3e-077f-4720-96d4-f1759abab866,"    public Permutation(final int size, final F5Random random) {
        int i, randomIndex, tmp;
        this.shuffled = new int[size];

        // To create the shuffled sequence, we initialise an array
        // with the integers 0 ... (size-1).
        for (i = 0; i < size; i++) {
            // initialise with �size� integers
            this.shuffled[i] = i;
        }
        int maxRandom = size; // set number of entries to shuffle
        for (i = 0; i < size; i++) { // shuffle entries
            randomIndex = random.getNextValue(maxRandom--);
            tmp = this.shuffled[randomIndex];
            this.shuffled[randomIndex] = this.shuffled[maxRandom];
            this.shuffled[maxRandom] = tmp;
        }
    }
"
2599,365518c6-fd95-4333-99eb-dce48ad021b4,"    public int getShuffled(final int i) {
        return this.shuffled[i];
    }
"
2600,bff23120-1437-4426-8ec8-d9e68558ce4c,"    public F5Random(final byte[] password) {
        this.random = new SecureRandom();
        this.random.engineSetSeed(password);
        this.b = new byte[1];
    }
"
2601,6ee8891c-0fe4-4765-a328-8d00135cd3f6,"    public int getNextByte() {
        this.random.engineNextBytes(this.b);
        return this.b[0];
    }
"
2602,72f18085-5fd4-4be2-997c-a160cfc4a07f,"    public int getNextValue(final int maxValue) {
        int retVal = getNextByte() | getNextByte() << 8 | getNextByte() << 16 | getNextByte() << 24;
        retVal %= maxValue;
        if (retVal < 0) {
            retVal += maxValue;
        }
        return retVal;
    }
"
2603,fe35d381-c6c5-43ad-b5d2-072e71e9a31c,"    public static void main(final String args[]) {
        Image image = null;
        FileOutputStream dataOut = null;
        File file, outFile;
        JpegEncoder jpg;
        int i, Quality = 80;
        // Check to see if the input file name has one of the extensions:
        // .tif, .gif, .jpg
        // If not, print the standard use info.
        boolean haveInputImage = false;
        String embFileName = null;
        String comment = ""TEST"";
        String password = ""abc123"";
        String inFileName = null;
        String outFileName = null;
        if (args.length < 1) {
            StandardUsage();
            return;
        }
        for (i = 0; i < args.length; i++) {
            if (!args[i].startsWith(""-"")) {
                if (!haveInputImage) {
                    if (!args[i].endsWith("".jpg"") && !args[i].endsWith("".tif"") && !args[i].endsWith("".gif"")
                            && !args[i].endsWith("".bmp"")) {
                        StandardUsage();
                        return;
                    }
                    inFileName = args[i];
                    outFileName = args[i].substring(0, args[i].lastIndexOf(""."")) + "".jpg"";
                    haveInputImage = true;
                } else {
                    outFileName = args[i];
                    if (outFileName.endsWith("".tif"") || outFileName.endsWith("".gif"") || outFileName.endsWith("".bmp"")) {
                        outFileName = outFileName.substring(0, outFileName.lastIndexOf("".""));
                    }
                    if (!outFileName.endsWith("".jpg"")) {
                        outFileName = outFileName.concat("".jpg"");
                    }
                }
                continue;
            }
            if (args.length < i + 1) {
                System.out.println(""Missing parameter for switch "" + args[i]);
                StandardUsage();
                return;
            }
            if (args[i].equals(""-e"")) {
                embFileName = args[i + 1];
            } else if (args[i].equals(""-p"")) {
                password = args[i + 1];
            } else if (args[i].equals(""-q"")) {
                try {
                    Quality = Integer.parseInt(args[i + 1]);
                } catch (final NumberFormatException e) {
                    StandardUsage();
                    return;
                }
            } else if (args[i].equals(""-c"")) {
                comment = args[i + 1];
            } else {
                System.out.println(""Unknown switch "" + args[i] + "" ignored."");
            }
            i++;
        }
        outFile = new File(outFileName);
        i = 1;
        while (outFile.exists()) {
            outFile = new File(outFileName.substring(0, outFileName.lastIndexOf(""."")) + i++ + "".jpg"");
            if (i > 100) {
                System.exit(0);
            }
        }
        file = new File(inFileName);
        if (file.exists()) {
            try {
                dataOut = new FileOutputStream(outFile);
            } catch (final IOException e) {
            }
            if (inFileName.endsWith("".bmp"")) {
                final Bmp bmp = new Bmp(inFileName);
                image = bmp.getImage();
            } else {
                image = Toolkit.getDefaultToolkit().getImage(inFileName);
            }
            jpg = new JpegEncoder(image, Quality, dataOut, comment);
            try {
                if (embFileName == null) {
                    jpg.Compress();
                } else {
                    jpg.Compress(new FileInputStream(embFileName), password);
                }
            } catch (final Exception e) {
                e.printStackTrace();
            }
            try {
                dataOut.close();
            } catch (final IOException e) {
            }
        } else {
            System.out.println(""I couldn't find "" + inFileName + "". Is it in another directory?"");
        }
    }
"
2604,28a43e58-2e56-40f0-b828-822f754265c3,"    public static void StandardUsage() {
        System.out.println(""F5/JpegEncoder for Java(tm)"");
        System.out.println("""");
        System.out.println(""Program usage: java Embed [Options] \""InputImage\"".\""ext\"" [\""OutputFile\""[.jpg]]"");
        System.out.println("""");
        System.out.println(""You have the following options:"");
        System.out.println(""-e <file to embed>\tdefault: embed nothing"");
        System.out.println(""-p <password>\t\tdefault: \""abc123\"", only used when -e is specified"");
        System.out.println(""-q <quality 0 ... 100>\tdefault: 80"");
        System.out
                .println(""-c <comment>\t\tdefault: \""JPEG Encoder Copyright 1998, James R. Weeks and BioElectroMech.  \"""");
        System.out.println("""");
        System.out.println(""\""InputImage\"" is the name of an existing image in the current directory."");
        System.out.println(""  (\""InputImage may specify a directory, too.) \""ext\"" must be .tif, .gif,"");
        System.out.println(""  or .jpg."");
        System.out.println(""Quality is an integer (0 to 100) that specifies how similar the compressed"");
        System.out.println(""  image is to \""InputImage.\""  100 is almost exactly like \""InputImage\"" and 0 is"");
        System.out.println(""  most dissimilar.  In most cases, 70 - 80 gives very good results."");
        System.out.println(""\""OutputFile\"" is an optional argument.  If \""OutputFile\"" isn't specified, then"");
        System.out.println(""  the input file name is adopted.  This program will NOT write over an existing"");
        System.out.println(""  file.  If a directory is specified for the input image, then \""OutputFile\"""");
        System.out.println(""  will be written in that directory.  The extension \"".jpg\"" may automatically be"");
        System.out.println(""  added."");
        System.out.println("""");
        System.out.println(""Copyright 1998 BioElectroMech and James R. Weeks.  Portions copyright IJG and"");
        System.out.println(""  Florian Raemy, LCAV.  See license.txt for details."");
        System.out.println(""Visit BioElectroMech at www.obrador.com.  Email James@obrador.com."");
        System.out.println(""Steganography added by Andreas Westfeld, westfeld@inf.tu-dresden.de"");
    }
"
2605,c1c741cd-9443-493d-83b8-72beb3d06acb,"    public static void extract(final InputStream fis, final int flength, final OutputStream fos, final String password)
            throws IOException {
        carrier = new byte[flength];
        fis.read(carrier);
        final HuffmanDecode hd = new HuffmanDecode(carrier);
        System.out.println(""Huffman decoding starts"");
        coeff = hd.decode();
        System.out.println(""Permutation starts"");
        final F5Random random = new F5Random(password.getBytes());
        final Permutation permutation = new Permutation(coeff.length, random);
        System.out.println(coeff.length + "" indices shuffled"");
        int extractedByte = 0;
        int availableExtractedBits = 0;
        int extractedFileLength = 0;
        int nBytesExtracted = 0;
        int shuffledIndex = 0;
        int extractedBit;
        int i;
        System.out.println(""Extraction starts"");
        // extract length information
        for (i = 0; availableExtractedBits < 32; i++) {
            shuffledIndex = permutation.getShuffled(i);
            if (shuffledIndex % 64 == 0) {
                continue; // skip DC coefficients
            }
            shuffledIndex = shuffledIndex - shuffledIndex % 64 + deZigZag[shuffledIndex % 64];
            if (coeff[shuffledIndex] == 0) {
                continue; // skip zeroes
            }
            if (coeff[shuffledIndex] > 0) {
                extractedBit = coeff[shuffledIndex] & 1;
            } else {
                extractedBit = 1 - (coeff[shuffledIndex] & 1);
            }
            extractedFileLength |= extractedBit << availableExtractedBits++;
        }
        // remove pseudo random pad
        extractedFileLength ^= random.getNextByte();
        extractedFileLength ^= random.getNextByte() << 8;
        extractedFileLength ^= random.getNextByte() << 16;
        extractedFileLength ^= random.getNextByte() << 24;
        int k = extractedFileLength >> 24;
        k %= 32;
        final int n = (1 << k) - 1;
        extractedFileLength &= 0x007fffff;
        System.out.println(""Length of embedded file: "" + extractedFileLength + "" bytes"");
        availableExtractedBits = 0;
        if (n > 0) {
            int startOfN = i;
            int hash;
            System.out.println(""(1, "" + n + "", "" + k + "") code used"");
            extractingLoop: do {
                // 1. read n places, and calculate k bits
                hash = 0;
                int code = 1;
                for (i = 0; code <= n; i++) {
                    // check for pending end of coeff
                    if (startOfN + i >= coeff.length) {
                        break extractingLoop;
                    }
                    shuffledIndex = permutation.getShuffled(startOfN + i);
                    if (shuffledIndex % 64 == 0) {
                        continue; // skip DC coefficients
                    }
                    shuffledIndex = shuffledIndex - shuffledIndex % 64 + deZigZag[shuffledIndex % 64];
                    if (coeff[shuffledIndex] == 0) {
                        continue; // skip zeroes
                    }
                    if (coeff[shuffledIndex] > 0) {
                        extractedBit = coeff[shuffledIndex] & 1;
                    } else {
                        extractedBit = 1 - (coeff[shuffledIndex] & 1);
                    }
                    if (extractedBit == 1) {
                        hash ^= code;
                    }
                    code++;
                }
                startOfN += i;
                // 2. write k bits bytewise
                for (i = 0; i < k; i++) {
                    extractedByte |= (hash >> i & 1) << availableExtractedBits++;
                    if (availableExtractedBits == 8) {
                        // remove pseudo random pad
                        extractedByte ^= random.getNextByte();
                        fos.write((byte) extractedByte);
                        extractedByte = 0;
                        availableExtractedBits = 0;
                        nBytesExtracted++;
                        // check for pending end of embedded data
                        if (nBytesExtracted == extractedFileLength) {
                            break extractingLoop;
                        }
                    }
                }
            } while (true);
        } else {
            System.out.println(""Default code used"");
            for (; i < coeff.length; i++) {
                shuffledIndex = permutation.getShuffled(i);
                if (shuffledIndex % 64 == 0) {
                    continue; // skip DC coefficients
                }
                shuffledIndex = shuffledIndex - shuffledIndex % 64 + deZigZag[shuffledIndex % 64];
                if (coeff[shuffledIndex] == 0) {
                    continue; // skip zeroes
                }
                if (coeff[shuffledIndex] > 0) {
                    extractedBit = coeff[shuffledIndex] & 1;
                } else {
                    extractedBit = 1 - (coeff[shuffledIndex] & 1);
                }
                extractedByte |= extractedBit << availableExtractedBits++;
                if (availableExtractedBits == 8) {
                    // remove pseudo random pad
                    extractedByte ^= random.getNextByte();
                    fos.write((byte) extractedByte);
                    extractedByte = 0;
                    availableExtractedBits = 0;
                    nBytesExtracted++;
                    if (nBytesExtracted == extractedFileLength) {
                        break;
                    }
                }
            }
        }
        if (nBytesExtracted < extractedFileLength) {
            System.out.println(""Incomplete file: only "" + nBytesExtracted + "" of "" + extractedFileLength
                    + "" bytes extracted"");
        }
    }
"
2606,56af0078-df10-4f31-9470-5ba0970d0099,"    public static void main(final String[] args) {
        embFileName = ""output.txt"";
        password = ""abc123"";
        try {
            if (args.length < 1) {
                usage();
                return;
            }
            for (int i = 0; i < args.length; i++) {
                if (!args[i].startsWith(""-"")) {
                    if (!args[i].endsWith("".jpg"")) {
                        usage();
                        return;
                    }
                    f = new File(args[i]);
                    continue;
                }
                if (args.length < i + 1) {
                    System.out.println(""Missing parameter for switch "" + args[i]);
                    usage();
                    return;
                }
                if (args[i].equals(""-e"")) {
                    embFileName = args[i + 1];
                } else if (args[i].equals(""-p"")) {
                    password = args[i + 1];
                } else {
                    System.out.println(""Unknown switch "" + args[i] + "" ignored."");
                }
                i++;
            }

            final FileInputStream fis = new FileInputStream(f);
            fos = new FileOutputStream(new File(embFileName));
            extract(fis, (int) f.length(), fos, password);

        } catch (final Exception e) {
            e.printStackTrace();
        }
    }
"
2607,83326d00-c5df-479f-912f-c007eb3216eb,"    static void usage() {
        System.out.println(""java Extract [Options] \""image.jpg\"""");
        System.out.println(""Options:"");
        System.out.println(""\t-p password (default: abc123)"");
        System.out.println(""\t-e extractedFileName (default: output.txt)"");
        System.out.println(""\nAuthor: Andreas Westfeld, westfeld@inf.tu-dresden.de"");
    }
"
2608,56320b3a-ca4b-4297-baa9-bd3dee0c232a,"    public Bmp(final String fileName) {
        try {
            this.imageFile = new BufferedInputStream(new FileInputStream(fileName));
            readBitmapFileHeader();
            readBitmapInfoHeader();
            this.pixel = new int[this.biWidth * this.biHeight];
            int padding = 3 * this.biWidth % 4;
            if (padding > 0) {
                padding = 4 - padding;
            }
            int offset;
            for (int y = 1; y <= this.biHeight; y++) {
                offset = (this.biHeight - y) * this.biWidth;
                for (int x = 0; x < this.biWidth; x++) {
                    this.pixel[offset + x] = readPixel();
                }
                for (int x = 0; x < padding; x++) {
                    this.imageFile.read();
                }
            }
        } catch (final Exception e) {
            System.out.println(fileName + "" is not a true colour file."");
            System.exit(1);
        }
    }
"
2609,3816fefd-7f1a-4a7d-8639-36a6e4750767,"    public Image getImage() {
        MemoryImageSource mis;
        mis = new MemoryImageSource(this.biWidth, this.biHeight, this.pixel, 0, this.biWidth);
        return Toolkit.getDefaultToolkit().createImage(mis);
    }
"
2610,6553a1b0-5ce8-4ce9-8e11-807cd4ab29ef,"    void readBitmapFileHeader() throws Exception {
        if (this.imageFile.read() != 'B')
            throw new Exception();
        if (this.imageFile.read() != 'M')
            throw new Exception();
        this.bfSize = readInt();
        readInt(); // ignore 4 bytes reserved
        this.bfOffBits = readInt();
    }
"
2611,b519ae43-d207-47de-88d5-4e30f76ba192,"    void readBitmapInfoHeader() throws Exception {
        this.biSize = readInt();
        this.biWidth = readInt();
        this.biHeight = readInt();
        this.biPlanes = readShort();
        this.biBitCount = readShort();
        if (this.biBitCount != 24)
            throw new Exception();
        this.biCompression = readInt();
        this.biSizeImage = readInt();
        this.biXPelsPerMeter = readInt();
        this.biYPelsPerMeter = readInt();
        this.biClrUsed = readInt();
        this.biClrImportant = readInt();
    }
"
2612,2342ca39-a460-4c54-ac27-162958d33158,"    int readInt() throws IOException {
        int retVal = 0;

        for (int i = 0; i < 4; i++) {
            retVal += (this.imageFile.read() & 0xff) << 8 * i;
        }
        return retVal;
    }
"
2613,7ea7f77b-2760-485f-bc17-ea2e6db696cf,"    int readPixel() throws IOException {
        int retVal = 0;

        for (int i = 0; i < 3; i++) {
            retVal += (this.imageFile.read() & 0xff) << 8 * i;
        }
        return retVal | 0xff000000;
    }
"
2614,fddf42a8-35f3-4714-8fe9-ec3f5ea56b31,"    int readShort() throws IOException {
        int retVal;

        retVal = this.imageFile.read() & 0xff;
        retVal += (this.imageFile.read() & 0xff) << 8;
        return retVal;
    }
"
2615,429a165f-902a-44f5-93b9-b906e01f85d9,"    public static void main(final String args[]) {
        Image image = null;
        FileOutputStream dataOut = null;
        File file, outFile;
        JpegEncoder jpg;
        String string = new String();
        int i, Quality = 80;
        if (args.length < 2) {
            StandardUsage();
        }
        if (!args[0].endsWith("".jpg"") && !args[0].endsWith("".tif"") && !args[0].endsWith("".gif"")) {
            StandardUsage();
        }
        if (args.length < 3) {
            string = args[0].substring(0, args[0].lastIndexOf(""."")) + "".jpg"";
        } else {
            string = args[2];
            if (string.endsWith("".tif"") || string.endsWith("".gif"")) {
                string = string.substring(0, string.lastIndexOf("".""));
            }
            if (!string.endsWith("".jpg"")) {
                string = string.concat("".jpg"");
            }
        }
        outFile = new File(string);
        i = 1;
        while (outFile.exists()) {
            outFile = new File(string.substring(0, string.lastIndexOf(""."")) + i++ + "".jpg"");
            if (i > 100) {
                System.exit(0);
            }
        }
        file = new File(args[0]);
        if (file.exists()) {
            try {
                dataOut = new FileOutputStream(outFile);
            } catch (final IOException e) {
            }
            try {
                Quality = Integer.parseInt(args[1]);
            } catch (final NumberFormatException e) {
                StandardUsage();
            }
            image = Toolkit.getDefaultToolkit().getImage(args[0]);
            jpg = new JpegEncoder(image, Quality, dataOut, """");
            jpg.Compress();
            try {
                dataOut.close();
            } catch (final IOException e) {
            }
        } else {
            System.out.println(""I couldn't find "" + args[0] + "". Is it in another directory?"");
        }
        System.exit(0);
    }
"
2616,2fdadd21-8dbf-4454-9697-ca276a45074f,"    public static void StandardUsage() {
        System.out.println(""JpegEncoder for Java(tm) Version 0.9"");
        System.out.println("""");
        System.out.println(""Program usage: java Jpeg \""InputImage\"".\""ext\"" Quality [\""OutputFile\""[.jpg]]"");
        System.out.println("""");
        System.out.println(""Where \""InputImage\"" is the name of an existing image in the current directory."");
        System.out.println(""  (\""InputImage may specify a directory, too.) \""ext\"" must be .tif, .gif,"");
        System.out.println(""  or .jpg."");
        System.out.println(""Quality is an integer (0 to 100) that specifies how similar the compressed"");
        System.out.println(""  image is to \""InputImage.\""  100 is almost exactly like \""InputImage\"" and 0 is"");
        System.out.println(""  most dissimilar.  In most cases, 70 - 80 gives very good results."");
        System.out.println(""\""OutputFile\"" is an optional argument.  If \""OutputFile\"" isn't specified, then"");
        System.out.println(""  the input file name is adopted.  This program will NOT write over an existing"");
        System.out.println(""  file.  If a directory is specified for the input image, then \""OutputFile\"""");
        System.out.println(""  will be written in that directory.  The extension \"".jpg\"" may automatically be"");
        System.out.println(""  added."");
        System.out.println("""");
        System.out.println(""Copyright 1998 BioElectroMech and James R. Weeks.  Portions copyright IJG and"");
        System.out.println(""  Florian Raemy, LCAV.  See license.txt for details."");
        System.out.println(""Visit BioElectroMech at www.obrador.com.  Email James@obrador.com."");
        System.exit(0);
    }
"
2617,863302fd-eac7-48eb-a69e-2d092da4a242,"    public DCT(final int QUALITY) {
        initMatrix(QUALITY);
    }
"
2618,d01734c4-1bb6-4e16-bb16-28a706c6a4ad,"    public double[][] forwardDCT(final float input[][]) {
        final double output[][] = new double[this.N][this.N];
        double tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
        double tmp10, tmp11, tmp12, tmp13;
        double z1, z2, z3, z4, z5, z11, z13;
        int i;
        int j;

        // Subtracts 128 from the input values
        for (i = 0; i < 8; i++) {
            for (j = 0; j < 8; j++) {
                output[i][j] = input[i][j] - 128.0;
                // input[i][j] -= 128;

            }
        }

        for (i = 0; i < 8; i++) {
            tmp0 = output[i][0] + output[i][7];
            tmp7 = output[i][0] - output[i][7];
            tmp1 = output[i][1] + output[i][6];
            tmp6 = output[i][1] - output[i][6];
            tmp2 = output[i][2] + output[i][5];
            tmp5 = output[i][2] - output[i][5];
            tmp3 = output[i][3] + output[i][4];
            tmp4 = output[i][3] - output[i][4];

            tmp10 = tmp0 + tmp3;
            tmp13 = tmp0 - tmp3;
            tmp11 = tmp1 + tmp2;
            tmp12 = tmp1 - tmp2;

            output[i][0] = tmp10 + tmp11;
            output[i][4] = tmp10 - tmp11;

            z1 = (tmp12 + tmp13) * 0.707106781;
            output[i][2] = tmp13 + z1;
            output[i][6] = tmp13 - z1;

            tmp10 = tmp4 + tmp5;
            tmp11 = tmp5 + tmp6;
            tmp12 = tmp6 + tmp7;

            z5 = (tmp10 - tmp12) * 0.382683433;
            z2 = 0.541196100 * tmp10 + z5;
            z4 = 1.306562965 * tmp12 + z5;
            z3 = tmp11 * 0.707106781;

            z11 = tmp7 + z3;
            z13 = tmp7 - z3;

            output[i][5] = z13 + z2;
            output[i][3] = z13 - z2;
            output[i][1] = z11 + z4;
            output[i][7] = z11 - z4;
        }

        for (i = 0; i < 8; i++) {
            tmp0 = output[0][i] + output[7][i];
            tmp7 = output[0][i] - output[7][i];
            tmp1 = output[1][i] + output[6][i];
            tmp6 = output[1][i] - output[6][i];
            tmp2 = output[2][i] + output[5][i];
            tmp5 = output[2][i] - output[5][i];
            tmp3 = output[3][i] + output[4][i];
            tmp4 = output[3][i] - output[4][i];

            tmp10 = tmp0 + tmp3;
            tmp13 = tmp0 - tmp3;
            tmp11 = tmp1 + tmp2;
            tmp12 = tmp1 - tmp2;

            output[0][i] = tmp10 + tmp11;
            output[4][i] = tmp10 - tmp11;

            z1 = (tmp12 + tmp13) * 0.707106781;
            output[2][i] = tmp13 + z1;
            output[6][i] = tmp13 - z1;

            tmp10 = tmp4 + tmp5;
            tmp11 = tmp5 + tmp6;
            tmp12 = tmp6 + tmp7;

            z5 = (tmp10 - tmp12) * 0.382683433;
            z2 = 0.541196100 * tmp10 + z5;
            z4 = 1.306562965 * tmp12 + z5;
            z3 = tmp11 * 0.707106781;

            z11 = tmp7 + z3;
            z13 = tmp7 - z3;

            output[5][i] = z13 + z2;
            output[3][i] = z13 - z2;
            output[1][i] = z11 + z4;
            output[7][i] = z11 - z4;
        }

        return output;
    }
"
2619,872afcca-7220-4d3e-b4c9-acebcbc93888,"    public double[][] forwardDCTExtreme(final float input[][]) {
        final double output[][] = new double[this.N][this.N];
        final double tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
        final double tmp10, tmp11, tmp12, tmp13;
        final double z1, z2, z3, z4, z5, z11, z13;
        final int i;
        final int j;
        int v, u, x, y;
        for (v = 0; v < 8; v++) {
            for (u = 0; u < 8; u++) {
                for (x = 0; x < 8; x++) {
                    for (y = 0; y < 8; y++) {
                        output[v][u] += input[x][y] * Math.cos((double) (2 * x + 1) * (double) u * Math.PI / 16)
                                * Math.cos((double) (2 * y + 1) * (double) v * Math.PI / 16);
                    }
                }
                output[v][u] *= 0.25 * (u == 0 ? 1.0 / Math.sqrt(2) : (double) 1.0)
                        * (v == 0 ? 1.0 / Math.sqrt(2) : (double) 1.0);
            }
        }
        return output;
    }
"
2620,b1445843-6664-4a15-b817-3b0831fff6c3,"    private void initMatrix(final int quality) {
        final double[] AANscaleFactor = {
                1.0, 1.387039845, 1.306562965, 1.175875602, 1.0, 0.785694958, 0.541196100, 0.275899379 };
        int i;
        int j;
        int index;
        int Quality;
        int temp;

        // converting quality setting to that specified in the
        // jpeg_quality_scaling
        // method in the IJG Jpeg-6a C libraries

        Quality = quality;
        if (Quality <= 0) {
            Quality = 1;
        }
        if (Quality > 100) {
            Quality = 100;
        }
        if (Quality < 50) {
            Quality = 5000 / Quality;
        } else {
            Quality = 200 - Quality * 2;
        }

        // Creating the luminance matrix

        this.quantum_luminance[0] = 16;
        this.quantum_luminance[1] = 11;
        this.quantum_luminance[2] = 10;
        this.quantum_luminance[3] = 16;
        this.quantum_luminance[4] = 24;
        this.quantum_luminance[5] = 40;
        this.quantum_luminance[6] = 51;
        this.quantum_luminance[7] = 61;
        this.quantum_luminance[8] = 12;
        this.quantum_luminance[9] = 12;
        this.quantum_luminance[10] = 14;
        this.quantum_luminance[11] = 19;
        this.quantum_luminance[12] = 26;
        this.quantum_luminance[13] = 58;
        this.quantum_luminance[14] = 60;
        this.quantum_luminance[15] = 55;
        this.quantum_luminance[16] = 14;
        this.quantum_luminance[17] = 13;
        this.quantum_luminance[18] = 16;
        this.quantum_luminance[19] = 24;
        this.quantum_luminance[20] = 40;
        this.quantum_luminance[21] = 57;
        this.quantum_luminance[22] = 69;
        this.quantum_luminance[23] = 56;
        this.quantum_luminance[24] = 14;
        this.quantum_luminance[25] = 17;
        this.quantum_luminance[26] = 22;
        this.quantum_luminance[27] = 29;
        this.quantum_luminance[28] = 51;
        this.quantum_luminance[29] = 87;
        this.quantum_luminance[30] = 80;
        this.quantum_luminance[31] = 62;
        this.quantum_luminance[32] = 18;
        this.quantum_luminance[33] = 22;
        this.quantum_luminance[34] = 37;
        this.quantum_luminance[35] = 56;
        this.quantum_luminance[36] = 68;
        this.quantum_luminance[37] = 109;
        this.quantum_luminance[38] = 103;
        this.quantum_luminance[39] = 77;
        this.quantum_luminance[40] = 24;
        this.quantum_luminance[41] = 35;
        this.quantum_luminance[42] = 55;
        this.quantum_luminance[43] = 64;
        this.quantum_luminance[44] = 81;
        this.quantum_luminance[45] = 104;
        this.quantum_luminance[46] = 113;
        this.quantum_luminance[47] = 92;
        this.quantum_luminance[48] = 49;
        this.quantum_luminance[49] = 64;
        this.quantum_luminance[50] = 78;
        this.quantum_luminance[51] = 87;
        this.quantum_luminance[52] = 103;
        this.quantum_luminance[53] = 121;
        this.quantum_luminance[54] = 120;
        this.quantum_luminance[55] = 101;
        this.quantum_luminance[56] = 72;
        this.quantum_luminance[57] = 92;
        this.quantum_luminance[58] = 95;
        this.quantum_luminance[59] = 98;
        this.quantum_luminance[60] = 112;
        this.quantum_luminance[61] = 100;
        this.quantum_luminance[62] = 103;
        this.quantum_luminance[63] = 99;

        for (j = 0; j < 64; j++) {
            temp = (this.quantum_luminance[j] * Quality + 50) / 100;
            if (temp <= 0) {
                temp = 1;
            }
            if (temp > 255) {
                temp = 255;
            }
            this.quantum_luminance[j] = temp;
        }
        index = 0;
        for (i = 0; i < 8; i++) {
            for (j = 0; j < 8; j++) {
                // The divisors for the LL&M method (the slow integer method
                // used in
                // jpeg 6a library). This method is currently (04/04/98)
                // incompletely
                // implemented.
                // DivisorsLuminance[index] = ((double)
                // quantum_luminance[index]) << 3;
                // The divisors for the AAN method (the float method used in
                // jpeg 6a library.
                this.DivisorsLuminance[index] = 1.0 / (this.quantum_luminance[index] * AANscaleFactor[i]
                        * AANscaleFactor[j] * 8.0);
                index++;
            }
        }

        // Creating the chrominance matrix

        this.quantum_chrominance[0] = 17;
        this.quantum_chrominance[1] = 18;
        this.quantum_chrominance[2] = 24;
        this.quantum_chrominance[3] = 47;
        this.quantum_chrominance[4] = 99;
        this.quantum_chrominance[5] = 99;
        this.quantum_chrominance[6] = 99;
        this.quantum_chrominance[7] = 99;
        this.quantum_chrominance[8] = 18;
        this.quantum_chrominance[9] = 21;
        this.quantum_chrominance[10] = 26;
        this.quantum_chrominance[11] = 66;
        this.quantum_chrominance[12] = 99;
        this.quantum_chrominance[13] = 99;
        this.quantum_chrominance[14] = 99;
        this.quantum_chrominance[15] = 99;
        this.quantum_chrominance[16] = 24;
        this.quantum_chrominance[17] = 26;
        this.quantum_chrominance[18] = 56;
        this.quantum_chrominance[19] = 99;
        this.quantum_chrominance[20] = 99;
        this.quantum_chrominance[21] = 99;
        this.quantum_chrominance[22] = 99;
        this.quantum_chrominance[23] = 99;
        this.quantum_chrominance[24] = 47;
        this.quantum_chrominance[25] = 66;
        this.quantum_chrominance[26] = 99;
        this.quantum_chrominance[27] = 99;
        this.quantum_chrominance[28] = 99;
        this.quantum_chrominance[29] = 99;
        this.quantum_chrominance[30] = 99;
        this.quantum_chrominance[31] = 99;
        this.quantum_chrominance[32] = 99;
        this.quantum_chrominance[33] = 99;
        this.quantum_chrominance[34] = 99;
        this.quantum_chrominance[35] = 99;
        this.quantum_chrominance[36] = 99;
        this.quantum_chrominance[37] = 99;
        this.quantum_chrominance[38] = 99;
        this.quantum_chrominance[39] = 99;
        this.quantum_chrominance[40] = 99;
        this.quantum_chrominance[41] = 99;
        this.quantum_chrominance[42] = 99;
        this.quantum_chrominance[43] = 99;
        this.quantum_chrominance[44] = 99;
        this.quantum_chrominance[45] = 99;
        this.quantum_chrominance[46] = 99;
        this.quantum_chrominance[47] = 99;
        this.quantum_chrominance[48] = 99;
        this.quantum_chrominance[49] = 99;
        this.quantum_chrominance[50] = 99;
        this.quantum_chrominance[51] = 99;
        this.quantum_chrominance[52] = 99;
        this.quantum_chrominance[53] = 99;
        this.quantum_chrominance[54] = 99;
        this.quantum_chrominance[55] = 99;
        this.quantum_chrominance[56] = 99;
        this.quantum_chrominance[57] = 99;
        this.quantum_chrominance[58] = 99;
        this.quantum_chrominance[59] = 99;
        this.quantum_chrominance[60] = 99;
        this.quantum_chrominance[61] = 99;
        this.quantum_chrominance[62] = 99;
        this.quantum_chrominance[63] = 99;

        for (j = 0; j < 64; j++) {
            temp = (this.quantum_chrominance[j] * Quality + 50) / 100;
            if (temp <= 0) {
                temp = 1;
            }
            if (temp >= 255) {
                temp = 255;
            }
            this.quantum_chrominance[j] = temp;
        }
        index = 0;
        for (i = 0; i < 8; i++) {
            for (j = 0; j < 8; j++) {
                // The divisors for the LL&M method (the slow integer method
                // used in
                // jpeg 6a library). This method is currently (04/04/98)
                // incompletely
                // implemented.
                // DivisorsChrominance[index] = ((double)
                // quantum_chrominance[index]) << 3;
                // The divisors for the AAN method (the float method used in
                // jpeg 6a library.
                this.DivisorsChrominance[index] = 1.0 / (this.quantum_chrominance[index] * AANscaleFactor[i]
                        * AANscaleFactor[j] * 8.0);
                index++;
            }
        }

        // quantum and Divisors are objects used to hold the appropriate matices

        this.quantum[0] = this.quantum_luminance;
        this.Divisors[0] = this.DivisorsLuminance;
        this.quantum[1] = this.quantum_chrominance;
        this.Divisors[1] = this.DivisorsChrominance;

    }
"
2621,a9cb057b-f0a3-451f-aa60-66ef04de5ca8,"    public int[] quantizeBlock(final double inputData[][], final int code) {
        final int outputData[] = new int[this.N * this.N];
        int i, j;
        int index;
        index = 0;
        for (i = 0; i < 8; i++) {
            for (j = 0; j < 8; j++) {
                // The second line results in significantly better compression.
                outputData[index] = (int) Math.round(inputData[i][j] * ((double[]) this.Divisors[code])[index]);
                // outputData[index] = (int)(((inputData[i][j] * (((double[])
                // (Divisors[code]))[index])) + 16384.5) -16384);
                index++;
            }
        }

        return outputData;
    }
"
2622,69fad664-035f-4089-bac1-a2535a352167,"    public int[] quantizeBlockExtreme(final double inputData[][], final int code) {
        final int outputData[] = new int[this.N * this.N];
        int i, j;
        int index;
        index = 0;
        for (i = 0; i < 8; i++) {
            for (j = 0; j < 8; j++) {
                outputData[index] = (int) Math.round(inputData[i][j] / ((int[]) this.quantum[code])[index]);
                index++;
            }
        }

        return outputData;
    }
"
2623,4a1692a8-5446-4ebc-8e2d-4115dc486b50,"    public Huffman(final int Width, final int Height) {

        this.bits = new Vector<int[]>();
        this.bits.addElement(this.bitsDCluminance);
        this.bits.addElement(this.bitsACluminance);
        this.bits.addElement(this.bitsDCchrominance);
        this.bits.addElement(this.bitsACchrominance);
        this.val = new Vector<int[]>();
        this.val.addElement(this.valDCluminance);
        this.val.addElement(this.valACluminance);
        this.val.addElement(this.valDCchrominance);
        this.val.addElement(this.valACchrominance);
        initHuf();
        this.ImageWidth = Width;
        this.ImageHeight = Height;

    }
"
2624,b71e7b05-4fd5-4e10-aea6-31d1298d85dc,"    void bufferIt(final BufferedOutputStream outStream, final int code, final int size) {
        int PutBuffer = code;
        int PutBits = this.bufferPutBits;

        PutBuffer &= (1 << size) - 1;
        PutBits += size;
        PutBuffer <<= 24 - PutBits;
        PutBuffer |= this.bufferPutBuffer;

        while (PutBits >= 8) {
            final int c = PutBuffer >> 16 & 0xFF;
            try {
                outStream.write(c);
            } catch (final IOException e) {
                System.out.println(""IO Error: "" + e.getMessage());
            }
            if (c == 0xFF) {
                try {
                    outStream.write(0);
                } catch (final IOException e) {
                    System.out.println(""IO Error: "" + e.getMessage());
                }
            }
            PutBuffer <<= 8;
            PutBits -= 8;
        }
        this.bufferPutBuffer = PutBuffer;
        this.bufferPutBits = PutBits;

    }
"
2625,b8c110dd-a700-4e98-8878-93c90c1b1bfc,"    void flushBuffer(final BufferedOutputStream outStream) {
        int PutBuffer = this.bufferPutBuffer;
        int PutBits = this.bufferPutBits;
        while (PutBits >= 8) {
            final int c = PutBuffer >> 16 & 0xFF;
            try {
                outStream.write(c);
            } catch (final IOException e) {
                System.out.println(""IO Error: "" + e.getMessage());
            }
            if (c == 0xFF) {
                try {
                    outStream.write(0);
                } catch (final IOException e) {
                    System.out.println(""IO Error: "" + e.getMessage());
                }
            }
            PutBuffer <<= 8;
            PutBits -= 8;
        }
        if (PutBits > 0) {
            final int c = PutBuffer >> 16 & 0xFF;
            try {
                outStream.write(c);
            } catch (final IOException e) {
                System.out.println(""IO Error: "" + e.getMessage());
            }
        }
    }
"
2626,1a07ddcb-fbbf-4c9d-a4a0-2ca7f45b055a,"    public void HuffmanBlockEncoder(final BufferedOutputStream outStream, final int zigzag[], final int prec,
            final int DCcode, final int ACcode) {
        int temp, temp2, nbits, k, r, i;

        this.NumOfDCTables = 2;
        this.NumOfACTables = 2;

        // The DC portion

        temp = temp2 = zigzag[0] - prec;
        if (temp < 0) {
            temp = -temp;
            temp2--;
        }
        nbits = 0;
        while (temp != 0) {
            nbits++;
            temp >>= 1;
        }
        // if (nbits > 11) nbits = 11;
        bufferIt(outStream, ((int[][]) this.DC_matrix[DCcode])[nbits][0], ((int[][]) this.DC_matrix[DCcode])[nbits][1]);
        // The arguments in bufferIt are code and size.
        if (nbits != 0) {
            bufferIt(outStream, temp2, nbits);
        }

        // The AC portion

        r = 0;

        for (k = 1; k < 64; k++) {
            if ((temp = zigzag[jpegNaturalOrder[k]]) == 0) {
                r++;
            } else {
                while (r > 15) {
                    bufferIt(outStream, ((int[][]) this.AC_matrix[ACcode])[0xF0][0],
                            ((int[][]) this.AC_matrix[ACcode])[0xF0][1]);
                    r -= 16;
                }
                temp2 = temp;
                if (temp < 0) {
                    temp = -temp;
                    temp2--;
                }
                nbits = 1;
                while ((temp >>= 1) != 0) {
                    nbits++;
                }
                i = (r << 4) + nbits;
                bufferIt(outStream, ((int[][]) this.AC_matrix[ACcode])[i][0], ((int[][]) this.AC_matrix[ACcode])[i][1]);
                bufferIt(outStream, temp2, nbits);

                r = 0;
            }
        }

        if (r > 0) {
            bufferIt(outStream, ((int[][]) this.AC_matrix[ACcode])[0][0], ((int[][]) this.AC_matrix[ACcode])[0][1]);
        }

    }
"
2627,f13958bd-4dd7-45b5-b616-51e848629d8d,"    public void initHuf() {
        this.DC_matrix0 = new int[12][2];
        this.DC_matrix1 = new int[12][2];
        this.AC_matrix0 = new int[255][2];
        this.AC_matrix1 = new int[255][2];
        this.DC_matrix = new Object[2];
        this.AC_matrix = new Object[2];
        int p, l, i, lastp, si, code;
        final int[] huffsize = new int[257];
        final int[] huffcode = new int[257];

        /*
         * init of the DC values for the chrominance [][0] is the code [][1] is
         * the number of bit
         */

        p = 0;
        for (l = 1; l <= 16; l++) {
            for (i = 1; i <= this.bitsDCchrominance[l]; i++) {
                huffsize[p++] = l;
            }
        }
        huffsize[p] = 0;
        lastp = p;

        code = 0;
        si = huffsize[0];
        p = 0;
        while (huffsize[p] != 0) {
            while (huffsize[p] == si) {
                huffcode[p++] = code;
                code++;
            }
            code <<= 1;
            si++;
        }

        for (p = 0; p < lastp; p++) {
            this.DC_matrix1[this.valDCchrominance[p]][0] = huffcode[p];
            this.DC_matrix1[this.valDCchrominance[p]][1] = huffsize[p];
        }

        /*
         * Init of the AC hufmann code for the chrominance matrix [][][0] is the
         * code & matrix[][][1] is the number of bit needed
         */

        p = 0;
        for (l = 1; l <= 16; l++) {
            for (i = 1; i <= this.bitsACchrominance[l]; i++) {
                huffsize[p++] = l;
            }
        }
        huffsize[p] = 0;
        lastp = p;

        code = 0;
        si = huffsize[0];
        p = 0;
        while (huffsize[p] != 0) {
            while (huffsize[p] == si) {
                huffcode[p++] = code;
                code++;
            }
            code <<= 1;
            si++;
        }

        for (p = 0; p < lastp; p++) {
            this.AC_matrix1[this.valACchrominance[p]][0] = huffcode[p];
            this.AC_matrix1[this.valACchrominance[p]][1] = huffsize[p];
        }

        /*
         * init of the DC values for the luminance [][0] is the code [][1] is
         * the number of bit
         */
        p = 0;
        for (l = 1; l <= 16; l++) {
            for (i = 1; i <= this.bitsDCluminance[l]; i++) {
                huffsize[p++] = l;
            }
        }
        huffsize[p] = 0;
        lastp = p;

        code = 0;
        si = huffsize[0];
        p = 0;
        while (huffsize[p] != 0) {
            while (huffsize[p] == si) {
                huffcode[p++] = code;
                code++;
            }
            code <<= 1;
            si++;
        }

        for (p = 0; p < lastp; p++) {
            this.DC_matrix0[this.valDCluminance[p]][0] = huffcode[p];
            this.DC_matrix0[this.valDCluminance[p]][1] = huffsize[p];
        }

        /*
         * Init of the AC hufmann code for luminance matrix [][][0] is the code
         * & matrix[][][1] is the number of bit
         */

        p = 0;
        for (l = 1; l <= 16; l++) {
            for (i = 1; i <= this.bitsACluminance[l]; i++) {
                huffsize[p++] = l;
            }
        }
        huffsize[p] = 0;
        lastp = p;

        code = 0;
        si = huffsize[0];
        p = 0;
        while (huffsize[p] != 0) {
            while (huffsize[p] == si) {
                huffcode[p++] = code;
                code++;
            }
            code <<= 1;
            si++;
        }
        for (int q = 0; q < lastp; q++) {
            this.AC_matrix0[this.valACluminance[q]][0] = huffcode[q];
            this.AC_matrix0[this.valACluminance[q]][1] = huffsize[q];
        }

        this.DC_matrix[0] = this.DC_matrix0;
        this.DC_matrix[1] = this.DC_matrix1;
        this.AC_matrix[0] = this.AC_matrix0;
        this.AC_matrix[1] = this.AC_matrix1;
    }
"
2628,d1ace73b-480f-4236-a4da-b5d441174098,"    public JpegEncoder(final Image image, final int quality, final OutputStream out, final String comment) {
        final MediaTracker tracker = new MediaTracker(this);
        tracker.addImage(image, 0);
        try {
            tracker.waitForID(0);
        } catch (final InterruptedException e) {
            // Got to do something?
        }
        /*
         * Quality of the image. 0 to 100 and from bad image quality, high
         * compression to good image quality low compression
         */
        this.Quality = quality;

        /*
         * Getting picture information It takes the Width, Height and RGB scans
         * of the image.
         */
        this.JpegObj = new JpegInfo(image, comment);

        this.imageHeight = this.JpegObj.imageHeight;
        this.imageWidth = this.JpegObj.imageWidth;
        this.outStream = new BufferedOutputStream(out);
        this.dct = new DCT(this.Quality);
        this.Huf = new Huffman(this.imageWidth, this.imageHeight);
    }
"
2629,4746d860-89ba-4d29-b198-35a7e3e5d395,"    public void Compress() {
        WriteHeaders(this.outStream);
        WriteCompressedData(this.outStream);
        WriteEOI(this.outStream);
        try {
            this.outStream.flush();
        } catch (final IOException e) {
            System.out.println(""IO Error: "" + e.getMessage());
        }
    }
"
2630,25ddb771-42fa-497c-bd18-eae1c9f861ab,"    public void Compress(final InputStream embeddedData, final String password) {
        this.embeddedData = embeddedData;
        this.password = password;
        Compress();
    }
"
2631,0af70c28-5b7c-40fd-b21f-2320c8c866e1,"    public int getQuality() {
        return this.Quality;
    }
"
2632,3f93bbf0-d3e7-4da0-b9bb-4d25e8dc8ecc,"    public void setQuality(final int quality) {
        this.dct = new DCT(quality);
    }
"
2633,978982cc-fea1-4918-91dd-8773d69b15bb,"    void WriteArray(final byte[] data, final BufferedOutputStream out) {
        final int i;
        int length;
        try {
            length = ((data[2] & 0xFF) << 8) + (data[3] & 0xFF) + 2;
            out.write(data, 0, length);
        } catch (final IOException e) {
            System.out.println(""IO Error: "" + e.getMessage());
        }
    }
"
2634,d3d665d1-1178-4150-a14b-b16fb2922b3c,"    public void WriteCompressedData(final BufferedOutputStream outStream) {
        final int offset;
        int i, j, r, c, a, b;
        final int temp = 0;
        int comp, xpos, ypos, xblockoffset, yblockoffset;
        float inputArray[][];
        final float dctArray1[][] = new float[8][8];
        double dctArray2[][] = new double[8][8];
        int dctArray3[] = new int[8 * 8];

        /*
         * This method controls the compression of the image. Starting at the
         * upper left of the image, it compresses 8x8 blocks of data until the
         * entire image has been compressed.
         */

        final int lastDCvalue[] = new int[this.JpegObj.NumberOfComponents];
        final int zeroArray[] = new int[64]; // initialized to hold all zeros
        int Width = 0, Height = 0;
        final int nothing = 0, not;
        int MinBlockWidth, MinBlockHeight;
        // This initial setting of MinBlockWidth and MinBlockHeight is done to
        // ensure they start with values larger than will actually be the case.
        MinBlockWidth = this.imageWidth % 8 != 0 ? (int) (Math.floor(this.imageWidth / 8.0) + 1) * 8 : this.imageWidth;
        MinBlockHeight = this.imageHeight % 8 != 0 ? (int) (Math.floor(this.imageHeight / 8.0) + 1) * 8
                : this.imageHeight;
        for (comp = 0; comp < this.JpegObj.NumberOfComponents; comp++) {
            MinBlockWidth = Math.min(MinBlockWidth, this.JpegObj.BlockWidth[comp]);
            MinBlockHeight = Math.min(MinBlockHeight, this.JpegObj.BlockHeight[comp]);
        }
        xpos = 0;
        // westfeld
        // Before we enter these loops, we initialise the
        // coeff for steganography here:
        int shuffledIndex = 0;
        int coeffCount = 0;
        for (r = 0; r < MinBlockHeight; r++) {
            for (c = 0; c < MinBlockWidth; c++) {
                for (comp = 0; comp < this.JpegObj.NumberOfComponents; comp++) {
                    for (i = 0; i < this.JpegObj.VsampFactor[comp]; i++) {
                        for (j = 0; j < this.JpegObj.HsampFactor[comp]; j++) {
                            coeffCount += 64;
                        }
                    }
                }
            }
        }
        final int coeff[] = new int[coeffCount];

        System.out.println(""DCT/quantisation starts"");
        System.out.println(this.imageWidth + "" x "" + this.imageHeight);
        for (r = 0; r < MinBlockHeight; r++) {
            for (c = 0; c < MinBlockWidth; c++) {
                xpos = c * 8;
                ypos = r * 8;
                for (comp = 0; comp < this.JpegObj.NumberOfComponents; comp++) {
                    Width = this.JpegObj.BlockWidth[comp];
                    Height = this.JpegObj.BlockHeight[comp];
                    inputArray = (float[][]) this.JpegObj.Components[comp];

                    for (i = 0; i < this.JpegObj.VsampFactor[comp]; i++) {
                        for (j = 0; j < this.JpegObj.HsampFactor[comp]; j++) {
                            xblockoffset = j * 8;
                            yblockoffset = i * 8;
                            for (a = 0; a < 8; a++) {
                                for (b = 0; b < 8; b++) {

                                    // I believe this is where the dirty line at
                                    // the bottom of the image is
                                    // coming from. I need to do a check here to
                                    // make sure I'm not reading past
                                    // image data.
                                    // This seems to not be a big issue right
                                    // now. (04/04/98)

                                    // westfeld - dirty line fixed, Jun 6 2000
                                    int ia = ypos * this.JpegObj.VsampFactor[comp] + yblockoffset + a;
                                    int ib = xpos * this.JpegObj.HsampFactor[comp] + xblockoffset + b;
                                    if (this.imageHeight / 2 * this.JpegObj.VsampFactor[comp] <= ia) {
                                        ia = this.imageHeight / 2 * this.JpegObj.VsampFactor[comp] - 1;
                                    }
                                    if (this.imageWidth / 2 * this.JpegObj.HsampFactor[comp] <= ib) {
                                        ib = this.imageWidth / 2 * this.JpegObj.HsampFactor[comp] - 1;
                                    }
                                    // dctArray1[a][b] = inputArray[ypos +
                                    // yblockoffset + a][xpos + xblockoffset +
                                    // b];
                                    dctArray1[a][b] = inputArray[ia][ib];
                                }
                            }
                            // The following code commented out because on some
                            // images this technique
                            // results in poor right and bottom borders.
                            // if ((!JpegObj.lastColumnIsDummy[comp] || c <
                            // Width - 1) && (!JpegObj.lastRowIsDummy[comp] || r
                            // < Height - 1)) {
                            dctArray2 = this.dct.forwardDCT(dctArray1);
                            dctArray3 = this.dct.quantizeBlock(dctArray2, this.JpegObj.QtableNumber[comp]);
                            // }
                            // else {
                            // zeroArray[0] = dctArray3[0];
                            // zeroArray[0] = lastDCvalue[comp];
                            // dctArray3 = zeroArray;
                            // }
                            // westfeld
                            // For steganography, all dct
                            // coefficients are collected in
                            // coeff[] first. We do not encode
                            // any Huffman Blocks here (we'll do
                            // this later).
                            System.arraycopy(dctArray3, 0, coeff, shuffledIndex, 64);
                            shuffledIndex += 64;

                        }
                    }
                }
            }
        }
        System.out.println(""got "" + coeffCount + "" DCT AC/DC coefficients"");
        int _changed = 0;
        int _embedded = 0;
        int _examined = 0;
        int _expected = 0;
        int _one = 0;
        int _large = 0;
        int _thrown = 0;
        int _zero = 0;
        for (i = 0; i < coeffCount; i++) {
            if (i % 64 == 0) {
                continue;
            }
            if (coeff[i] == 1) {
                _one++;
            }
            if (coeff[i] == -1) {
                _one++;
            }
            if (coeff[i] == 0) {
                _zero++;
            }
        }
        _large = coeffCount - _zero - _one - coeffCount / 64;
        _expected = _large + (int) (0.49 * _one);
        //
        // System.out.println(""zero=""+_zero);
        System.out.println(""one="" + _one);
        System.out.println(""large="" + _large);
        //
        System.out.println(""expected capacity: "" + _expected + "" bits"");
        System.out.println(""expected capacity with"");
        for (i = 1; i < 8; i++) {
            int usable, changed, n;
            n = (1 << i) - 1;
            usable = _expected * i / n - _expected * i / n % n;
            changed = coeffCount - _zero - coeffCount / 64;
            changed = changed * i / n - changed * i / n % n;
            changed = n * changed / (n + 1) / i;
            //
            changed = _large - _large % (n + 1);
            changed = (changed + _one + _one / 2 - _one / (n + 1)) / (n + 1);
            usable /= 8;
            if (usable == 0) {
                break;
            }
            if (i == 1) {
                System.out.print(""default"");
            } else {
                System.out.print(""(1, "" + n + "", "" + i + "")"");
            }
            System.out.println("" code: "" + usable + "" bytes (efficiency: "" + usable * 8 / changed + ""."" + usable * 80
                    / changed % 10 + "" bits per change)"");
        }

        // westfeld
        if (this.embeddedData != null) {
            // Now we embed the secret data in the permutated sequence.
            System.out.println(""Permutation starts"");
            final F5Random random = new F5Random(this.password.getBytes());
            final Permutation permutation = new Permutation(coeffCount, random);
            int nextBitToEmbed = 0;
            int byteToEmbed = 0;
            int availableBitsToEmbed = 0;
            // We start with the length information. Well,
            // the length information it is more than one
            // byte, so this first ""byte"" is 32 bits long.
            try {
                byteToEmbed = this.embeddedData.available();
            } catch (final Exception e) {
                e.printStackTrace();
            }
            System.out.print(""Embedding of "" + (byteToEmbed * 8 + 32) + "" bits ("" + byteToEmbed + ""+4 bytes) "");
            // We use the most significant byte for the 1 of n
            // code, and reserve one extra bit for future use.
            if (byteToEmbed > 0x007fffff) {
                byteToEmbed = 0x007fffff;
            }
            // We calculate n now
            for (i = 1; i < 8; i++) {
                int usable;
                final int changed;
                this.n = (1 << i) - 1;
                usable = _expected * i / this.n - _expected * i / this.n % this.n;
                usable /= 8;
                if (usable == 0) {
                    break;
                }
                if (usable < byteToEmbed + 4) {
                    break;
                }
            }
            final int k = i - 1;
            this.n = (1 << k) - 1;
            switch (this.n) {
            case 0:
                System.out.println(""using default code, file will not fit"");
                this.n++;
                break;
            case 1:
                System.out.println(""using default code"");
                break;
            default:
                System.out.println(""using (1, "" + this.n + "", "" + k + "") code"");
            }
            byteToEmbed |= k << 24; // store k in the status word
            // Since shuffling cannot hide the distribution, the
            // distribution of all bits to embed is unified by
            // adding a pseudo random bit-string. We continue the random
            // we used for Permutation, initially seeked with password.
            byteToEmbed ^= random.getNextByte();
            byteToEmbed ^= random.getNextByte() << 8;
            byteToEmbed ^= random.getNextByte() << 16;
            byteToEmbed ^= random.getNextByte() << 24;
            nextBitToEmbed = byteToEmbed & 1;
            byteToEmbed >>= 1;
            availableBitsToEmbed = 31;
            _embedded++;
            if (this.n > 1) { // use 1 of n code
                int kBitsToEmbed;
                int extractedBit;
                final int[] codeWord = new int[this.n];
                int hash;
                int startOfN = 0;
                int endOfN = 0;
                boolean isLastByte = false;
                // embed status word first
                for (i = 0; i < coeffCount; i++) {
                    shuffledIndex = permutation.getShuffled(i);
                    if (shuffledIndex % 64 == 0) {
                        continue; // skip DC coefficients
                    }
                    if (coeff[shuffledIndex] == 0) {
                        continue; // skip zeroes
                    }
                    if (coeff[shuffledIndex] > 0) {
                        if ((coeff[shuffledIndex] & 1) != nextBitToEmbed) {
                            coeff[shuffledIndex]--; // decrease absolute value
                            _changed++;
                        }
                    } else {
                        if ((coeff[shuffledIndex] & 1) == nextBitToEmbed) {
                            coeff[shuffledIndex]++; // decrease absolute value
                            _changed++;
                        }
                    }
                    if (coeff[shuffledIndex] != 0) {
                        // The coefficient is still nonzero. We
                        // successfully embedded ""nextBitToEmbed"".
                        // We will read a new bit to embed now.
                        if (availableBitsToEmbed == 0) {
                            break; // statusword embedded.
                        }
                        nextBitToEmbed = byteToEmbed & 1;
                        byteToEmbed >>= 1;
                        availableBitsToEmbed--;
                        _embedded++;
                    } else {
                        _thrown++;
                    }
                }
                startOfN = i + 1;
                // now embed the data using 1 of n code
                embeddingLoop: do {
                    kBitsToEmbed = 0;
                    // get k bits to embed
                    for (i = 0; i < k; i++) {
                        if (availableBitsToEmbed == 0) {
                            // If the byte of embedded text is
                            // empty, we will get a new one.
                            try {
                                if (this.embeddedData.available() == 0) {
                                    isLastByte = true;
                                    break;
                                }
                                byteToEmbed = this.embeddedData.read();
                                byteToEmbed ^= random.getNextByte();
                            } catch (final Exception e) {
                                e.printStackTrace();
                                break;
                            }
                            availableBitsToEmbed = 8;
                        }
                        nextBitToEmbed = byteToEmbed & 1;
                        byteToEmbed >>= 1;
                        availableBitsToEmbed--;
                        kBitsToEmbed |= nextBitToEmbed << i;
                        _embedded++;
                    }
                    // embed k bits
                    do {
                        j = startOfN;
                        // fill codeWord[] with the indices of the
                        // next n non-zero coefficients in coeff[]
                        for (i = 0; i < this.n; j++) {
                            if (j >= coeffCount) {
                                // in rare cases the estimated capacity is too
                                // small
                                System.out.println(""Capacity exhausted."");
                                break embeddingLoop;
                            }
                            shuffledIndex = permutation.getShuffled(j);
                            if (shuffledIndex % 64 == 0) {
                                continue; // skip DC coefficients
                            }
                            if (coeff[shuffledIndex] == 0) {
                                continue; // skip zeroes
                            }
                            codeWord[i++] = shuffledIndex;
                        }
                        endOfN = j;
                        hash = 0;
                        for (i = 0; i < this.n; i++) {
                            if (coeff[codeWord[i]] > 0) {
                                extractedBit = coeff[codeWord[i]] & 1;
                            } else {
                                extractedBit = 1 - (coeff[codeWord[i]] & 1);
                            }
                            if (extractedBit == 1) {
                                hash ^= i + 1;
                            }
                        }
                        i = hash ^ kBitsToEmbed;
                        if (i == 0) {
                            break; // embedded without change
                        }
                        i--;
                        if (coeff[codeWord[i]] > 0) {
                            coeff[codeWord[i]]--;
                        } else {
                            coeff[codeWord[i]]++;
                        }
                        _changed++;
                        if (coeff[codeWord[i]] == 0) {
                            _thrown++;
                        }
                    } while (coeff[codeWord[i]] == 0);
                    startOfN = endOfN;
                } while (!isLastByte);
            } else { // default code
                // The main embedding loop follows. It works on the
                // shuffled stream of coefficients.
                for (i = 0; i < coeffCount; i++) {
                    shuffledIndex = permutation.getShuffled(i);
                    if (shuffledIndex % 64 == 0) {
                        continue; // skip DC coefficients
                    }
                    if (coeff[shuffledIndex] == 0) {
                        continue; // skip zeroes
                    }
                    _examined++;
                    if (coeff[shuffledIndex] > 0) {
                        if ((coeff[shuffledIndex] & 1) != nextBitToEmbed) {
                            coeff[shuffledIndex]--; // decrease absolute value
                            _changed++;
                        }
                    } else {
                        if ((coeff[shuffledIndex] & 1) == nextBitToEmbed) {
                            coeff[shuffledIndex]++; // decrease absolute value
                            _changed++;
                        }
                    }
                    if (coeff[shuffledIndex] != 0) {
                        // The coefficient is still nonzero. We
                        // successfully embedded ""nextBitToEmbed"".
                        // We will read a new bit to embed now.
                        if (availableBitsToEmbed == 0) {
                            // If the byte of embedded text is
                            // empty, we will get a new one.
                            try {
                                if (this.embeddedData.available() == 0) {
                                    break;
                                }
                                byteToEmbed = this.embeddedData.read();
                                byteToEmbed ^= random.getNextByte();
                            } catch (final Exception e) {
                                e.printStackTrace();
                                break;
                            }
                            availableBitsToEmbed = 8;
                        }
                        nextBitToEmbed = byteToEmbed & 1;
                        byteToEmbed >>= 1;
                        availableBitsToEmbed--;
                        _embedded++;
                    } else {
                        _thrown++;
                    }
                }
            }
            if (_examined > 0) {
                System.out.println(_examined + "" coefficients examined"");
            }
            System.out.println(_changed + "" coefficients changed (efficiency: "" + _embedded / _changed + "".""
                    + _embedded * 10 / _changed % 10 + "" bits per change)"");
            System.out.println(_thrown + "" coefficients thrown (zeroed)"");
            System.out.println(_embedded + "" bits ("" + _embedded / 8 + "" bytes) embedded"");
        }
        System.out.println(""Starting Huffman Encoding."");
        // Do the Huffman Encoding now.
        shuffledIndex = 0;
        for (r = 0; r < MinBlockHeight; r++) {
            for (c = 0; c < MinBlockWidth; c++) {
                for (comp = 0; comp < this.JpegObj.NumberOfComponents; comp++) {
                    for (i = 0; i < this.JpegObj.VsampFactor[comp]; i++) {
                        for (j = 0; j < this.JpegObj.HsampFactor[comp]; j++) {
                            System.arraycopy(coeff, shuffledIndex, dctArray3, 0, 64);
                            this.Huf.HuffmanBlockEncoder(outStream, dctArray3, lastDCvalue[comp],
                                    this.JpegObj.DCtableNumber[comp], this.JpegObj.ACtableNumber[comp]);
                            lastDCvalue[comp] = dctArray3[0];
                            shuffledIndex += 64;
                        }
                    }
                }
            }
        }

        this.Huf.flushBuffer(outStream);
    }
"
2635,ef258749-e7bb-418c-8654-a5bc906286b9,"    public void WriteEOI(final BufferedOutputStream out) {
        final byte[] EOI = {
                (byte) 0xFF, (byte) 0xD9 };
        WriteMarker(EOI, out);
    }
"
2636,b968e9d6-5d15-4d1f-86ff-f30093197c7d,"    public void WriteHeaders(final BufferedOutputStream out) {
        int i, j, index, offset, length;
        int tempArray[];

        // the SOI marker
        final byte[] SOI = {
                (byte) 0xFF, (byte) 0xD8 };
        WriteMarker(SOI, out);

        // The order of the following headers is quiet inconsequential.
        // the JFIF header
        final byte JFIF[] = new byte[18];
        JFIF[0] = (byte) 0xff; // app0 marker
        JFIF[1] = (byte) 0xe0;
        JFIF[2] = (byte) 0x00; // length
        JFIF[3] = (byte) 0x10;
        JFIF[4] = (byte) 0x4a; // ""JFIF""
        JFIF[5] = (byte) 0x46;
        JFIF[6] = (byte) 0x49;
        JFIF[7] = (byte) 0x46;
        JFIF[8] = (byte) 0x00;
        JFIF[9] = (byte) 0x01; // 1.01
        JFIF[10] = (byte) 0x01;
        JFIF[11] = (byte) 0x00;
        JFIF[12] = (byte) 0x00;
        JFIF[13] = (byte) 0x01;
        JFIF[14] = (byte) 0x00;
        JFIF[15] = (byte) 0x01;
        JFIF[16] = (byte) 0x00;
        JFIF[17] = (byte) 0x00;

        if (this.JpegObj.getComment().equals(""TEST"")) {
            JFIF[10] = (byte) 0x00; // 1.00
        }
        WriteArray(JFIF, out);

        // Comment Header
        String comment = new String();
        comment = this.JpegObj.getComment();
        length = comment.length();
        if (length != 0) {
            final byte COM[] = new byte[length + 4];
            COM[0] = (byte) 0xFF;
            COM[1] = (byte) 0xFE;
            COM[2] = (byte) (length >> 8 & 0xFF);
            COM[3] = (byte) (length & 0xFF);
            java.lang.System.arraycopy(this.JpegObj.Comment.getBytes(), 0, COM, 4, this.JpegObj.Comment.length());
            WriteArray(COM, out);
        }

        // The DQT header
        // 0 is the luminance index and 1 is the chrominance index
        final byte DQT[] = new byte[134];
        DQT[0] = (byte) 0xFF;
        DQT[1] = (byte) 0xDB;
        DQT[2] = (byte) 0x00;
        DQT[3] = (byte) 0x84;
        offset = 4;
        for (i = 0; i < 2; i++) {
            DQT[offset++] = (byte) ((0 << 4) + i);
            tempArray = (int[]) this.dct.quantum[i];
            for (j = 0; j < 64; j++) {
                DQT[offset++] = (byte) tempArray[jpegNaturalOrder[j]];
            }
        }
        WriteArray(DQT, out);

        // Start of Frame Header
        final byte SOF[] = new byte[19];
        SOF[0] = (byte) 0xFF;
        SOF[1] = (byte) 0xC0;
        SOF[2] = (byte) 0x00;
        SOF[3] = (byte) 17;
        SOF[4] = (byte) this.JpegObj.Precision;
        SOF[5] = (byte) (this.JpegObj.imageHeight >> 8 & 0xFF);
        SOF[6] = (byte) (this.JpegObj.imageHeight & 0xFF);
        SOF[7] = (byte) (this.JpegObj.imageWidth >> 8 & 0xFF);
        SOF[8] = (byte) (this.JpegObj.imageWidth & 0xFF);
        SOF[9] = (byte) this.JpegObj.NumberOfComponents;
        index = 10;
        for (i = 0; i < SOF[9]; i++) {
            SOF[index++] = (byte) this.JpegObj.CompID[i];
            SOF[index++] = (byte) ((this.JpegObj.HsampFactor[i] << 4) + this.JpegObj.VsampFactor[i]);
            SOF[index++] = (byte) this.JpegObj.QtableNumber[i];
        }
        WriteArray(SOF, out);

        // The DHT Header
        byte DHT1[], DHT2[], DHT3[], DHT4[];
        int bytes, temp, oldindex, intermediateindex;
        length = 2;
        index = 4;
        oldindex = 4;
        DHT1 = new byte[17];
        DHT4 = new byte[4];
        DHT4[0] = (byte) 0xFF;
        DHT4[1] = (byte) 0xC4;
        for (i = 0; i < 4; i++) {
            bytes = 0;
            DHT1[index++ - oldindex] = (byte) this.Huf.bits.elementAt(i)[0];
            for (j = 1; j < 17; j++) {
                temp = this.Huf.bits.elementAt(i)[j];
                DHT1[index++ - oldindex] = (byte) temp;
                bytes += temp;
            }
            intermediateindex = index;
            DHT2 = new byte[bytes];
            for (j = 0; j < bytes; j++) {
                DHT2[index++ - intermediateindex] = (byte) this.Huf.val.elementAt(i)[j];
            }
            DHT3 = new byte[index];
            java.lang.System.arraycopy(DHT4, 0, DHT3, 0, oldindex);
            java.lang.System.arraycopy(DHT1, 0, DHT3, oldindex, 17);
            java.lang.System.arraycopy(DHT2, 0, DHT3, oldindex + 17, bytes);
            DHT4 = DHT3;
            oldindex = index;
        }
        DHT4[2] = (byte) (index - 2 >> 8 & 0xFF);
        DHT4[3] = (byte) (index - 2 & 0xFF);
        WriteArray(DHT4, out);

        // Start of Scan Header
        final byte SOS[] = new byte[14];
        SOS[0] = (byte) 0xFF;
        SOS[1] = (byte) 0xDA;
        SOS[2] = (byte) 0x00;
        SOS[3] = (byte) 12;
        SOS[4] = (byte) this.JpegObj.NumberOfComponents;
        index = 5;
        for (i = 0; i < SOS[4]; i++) {
            SOS[index++] = (byte) this.JpegObj.CompID[i];
            SOS[index++] = (byte) ((this.JpegObj.DCtableNumber[i] << 4) + this.JpegObj.ACtableNumber[i]);
        }
        SOS[index++] = (byte) this.JpegObj.Ss;
        SOS[index++] = (byte) this.JpegObj.Se;
        SOS[index++] = (byte) ((this.JpegObj.Ah << 4) + this.JpegObj.Al);
        WriteArray(SOS, out);

    }
"
2637,22da2a07-d5d6-4aea-b4a1-5edc5cf623ec,"    void WriteMarker(final byte[] data, final BufferedOutputStream out) {
        try {
            out.write(data, 0, 2);
        } catch (final IOException e) {
            System.out.println(""IO Error: "" + e.getMessage());
        }
    }
"
2638,8b40d90e-9a77-496b-a9bf-f1c6eabd4157,"    public JpegInfo(final Image image, final String comment) {
        this.Components = new Object[this.NumberOfComponents];
        this.compWidth = new int[this.NumberOfComponents];
        this.compHeight = new int[this.NumberOfComponents];
        this.BlockWidth = new int[this.NumberOfComponents];
        this.BlockHeight = new int[this.NumberOfComponents];
        this.imageobj = image;
        this.imageWidth = image.getWidth(null);
        this.imageHeight = image.getHeight(null);
        // Comment =
        // ""JPEG Encoder Copyright 1998, James R. Weeks and BioElectroMech.  "";
        this.Comment = comment;
        getYCCArray();
    }
"
2639,73bc25c0-5f5e-4c8a-93f9-f484e3e28ebf,"    float[][] DownSample(final float[][] C, final int comp) {
        int inrow, incol;
        int outrow, outcol;
        float output[][];
        float temp;
        int bias;
        inrow = 0;
        incol = 0;
        output = new float[this.compHeight[comp]][this.compWidth[comp]];
        for (outrow = 0; outrow < this.compHeight[comp]; outrow++) {
            bias = 1;
            for (outcol = 0; outcol < this.compWidth[comp]; outcol++) {
                // System.out.println(""outcol=""+outcol);
                temp = C[inrow][incol++]; // 00
                temp += C[inrow++][incol--]; // 01
                temp += C[inrow][incol++]; // 10
                temp += C[inrow--][incol++] + bias; // 11 -> 02
                output[outrow][outcol] = temp / (float) 4.0;
                bias ^= 3;
            }
            inrow += 2;
            incol = 0;
        }
        return output;
    }
"
2640,584296fa-7fde-43bd-8f3e-6f3d181464ac,"    public String getComment() {
        return this.Comment;
    }
"
2641,7f538fe5-5e9a-44fa-8921-86209ef77009,"    private void getYCCArray() {
        final int values[] = new int[this.imageWidth * this.imageHeight];
        int r, g, b, y, x;
        // In order to minimize the chance that grabPixels will throw an
        // exception
        // it may be necessary to grab some pixels every few scanlines and
        // process
        // those before going for more. The time expense may be prohibitive.
        // However, for a situation where memory overhead is a concern, this may
        // be
        // the only choice.
        final PixelGrabber grabber = new PixelGrabber(this.imageobj.getSource(), 0, 0, this.imageWidth,
                this.imageHeight, values, 0, this.imageWidth);
        this.MaxHsampFactor = 1;
        this.MaxVsampFactor = 1;
        for (y = 0; y < this.NumberOfComponents; y++) {
            this.MaxHsampFactor = Math.max(this.MaxHsampFactor, this.HsampFactor[y]);
            this.MaxVsampFactor = Math.max(this.MaxVsampFactor, this.VsampFactor[y]);
        }
        for (y = 0; y < this.NumberOfComponents; y++) {
            this.compWidth[y] = (this.imageWidth % 8 != 0 ? (int) Math.ceil(this.imageWidth / 8.0) * 8
                    : this.imageWidth) / this.MaxHsampFactor * this.HsampFactor[y];
            if (this.compWidth[y] != this.imageWidth / this.MaxHsampFactor * this.HsampFactor[y]) {
                this.lastColumnIsDummy[y] = true;
            }
            // results in a multiple of 8 for compWidth
            // this will make the rest of the program fail for the unlikely
            // event that someone tries to compress an 16 x 16 pixel image
            // which would of course be worse than pointless
            this.BlockWidth[y] = (int) Math.ceil(this.compWidth[y] / 8.0);
            this.compHeight[y] = (this.imageHeight % 8 != 0 ? (int) Math.ceil(this.imageHeight / 8.0) * 8
                    : this.imageHeight) / this.MaxVsampFactor * this.VsampFactor[y];
            if (this.compHeight[y] != this.imageHeight / this.MaxVsampFactor * this.VsampFactor[y]) {
                this.lastRowIsDummy[y] = true;
            }
            this.BlockHeight[y] = (int) Math.ceil(this.compHeight[y] / 8.0);
        }
        try {
            if (grabber.grabPixels() != true) {
                try {
                    throw new AWTException(""Grabber returned false: "" + grabber.getStatus());
                } catch (final Exception e) {
                }
                ;
            }
        } catch (final InterruptedException e) {
        }
        ;
        final float Y[][] = new float[this.compHeight[0]][this.compWidth[0]];
        final float Cr1[][] = new float[this.compHeight[0]][this.compWidth[0]];
        final float Cb1[][] = new float[this.compHeight[0]][this.compWidth[0]];
        float Cb2[][] = new float[this.compHeight[1]][this.compWidth[1]];
        float Cr2[][] = new float[this.compHeight[2]][this.compWidth[2]];
        int index = 0;
        for (y = 0; y < this.imageHeight; ++y) {
            for (x = 0; x < this.imageWidth; ++x) {
                r = values[index] >> 16 & 0xff;
                g = values[index] >> 8 & 0xff;
                b = values[index] & 0xff;

                // The following three lines are a more correct color conversion
                // but
                // the current conversion technique is sufficient and results in
                // a higher
                // compression rate.
                // Y[y][x] = 16 + (float)(0.8588*(0.299 * (float)r + 0.587 *
                // (float)g + 0.114 * (float)b ));
                // Cb1[y][x] = 128 + (float)(0.8784*(-0.16874 * (float)r -
                // 0.33126 * (float)g + 0.5 * (float)b));
                // Cr1[y][x] = 128 + (float)(0.8784*(0.5 * (float)r - 0.41869 *
                // (float)g - 0.08131 * (float)b));
                Y[y][x] = (float) (0.299 * r + 0.587 * g + 0.114 * b);
                Cb1[y][x] = 128 + (float) (-0.16874 * r - 0.33126 * g + 0.5 * b);
                Cr1[y][x] = 128 + (float) (0.5 * r - 0.41869 * g - 0.08131 * b);
                index++;
            }
        }

        // Need a way to set the H and V sample factors before allowing
        // downsampling.
        // For now (04/04/98) downsampling must be hard coded.
        // Until a better downsampler is implemented, this will not be done.
        // Downsampling is currently supported. The downsampling method here
        // is a simple box filter.

        this.Components[0] = Y;
        Cb2 = DownSample(Cb1, 1);
        this.Components[1] = Cb2;
        Cr2 = DownSample(Cr1, 2);
        this.Components[2] = Cr2;
    }
"
2642,d68f3845-8b3c-40c8-8eac-372f3231c43c,"    public void setComment(final String comment) {
        this.Comment.concat(comment);
    }
"
2643,387f5260-beaf-4e07-a12f-4d2b8203ebad,"    public HuffTable(final DataInputStream d, final int l) {
        this.dis = d;
        // System.out.println(""L�nge=""+l);
        // Get table data from input stream
        this.Ln = 19 + getTableData();
        // System.out.println(Ln);
        Generate_size_table(); // Flow Chart C.1
        Generate_code_table(); // Flow Chart C.2
        Order_codes(); // Flow Chart C.3
        Decoder_tables(); // Generate decoder tables Flow Chart F.15
    }
"
2644,734b81eb-89d7-4816-a9cf-7ffc994c0d42,"    private void Decoder_tables() {
        // Decoder table generation Flow Chart F.15
        this.I = 0;
        this.J = 0;
        while (true) {
            if (++this.I > 16)
                return;

            if (this.BITS[this.I] == 0) {
                this.MAXCODE[this.I] = -1;
            } else {
                this.VALPTR[this.I] = this.J;
                this.MINCODE[this.I] = this.HUFFCODE[this.J];
                this.J = this.J + this.BITS[this.I] - 1;
                this.MAXCODE[this.I] = this.HUFFCODE[this.J++];
            }
        }
    }
"
2645,7000892d-41d7-462f-aa79-459015792503,"    private void Generate_code_table() {
        // Generate Code table Flow Chart C.2
        this.K = 0;
        this.CODE = 0;
        this.SI = this.HUFFSIZE[0];
        while (true) {
            this.HUFFCODE[this.K++] = this.CODE++;

            if (this.HUFFSIZE[this.K] == this.SI) {
                continue;
            }

            if (this.HUFFSIZE[this.K] == 0) {
                break;
            }

            while (true) {
                this.CODE <<= 1;
                this.SI++;
                if (this.HUFFSIZE[this.K] == this.SI) {
                    break;
                }
            }
        }
    }
"
2646,9dbb81c8-6204-4348-a825-4a9825f14448,"    private void Generate_size_table() {
        // Generate HUFFSIZE table Flow Chart C.1
        this.K = 0;
        this.I = 1;
        this.J = 1;
        while (true) {
            if (this.J > this.BITS[this.I]) {
                this.J = 1;
                this.I++;
                if (this.I > 16) {
                    break;
                }
            } else {
                this.HUFFSIZE[this.K++] = this.I;
                this.J++;
            }
        }
        this.HUFFSIZE[this.K] = 0;
        this.LASTK = this.K;
    }
"
2647,bbbe4c2f-800e-4e84-b094-bfe34a727437,"    private int getByte() {
        try {
            return this.dis.readUnsignedByte();
        } catch (final IOException e) {
            return -1;
        }
    }
"
2648,8ad1480d-0472-4282-9eaa-c3528a984e73,"    public int[] getHUFFVAL() {
        return this.HUFFVAL;
    }
"
2649,acd6f4e5-029e-4ae0-b627-35d323ba786b,"    public int getLen() {
        return this.Ln;
    }
"
2650,c9072728-59e1-4e67-b006-84d1dfbcbefb,"    public int[] getMAXCODE() {
        return this.MAXCODE;
    }
"
2651,e6f26f63-a126-4c59-9178-8d8dcd96cab2,"    public int[] getMINCODE() {
        return this.MINCODE;
    }
"
2652,d10b8d4b-e3b9-49c7-a524-e72aa7a00567,"    private int getTableData() {
        // Get BITS list
        int count = 0;
        for (int x = 1; x < 17; x++) {
            this.BITS[x] = getByte();
            count += this.BITS[x];
        }

        // Read in HUFFVAL
        for (int x = 0; x < count; x++) {
            // System.out.println(Ln);
            this.HUFFVAL[x] = getByte();
        }
        return count;
    }
"
2653,d90cb175-87bd-471c-91e1-0a3647187f4f,"    public int[] getVALPTR() {
        return this.VALPTR;
    }
"
2654,15c62df2-10f4-4624-bdc8-442b89db1c2c,"    private void Order_codes() {
        // Order Codes Flow Chart C.3
        this.K = 0;

        while (true) {
            this.I = this.HUFFVAL[this.K];
            this.EHUFCO[this.I] = this.HUFFCODE[this.K];
            this.EHUFSI[this.I] = this.HUFFSIZE[this.K++];
            if (this.K >= this.LASTK) {
                break;
            }
        }
    }
"
2655,25562a54-6de7-40f0-91ed-4f91d17937ac,"    public HuffmanDecode(final byte[] data) {
        this.size = (short) data.length;
        this.dis = new DataInputStream(new ByteArrayInputStream(data));
        // Parse out markers and header info
        boolean cont = true;
        while (cont) {
            if (255 == getByte()) {
                switch (getByte()) {
                case 192:
                    sof0();
                    break;
                case 196:
                    dht();
                    break;
                case 219:
                    dqt();
                    break;
                case 217:
                    cont = false;
                    break;
                case 218:
                    cont = false;
                    break;
                case APP0:
                case APP1:
                case APP2:
                case APP3:
                case APP4:
                case APP5:
                case APP6:
                case APP7:
                case APP8:
                case APP9:
                case APP10:
                case APP11:
                case APP12:
                case APP13:
                case APP14:
                case APP15:
                    skipVariable();
                    break;
                case DRI:
                    dri();
                    break;
                }
            }
        }
    }
"
2656,9cb1eb49-12b6-46a6-be48-121d0cfccfaa,"    private int available() {
        try {
            return this.dis.available();
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return 0;
    }
"
2657,2e317739-f88f-41fd-ae77-2f46b7758526,"    private void closeStream() {
        // Close input stream
        try {
            this.dis.close(); // close io stream to file
        } catch (final IOException e) {
        }
    }
"
2658,248a4e63-699b-473a-887a-f8e07fcdfb80,"    public int[] decode() {
        final int x, y, a, b, line;// , sz = X * Y;
        int /* col, */tmp;
        final int blocks, MCU;// , scan=0;
        int[] Cs, Ta, Td;
        final int[] PRED = new int[this.Nf];
        for (int nComponent = 0; nComponent < this.Nf; nComponent++) {
            PRED[nComponent] = 0;
        }
        final long t;
        final double time;
        this.CNT = 0;
        // Read in Scan Header information
        this.Ls = getInt();
        this.Ns = getByte();
        // System.out.println(""SOS - Components: ""+Integer.toString(Ns));
        Cs = new int[this.Ns];
        Td = new int[this.Ns];
        Ta = new int[this.Ns];

        // get table information
        for (this.lp = 0; this.lp < this.Ns; this.lp++) {
            Cs[this.lp] = getByte();
            Td[this.lp] = getByte();
            Ta[this.lp] = Td[this.lp] & 0x0f;
            Td[this.lp] >>= 4;
            // System.out.println(""DC-Table: ""+Integer.toString(Td[lp])+""AC-Table: ""+Integer.toString(Ta[lp]));
        }

        this.Ss = getByte();
        this.Se = getByte();
        this.Ah = getByte();
        this.Al = this.Ah & 0x0f;
        this.Ah >>= 4;

        // Calculate the Number of blocks encoded
        // warum doppelt so viel?
        final int buff[] = new int[2 * 8 * 8 * getBlockCount()];
        int pos = 0;
        int MCUCount = 0;

        // System.out.println(""BlockCount=""+getBlockCount());
        final boolean bDoIt = true;
        while (bDoIt) {
            // Get component 1 of MCU
            for (int nComponent = 0; nComponent < this.Nf; nComponent++) {
                for (this.cnt = 0; this.cnt < this.H[nComponent] * this.V[nComponent]; this.cnt++) {
                    // Get DC coefficient
                    this.hftbl = Td[nComponent] * 2;
                    tmp = DECODE();
                    this.DIFF = RECEIVE(tmp);
                    this.ZZ[0] = PRED[0] + EXTEND(this.DIFF, tmp);
                    PRED[nComponent] = this.ZZ[0];

                    // Get AC coefficients
                    this.hftbl = Ta[nComponent] * 2 + 1;
                    Decode_AC_coefficients();

                    for (this.lp = 0; this.lp < 64; this.lp++) {
                        // System.out.println(""pos=""+pos);
                        // Zickzack???
                        // buff[pos++]=ZZ[deZigZag[lp]];
                        buff[pos++] = this.ZZ[this.lp];
                    }
                }
            }

            MCUCount++;
            if (MCUCount == this.RI) {
                MCUCount = 0;
                this.CNT = 0;
                for (int nComponent = 0; nComponent < this.Nf; nComponent++) {
                    PRED[nComponent] = 0;
                }
                // System.out.println(""MCUCount"");
                getByte();
                // System.out.println(Integer.toHexString(getByte()));
                final int tmpB = getByte();
                // System.out.println(Integer.toHexString(tmpB));
                if (tmpB == EOI) {
                    break;
                    // System.out.println(""MCUCount-Ende"");
                }
            }
            if (available() <= 2) {
                // System.out.println(""expecting end of image"");
                if (available() == 2) {
                    getByte();
                    if (getByte() != EOI) {
                        System.out.println(""file does not end with EOI"");
                    }
                } else {
                    if (available() > 0) {
                        System.out.println(Integer.toHexString(getByte()));
                    }
                    System.out.println(""file does not end with EOI"");
                }
                break;
            }
        }
        final int[] tmpBuff = new int[pos];
        System.arraycopy(buff, 0, tmpBuff, 0, pos);
        return tmpBuff;
    }
"
2659,7548a894-b73a-47ac-87bc-79c6c1fe45c8,"    private int DECODE() {
        int I, CD, VALUE;

        CD = NextBit();
        I = 1;

        while (true) {
            // System.out.println(hftbl+"" ""+I);
            if (CD > this.MAXCODE[this.hftbl][I]) {
                CD = (CD << 1) + NextBit();
                I++;
            } else {
                break;
            }
        }
        this.J = this.VALPTR[this.hftbl][I];
        this.J = this.J + CD - this.MINCODE[this.hftbl][I];
        VALUE = this.HUFFVAL[this.hftbl][this.J];
        return VALUE;
    }
"
2660,b40a2205-6b6e-4f4e-8e1f-ef4ba7dd5d8a,"    private void Decode_AC_coefficients() {
        this.K = 1;

        // Zero out array ZZ[]
        for (this.lp = 1; this.lp < 64; this.lp++) {
            this.ZZ[this.lp] = 0;
        }

        while (true) {
            // System.out.println(hftbl);
            this.RS = DECODE();
            this.SSSS = this.RS % 16;
            this.R = this.RS >> 4;
            if (this.SSSS == 0) {
                if (this.R == 15) {
                    this.K += 16;
                    continue;
                } else
                    return;
            } else {
                this.K = this.K + this.R;
                Decode_ZZ(this.K);
                if (this.K == 63)
                    return;
                else {
                    this.K++;
                }
            }
        }
    }
"
2661,41eecc02-44e8-4346-9847-3742ac84a4ae,"    private void Decode_ZZ(final int k) {
        // Decoding a nonzero AC coefficient
        this.ZZ[k] = RECEIVE(this.SSSS);
        this.ZZ[k] = EXTEND(this.ZZ[k], this.SSSS);
    }
"
2662,b4c86261-68e6-47de-80b5-4d350bbb53df,"    private void dht() {
        // Read in Huffman tables
        // System.out.println(""Read in Huffman tables"");
        // Lh length
        // Th index
        // Tc AC?
        this.Lh = getInt();
        while (this.Lh > 0) {
            this.Tc = getByte();
            this.Th = this.Tc & 0x0f;
            this.Tc >>= 4;
            // System.out.println(""______Lh=""+Lh);
            if (this.Th == 0) {
                if (this.Tc == 0) {
                    this.htDC0 = new HuffTable(this.dis, this.Lh);
                    this.Lh -= this.htDC0.getLen();
                    this.HUFFVAL[0] = this.htDC0.getHUFFVAL();
                    this.VALPTR[0] = this.htDC0.getVALPTR();
                    this.MAXCODE[0] = this.htDC0.getMAXCODE();
                    // System.out.println(""MAXCODE[0]=""+MAXCODE[0]);
                    this.MINCODE[0] = this.htDC0.getMINCODE();
                    this.htDC0 = null;
                    System.gc();
                } else {
                    this.htAC0 = new HuffTable(this.dis, this.Lh);
                    this.Lh -= this.htAC0.getLen();
                    this.HUFFVAL[1] = this.htAC0.getHUFFVAL();
                    this.VALPTR[1] = this.htAC0.getVALPTR();
                    this.MAXCODE[1] = this.htAC0.getMAXCODE();
                    // System.out.println(""MAXCODE[1]=""+MAXCODE[1]);
                    this.MINCODE[1] = this.htAC0.getMINCODE();
                    this.htAC0 = null;
                    System.gc();
                }
            } else {
                if (this.Tc == 0) {
                    this.htDC1 = new HuffTable(this.dis, this.Lh);
                    this.Lh -= this.htDC1.getLen();
                    this.HUFFVAL[2] = this.htDC1.getHUFFVAL();
                    this.VALPTR[2] = this.htDC1.getVALPTR();
                    this.MAXCODE[2] = this.htDC1.getMAXCODE();
                    // System.out.println(""MAXCODE[2]=""+MAXCODE[2]);
                    this.MINCODE[2] = this.htDC1.getMINCODE();
                    this.htDC1 = null;
                    System.gc();
                } else {
                    this.htAC1 = new HuffTable(this.dis, this.Lh);
                    this.Lh -= this.htAC1.getLen();
                    this.HUFFVAL[3] = this.htAC1.getHUFFVAL();
                    this.VALPTR[3] = this.htAC1.getVALPTR();
                    this.MAXCODE[3] = this.htAC1.getMAXCODE();
                    // System.out.println(""MAXCODE[3]=""+MAXCODE[3]);
                    this.MINCODE[3] = this.htAC1.getMINCODE();
                    this.htAC1 = null;
                    System.gc();
                }
            }
        }
    }
"
2663,114d0347-a5ff-40bf-b86a-09121d1bb472,"    private void dqt() {

        // Read in quatization tables
        this.Lq = getInt();
        this.Pq = getByte();
        this.Tq = this.Pq & 0x0f;
        this.Pq >>= 4;

        switch (this.Tq) {
        case 0:
            for (this.lp = 0; this.lp < 64; this.lp++) {
                this.QNT[0][this.lp] = getByte();
            }
            break;

        case 1:
            for (this.lp = 0; this.lp < 64; this.lp++) {
                this.QNT[1][this.lp] = getByte();
            }
            break;

        case 2:
            for (this.lp = 0; this.lp < 64; this.lp++) {
                this.QNT[2][this.lp] = getByte();
            }
            break;

        case 3:
            for (this.lp = 0; this.lp < 64; this.lp++) {
                this.QNT[3][this.lp] = getByte();
            }
            break;
        }
    }
"
2664,1152e1d8-7c09-4e1d-b9f0-2019eff1ec66,"    private void dri() {
        getInt();
        this.RI = getInt();
    }
"
2665,4be9da4e-2cc7-474e-8d4f-addc3c4d6db5,"    private int EXTEND(int V, final int T) {
        int Vt;

        Vt = 0x01 << T - 1;
        if (V < Vt) {
            Vt = (-1 << T) + 1;
            V += Vt;
        }
        return V;
    }
"
2666,1f711a74-aa4f-4d19-a7d9-bb528cfcc29e,"    public int getBlockCount() {
        switch (this.Nf) {
        case 1:
            return (this.X + 7) / 8 * ((this.Y + 7) / 8);
        case 3:
            return 6 * ((this.X + 15) / 16) * ((this.Y + 15) / 16);
        default:
            System.out.println(""Nf weder 1 noch 3"");
        }
        return 0;
    }
"
2667,d1d366dc-6633-46e4-9c0d-39fc4631f763,"    public int getByte() {
        int b = 0;
        // Read Byte from DataInputStream
        try {
            b = this.dis.readUnsignedByte();
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return b;
    }
"
2668,4cb633f3-f9f2-43de-8046-db97f6bee247,"    public int getComp() {
        return this.Nf;
    }
"
2669,f39a5bb3-3dfd-4a72-ba82-bae1cab7bb30,"    public int getInt() {
        int b = 0;
        // Read Integer from DataInputStream
        try {
            b = this.dis.readUnsignedByte();
            b <<= 8;
            final int tmp = this.dis.readUnsignedByte();
            b ^= tmp;
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return b;
    }
"
2670,abb60e50-2716-4c10-b2c1-2c1dde2b400b,"    public int getPrec() {
        return this.P;
    }
"
2671,93be85d2-0202-4ec8-aa0e-4179820b5840,"    public int getX() {
        return this.X;
    }
"
2672,f9c024e4-2103-438c-8a44-c0282103b585,"    public int getY() {
        return this.Y;
    }
"
2673,53392ce2-8056-4b80-bf5b-33a43e735ef5,"    public void HuffDecode(final int[][][] buffer) {
        int x, y, tmp;
        final int sz = this.X * this.Y, scan = 0;
        final int[][] Block = new int[8][8];
        int Cs, Ta, Td, blocks;
        final long t;
        final double time;

        // Read in Scan Header information
        this.Ls = getInt();
        this.Ns = getByte();
        Cs = getByte();
        Td = getByte();
        Ta = Td & 0x0f;
        Td >>= 4;

        this.Ss = getByte();
        this.Se = getByte();
        this.Ah = getByte();
        this.Al = this.Ah & 0x0f;
        this.Ah >>= 4;

        // Calculate the Number of blocks encoded
        // blocks = X * Y / 64;
        blocks = getBlockCount() / 6;

        // decode image data and return image data in array
        for (this.cnt = 0; this.cnt < blocks; this.cnt++) {
            // Get DC coefficient
            if (Td == 0) {
                this.hftbl = 0;
            } else {
                this.hftbl = 2;
            }
            tmp = DECODE();
            this.DIFF = RECEIVE(tmp);
            this.ZZ[0] = this.PRED + EXTEND(this.DIFF, tmp);
            this.PRED = this.ZZ[0];

            // Get AC coefficients
            if (Ta == 0) {
                this.hftbl = 1;
            } else {
                this.hftbl = 3;
            }
            Decode_AC_coefficients();

            // dezigzag and dequantize block
            for (this.lp = 0; this.lp < 64; this.lp++) {
                Block[deZZ[this.lp][0]][deZZ[this.lp][1]] = this.ZZ[this.lp] * this.QNT[0][this.lp];
            }

            // store blocks in buffer
            for (x = 0; x < 8; x++) {
                for (y = 0; y < 8; y++) {
                    buffer[this.cnt][x][y] = Block[x][y];
                }
            }
        }
        closeStream();
    }
"
2674,3d929adc-c4d1-4c8e-970d-55534ab8c425,"    private int NextBit() {
        // Get one bit from entropy coded data stream
        int b2;
        final int lns;
        int BIT;

        if (this.CNT == 0) {
            this.CNT = 8;
            this.B = getByte();
            if (255 == this.B) {
                b2 = getByte();
            }
        }
        BIT = this.B & 0X80; // get MSBit of B
        BIT >>= 7; // move MSB to LSB
        this.CNT--; // Decrement counter
        this.B <<= 1; // Shift left one bit
        return BIT;
    }
"
2675,f26b8968-a627-4063-8b81-d8ea0adf0340,"    public void rawDecode(final int[][][] buffer) {
        int x, y, tmp;
        final int[][] Block = new int[8][8];
        int Cs, Ta, Td, blocks;
        final long t;
        final double time;

        // Read in Scan Header information
        this.Ls = getInt();
        this.Ns = getByte();
        Cs = getByte();
        Td = getByte();
        Ta = Td & 0x0f;
        Td >>= 4;

        this.Ss = getByte();
        this.Se = getByte();
        this.Ah = getByte();
        this.Al = this.Ah & 0x0f;
        this.Ah >>= 4;

        // Calculate the Number of blocks encoded
        blocks = getBlockCount() / 6;

        // decode image data and return image data in array
        for (this.cnt = 0; this.cnt < blocks; this.cnt++) {
            // Get DC coefficient
            if (Td == 0) {
                this.hftbl = 0;
            } else {
                this.hftbl = 2;
            }
            tmp = DECODE();
            this.DIFF = RECEIVE(tmp);
            this.ZZ[0] = this.PRED + EXTEND(this.DIFF, tmp);
            this.PRED = this.ZZ[0];

            // Get AC coefficients
            if (Ta == 0) {
                this.hftbl = 1;
            } else {
                this.hftbl = 3;
            }
            Decode_AC_coefficients();

            // dezigzag
            for (this.lp = 0; this.lp < 64; this.lp++) {
                Block[deZZ[this.lp][0]][deZZ[this.lp][1]] = this.ZZ[this.lp];
            }

            // store blocks in buffer
            System.out.print(this.cnt + "" "");
            for (x = 0; x < 8; x++) {
                for (y = 0; y < 8; y++) {
                    buffer[this.cnt][x][y] = Block[x][y];
                }
            }
        }
        closeStream();
    }
"
2676,3c8f7714-c5fe-4ff9-aa0e-183efde04461,"    private int RECEIVE(final int SSS) {
        int V = 0, I = 0;

        while (true) {
            if (I == SSS)
                return V;
            I++;
            V = (V << 1) + NextBit();
        }
    }
"
2677,cd5b3546-1c8a-40dd-b442-2f5ff97a1886,"    public void RGBdecode(final int[][][] Lum) {
        int x, y, a, b, line, col, tmp;
        final int sz = this.X * this.Y;
        int blocks;
        final int MCU, scan = 0;
        final int[][] Block = new int[8][8];
        int[] Cs, Ta, Td;
        final int[] PRED = {
                0, 0, 0 };
        final long t;
        final double time;

        // Read in Scan Header information
        this.Ls = getInt();
        this.Ns = getByte();
        Cs = new int[this.Ns];
        Td = new int[this.Ns];
        Ta = new int[this.Ns];

        // get table information
        for (this.lp = 0; this.lp < this.Ns; this.lp++) {
            Cs[this.lp] = getByte();
            Td[this.lp] = getByte();
            Ta[this.lp] = Td[this.lp] & 0x0f;
            Td[this.lp] >>= 4;
        }

        this.Ss = getByte();
        this.Se = getByte();
        this.Ah = getByte();
        this.Al = this.Ah & 0x0f;
        this.Ah >>= 4;

        // Calculate the Number of blocks encoded
        // blocks = X * Y / 64;
        blocks = getBlockCount() / 6;
        col = 2;

        // decode image data and return image data in array
        for (a = 0; a < 32; a++) {
            for (b = 0; b < 32; b++) {
                // Get component 1 of MCU
                for (this.cnt = 0; this.cnt < 4; this.cnt++) {
                    // Get DC coefficient
                    this.hftbl = 0;
                    tmp = DECODE();
                    this.DIFF = RECEIVE(tmp);
                    this.ZZ[0] = PRED[0] + EXTEND(this.DIFF, tmp);
                    PRED[0] = this.ZZ[0];

                    // Get AC coefficients
                    this.hftbl = 1;
                    Decode_AC_coefficients();

                    // dezigzag and dequantize block
                    for (this.lp = 0; this.lp < 64; this.lp++) {
                        Block[deZZ[this.lp][0]][deZZ[this.lp][1]] = this.ZZ[this.lp] * this.QNT[0][this.lp];
                    }

                    if (this.cnt < 2) {
                        line = 0;
                    } else {
                        line = 62;
                    }

                    // store blocks in buffer
                    for (x = 0; x < 8; x++) {
                        for (y = 0; y < 8; y++) {
                            Lum[b * 2 + this.cnt + line + a * 128][x][y] = Block[x][y];
                        }
                    }
                }

                // getComponent 2 and 3 of image
                for (this.cnt = 0; this.cnt < 2; this.cnt++) {
                    // Get DC coefficient
                    this.hftbl = 2;
                    tmp = DECODE();
                    this.DIFF = RECEIVE(tmp);
                    this.ZZ[0] = PRED[this.cnt + 1] + EXTEND(this.DIFF, tmp);
                    PRED[this.cnt + 1] = this.ZZ[0];

                    // Get AC coefficients
                    this.hftbl = 3;
                    Decode_AC_coefficients();

                    // dezigzag and dequantize block
                    for (this.lp = 0; this.lp < 64; this.lp++) {
                        Block[deZZ[this.lp][0]][deZZ[this.lp][1]] = this.ZZ[this.lp] * this.QNT[1][this.lp];
                    }

                    // store blocks in buffer
                    if (this.cnt == 0) {
                        for (x = 0; x < 8; x++) {
                            for (y = 0; y < 8; y++) {
                                this.Cb[a * 32 + b][x][y] = Block[x][y];
                            }
                        }
                    } else {
                        for (x = 0; x < 8; x++) {
                            for (y = 0; y < 8; y++) {
                                this.Cr[a * 32 + b][x][y] = Block[x][y];
                            }
                        }
                    }
                }
            }
        }
        closeStream();
    }
"
2678,8042ee07-c306-4dcf-bed2-261644af6b60,"    public void setCb(final int[][][] chrome) {
        this.Cb = chrome;
    }
"
2679,d0e0fb34-3b48-4adf-a758-fd8e5fe746b4,"    public void setCr(final int[][][] chrome) {
        this.Cr = chrome;
    }
"
2680,181af218-74e7-4dbb-a215-9fbe93d67d8c,"    private void skipVariable() {
        try {
            this.dis.skipBytes(getInt() - 2);
        } catch (final IOException e) {
            e.printStackTrace();
        }
    }
"
2681,51658e2a-49be-448c-8230-b9e9e0277366,"    private void sof0() {
        // Read in start of frame header data
        this.Lf = getInt();
        this.P = getByte();
        this.Y = getInt();
        this.X = getInt();
        this.Nf = getByte();

        this.C = new int[this.Nf];
        this.H = new int[this.Nf];
        this.V = new int[this.Nf];
        this.T = new int[this.Nf];

        // Read in quatization table identifiers
        for (this.lp = 0; this.lp < this.Nf; this.lp++) {
            this.C[this.lp] = getByte();
            this.H[this.lp] = getByte();
            this.V[this.lp] = this.H[this.lp] & 0x0f;
            this.H[this.lp] >>= 4;
            this.T[this.lp] = getByte();
        }
    }
"
2682,abbb6c2e-3b29-4e92-93ff-ced4d46d5454,"	public Board()
	{
		board = new Piece[6][6];
		graveyard = new ArrayList<Piece>();
		
		Piece temp;
		//Place all the pawns on the board
		for (int count = 0; count < 6; count++)
		{
			temp = new Piece(ColorEnum.BLACK, PieceEnum.PAWN);
			board[1][count] = temp;
			temp = new Piece(ColorEnum.WHITE, PieceEnum.PAWN);
			board[4][count] = temp;
		}
		//Place all the knights on the board
		temp = new Piece(ColorEnum.BLACK, PieceEnum.KNIGHT);
		board[0][1] = temp;
		board[0][4] = temp;
		temp = new Piece(ColorEnum.WHITE, PieceEnum.KNIGHT);
		board[5][1] = temp;
		board[5][4] = temp;
	}
"
2683,2781fa4c-b3ce-482b-af18-26923469107e,"	public ArrayList<Piece> getGraveyard()
	{
		return graveyard;
	}
"
2684,b1350008-24a7-4e5f-8838-673fe74cc697,"	public void setGraveyard(ArrayList<Piece> graveyard)
	{
		this.graveyard = graveyard;
	}
"
2685,cbdd9a93-909a-47d1-ab6a-bcf07af5fea3,"	public String toString()
	{
		String output;
		output = "" -------------------\n"";

		for (int cx = 0; cx < 6; cx++)
		{
			output += 6-cx;
			output += ""|"";
			for (int cy = 0; cy < 6; cy++)
			{
				if (board[cx][cy] == null) 
				{
					output += ""  |"";
				}
				else
				{
					output += board[cx][cy].toString() + ""|"";
				}
			}
			output += ""\n"";
			output += "" -------------------\n"";
		}
		output += ""  a  b  c  d  e  f\n"";
		return output;
	}
"
2686,acc69ba4-b1ce-4b94-a71e-e390bb913635,"	public Piece[][] getBoard()
	{
		return board;
	}
"
2687,4f1ae87f-a0aa-4d3e-8430-baf04a1b852b,"	public void setBoard(Piece[][] board)
	{
		this.board = board;
	}
"
2688,4ccd636b-eb24-4a77-b193-9a476a724ec8,"	public void movePiece(Move move)
	{
		//If a piece is being captured
		if (board[move.getB().getRow()][move.getB().getCollumn()] != null)
		{
			//Transfer it to the graveyard
			graveyard.add(board[move.getB().getRow()][move.getB().getCollumn()]);
		}
		//Move the piece to its destination
		board[move.getB().getRow()][move.getB().getCollumn()] = board[move.getA().getRow()][move.getA().getCollumn()];
		//Erase the piece from its previous position
		board[move.getA().getRow()][move.getA().getCollumn()] = null;
	}
"
2689,357c2f3c-09d4-4f75-90eb-13804d9b94cf,"	public GameStatus getResultingGameStatus()
	{
		return resultingGameStatus;
	}
"
2690,5b8c49b6-3d81-43e5-a0bb-75c300f58918,"	public void setResultingGameStatus(GameStatus resultingGameStatus)
	{
		this.resultingGameStatus = resultingGameStatus;
	}
"
2691,5cde2f40-cf48-4b5b-84f7-86da6855db0c,"	public BoardPosition getA()
	{
		return a;
	}
"
2692,6bb3e021-d23e-408b-99f9-5227e2c710de,"	public void setA(BoardPosition a)
	{
		this.a = a;
	}
"
2693,6ae31c35-a506-4de4-8f7d-21db71334b1d,"	public BoardPosition getB()
	{
		return b;
	}
"
2694,3201c9dd-1ba7-4bf7-b017-2cbb05a35bde,"	public void setB(BoardPosition b)
	{
		this.b = b;
	}
"
2695,ce1e852b-2a9c-47c5-b259-880982ed0683,"	Move(BoardPosition a, BoardPosition b, GameStatus resultingGameStatus)
	{
		this.a = a;
		this.b = b;
		this.resultingGameStatus = resultingGameStatus;
	}
"
2696,207d25f3-82d9-4afd-a27f-d41819895743,"	public Player(ColorEnum color, Board board)
	{
		this.color = color;
		this.board = board;
	}
"
2697,c30ae8ba-43c8-44a9-97a6-3891f02f4b02,"	public Move makeMove()
	{
		Move move;

		//Keep looping and getting moves 'till we get a valid move
		while (true)
		{
			move = getMove();
			System.out.println(""\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"");
			//If we're trying to move from positions that are actually in the board
			if (!(move.getA().isOutOfBounds() || move.getB().isOutOfBounds()))
			{
				//If we're trying to move a non-existent piece
				if (board.getBoard()[move.getA().getRow()][move.getA().getCollumn()] != null)
				{
					//If we're trying to move a piece that isn't ours
					if (board.getBoard()[move.getA().getRow()][move.getA().getCollumn()].getColor() == this.color)
					{
						//Is the move valid?
						if (PieceCanMove(board.getBoard()[move.getA().getRow()][move.getA().getCollumn()], move, board))
						{
							
							System.out.println(""Move is valid, hooraayy!"");
							return move;
						}
					}
					else
					{
						System.out.println(""Sorry, that piece is not yours to move"");
					}
				}
				else
				{
					System.out.println(""Sorry, there is no piece in the specified starting position"");
				}
			}
			else
			{
				System.out.println(""Sorry, the position isn't within the board"");
			}
			System.out.println(""You must re-enter your move"");
			System.out.println(board.toString());
		}
	}
"
2698,13ff652e-db06-442f-b6f5-467262786add,"	public Move getMove()
	{
		Move r;
		BoardPosition a;
		BoardPosition b;
		Scanner sc = new Scanner(System.in);
		int row;
		String collumn;

		System.out.print(""Enter the row of the position of the piece you would like to move: "");
		row = sc.nextInt();

		System.out.print(""Enter the collumn of the position of the piece you would like to move: "");
		collumn = sc.next();

		a = new BoardPosition(6 - row, getNumForCollumn(collumn));

		System.out.print(""Enter the row of the position you would like to move this piece to: "");
		row = sc.nextInt();

		System.out.print(""Enter the collumn of the position you would like to move this piece to: "");
		collumn = sc.next();

		b = new BoardPosition(6 - row, getNumForCollumn(collumn));

		r = new Move(a, b, GameStatus.CONTINUE);

		return r;
	}
"
2699,a283d084-8aa6-4f6b-b818-c6306710719a,"	private int getNumForCollumn(String i)
	{
		ArrayList<String> colNames = new ArrayList<String>();

		colNames.add(""a"");
		colNames.add(""b"");
		colNames.add(""c"");
		colNames.add(""d"");
		colNames.add(""e"");
		colNames.add(""f"");

		int r = colNames.indexOf(i);

		return r;
	}
"
2700,c09b0b03-14fc-4519-9689-6a050947a4a1,"	public ColorEnum getColor()
	{
		return color;
	}
"
2701,22828c45-f68b-44a5-8f4e-7333f77b4822,"	public boolean PieceCanMove(Piece piece, Move move, Board board)
	{
		boolean r = false;

		//If we're dealing with a knight
		if (piece.getPiece() == PieceEnum.KNIGHT)
		{
			//If we're trying to capture
			if (board.getBoard()[move.getB().getRow()][move.getB().getCollumn()] != null)
			{
				//We can only capture enemy pieces
				if (board.getBoard()[move.getB().getRow()][move.getB().getCollumn()].getColor() != piece.getColor())
				{
					//If this is one of the eight positions the knight can move to
					if(validateKnightMove(move))
					{
						r = true;
					}
					else
					{
						System.out.println(""Sorry, you cannot move your knight there"");
					}
				}
			}
			else
			{
				//If this is one of the eight positions the knight can move to
				if(validateKnightMove(move))
				{
					r = true;
				}
				else
				{
					System.out.println(""Sorry, you cannot move your knight there"");
				}
			}
		}
		else //We have a pawn
		{
			//If we're not trying to capture
			if (move.getA().getCollumn() == move.getB().getCollumn())
			{
				if (piece.getColor() == ColorEnum.WHITE)
				{
					//White pawns can only move up
					if (move.getA().getRow() == move.getB().getRow() + 1 && board.getBoard()[move.getB().getRow()][move.getB().getCollumn()] == null)
					{
						r = true;
					}
					else
					{
						System.out.println(""Sorry, you cannot move your pawn there"");
					}
				}
				else //The piece is black
				{
					//Black pawns can only move down
					if (move.getA().getRow() == move.getB().getRow() - 1 && board.getBoard()[move.getB().getRow()][move.getB().getCollumn()] == null)
					{
						r = true;
					}
					else
					{
						System.out.println(""Sorry, you cannot move your pawn there"");
					}
				}
			}
			else //We're trying to capture
			{
				//Are we really trying to capture or is the destination empty?
				if (board.getBoard()[move.getB().getRow()][move.getB().getCollumn()] != null)
				{
					//We can only capture enemy pieces
					if (board.getBoard()[move.getB().getRow()][move.getB().getCollumn()].getColor() != piece.getColor())
					{
						//We can only capture diagonally
						if (move.getA().getCollumn() == move.getB().getCollumn() + 1 || move.getA().getCollumn() == move.getB().getCollumn() - 1)
						{
							if (piece.getColor() == ColorEnum.WHITE)
							{
								//White pawns can only move up
								if (move.getA().getRow() == move.getB().getRow() + 1)
								{
									r = true;
								}
								else
								{
									System.out.println(""Sorry, you cannot move your pawn there"");
								}
							}
							else //The piece is black
							{
								//Black pawns can only move down
								if (move.getA().getRow() == move.getB().getRow() - 1)
								{
									r = true;
								}
								else
								{
									System.out.println(""Sorry, you cannot move your pawn there"");
								}
							}
						}
						else
						{
							System.out.println(""Sorry, you cannot move your pawn there"");
						}
					}
					else
					{
						System.out.println(""Sorry, you cannot move your pawn there"");
					}
				}
				else
				{
					System.out.println(""Sorry, you cannot move your pawn there"");
				}
			}
		}

		return r;
	}
"
2702,f6a9807c-ebeb-447e-a6e0-42cc03c01ca0,"	public boolean validateKnightMove(Move move)
	{
		return (move.getB().getCollumn() == move.getA().getCollumn() - 2 && (move.getB().getRow() == move.getA().getRow() + 1 || move.getB().getRow() == move.getA().getRow() - 1))
				|| (move.getB().getCollumn() == move.getA().getCollumn() + 2 && (move.getB().getRow() == move.getA().getRow() + 1 || move.getB().getRow() == move.getA().getRow() - 1))
				|| (move.getB().getCollumn() == move.getA().getCollumn() - 1 && (move.getB().getRow() == move.getA().getRow() + 2 || move.getB().getRow() == move.getA().getRow() - 2))
				|| (move.getB().getCollumn() == move.getA().getCollumn() + 1 && (move.getB().getRow() == move.getA().getRow() + 2 || move.getB().getRow() == move.getA().getRow() - 2));
	}
"
2703,9fe33671-255f-4d73-8a50-b171e911d3a4,"	ColorEnum(String colorStr) {
		this.colorStr = colorStr;
	}
"
2704,1bb818a9-b814-4405-a0d4-acd9ac9f1d86,"	public String toString() {
		return colorStr;
	}
"
2705,5823441e-8c59-4a55-9483-332a93dc0f64,"	public static void main(String[] args) throws ClassNotFoundException
	{
		Game game1 = new Game();
		Move currMove;
		Move enemyMove;
		System.out.println(""Welcome to Knight's Watch!!!"");
		System.out.println(""Waiting for another player to connect..."");

		String host = args.length > 0 ? args[0] : DEFAULT_HOST;
		int port = args.length > 1 ? Integer.parseInt(args[1]) :  DEFAULT_PORT;

		try
		{
			// connect to the server
			Socket socket = new Socket(host, port);

			// create a scanner & printstream out of the socket's I/O streams
			ObjectInputStream socketIn = new ObjectInputStream(socket.getInputStream());
			ObjectOutputStream socketOut = new ObjectOutputStream(socket.getOutputStream());
			socketOut.flush();

			String playerNum = (String) socketIn.readObject();
			System.out.println(""You are player number : "" + playerNum);
			// prepare STDIN for reading
			String oppositePlayerNum = (playerNum.equals(""1""))?""2"":""1"";

			System.out.println(""You are player"" + playerNum + "", your color is: "" + ((playerNum.equals(""1""))?""white"":""black""));
			game1.setCurrPlayer((playerNum.equals(""1""))?ColorEnum.WHITE:ColorEnum.BLACK);

			System.out.println(game1.getBoard().toString());

			if (playerNum.equals(""2""))
			{
				System.out.println(""Waiting for player"" + oppositePlayerNum + "" to make his move..."");
				enemyMove = (Move) socketIn.readObject();
				// print to STDOUT
				System.out.println(""\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"");
				System.out.println(""Enemy has made this move: From "" + enemyMove.getA().toString() + "" to "" + enemyMove.getB().toString());
				game1.getBoard().movePiece(enemyMove);
				System.out.println(game1.getBoard().toString());
			}

			while(game1.getStatus() == GameStatus.CONTINUE)
			{
				//Get the move
				currMove = game1.makeMoveForCurrentPlayer();
				game1.getBoard().movePiece(currMove);
				currMove.setResultingGameStatus(game1.getStatus());
				// send the move
				socketOut.writeObject(currMove);
				socketOut.flush();

				System.out.println(game1.getBoard().toString());
				if (game1.getStatus() == GameStatus.CONTINUE)
				{
					// receive the enemy move
					System.out.println(""Waiting for player"" + oppositePlayerNum + "" to make his move..."");
					enemyMove = (Move) socketIn.readObject();
					System.out.println(""\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"");
					System.out.println(""Enemy has made this move: From "" + enemyMove.getA().toString() + "" to "" + enemyMove.getB().toString());
					game1.getBoard().movePiece(enemyMove);
					System.out.println(game1.getBoard().toString());
				}
				else
				{
					break;
				}
			}

			System.out.println(""The Game is finished!"");
			switch (game1.getStatus())
			{
			case WHITEWINS:
				System.out.println(""White has won!"");
				break;
			case BLACKWINS:
				System.out.println(""Black has won!"");
				break;
			case DRAW:
				System.out.println(""it was a draw!"");
				break;
			}
		}
		catch (UnknownHostException e)
		{
			e.printStackTrace();
		}
		catch (IOException e) 
		{
			e.printStackTrace();
		}
	}
"
2706,70854a8e-fd68-4a93-8c30-eb09756f686a,"	PieceEnum(String pieceStr) {
		this.pieceStr = pieceStr;
	}
"
2707,564b762b-ba6e-46f8-9fdb-b47e926d7cbc,"	public String toString() {
		return pieceStr;
	}
"
2708,222ce3e3-581a-4516-a9f3-42270cee2e52,"	public int getRow()
	{
		return row;
	}
"
2709,dc52b4db-132a-46f7-8191-12527f1fc272,"	public void setRow(int row)
	{
		this.row = row;
	}
"
2710,29905cab-d72e-4745-9280-817f8b7f4c65,"	public int getCollumn()
	{
		return collumn;
	}
"
2711,c769a660-15e8-4bad-b0b3-5c2af8741392,"	public void setCollumn(int collumn)
	{
		this.collumn = collumn;
	}
"
2712,f1e4b5a5-9ea5-48cf-a843-8afe022efc72,"	public BoardPosition(int row, int collumn)
	{
		this.row = row;
		this.collumn = collumn;
	}
"
2713,218019d5-b468-4620-841d-39b2d9f744fc,"	public boolean isOutOfBounds()
	{
		return row < 0 || row > 6 || collumn < 0 || collumn > 6;
	}
"
2714,e66cccc1-d6fa-461e-b7d7-39c3928c1108,"	public String toString()
	{
		ArrayList<String> colNames = new ArrayList<String>();

		colNames.add(""a"");
		colNames.add(""b"");
		colNames.add(""c"");
		colNames.add(""d"");
		colNames.add(""e"");
		colNames.add(""f"");
		String r = """";
		r += 6 - row + colNames.get(collumn);
		return r;
	}
"
2715,87471279-f353-4291-9cbf-b856390a22e2,"	public Piece(ColorEnum color, PieceEnum piece)
	{
		this.color = color;
		this.piece = piece;
	}
"
2716,b72fc693-bc67-452c-9f25-79f7648f409b,"	public String toString()
	{
		String output;
		output = color.toString() + piece.toString();
		return output;
	}
"
2717,2ddc88b6-33e8-4ff4-9fea-75b339bcc9d1,"	public ColorEnum getColor()
	{
		return color;
	}
"
2718,7c78acf6-1036-40d0-a44a-65a4bac13a27,"	public PieceEnum getPiece()
	{
		return piece;
	}
"
2719,c6d13ec4-80ef-4a7f-9d41-553790845ad5,"	public void setCurrPlayer(ColorEnum color)
	{
		if (color == ColorEnum.WHITE)
		{
			this.currPlayer = player1;
		}
		else
		{
			this.currPlayer = player2;
		}
	}
"
2720,9601cfb9-acf2-4aa2-a4af-cf7b34673b38,"	public Player getPlayer1()
	{
		return player1;
	}
"
2721,486653fe-d6d6-4d1c-b954-8aa1ee6f6e92,"	public void setPlayer1(Player player1)
	{
		this.player1 = player1;
	}
"
2722,71a3a9b3-5b93-4f72-93de-badc4fe400b6,"	public Player getPlayer2()
	{
		return player2;
	}
"
2723,9ed1ee4d-30f2-47de-8424-1a90315488e8,"	public void setPlayer2(Player player2)
	{
		this.player2 = player2;
	}
"
2724,82f32663-e3ed-4ae1-91cc-7d9a56ae0731,"	public Game()
	{
		board = new Board();
		player1 = new Player(ColorEnum.WHITE, board);
		player2 = new Player(ColorEnum.BLACK, board);
	}
"
2725,1056661f-b78e-40b1-8710-568b4cf41e99,"	public Board getBoard()
	{
		return board;
	}
"
2726,b4db8bdc-7e29-4e89-864a-cfffa136efd3,"	public Move makeMoveForCurrentPlayer()
	{
		return currPlayer.makeMove();
	}
"
2727,72f2dfd1-01e8-461b-b56e-d8e49b91d050,"	public GameStatus getStatus()
	{
		GameStatus r = GameStatus.CONTINUE;
		
		//Have any pawns reached the enemy wall?
		for (int i = 0; i < 6; i++)
		{
			//Check the White pawns
			if (board.getBoard()[0][i] != null)
			{
				if (board.getBoard()[0][i].getPiece() == PieceEnum.PAWN)
				{
					r = GameStatus.WHITEWINS;
					break;
				}
			}
			
			//And the Black pawns
			if (board.getBoard()[5][i] != null)
			{
				if (board.getBoard()[5][i].getPiece() == PieceEnum.PAWN)
				{
					r = GameStatus.BLACKWINS;
					break;
				}
			}
		}
		
		
		//Do both players still have pawns?
		int numDeadBlackPawns = 0;
		int numDeadWhitePawns = 0;
		for (int i = 0; i < board.getGraveyard().size(); i++)
		{
			
			if (board.getGraveyard().get(i).getColor() == ColorEnum.BLACK && board.getGraveyard().get(i).getPiece() == PieceEnum.PAWN)
			{
				numDeadBlackPawns++;
			}
			else
			{
				if (board.getGraveyard().get(i).getColor() == ColorEnum.WHITE && board.getGraveyard().get(i).getPiece() == PieceEnum.PAWN)
				{
					numDeadWhitePawns++;
				}
			}
		}
		
		if (numDeadWhitePawns == 6 && numDeadBlackPawns == 6)
		{
			r = GameStatus.DRAW;
		}
		
		int numDeadBlackPieces = 0;
		int numDeadWhitePieces = 0;
		
		//Do both players have at least one piece?
		for (int i = 0; i < board.getGraveyard().size(); i++)
		{
			if (board.getGraveyard().get(i).getColor() == ColorEnum.BLACK)
			{
				numDeadBlackPieces++;
			}
			else
			{
				if (board.getGraveyard().get(i).getColor() == ColorEnum.WHITE)
				{
					numDeadWhitePieces++;
				}
			}
		}
		
		if (numDeadWhitePieces == 8)
		{
			r = GameStatus.BLACKWINS;
		}
		else
		{
			if (numDeadBlackPieces == 8)
			{
				r = GameStatus.WHITEWINS;
			}
		}
		
		return r;
	}
"
2728,d4f3d807-d9e1-431d-a2f6-9faf61309fe7,"	public ChatWindow() {
		super();
		initGUI();
		
	}
"
2729,6069acda-d3c1-4463-a1c8-84fa22789b38,"	public ChatWindow(Socket s, String l) {
		socket = s;
		login = l;
		this.setLocationRelativeTo(null);
		this.setVisible(true);
		this.setTitle(""Java Instant Chat - Server"");
		initGUI();
	}
"
2730,67bd0dff-7e43-4429-81d6-bcf9ff1f07f6,"	private void initGUI() {
		try {
			out = new PrintWriter(socket.getOutputStream());
			in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	    	sdf = new SimpleDateFormat(""HH:mm"");
			setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
			{
				jPanel1 = new JPanel();
				getContentPane().add(jPanel1, BorderLayout.NORTH);
				jPanel1.setPreferredSize(new java.awt.Dimension(484, 474));
				{
					jTextPane1 = new JTextPane();
					jPanel1.add(jTextPane1);
					jTextPane1.setPreferredSize(new java.awt.Dimension(483, 473));
					jTextPane1.setEditable(false);
				}
			}
			{
				jPanel2 = new JPanel();
				GridBagLayout jPanel2Layout = new GridBagLayout();
				jPanel2Layout.columnWidths = new int[] {48, 250, 48, 7};
				jPanel2Layout.rowHeights = new int[] {7};
				jPanel2Layout.columnWeights = new double[] {0.0, 0.0, 0.0, 0.1};
				jPanel2Layout.rowWeights = new double[] {0.1};
				getContentPane().add(jPanel2, BorderLayout.SOUTH);
				jPanel2.setLayout(jPanel2Layout);
				jPanel2.setPreferredSize(new java.awt.Dimension(484, 54));
				{
					jTextField1 = new JTextField();
					jPanel2.add(jTextField1, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
				}
				{
					jButton1 = new JButton();
					jPanel2.add(jButton1, new GridBagConstraints(3, 0, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
					jButton1.setText(""Send"");
					jButton1.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent evt) {
							jButton1ActionPerformed(evt);
						}
					});
				}
			}
			pack();
			setSize(500, 600);
			//Infinite loop to listen for new messages coming in through the socket.
			while (true){
				message = in.readLine();
				loginSender = in.readLine();
				cal = Calendar.getInstance();
				jTextPane1.setText(jTextPane1.getText()+""(""+sdf.format(cal.getTime())+"") ""+loginSender+"" says: ""+message+""\n"");
				System.out.println(""caca"");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
"
2731,7ca39d8e-9a4f-4415-bab8-9db290b255fb,"						public void actionPerformed(ActionEvent evt) {
							jButton1ActionPerformed(evt);
						}
"
2732,f8043dea-eafe-4223-b29a-00c306df519c,"	private void jButton1ActionPerformed(ActionEvent evt) {
		if (jTextField1.getText().isEmpty()) {
			JOptionPane.showMessageDialog(this, ""Please type in a message."");
		}
		else {

			out.println(jTextField1.getText());
			out.flush();
			out.println(login);
			out.flush();
			cal = Calendar.getInstance();
	        jTextPane1.setText(jTextPane1.getText()+""(""+sdf.format(cal.getTime())+"") ""+login+"" says: ""+jTextField1.getText()+""\n"");
	        jTextField1.setText("""");
		}
	}
"
2733,7047df59-bb86-4614-8b08-9fa1b5995907,"    public Accept(ServerSocket ss){
     socketserver = ss;
    }
"
2734,a9305a4d-ae99-4414-938b-ac4c9fba0676,"    public void run() {
         
        try {
            while(true){                 
            socket = socketserver.accept();             
            t1 = new Thread(new Auth(socket));
            t1.start();
            }
        } catch (IOException e) {
             
            System.err.println(""Erreur serveur"");
        }
         
    }
"
2735,4878b4c4-73c8-496f-84da-136f94b107d2,"	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				Start inst = new Start();
				inst.setLocationRelativeTo(null);
				inst.setVisible(true);
				inst.setTitle(""Java Instant Chat Server"");
			}
		});
	}
"
2736,4a04f84d-f8af-451a-b3ef-d9cd6eb6f7f8,"			public void run() {
				Start inst = new Start();
				inst.setLocationRelativeTo(null);
				inst.setVisible(true);
				inst.setTitle(""Java Instant Chat Server"");
			}
"
2737,cb9cf549-5831-44b6-b6ed-d49ff2e2326f,"	public Start() {
		super();
		initGUI();
	}
"
2738,468affc8-fcfb-48f9-b149-438deb047403,"	private void initGUI() {
		try {
			setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
			{
				jPanel2 = new JPanel();
				getContentPane().add(jPanel2, BorderLayout.SOUTH);
				jPanel2.setPreferredSize(new java.awt.Dimension(384, 66));
				{
					jButton1 = new JButton();
					jPanel2.add(jButton1);
					jButton1.setText(""Start Server"");
					jButton1.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent evt) {
							jButton1ActionPerformed(evt);
						}
					});
				}
			}
			{
				jPanel1 = new JPanel();
				getContentPane().add(jPanel1, BorderLayout.CENTER);
				jPanel1.setPreferredSize(new java.awt.Dimension(384, 130));
				{
					jLabel1 = new JLabel();
					jPanel1.add(jLabel1);
					jLabel1.setText(""Welcome to the server for JavaInstantChat"");
				}
			}
			{
				jPanel3 = new JPanel();
				getContentPane().add(jPanel3, BorderLayout.NORTH);
				jPanel3.setPreferredSize(new java.awt.Dimension(384, 42));
			}
			pack();
			setSize(400, 300);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
"
2739,e74d8e0d-196b-423f-959f-78cd320dc67a,"						public void actionPerformed(ActionEvent evt) {
							jButton1ActionPerformed(evt);
						}
"
2740,37d53b44-115a-4fad-a4fa-aafa0677492b,"	private void jButton1ActionPerformed(ActionEvent evt) {
		try {
            ss = new ServerSocket(2009);
            System.out.println(""Server started on ""+ss.getLocalPort()+"". Waiting for clients to connect."");
             
            t = new Thread(new Accept(ss));
            t.start();
            this.dispose();
            
             
        } catch (IOException e) {
            System.err.println(""The port ""+ss.getLocalPort()+"" is already in use."");
        }
		
	}
"
2741,ee94a7a7-d77a-4dd3-ac64-ea6db5e65554,"	public Statement Connect() {
		try {
		      Class.forName(""org.postgresql.Driver"");
		      String url = ""jdbc:postgresql://localhost:5432/JavaInstantChat"";
		      String user = ""postgres"";
		      String passwd = ""Supinf0"";
		      Connection conn = DriverManager.getConnection(url, user, passwd);
		      state = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
		      return state;
		          
		    } catch (Exception e) {
				System.out.println(""Error connecting to the SQL Server."");
		    }     
		return state;
	}
"
2742,99f6c6a7-5e53-454f-b4fb-d94ad4e9c4e1,"    public Auth(Socket s){
         socket = s;
        }
"
2743,b5cd6bd3-b8b8-46ed-8956-bd648641b780,"    public void run() {
     
        try {
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out = new PrintWriter(socket.getOutputStream());
            login = in.readLine();
            password = in.readLine();
            DbConnect DBC = new DbConnect();
            state = DBC.Connect();
            ResultSet result = state.executeQuery(""SELECT login FROM users WHERE login = '""+login+""' AND password= '""+password+""'"");
            if (!result.next()){
            	IDcheck = 0;
            	out.print(IDcheck);
            	out.flush();
            }
            else {
            	IDcheck = 1;
            	out.println(IDcheck);
            	out.flush();
            	String s = ""Server"";
            	ChatWindow cw = new ChatWindow(socket,s);
            }
                        
            
             
        } catch (IOException e) {
             
        	System.out.println(""Error connecting to the Server."");
            
		} catch (SQLException e) {
			
			System.out.println(""Error connecting to the SQL Server."");
		}
    }
"
2744,a7fc9f87-f87b-4f17-8a1b-0514f02d3d14,"	public ChatWindow(Socket s, String l) {
		socket = s;
		login = l;
		
		
	}
"
2745,e89926c5-2c0c-4658-9191-2061582cb562,"	private void initGUI() {
		try {
			out = new PrintWriter(socket.getOutputStream());
			in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	    	sdf = new SimpleDateFormat(""HH:mm"");
			setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
			{
				jPanel1 = new JPanel();
				getContentPane().add(jPanel1, BorderLayout.NORTH);
				jPanel1.setPreferredSize(new java.awt.Dimension(484, 474));
				{
					jTextPane1 = new JTextPane();
					jPanel1.add(jTextPane1);
					jTextPane1.setPreferredSize(new java.awt.Dimension(483, 473));
					jTextPane1.setEditable(false);
				}
			}
			{
				jPanel2 = new JPanel();
				GridBagLayout jPanel2Layout = new GridBagLayout();
				jPanel2Layout.columnWidths = new int[] {48, 250, 48, 7};
				jPanel2Layout.rowHeights = new int[] {7};
				jPanel2Layout.columnWeights = new double[] {0.0, 0.0, 0.0, 0.1};
				jPanel2Layout.rowWeights = new double[] {0.1};
				getContentPane().add(jPanel2, BorderLayout.SOUTH);
				jPanel2.setLayout(jPanel2Layout);
				jPanel2.setPreferredSize(new java.awt.Dimension(484, 54));
				{
					jTextField1 = new JTextField();
					jPanel2.add(jTextField1, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
				}
				{
					jButton1 = new JButton();
					jPanel2.add(jButton1, new GridBagConstraints(3, 0, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
					jButton1.setText(""Send"");
					jButton1.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent evt) {
							jButton1ActionPerformed(evt);
						}
					});
				}
			}
			pack();
			setSize(500, 600);
			//Infinite loop to listen for new messages coming in through the socket.
			while (true){
				message = in.readLine();
				loginSender = in.readLine();
				cal = Calendar.getInstance();
				jTextPane1.setText(jTextPane1.getText()+""(""+sdf.format(cal.getTime())+"") ""+loginSender+"" says: ""+message+""\n"");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
"
2746,2538bf98-95ad-41db-8670-b683d7768c68,"						public void actionPerformed(ActionEvent evt) {
							jButton1ActionPerformed(evt);
						}
"
2747,cbe7ee3b-06ae-4f87-a093-954e1f8b71f1,"	private void jButton1ActionPerformed(ActionEvent evt) {
		if (jTextField1.getText().isEmpty()) {
			JOptionPane.showMessageDialog(this, ""Please type in a message."");
		}
		else {
			out.println(jTextField1.getText());
			out.flush();
			out.println(login);
			out.flush();
			cal = Calendar.getInstance();
	        jTextPane1.setText(jTextPane1.getText()+""(""+sdf.format(cal.getTime())+"") ""+login+"" says: ""+jTextField1.getText()+""\n"");
	        jTextField1.setText("""");
		}
	}
"
2748,06d8269d-623e-461c-86e7-dcd6843baa0d,"	public void run() {
		this.setLocationRelativeTo(null);
		this.setVisible(true);
		this.setTitle(""Java Instant Chat - Client"");
		initGUI();
	}
"
2749,e22efbe8-203f-46ce-86b8-fd7781a07e5a,"	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				Welcome inst = new Welcome();
				inst.setLocationRelativeTo(null);
				inst.setVisible(true);
				inst.setTitle(""Java Instant Chat Client"");
			}
		});
	}
"
2750,15b2c3f3-83bd-4519-ae63-38e9d2381dce,"			public void run() {
				Welcome inst = new Welcome();
				inst.setLocationRelativeTo(null);
				inst.setVisible(true);
				inst.setTitle(""Java Instant Chat Client"");
			}
"
2751,561f739b-b131-4796-b6c0-890cf0de0791,"	public Welcome() {
		super();
		initGUI();
	}
"
2752,f2e61584-7d4a-4303-8b8a-0257b7325d66,"	private void initGUI() {
		try {
			setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
			{
				jPanel1 = new JPanel();
				getContentPane().add(jPanel1, BorderLayout.NORTH);
				jPanel1.setPreferredSize(new java.awt.Dimension(384, 42));
				{
					jLabel1 = new JLabel();
					jPanel1.add(jLabel1);
					jLabel1.setText(""Welcome to JavaInstantChat"");
				}
			}
			{
				jPanel2 = new JPanel();
				GridBagLayout jPanel2Layout = new GridBagLayout();
				getContentPane().add(jPanel2, BorderLayout.SOUTH);
				jPanel2.setPreferredSize(new java.awt.Dimension(384, 212));
				jPanel2Layout.rowWeights = new double[] {0.1, 0.1, 0.1};
				jPanel2Layout.rowHeights = new int[] {7, 7, 7};
				jPanel2Layout.columnWeights = new double[] {0.0, 0.0, 0.1};
				jPanel2Layout.columnWidths = new int[] {181, 151, 20};
				jPanel2.setLayout(jPanel2Layout);
				{
					jLabel2 = new JLabel();
					jPanel2.add(jLabel2, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
					jLabel2.setText(""Login:"");
				}
				{
					jLabel3 = new JLabel();
					jPanel2.add(jLabel3, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
					jLabel3.setText(""Password:"");
				}
				{
					jTextField1 = new JTextField();
					jPanel2.add(jTextField1, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
				}
				{
					jPasswordField1 = new JPasswordField();
					jPanel2.add(jPasswordField1, new GridBagConstraints(1, 1, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
				}
				{
					jButton1 = new JButton();
					jPanel2.add(jButton1, new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
					jButton1.setText(""Connect"");
					jButton1.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent evt) {
							jButton1ActionPerformed(evt);
						}
					});
				}
				{
					jButton2 = new JButton();
					jPanel2.add(jButton2, new GridBagConstraints(1, 2, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
					jButton2.setText(""Exit"");
					jButton2.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent evt) {
							jButton2ActionPerformed(evt);
						}
					});
				}
			}
			pack();
			setSize(400, 300);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
"
2753,9f2428b1-7874-43d6-8848-e81149583222,"						public void actionPerformed(ActionEvent evt) {
							jButton1ActionPerformed(evt);
						}
"
2754,a66e664a-9044-4a50-9e10-1b4db235f741,"						public void actionPerformed(ActionEvent evt) {
							jButton2ActionPerformed(evt);
						}
"
2755,81009ce9-2331-4384-90c6-fcc60bf7b7c5,"	private void jButton1ActionPerformed(ActionEvent evt) {
		try {
	         
	        socket = new Socket(""127.0.0.1"",2009);
	        login = jTextField1.getText();
	        password = new String(jPasswordField1.getPassword());	        
	        LoginCheck lc = new LoginCheck(socket);
	        IDcheck = lc.Check(login, password);
	        if (!IDcheck){
	        	JOptionPane.showMessageDialog(this, ""Bad login and/or password."");
	        }
	        else{
	        	t2 = new Thread(new ChatWindow(socket,login));
                t2.start();
                this.dispose();
	        }
       
	         
	         
	         
	    } catch (UnknownHostException e) {
	      System.err.println(""Can't connect to address ""+socket.getLocalAddress());
	    } catch (IOException e) {
	      System.err.println(""No server listening on port ""+socket.getLocalPort());
	    }
	}
"
2756,9829d202-4b10-48ca-acb5-321585768379,"	private void jButton2ActionPerformed(ActionEvent evt) {
		this.dispose();
	}
"
2757,f959176b-1714-470b-bd9f-058d2c7438eb,"	public LoginCheck(Socket s){
		socket = s;
	}
"
2758,2c2d7d2a-0da3-4f71-b8ab-2be887055b9b,"	public boolean Check(String login, String password) {
		try {
			out = new PrintWriter(socket.getOutputStream());
			in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			out.println(login);
			out.flush();
			out.println(password);
			out.flush();
			j = Integer.parseInt(in.readLine());
			switch(j){
				case 0 : return false;
				case 1 : return true; 
			}
		} catch (IOException e) {
			System.out.println(""Error connecting to the Server."");
		}
         
		return false;
	}
"
2759,43da4de0-d990-4bf3-9690-87fe9bc9ca81,"	public static CellStyle style(Workbook workbook) {
		Font font = font(workbook);

		CellStyle style = workbook.createCellStyle();
		style.setFont(font);

		return style;
	}
"
2760,d014533a-f929-4d89-ad44-6353f5357e4a,"	public static Font font(Workbook workbook) {
		Font font = workbook.createFont();
		font.setColor(HSSFFont.COLOR_RED);
		font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
		font.setFontHeightInPoints((short) 15);

		return font;
	}
"
2761,3f8d0f82-6ef2-46c8-81cc-28da11b1d5bf,"    public boolean isInterupt() {
        return isInterupt;
    }
"
2762,7916831f-0f29-4b6b-a3c4-f91890e10752,"    public void setInterupt(boolean isInterupt) {
        this.isInterupt = isInterupt;
    }
"
2763,0993b8ff-5f0e-4c7c-92a2-908a393100a0,"    public Highlight(int rowIndex, int cellIndex) {
        this.rowIndex = rowIndex;
        this.cellIndex = cellIndex;
    }
"
2764,1bfe9cba-9002-44d8-b1c7-450522ae9f46,"    public int getRowIndex() {
        return rowIndex;
    }
"
2765,ddbd4cad-e615-459b-a2ea-c70e9706b3c1,"    public int getCellIndex() {
        return cellIndex;
    }
"
2766,0929e64a-bf71-4a4c-9820-97b64643b56a,"    public ExcelServiceImpl(String path) {
        this.filePath = path;
    }
"
2767,3793fde2-d6bc-4b9d-9767-ae8d95963dfe,"    public ExcelServiceImpl(String path, int sheetNum) {
        this.filePath = path;
        this.sheetNum = sheetNum;
    }
"
2768,af7027b3-3bd6-417a-8577-d40f10b7b9fc,"    @Override
    public List<Cell> getDataAtColumn(int column) throws Exception {
        Workbook workbook = _createWorkbook();
        Sheet sheet = workbook.getSheetAt(sheetNum);

        return ExcelUtils.getCell(sheet, column);
    }
"
2769,ac45d32f-9937-4b87-acac-2d1029b4ebfb,"    @Override
    public void highlight(List<Highlight> highlights) throws Exception {
        Workbook workbook = _createWorkbook();

        for (Highlight highlight : highlights) {
            _setHighlight(workbook, highlight);
        }
        
        FileOutputStream out = new FileOutputStream(new File(filePath));
        workbook.write(out);
        out.close();
    }
"
2770,bb344b67-3677-4067-add7-306880455310,"    private Workbook _createWorkbook() throws Exception {
        InputStream is = new FileInputStream(new File(filePath));
        if (filePath.toLowerCase().endsWith(""xlsx"")) {
            return new XSSFWorkbook(is);
        } else if (filePath.toLowerCase().endsWith(""xls"")) {
            return new HSSFWorkbook(is);
        }

        is.close();
        throw new Exception(""Only support xls or xlsx"");
    }
"
2771,77ba8c37-c54e-4b32-96c2-4e773b8e23ab,"    private void _setHighlight(Workbook workbook, Highlight highlight) throws Exception {
        Sheet sheet = workbook.getSheetAt(sheetNum);

        int rowIndex = highlight.getRowIndex();
        int cellIndex = highlight.getCellIndex();

        Cell cell = sheet.getRow(rowIndex).getCell(cellIndex);

        cell.setCellStyle(MarkOther.style(workbook));
    }
"
2772,25a6ecc9-4a51-43ad-9192-bbc624b3f2e0,"    @Override
    public ExcelService path(String path) {
       this.filePath = path;
       return this;
    }
"
2773,b4a81cce-fac8-4470-9519-d36669b33d13,"	public DuplicateStrategyCheckServiceImpl(ExcelService excelService) {
		this.excelService = excelService;
	}
"
2774,55571c0c-1beb-4f33-9bb3-e2948288bd27,"	public void checkDuplicate() throws Exception {
		List<Highlight> highlights = _getHighlights();

		excelService.path(Contants.SYMBOLS_XLSX).highlight(highlights);
	}
"
2775,4abf309e-54c6-4521-a1d9-b30572d6464f,"	private List<Highlight> _getHighlights() throws Exception {
		List<Integer> listYesNo = ExcelUtils.getCellValueAsInteger(excelService.getDataAtColumn(Contants.CHECK_DUPLICATE_COLUMN));

		List<Highlight> highlights = new ArrayList<Highlight>();
		for (int i = 0; i < listYesNo.size(); i++) {
			if (i == 1) {
				highlights.add(new Highlight(i, 0));
			}
		}

		return highlights;
	}
"
2776,29406825-d0e3-44c1-a89f-c3a2671b7984,"    List<Cell> getDataAtColumn(int column) throws Exception;
"
2777,3d05b613-4325-46fa-9a98-44252df9d6f5,"    void highlight(List<Highlight> highlights) throws Exception;
"
2778,6cdcd777-d899-411f-8159-347a4bb1354b,"    ExcelService path(String path);
"
2779,5a42a345-4a9f-4c4a-8d49-1dc1edbbeb75,"    public MorningAfternoonStrategyCompareService(ExcelService excelService) {
        this.excelService = excelService;
    }
"
2780,b6da6747-108e-447d-b7d5-66ec7345f947,"    public void compareMorningAfternoon() throws Exception {
        List<Highlight> highlights = _getHighlightList();

        excelService.highlight(highlights);
    }
"
2781,6a6b3bfc-efc5-4a9c-bd18-2a96774adc8d,"    private List<Highlight> _getHighlightList() throws Exception {
        List<String> firstColumn = ExcelUtils.getCellValueAsString(excelService.getDataAtColumn(0));
        List<String> secondColumn = ExcelUtils.getCellValueAsString(excelService.getDataAtColumn(1));

        List<Highlight> highlights = new ArrayList<Highlight>();
        for (int i = 0; i < firstColumn.size(); i++) {
            String value = firstColumn.get(i);
            if (!secondColumn.contains(value)) {
                highlights.add(new Highlight(i, 0));
            }
        }

        return highlights;
    }
"
2782,f92d8c27-4bd2-4414-9303-8a0218fb97e9,"	void checkDuplicate() throws Exception;
"
2783,b6ac228b-c0fd-4b82-bd1c-a216c944d32c,"    public static List<Cell> getCell(Sheet sheet, int column) {

        List<Cell> cells = new ArrayList<Cell>();

        Iterator<Row> rowIter = sheet.rowIterator();

        while (rowIter.hasNext()) {
            Row row = (Row) rowIter.next();
            cells.add(row.getCell(column));
        }
        
        return cells;
    }
"
2784,56c0f653-5f20-4e14-b1ac-036c29d71ec6,"    public static List<String> getCellValueAsString(List<Cell> cells) {
        List<String> values = new ArrayList<String>();
        for (Cell cell : cells) {
            if (cell == null) {
                break;
            }

            values.add(cell.getStringCellValue().toUpperCase());
        }

        return values;
    }
"
2785,bea65f94-ba47-4d6c-8aa4-e25f53d1c623,"    public static List<Integer> getCellValueAsInteger(List<Cell> cells) {
        List<Integer> values = new ArrayList<Integer>();
        for (Cell cell : cells) {
            if (cell == null) {
                continue;
            }

            try {
            	values.add((int) cell.getNumericCellValue());
			} catch (Exception e) {
				continue;
			}
        }
        

        return values;
    }
"
2786,c4dbbb91-69f8-4b53-b163-516ffad4b13b,"	public StrategyFilterView(String title) {
		super(title);

		_addListener();
		_buildUI();

		setSize(700, 150);
		setLocation(400, 300);
	}
"
2787,340d310b-b84b-4fce-9649-c1dca670f30a,"	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == this.morningAfternoonCompareBtn) {
			try {
				status.setText(""    - Processing  "");

				final ThreadInterceptor ti = new ThreadInterceptor();
				Thread th = new Thread(new Runnable() {
					@Override
					public void run() {
						for (int i = 0; i < 30; i++) {
							if (ti.isInterupt()) {
								break;
							}

							status.setText(status.getText() + ""->"");
							try {
								Thread.sleep(50);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
					}
				});
				th.start();

				ExcelService excelService = new ExcelServiceImpl(Contants.SANGCHIEU_XLSX);
				MorningAfternoonStrategyCompareService service = new MorningAfternoonStrategyCompareService(excelService);
				service.compareMorningAfternoon();

				ti.setInterupt(true);
				status.setText(status.getText() + "" DONE !!!"");

				Thread.sleep(200);
				status.setText(""    - Opening ."");
				Thread.sleep(200);
				status.setText(status.getText() + ""."");
				Thread.sleep(200);
				status.setText(status.getText() + "".."");
				Thread.sleep(400);
				Desktop.getDesktop().open(new File(Contants.SANGCHIEU_XLSX));
				status.setText(""    * Caramen +1"");
			} catch (Exception ex) {
				status.setText(ex.getMessage());
			}
		} else if (e.getSource() == this.checkDuplicateBLightBtn) {
			try {
				status.setText(""    - Processing  "");

				final ThreadInterceptor ti = new ThreadInterceptor();
				Thread th = new Thread(new Runnable() {
					@Override
					public void run() {
						for (int i = 0; i < 30; i++) {
							if (ti.isInterupt()) {
								break;
							}

							status.setText(status.getText() + ""->"");
							try {
								Thread.sleep(50);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
					}
				});
				th.start();

				ExcelService excelService = new ExcelServiceImpl(Contants.CHECK_DUPLICATE_XLSX, 0);
				DuplicateStrategyCheckService service = new DuplicateStrategyCheckServiceImpl(excelService);
				service.checkDuplicate();

				ti.setInterupt(true);
				status.setText(status.getText() + "" DONE !!!"");

				Thread.sleep(200);
				status.setText(""    - Opening ."");
				Thread.sleep(200);
				status.setText(status.getText() + ""."");
				Thread.sleep(200);
				status.setText(status.getText() + "".."");
				Thread.sleep(400);
				Desktop.getDesktop().open(new File(Contants.SYMBOLS_XLSX));
				status.setText(""Caramen +1"");
			} catch (Exception ex) {
				status.setText(ex.getMessage());
			}
		} else if (e.getSource() == this.checkDuplicateVTradeBtn) {
			try {
				status.setText(""    - Processing  "");

				final ThreadInterceptor ti = new ThreadInterceptor();
				Thread th = new Thread(new Runnable() {
					@Override
					public void run() {
						for (int i = 0; i < 30; i++) {
							if (ti.isInterupt()) {
								break;
							}

							status.setText(status.getText() + ""->"");
							try {
								Thread.sleep(50);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
					}
				});
				th.start();

				ExcelService excelService = new ExcelServiceImpl(Contants.CHECK_DUPLICATE_XLSX, 1);
				DuplicateStrategyCheckService service = new DuplicateStrategyCheckServiceImpl(excelService);
				service.checkDuplicate();

				ti.setInterupt(true);
				status.setText(status.getText() + "" DONE !!!"");

				Thread.sleep(200);
				status.setText(""    - Opening ."");
				Thread.sleep(200);
				status.setText(status.getText() + ""."");
				Thread.sleep(200);
				status.setText(status.getText() + "".."");
				Thread.sleep(400);
				Desktop.getDesktop().open(new File(Contants.SYMBOLS_XLSX));
				status.setText(""Caramen +1"");
			} catch (Exception ex) {
				status.setText(ex.getMessage());
			}
		}

	}
"
2788,905cc851-7eb7-4735-a28b-18414574284a,"					@Override
					public void run() {
						for (int i = 0; i < 30; i++) {
							if (ti.isInterupt()) {
								break;
							}

							status.setText(status.getText() + ""->"");
							try {
								Thread.sleep(50);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
					}
"
2789,8bd94ba1-051d-4d18-80e0-9ca47d86d60c,"					@Override
					public void run() {
						for (int i = 0; i < 30; i++) {
							if (ti.isInterupt()) {
								break;
							}

							status.setText(status.getText() + ""->"");
							try {
								Thread.sleep(50);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
					}
"
2790,82b36421-b7df-484f-8dd6-5144c655ecd0,"					@Override
					public void run() {
						for (int i = 0; i < 30; i++) {
							if (ti.isInterupt()) {
								break;
							}

							status.setText(status.getText() + ""->"");
							try {
								Thread.sleep(50);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
					}
"
2791,a6edb85d-8a75-4f4d-a62a-0baaf88a83c6,"	private void _buildUI() {
		this.status.setForeground(Color.DARK_GRAY);
		Font font = new Font("""", Font.BOLD, 14);
		this.status.setFont(font);
		this.morningAfternoonCompareBtn.setBackground(Color.DARK_GRAY);
		this.morningAfternoonCompareBtn.setForeground(Color.ORANGE);

		this.checkDuplicateBLightBtn.setBackground(Color.DARK_GRAY);
		this.checkDuplicateBLightBtn.setForeground(Color.ORANGE);

		this.checkDuplicateVTradeBtn.setBackground(Color.DARK_GRAY);
		this.checkDuplicateVTradeBtn.setForeground(Color.ORANGE);

		Panel p1 = new Panel(new GridLayout(1, 3));
		p1.add(this.morningAfternoonCompareBtn);
		p1.add(this.checkDuplicateBLightBtn);
		p1.add(this.checkDuplicateVTradeBtn);

		setLayout(new BorderLayout());
		add(this.status, ""North"");
		add(p1, ""Center"");
		add(new Label(), ""South"");
		add(new Label(), ""East"");
		add(new Label(), ""West"");
		setBackground(Color.ORANGE);
	}
"
2792,4e3451dc-7044-421f-a93a-e620b14a37f5,"	private void _addListener() {
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				StrategyFilterView.this.dispose();
			}
		});

		this.morningAfternoonCompareBtn.addActionListener(this);
		this.checkDuplicateBLightBtn.addActionListener(this);
		this.checkDuplicateVTradeBtn.addActionListener(this);
	}
"
2793,b6456869-bc24-4846-942a-8f6481914dfd,"			public void windowClosing(WindowEvent e) {
				StrategyFilterView.this.dispose();
			}
"
2794,064b9fe4-2446-4047-8a0a-59cb27cf66f8,"	public static void main(String[] args) {
		StrategyFilterView view = new StrategyFilterView(""© minh.nguyen vnds"");
		view.setVisible(true);
	}
"
2795,fcaa5d29-07f2-4fab-ae89-e7894e621c7a,"    @Before
    public void setUp() {
        service = new ExcelServiceImpl(path);
    }
"
2796,0b90cad9-f8d9-4ccf-8994-73b18fa9e911,"    @Test
    public void testGetDuplicateData() throws Exception {
    	service = new ExcelServiceImpl(path, 0);
    	
    	List<Cell> cells = service.getDataAtColumn(5);
    	
    	List<Integer> values = ExcelUtils.getCellValueAsInteger(cells);
    	
    	System.out.println(values);
    	System.out.println(values.size());
    }
"
2797,1d090db5-3d91-4f5d-97a6-4fe89564b56d,"    @Test
    public void testGetColumnData() throws Exception {
        List<Cell> cells = service.getDataAtColumn(0);

        for (Cell cell : cells) {
            System.out.println(cell.getStringCellValue());
        }
    }
"
2798,b4559ea5-bde9-44f9-bd86-899d1677aa04,"    @Test
    public void testHighlight() throws Exception {
        Highlight[] highlightArr = new Highlight[] { new Highlight(1, 0) };
        service.highlight(Arrays.asList(highlightArr));
    }
"
2799,e5179c03-116a-46d8-bb98-b0b3056a9a38,"    @Before
    public void setUp() {
        excelService = new ExcelServiceImpl(filePath);
        
        service = new MorningAfternoonStrategyCompareService(excelService);
    }
"
2800,c729c37d-631f-44e4-9359-2f893cc7789f,"    @Test
    public void test() throws Exception {
        service.compareMorningAfternoon();
    }
"
2801,883c9207-46cc-490f-b61a-d58c57646045,"		public static void main(String[] args) {
		
			System.out.println(Airline.buildPlane(PlaneType.PASSANGER));
			System.out.println(Airline.buildPlane(PlaneType.FREIGHT));
			
		
		}
"
2802,50361df2-0b10-4a69-813f-17df4bdd24f2,"	PassangerPlane(){
		super(PlaneType.PASSANGER);
		construct();
	}
"
2803,cda7bf6f-9596-47f7-a6fd-42e9865b3259,"	@Override
	protected void construct(){
				
		int capasity;
		int economyClassSeat;
		int buisnessClassSeat;
		
	}
"
2804,8485f47c-97dc-42a5-b744-d0c1872e5d20,"	public static Plane buildPlane(PlaneType model){
		
		Plane plane = null;
		
		
		switch(model){
		
		case PASSANGER:
			plane = new PassangerPlane();
			break;
			
		case FREIGHT:
			plane = new FreighterPlane();
			break;
			default :
				
			
			
		}
		return plane;
		
		
	}
"
2805,c73e32fc-f723-4864-961e-5bae789c3eef,"	FreighterPlane(){
		super(PlaneType.FREIGHT);
		construct();
	}
"
2806,d8ec65d9-8e3e-47bb-9439-8ab872c646eb,"	@Override
	protected void construct(){
		int bearingCapacity;
		
	}
"
2807,d026e2f6-9a28-4b0f-a212-b9a928d6615c,"	public Plane (PlaneType model){
		
		
		this.model = model;
	//	arrangeParts();
		
		}
"
2808,54191e6c-a4ab-4ec9-a560-69070cfb19c1,"	protected abstract void construct();
"
2809,83242e48-b58c-429e-8d2b-890bcffcc24d,"	public PlaneType getModel(){
		return model;
		
	}
"
2810,f5d6e976-0d5b-44d9-a39f-8159225fe018,"	public void setModel(PlaneType model)
	{
		this.model = model;
	}
"
2811,348dfd2b-4ecf-4b95-b18f-d63b29ce4a1f,"	public String getName() {
		return name;
	}
"
2812,aa82f4c5-87af-4cb0-b29f-91e97c2162d9,"	public void setName(String name) {
		this.name = name;
	}
"
2813,0e494897-ca4f-421c-9560-3dcb08c025ae,"	public int getFlyRange() {
		return flyRange;
	}
"
2814,95f9996d-4b69-4c01-aba6-0c5ee7514515,"	public void setFlyRange(int flyRange) {
		this.flyRange = flyRange;
	}
"
2815,3e53d911-3dfc-46d3-8cdc-fcaadbfa986c,"	public int getFuelConsumpion() {
		return fuelConsumpion;
	}
"
2816,0c39bc15-2bd6-4366-99d6-0dd4e930a818,"	public void setFuelConsumpion(int fuelConsumpion) {
		this.fuelConsumpion = fuelConsumpion;
	}
"
2817,f8e09ad2-430f-41b9-96a1-73e0db6128b1,"	public int getFlySpeed() {
		return flySpeed;
	}
"
2818,4dc1c684-1ed8-4c75-99aa-a0c9d37a29df,"	public void setFlySpeed(int flySpeed) {
		this.flySpeed = flySpeed;
	}
"
2819,08e965ba-816a-4db1-af85-e5a5885457d0,"    public static void main(String args[]) {
        Window w = Window.create();
        w.setWidth(800);
        w.setHeight(600);
        w.setTitle(""cake engine"");
        
        Frame frame = new Frame();
        frame.setClearColor(new Vector4f(0.1f, 0.0f, 0.0f, 0.5f));
        
        w.addDrawer(frame);
        
        w.open();
    }
"
2820,46d52e84-6160-41d5-8e73-f11283dd1b9e,"    public Mesh(Vertex[] vertices) {
        this.vbo = glGenBuffers();
        this.vertices = vertices;
        glBindBuffer(GL_ARRAY_BUFFER, this.vbo);
        glBufferData(GL_ARRAY_BUFFER, BufferUtil.createFlippedBufferFromVertices(this.vertices), GL_STATIC_DRAW);
    }
"
2821,90bb1ca7-96dd-48c4-990c-9f94dc9fa95f,"    public void draw() {
        glEnableVertexAttribArray(0);
        glBindBuffer(GL_ARRAY_BUFFER, this.vbo);
        glVertexAttribPointer(0, 3, GL_FLOAT, false, 3 * 4, 0);
        glDrawArrays(GL_TRIANGLES, 0, this.vertices.length);
        glDisableVertexAttribArray(0);
    }
"
2822,78f36a73-1b17-42f1-89ac-81e627b99c89,"    @Override
    protected void finalize() throws Throwable {
        glDeleteBuffers(this.vbo);
        super.finalize();
    }
"
2823,5083c4dd-a8e3-4603-adf4-52f7c923d343,"    public Frame() {
        this.clearColor = new Vector4f(1.0f, 1.0f, 1.0f, 1.0f);
    }
"
2824,f5e30bf3-f93f-4f6b-a8e0-41ee9540f8a3,"    public void setClearColor(Vector4f color) {
        this.clearColor = color;
    }
"
2825,ff9feb13-8ecf-464f-ac9d-2e0eb2825312,"    @Override
    public void draw() {
        Util.setClearColor(this.clearColor);
        Util.clearScreen();
        Util.init3DEnvironment();
        this.mesh.draw();
    }
"
2826,b7e8ee12-d1b1-4406-89b2-6a163b07818b,"    @Override
    public void setup() {
        Vertex[] data = new Vertex[] {
            new Vertex(new Vector3f(-1,-1,0)),
            new Vertex(new Vector3f(-1,1,0)),
            new Vertex(new Vector3f(0,1,0))
        };
        this.mesh = new Mesh(data);
    }
"
2827,2c9137ce-de4c-41b8-8080-8e009320d0dc,"    @Override
    public void destroy() {
    }
"
2828,a0a80eb2-b0ea-4bc2-8965-a0d157b0cf31,"    public static FloatBuffer create(int size) {
        return BufferUtils.createFloatBuffer(size);
    }
"
2829,c57fe70b-8be5-47e1-80df-7317f1b1fd70,"    public static FloatBuffer createFlippedBufferFromVertices(Vertex[] vertices) {
        FloatBuffer buffer = BufferUtil.create(vertices.length * 3);
        for ( Vertex vertex : vertices ) {
            buffer.put(vertex.getPos().getX());
            buffer.put(vertex.getPos().getY());
            buffer.put(vertex.getPos().getZ());
        }
        buffer.flip();
        return buffer;
    }
"
2830,41f85f44-9382-40be-93a0-eaa5d3880f41,"    public Vertex(Vector3f pos) {
        this.pos = pos;
    }
"
2831,6938b4b1-641f-4bfd-b3e8-b86954395927,"    public Vector3f getPos() {
        return pos;
    }
"
2832,78f7a534-3926-44bc-842f-6059f1c28b6d,"    public void setPos(Vector3f pos) {
        this.pos = pos;
    }
"
2833,886d8702-a283-4470-8ce3-49e4f47f0858,"    public static void clearScreen() {
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    }
"
2834,c9f7addb-f286-4380-8715-d975a501cdb5,"    public static void setClearColor(Vector4f color) {
        glClearColor(color.getX(), color.getY(), color.getZ(), color.getW());
    }
"
2835,8ea0220d-6f2c-4913-94a0-ee3bc720aac7,"    public static void init3DEnvironment() {
        // Schinken
        glFrontFace(GL_CW);
        glCullFace(GL_BACK);
        glEnable(GL_CULL_FACE);
        glEnable(GL_DEPTH_TEST);
        glEnable(GL_FRAMEBUFFER_SRGB);
        //glEnable(GL_DEPTH_CLAMP);
    }
"
2836,4c434923-92a2-4914-800c-a7d8a1a2ff01,"    public static Window create() {
        if ( Window.instance == null ) {
            Window.instance = new Window();
        }
        return Window.instance;
    }
"
2837,cd16969f-0739-4264-b74b-b701a063efe1,"    private Window() {
        this.width = 800;
        this.height = 600;
        this.title = """";
        this.fullscreen = false;
        this.isOpen = false;
        this.maxFPS = 60;
        this.drawers = new ArrayList<>();
    }
"
2838,7cf8d049-71f7-4ba4-97a0-595ebe763f93,"    public int getWidth() {
        return width;
    }
"
2839,e7dcf0b9-83d9-4057-af8e-b33320b77a0a,"    public void setWidth(int width) {
        this.width = width;
    }
"
2840,d7118b7d-2074-4bde-b8ce-35b6156a9a45,"    public int getHeight() {
        return height;
    }
"
2841,fb41fc8f-2b71-4a0e-8388-8bfe5c4bf857,"    public void setHeight(int height) {
        this.height = height;
    }
"
2842,2bec6de6-e026-42cb-b76d-80b01fdf74b4,"    public String getTitle() {
        return title;
    }
"
2843,a1504aea-557f-4ce5-b484-f85e517cc85c,"    public void setTitle(String title) {
        this.title = title;
    }
"
2844,c4285eb4-7969-421a-9d7c-9885c70feb4d,"    public boolean isFullscreen() {
        return fullscreen;
    }
"
2845,9bd45c17-6df7-4270-b6b7-d01e2421f2a4,"    public void setFullscreen(boolean fullscreen) {
        this.fullscreen = fullscreen;
    }
"
2846,befb8644-b34d-4c2e-b63c-795d1792103f,"    public int getMaxFPS() {
        return maxFPS;
    }
"
2847,a7dcecf3-5372-4784-ba00-62d6b62ea716,"    public void setMaxFPS(int maxFPS) {
        this.maxFPS = maxFPS;
    }
"
2848,284549f2-9abb-4f9a-a52a-570497c7a241,"    public void addDrawer(Drawable item) {
        this.drawers.add(item);
    }
"
2849,d775495a-31a5-48bb-899c-67b90b86bf40,"    public void open() {
        if ( this.isOpen == true ) {
            return;
        }
        this.isOpen = true;
        try {
            Display.create();
            Display.setFullscreen(this.fullscreen);
            Display.setTitle(this.title);
            Display.setDisplayMode(new DisplayMode(this.width, this.height));
            for ( Drawable drawer : drawers ) {
                drawer.setup();
            }
            while ( this.isOpen ) {
                for ( Drawable drawer : drawers ) {
                    drawer.draw();
                }
                Display.update();
                Display.sync(this.maxFPS);
                this.isOpen = !Display.isCloseRequested();
            }
            for ( Drawable drawer : drawers ) {
                drawer.destroy();
            }
            this.close();
        } catch (LWJGLException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(1);
        }
    }
"
2850,29f38745-b925-498f-9086-0f115ebbe339,"    public void close() {
        this.isOpen = false;
        Display.destroy();
    }
"
2851,51522d53-50cd-43fe-af3f-d126d7feb6e7,"    public void draw();
"
2852,bd13675a-90c8-4b28-8959-6c883bc1f398,"    public void setup();
"
2853,be13caaf-7021-4d0b-bff5-07aa2dc90a76,"    public void destroy();
"
2854,6a64954f-8a64-40ed-ac04-517d0591ddfa,"  public int getUserId(){
    return userId;
  }
"
2855,994f5c65-85b8-4d76-b264-5cfb8c13e84e,"  public void setUserId(int userId){
    this.userId=userId;
  }
"
2856,3a501a01-0978-459e-a033-061994968ea1,"  public String getUserName(){
    return this.userName;
  }
"
2857,ade91809-1d94-40c3-9b6c-d48d51049644,"  public void setUserName(String userName){
    this.userName=userName;
  }
"
2858,2faa2bdf-ddc4-4556-952a-16cfb2359b37,"  public int getCredits(){
    return this.credits;
  }
"
2859,a74c419b-d69e-4a3d-851e-97a0b3a08faa,"  public void setCredits(int credits){
    this.credits=credits;
  }
"
2860,9d004a82-fcae-432e-87bf-2b69b217c732,"  public String getLastIp(){
    return this.lastIp;
  }
"
2861,6db1678c-f4ab-4dca-a4a9-4bf930b94232,"  public void setLastIp(String lastIp){
    this.lastIp=lastIp;
  }
"
2862,e3e290ca-22fe-45a8-8a17-8ea974ee725f,"  public Date getLastVisit(){
    return this.lastVisit;
  }
"
2863,1b00132e-7b16-409d-a084-cbb61bffd8f6,"  public void setLastVisit(Date lastVisit){
    this.lastVisit=lastVisit;
  }
"
2864,907645ef-5741-4a0c-96c3-7174633d6076,"  public int getLoginLogId(){
    return this.loginLogId;
  }
"
2865,afd38089-84b9-4b2e-9497-6940ecf73101,"  public void setLoginLogId(int loginLogId){
    this.loginLogId=loginLogId;
  }
"
2866,f4a069e0-bd03-4323-b928-cff97b3e04e4,"  public int getUserId(){
    return this.userId;
  }
"
2867,db9322d2-28e5-45df-91b4-63f84ebc4f9b,"  public void setUserId(int userId){
    this.userId=userId;
  }
"
2868,088b9034-9c3e-4d85-b277-d32efd2858b7,"  public String getIp(){
    return this.ip;
  }
"
2869,b91503a1-96d8-4201-b189-b4ae4405ea55,"  public void setIp(String ip){
    this.ip=ip;
  }
"
2870,70352cbd-1db4-4b61-8982-3d7e06e6f0d1,"  public Date getLoginDate(){
    return this.loginDate;
  }
"
2871,a876de96-f3c8-4c47-84cd-4e6c6adca3cd,"  public void setLoginDate(Date loginDate){
    this.loginDate=loginDate;
  }
"
2872,bc2c746a-cd86-42ef-8268-eba9873abcde,"  public void insertLoginLog(LoginLog loginLog) throws Exception{
    String sql = ""insert into t_login_log(user_id, ip, login_datetime) values (?, ?, ?)"";
    Object[] args = {loginLog.getUserId(), loginLog.getIp(), loginLog.getLoginDate()};
    jdbcTemplate.update(sql, args);
  }
"
2873,b29d5588-1fe7-44b3-859f-7adb5a07ebaa,"  public int getMatchCount(String userName, String password){
    String sql = ""select count(*) from t_user where user_name=? and password=?"";
    return jdbcTemplate.queryForInt(sql, new Object[]{userName, password});
  }
"
2874,a2a2fee1-e80b-4940-bc07-78702d82a6a0,"  public User findUserByUserName(final String userName) {
        String sql = ""select * from t_user where user_name=?"";
    final User user = new User();
    jdbcTemplate.query(sql, new Object[]{userName},
      new RowCallbackHandler(){
        public void processRow(ResultSet rs){
	  try{
	  final int userId = rs.getInt(""user_id"");
          final int credits = rs.getInt(""credits"");
          user.setUserId(userId);
	  user.setUserName(userName);
	  user.setCredits(credits);
	  } catch(SQLException e){
	    System.out.println(e.getMessage());
	  }
	}
      });
    return user;
  }
"
2875,17b7b1e5-2964-49d4-a8d5-19ccfb433c74,"        public void processRow(ResultSet rs){
	  try{
	  final int userId = rs.getInt(""user_id"");
          final int credits = rs.getInt(""credits"");
          user.setUserId(userId);
	  user.setUserName(userName);
	  user.setCredits(credits);
	  } catch(SQLException e){
	    System.out.println(e.getMessage());
	  }
	}
"
2876,21aee192-6566-4595-89ef-c895766276ba,"  public void updateLoginInfo(User user){
    String sql = ""update t_user set last_visit=? , last_ip=? , credits = ? where user_id=?"";
    jdbcTemplate.update(sql, new Object[]{user.getLastVisit(), user.getLastIp(), user.getCredits(), user.getUserId()});
  }
"
2877,3560c89d-e733-4d7d-bb8d-f4882c9a9190,"  public boolean hasMatchUser(String userName, String password){
    int matchCount = userDao.getMatchCount(userName, password);
    return matchCount>0;
  }
"
2878,9b96d5fc-4191-4b16-a9e0-6e8b19972f53,"  public User findUserByUserName(String userName){
    return userDao.findUserByUserName(userName);
  }
"
2879,43fecb8f-0ad0-4a66-b828-96a11a6fbc4b,"  public void loginSuccess(User user) throws Exception{
    user.setCredits(5+user.getCredits());
    LoginLog loginLog = new LoginLog();
    loginLog.setUserId(user.getUserId());
    loginLog.setIp(user.getLastIp());
    loginLog.setLoginDate(user.getLastVisit());
    userDao.updateLoginInfo(user);
    loginLogDao.insertLoginLog(loginLog);
  }
"
2880,7ca6de51-b633-4daa-bd29-4283b5a8ebe1,"  @RequestMapping(value=""/index.html"")
  public String loginPage(){
    return ""login"";
  }
"
2881,d45bb4d6-2d8d-4a16-b24c-ba9f0d1c67d0,"  @RequestMapping(value=""/loginCheck.html"")
  public ModelAndView loginCheck(HttpServletRequest request, 
    LoginCommand loginCommand) throws Exception{
    boolean isValidUser = userService.hasMatchUser(loginCommand.getUserName(),
      loginCommand.getPassword());
    if(!isValidUser){
      return new ModelAndView(""login"", ""error"", ""您的用户名或密码错误"");
    } else {
      User user = userService.findUserByUserName(loginCommand.getUserName());
      user.setLastIp(request.getLocalAddr());
      user.setLastVisit(new Date());
      userService.loginSuccess(user);
      request.getSession().setAttribute(""user"", user);
      return new ModelAndView(""main"",""user"", user);
    }
  }
"
2882,e3158901-1350-46a9-8e7a-3a4d7ae27364,"  public String getUserName(){
    return this.userName;
  }
"
2883,ca268b41-5190-43b5-9607-1e935b92dfa4,"  public void setUserName(String userName){
    this.userName=userName;
  }
"
2884,9df22ca6-1a4c-409f-82a0-ea709ac15058,"  public String getPassword(){
    return this.password;
  }
"
2885,5007ee4c-e5ad-4dfe-8bfc-ca5318496f6b,"  public void setPassword(String password){
    this.password=password;
  }
"
2886,c2b6e3bd-ed62-42b6-a630-c2496ea98d1d,"  @Test
  public void hasMatchUser(){
    boolean b1 = userService.hasMatchUser(""admin"",""admin"");
    System.out.println(b1);
    boolean b2 = userService.hasMatchUser(""admin"",""Hello"");
    System.out.println(b2);
    assertTrue(b1);
    assertFalse(b2); 
  }
"
2887,3dec23d4-72ba-41f0-8778-88cf75db544f,"	public ServerClient(String name, InetAddress address, int port)
	{
		this.name = name;
		this.address = address;
		this.port = port;
	}
"
2888,ce45fb94-d4f0-4fa8-a677-4bfd93512593,"	public String getName()
	{
		return name;
	}
"
2889,4b47edb5-6604-4865-a60e-6cc1b8bc6284,"	public InetAddress getAddress()
	{
		return address;
	}
"
2890,a0db7c7a-8b2a-476c-9ed2-ef4e47dcc904,"	public int getPort()
	{
		return port;
	}
"
2891,56a12274-0351-49d3-a76d-cf9a72c11f02,"	public ChatServer(int port, int numOfClients)
	{
		try {
			socket = new DatagramSocket(port);
		} catch (IOException e){
			e.printStackTrace();
		}
		clients = new ServerClient[numOfClients];
	}
"
2892,8ae881ec-040f-4aa0-88c3-5fc48f60f278,"	public void runServer()
	{
		System.out.println(""Server started"");
		//TODO Find way to display the server ip here
		System.out.println(""Port: "" + socket.getLocalPort());
		printHelp();
		running = true;
		showRaw = true;
		receiver = new MsgReceiver(this, ""Server-Receiver"");
		receiver.start();
		Scanner input = new Scanner(System.in);
		while(running)
		{
			String text = input.nextLine();
			if(text.equalsIgnoreCase(""/quit""))
			{
				closeServer();
			}
			else if(text.equals(""/show""))
			{
				showRaw = (showRaw)? false : true;
			}
			else if(text.equals(""/clients""))
			{
				System.out.println(""Clients online"");
				System.out.println(""ID\tName"");
				System.out.println(""================"");
				for (int i = 0; i < clients.length; i++)
				{
					if(clients[i] != null) {
						System.out.println(i + ""\t"" + clients[i].getName());
					}
				}
			}
			else if(text.equals(""/help""))
			{
				printHelp();
			}
			else
			{
				sendToAll(MESSAGE + ""<Server>: "" + text + ""/m/"");
			}
		}
	}
"
2893,e8cbee0f-77e9-42f6-ae9a-3cb11adf1360,"	private void printHelp()
	{
		System.out.println(""Here is a list of all available commands:"");
		System.out.println(""========================================="");
		System.out.println(""/show - enables raw mode."");
		System.out.println(""/clients - shows all connected clients."");
//		System.out.println(""/kick [users ID or username] - kicks a user."");
		System.out.println(""/help - shows this help message."");
		System.out.println(""/quit - shuts down the server."");
	}
"
2894,7e7f9f71-c7f2-4f8e-b22e-e326eec4670a,"	private void sendToAll(String text)
	{
		byte[] data = text.getBytes();
		for(ServerClient client : clients)
		{
			if(client != null) {
				send(data, client);
			}
		}
	}
"
2895,d3967358-60ee-4fe4-b166-774485b20c33,"	private void send(byte[] data, ServerClient client)
	{
		Thread send = new MsgSender(socket, data, client);
		send.start();
	}
"
2896,91e17ad4-c60d-48d0-9170-4948f916edd5,"	public void processPacket(DatagramPacket packet)
	{
		String str = new String(packet.getData());
		char protocol = str.charAt(0);
		String subStr = str.substring(1);
		String[] split;
		int clientID;
		switch(protocol)
		{
		case CONNECT://str will look like: ""cClientName/c/""
			String name = subStr.split(""/c/"")[0];
			InetAddress address = packet.getAddress();
			int port = packet.getPort();
			ServerClient client = new ServerClient(name, address, port);
			handleConnect(subStr, client);
			break;
		case MESSAGE://str will look like: ""mClientID/i/Message/m/""
			split = subStr.split(""/m/|/i/"");
			clientID = Integer.parseInt(split[0]);
			ServerClient c = clients[clientID];
			String msg = ""<"" + c.getName() + "">: "" + split[1];
			if(showRaw) {
				System.out.println(msg);
			}
			sendToAll(MESSAGE + msg + ""/m/"");
			break;
		case DISCONNECT://str will look like ""dClientID/d/
			clientID = Integer.parseInt(subStr.split(""/d/"")[0]);
			handleDisconnect(clientID);
			break;
		}
	}
"
2897,1bb7db10-064c-4362-aee0-951a55c51554,"	private void handleConnect(String str, ServerClient client)
	{
		int clientID = addClient(client);
		if(clientID == -1) {
			String full = ERROR + ""Sorry the current server is full/e/"";
			send(full.getBytes(), client);
		}else {
			System.out.println(""The user "" + client.getName() + "" connected"");
			String welcome = CONNECT + ""Welcome "" + client.getName() + ""/c/"" + clientID + ""/i/"";
			send(welcome.getBytes(), client);
			sendToAll(MESSAGE + ""User "" + client.getName() + "" connected/m/"");
		}
	}
"
2898,a9b8d6bb-086e-421b-bbf3-bdf4fabde48e,"	private void handleDisconnect(int clientID)
	{
		sendToAll(DISCONNECT + ""The user "" + clients[clientID].getName() + "" disconnected/d/"");
		System.out.println(""The user "" + clients[clientID].getName() + "" disconnected"");
		clients[clientID] = null;
	}
"
2899,6481b9ed-8a73-4153-85bc-528d0ac8e62a,"	private int addClient(ServerClient client)
	{
		for(int i = 0; i < clients.length; i++)
		{
			if(clients[i] == null) {
				clients[i] = client;
				return i;
			}
		}
		return -1;
	}
"
2900,485faa12-3c45-4e2b-b5d1-5298d0398c3b,"	public boolean isRunning()
	{
		return running;
	}
"
2901,80328f7c-37e0-408d-815c-e25451c08492,"	public DatagramSocket getSocket()
	{
		return socket;
	}
"
2902,be7eb654-a0fb-423f-9880-8be19b61bf63,"	private void closeServer()
	{
		sendToAll(MESSAGE + ""<Server>: Server has been shutdown/m/"");
		System.out.println(""Closing Server"");
		running = false;
		new Thread(new Runnable() {
			public void run() {
				socket.close();
			}
		}).start();
	}
"
2903,eb702aff-3d4a-4627-8564-2cf7d81308dd,"			public void run() {
				socket.close();
			}
"
2904,63c7f93a-6512-43e3-9afd-b4174c0305ec,"	public static void main(String[] args)
	{
		if(args.length < 2) badArgumentMessage();
		
		int port = 0;
		int numOfClients = 0;
		
		try{
			port = Integer.parseInt(args[0]);
			numOfClients = Integer.parseInt(args[1]);
			ChatServer chat = new ChatServer(port, numOfClients);
			chat.runServer();
		}catch(NumberFormatException e)
		{
			badArgumentMessage();
		}
	}
"
2905,3806e221-66fb-446b-bbfc-d107ce033a5a,"	private static void badArgumentMessage()
	{
		System.out.println(""Must pass a port number and number of clients \""java ChatServer port clients\"""");
		System.exit(1);
	}
"
2906,83e21f1e-0c38-49e0-bc34-0c49d8eca470,"	public Client(String userName, String serverIP, int port)
	{
		this.userName = userName;
		this.serverIP = serverIP;
		this.port = port;
	}
"
2907,376f6733-87df-4e57-a934-80fa2d380911,"	public void openConnection()
	{
		try {
			socket = new DatagramSocket();
			serverAddress = InetAddress.getByName(serverIP);
			running = true;
		} catch(UnknownHostException e) {
			e.printStackTrace();
		} catch (SocketException e) {
			e.printStackTrace();
		}
	}
"
2908,3e4ec4a3-8df1-4d20-bf53-5e931dcae968,"	public DatagramPacket receive()
	{
		byte[] data = new byte[1024];
		DatagramPacket packet = new DatagramPacket(data, data.length);
		try {
			socket.receive(packet);
		} catch(SocketException e){
//			e.printStackTrace();
		}catch(IOException e) {
			e.printStackTrace();
		}
		return packet;
	}
"
2909,b5049b9f-be37-4bef-b93b-640a26225708,"	public String processPacket(DatagramPacket packet)
	{
		String str = new String(packet.getData());
		char protocol = str.charAt(0);
		String subStr = str.substring(1).trim();
		System.out.println(subStr);
		String[] split;
		String result = """";
		switch(protocol)
		{
		case CONNECT://str will look like ""cWelcome ClientName/c/clientID/i/""
			split = subStr.split(""/i/|/c/"");
			result = split[0];
			ID = Integer.parseInt(split[1]);
			break;
		case MESSAGE://str will look like ""m<Name>:Message/m/""
			result = subStr.split(""/m/"")[0];
			break;
		case DISCONNECT://str will look like ""dThe user ClientName disconnected/d/""
			result = subStr.split(""/d/"")[0];
			break;
		}
		return result;
	}
"
2910,06a2713c-5add-4968-81e4-bf796e76bb3a,"	public void send(String msg, char protocol)
	{
		switch(protocol)
		{
		case CONNECT:
			msg = CONNECT + userName + ""/c/"";
			break;
		case MESSAGE:
			msg = MESSAGE + """" + ID + ""/i/"" + msg + ""/m/"";
			break;
		case DISCONNECT:
			msg = DISCONNECT + """" + ID + ""/d/"";
			break;
		}
		
		Thread send = new MsgSender(socket, msg.getBytes(), serverAddress, port);
		send.start();
	}
"
2911,cf8e004b-b8ec-491b-a334-e2e94b3469b9,"	public void close()
	{
		send("""", DISCONNECT);
		System.out.println(""Closing Client"");
		running = false;
		new Thread(new Runnable() {
			public void run() {
				synchronized (socket) {
					socket.close();
				}
			}
		}).start();;
	}
"
2912,b01509ee-6955-4bf7-97a5-68d424a4fe7f,"			public void run() {
				synchronized (socket) {
					socket.close();
				}
			}
"
2913,d653ebd0-a110-47b1-9e64-d286747f107a,"	public boolean isRunning()
	{
		return running;
	}
"
2914,c22392be-528e-44da-8490-342f95d79b1c,"	public int getID()
	{
		return ID;
	}
"
2915,06061b9f-ce98-453f-80b0-b5f908ccd414,"	public LoginFrame()
	{
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			e.printStackTrace();
		}
		getContentPane().setFont(arial);
		setTitle(""GGC Chat Login"");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 270, 297);
		setResizable(false);
		setLocationRelativeTo(null);
		getContentPane().setLayout(null);
		
		JLabel lblUsername = new JLabel(""Username"");
		lblUsername.setFont(arial);
		lblUsername.setBounds(88, 21, 71, 14);
		getContentPane().add(lblUsername);
		
		txtUsername = new JTextField();
		txtUsername.setFont(arial);
		txtUsername.setBounds(52, 52, 149, 20);
		getContentPane().add(txtUsername);
		txtUsername.setColumns(10);
		
		JLabel lblServIP = new JLabel(""Server IP"");
		lblServIP.setFont(arial);
		lblServIP.setBounds(88, 83, 64, 14);
		getContentPane().add(lblServIP);
		
		txtServIP = new JTextField();
		txtServIP.setFont(arial);
		txtServIP.setBounds(52, 108, 149, 20);
		getContentPane().add(txtServIP);
		txtServIP.setColumns(10);
		
		lblServPort = new JLabel(""Server Port"");
		lblServPort.setFont(arial);
		lblServPort.setBounds(88, 139, 74, 14);
		getContentPane().add(lblServPort);
		
		txtServPort = new JTextField();
		txtServPort.setFont(arial);
		txtServPort.setBounds(52, 164, 149, 20);
		getContentPane().add(txtServPort);
		txtServPort.setColumns(10);
		
		JButton btnConnect = new JButton(""Connect"");
		btnConnect.setFont(arial);
		btnConnect.setBounds(83, 212, 89, 23);
		btnConnect.addActionListener(this);
		getContentPane().add(btnConnect);
	}
"
2916,7aaa38be-7a09-43c1-9289-38e887030383,"	public void actionPerformed(ActionEvent e)
	{
		String userName = txtUsername.getText();
		String IP = txtServIP.getText();
		int port = 12345;//The default port
		try {
			port = Integer.parseInt(txtServPort.getText());
		}catch(NumberFormatException ex) {
			ex.printStackTrace();
			txtServPort.setText(""Must be a number"");
		}
		dispose();
		final Client client = new Client(userName, IP, port);
		client.openConnection();
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				ClientGui gui = new ClientGui(client);
				gui.setVisible(true);
				gui.listen();
			}
		});
	}
"
2917,95f51ba3-b888-4ef8-ac54-8e5bb1b85695,"			public void run() {
				ClientGui gui = new ClientGui(client);
				gui.setVisible(true);
				gui.listen();
			}
"
2918,648029c9-2307-49e7-a171-963b0019281d,"	public static void main(String[] args)
	{
		EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				try
				{
					LoginFrame frame = new LoginFrame();
					frame.setVisible(true);
				} catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		});
	}
"
2919,749e3c99-08dc-48d8-91bb-49c22e050813,"			public void run()
			{
				try
				{
					LoginFrame frame = new LoginFrame();
					frame.setVisible(true);
				} catch (Exception e)
				{
					e.printStackTrace();
				}
			}
"
2920,60d72db0-95b6-4653-a254-e5595af4bfe5,"	public ClientGui(final Client client)
	{
		this.client = client;
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			e.printStackTrace();
		}
		setTitle(""GGC Chat"");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 750, 500);
		contentPane = new JPanel();
		contentPane.setBackground(SystemColor.menu);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setLocationRelativeTo(null);
		setContentPane(contentPane);

		console = new JTextArea();
		console.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		console.setForeground(SystemColor.textText);
		console.setFont(new Font(""Arial"", Font.PLAIN, 12));
		console.setLineWrap(true);
		console.setEnabled(false);
		
		JScrollPane conScrollPane = new JScrollPane(console);

		txtMessage = new JTextField();
		txtMessage.setFont(new Font(""Consolas"", Font.PLAIN, 12));
		txtMessage.addKeyListener(new ClientListener());
		txtMessage.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		txtMessage.setColumns(10);

		JButton btnSend = new JButton(""Send"");
		btnSend.addActionListener(new ClientListener());
		GroupLayout gl_contentPane = new GroupLayout(contentPane);
		gl_contentPane.setHorizontalGroup(
			gl_contentPane.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addComponent(conScrollPane, GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
						.addGroup(Alignment.TRAILING, gl_contentPane.createSequentialGroup()
							.addComponent(txtMessage, GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
							.addGap(18)
							.addComponent(btnSend)))
					.addContainerGap())
		);
		gl_contentPane.setVerticalGroup(
			gl_contentPane.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addGap(2)
					.addComponent(conScrollPane, GroupLayout.PREFERRED_SIZE, 375, GroupLayout.PREFERRED_SIZE)
					.addGap(18)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
						.addComponent(txtMessage, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(btnSend)))
		);
		contentPane.setLayout(gl_contentPane);
		
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				client.close();
			}
		});
	}
"
2921,efe0a64d-c490-49df-b183-87f58b416ff4,"			public void windowClosing(WindowEvent e) {
				client.close();
			}
"
2922,3dc42eb4-3b83-4ced-9386-45b039d78a88,"	public void listen()
	{
		client.send("""", Client.CONNECT);
		new Thread(new Runnable() {
			public void run() {
				while(client.isRunning()) {
					synchronized (client) {
						DatagramPacket packet = client.receive();
						String msg = client.processPacket(packet);
						appendToConsole(msg);
					}
				}
			}
		}, ""Client-Listener"").start();
	}
"
2923,e9af497e-fbff-48e0-b4c3-1110c65dab40,"			public void run() {
				while(client.isRunning()) {
					synchronized (client) {
						DatagramPacket packet = client.receive();
						String msg = client.processPacket(packet);
						appendToConsole(msg);
					}
				}
			}
"
2924,2c5eeaab-0b87-48a3-b288-c9fc3d2c6420,"	public void appendToConsole(final String msg)
	{
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				console.append(msg + ""\n"");
			}
		});
	}
"
2925,dad1c8e0-893b-44eb-b4c8-45e7e5ea4e11,"			public void run() {
				console.append(msg + ""\n"");
			}
"
2926,4c236d34-9291-474a-bec0-0da9c9d13310,"		public void keyPressed(KeyEvent e)
		{
			if(e.getKeyCode() == KeyEvent.VK_ENTER)
			{
				sendToClient();
			}
		}
"
2927,bd135f9b-20a3-459d-a95b-65310e33a5bb,"		public void actionPerformed(ActionEvent e)
		{
			sendToClient();
		}
"
2928,9d4c214a-0f35-4e24-bc47-0edc82591e1c,"		private void sendToClient()
		{
			String msg = txtMessage.getText();
			client.send(msg, Client.MESSAGE);
			txtMessage.setText("""");
		}
"
2929,225d18e3-18c4-4133-a7d8-4087d284f686,"	void processPacket(DatagramPacket packet);
"
2930,c56a34eb-fc43-49c3-9d38-91942fe9eab2,"	boolean isRunning();
"
2931,b88d655a-a131-481e-a025-49cd55cda761,"	DatagramSocket getSocket();
"
2932,ca9f8929-383e-4a55-8f73-417ddaba4c9f,"	public MsgReceiver(PacketProcessor processor, String threadName)
	{
		super(threadName);
		this.processor = processor;
		this.socket = processor.getSocket();
	}
"
2933,92c0326d-f0b3-4a36-b269-89c9ae5a6aa5,"	@Override
	public void run()
	{
		while(processor.isRunning())
		{
			byte[] data = new byte[1024];
			DatagramPacket packet = new DatagramPacket(data, data.length);
			try {
				socket.receive(packet);
			} catch(SocketException e) {
				
			} catch(IOException e) {
				e.printStackTrace();
			}
			processor.processPacket(packet);
		}
	}
"
2934,f1fa0f7b-2374-481b-8e03-fa70a9985e46,"	public MsgSender(DatagramSocket socket, byte[] data, ServerClient client)
	{
		super(""Sender"");
		this.socket = socket;
		this.data = data;
		this.address = client.getAddress();
		this.port = client.getPort();
	}
"
2935,b12236e8-8ffa-425f-9d9b-17bd060149a8,"	public MsgSender(DatagramSocket socket, byte[] data, InetAddress address, int port)
	{
		super(""Sender"");
		this.socket = socket;
		this.data = data;
		this.address = address;
		this.port = port;
	}
"
2936,08c0f5aa-4ab4-451b-9cbd-dcab2e66453e,"	@Override
	public void run()
	{
		DatagramPacket packet = new DatagramPacket(data, data.length, address, port);
		try
		{
			socket.send(packet);
		} catch (IOException e)
		{
			e.printStackTrace();
		}
	}
"
2937,66504d71-4dff-4022-ba76-05fb8a82bd66,"    public SQL(Meowzy bot) {
        this.bot = bot;
    }
"
2938,a85f5339-bc2c-4faa-9d9b-8bbf90df998b,"    public void sqlConnect() {
        try {
            Class.forName(""org.sqlite.JDBC"");
            connection = DriverManager.getConnection(""jdbc:sqlite:meowzy.db"");
        } catch (ClassNotFoundException e) {
            Log.consoleLog(""Error"", ""Could not connect to database. (ClassNotFoundException)"");
            e.printStackTrace();
        } catch (SQLException e) {
            Log.consoleLog(""Error"", ""Could not connect to database. (SQLException)"");
            e.printStackTrace();
        }
    }
"
2939,d4632720-2d37-4f7d-bce7-29526ce4e4f8,"    public void sqlDisconnect() {
        try {
            connection.close();
        } catch (SQLException e) {
            Log.consoleLog(""Error"", ""Could not close connection to database."");
            e.printStackTrace();
        }
    }
"
2940,3818b68f-73ef-4ef6-8404-199be095f1f4,"    public void resetDatabase() {
        sqlConnect();
        
        Log.consoleLog(""Resetting database file"");
        
        Statement statement;
        
        try {
            statement = connection.createStatement();
            statement.executeUpdate(""DROP TABLE IF EXISTS aliases;"");
            statement.executeUpdate(""DROP TABLE IF EXISTS notes;"");
            statement.executeUpdate(""DROP TABLE IF EXISTS accesslist;"");
            statement.executeUpdate(""CREATE TABLE aliases (alias, response, creator);"");
            statement.executeUpdate(""CREATE TABLE accesslist (nick, hostname, level);"");
            statement.executeUpdate(""CREATE TABLE notes (sender, receiver, message, channel);"");
        } catch (SQLException e) {
            Log.consoleLog(""Error"", ""Failed to reset database."");
            e.printStackTrace();
        }
        
        sqlDisconnect();
    }
"
2941,555a8969-81cc-4bd5-8216-b7faf76a1ba7,"    public void checkNote(String channel, String sender) {
        sqlConnect();
        
        Statement statement;
        boolean noteSent = false;
        
        try {
            statement = connection.createStatement();
            Statement deleteStatement = connection.createStatement();
            ResultSet results = statement.executeQuery(""SELECT * FROM notes WHERE receiver = '"" + sender + ""';""); // AND channel = '"" + channel + ""'
            String finalMessage = """";
            while (results.next()){
                if (sender.equalsIgnoreCase(results.getString(""receiver""))) {
    
                    if (!noteSent) {
                        finalMessage += sender + "", you have notes: "";
                        Log.consoleLog(""Giving "" + sender + "" their notes."");
                        noteSent = true;
                    }
                    // This is probably stupid but woo who cares :D
                    String message_toSend = results.getString(""message"").toString().replace(""<BACKSLASH>"", ""\\"").replace(""<APOSTROPHE>"", ""'"");
                    finalMessage += ""<"" + results.getString(""sender"") + ""> "" + message_toSend + ""  "";
                    
                    deleteStatement.executeUpdate(""DELETE FROM notes WHERE message = '"" + results.getString(""message"") + ""' AND channel = '"" + channel + ""'"");

                }
            }
            if(noteSent) {
                this.bot.sendMessage(channel, finalMessage);
            }
        } catch (SQLException e) {
            Log.consoleLog(""Error"", ""Failed to check for notes."");
            e.printStackTrace();
        }
        
        sqlDisconnect();
    }
"
2942,bfe3380f-755b-4027-ab4a-85dbd73a1ac2,"    public void addNote(String channel, String sender, String message) {
        String[] split = message.split("" "");
        
        if(message.equalsIgnoreCase(Config.getCommandPrefix() + ""note"")) {
            this.bot.sendMessage(channel, ""No receiver specified, please try again."");
            return;
        } 
        
        if(split[1].equalsIgnoreCase(this.bot.getNick())) {
            this.bot.sendMessage(channel, ""I don't take notes..."");
            return;
        }
        
        if(message.equalsIgnoreCase(split[0] + "" "" + split[1])) {
            this.bot.sendMessage(channel, ""You didn't give me a message to store, please try again."");
            return;
        }
        
        sqlConnect();
        
        // This is probably stupid but woo who cares :D
        String noteToDB = Util.combineSplit(2, split, "" "").replace(""'"", ""<APOSTROPHE>"").replace(""\\"", ""<BACKSLASH>"");
        Statement statement;
        
        try {
            statement = connection.createStatement();
            statement.executeUpdate(""INSERT INTO notes (sender, receiver, message, channel) VALUES ('"" + sender + ""','"" + split[1] + ""','"" + noteToDB + ""','"" + channel + ""')"");
            this.bot.sendMessage(channel, ""Note Stored."");
            Log.consoleLog(""Storing note from: "" + sender);
        } catch (SQLException e) {
            Log.consoleLog(""Error"", ""Failed to check for notes."");
            this.bot.sendMessage(channel, ""Woops, I broke something, try again."");
            e.printStackTrace();
        } 
        
        sqlDisconnect();
    }
"
2943,4626fd34-5e30-40f0-9429-ca486a086e59,"    public Config(Meowzy bot) {
        this.bot = bot;
        loadConfiguration();
    }
"
2944,595960d2-6cbc-49fe-abaf-671812fa9bdc,"    public static void saveNewConfiguration() {
        // TODO: Generate config
    }
"
2945,e5c50522-5d56-4618-b8a2-69e263e75cdd,"    public static void loadConfiguration() {
        Properties configuration = new Properties();
        Log.consoleLog(""Loading configuration file."");
        try {
            configuration.load(new FileInputStream(configurationFile));
        } catch (IOException ex) {
            Log.consoleLog(""Error"", ""Cannot load configuration file."");
            // TODO: meowzy.shutDown();
            ex.printStackTrace();
            return;
        }
        Log.consoleLog(""Configuration file loaded."");

        // Bot
        botNickname = configuration.getProperty(""Nickname"");
        botAuthMethod = configuration.getProperty(""Auth_Method"");
        botAuthPassword = configuration.getProperty(""Auth_Password"");
        botLogin = configuration.getProperty(""Login"");
        botVersion = configuration.getProperty(""Version"");
        botFinger = configuration.getProperty(""Finger"");
        botMessageDelay = Integer.parseInt(configuration.getProperty(""Message_Delay""));
        botChannels = configuration.getProperty(""Channels"").split(""@"");
        botAutoNickChange = Boolean.parseBoolean(configuration.getProperty(""Auto_Nick_Change""));
        botWelcomeUsers = Boolean.parseBoolean(configuration.getProperty(""Welcome_Users""));
        botWelcomeMessage = configuration.getProperty(""Welcome_Message"");
        botCommandPrefix = configuration.getProperty(""Command_Prefix"");

        // Users
        usersAccessList = configuration.getProperty(""Access_List"").split(""@"");
        usersOpAddAlias = Boolean.parseBoolean(configuration.getProperty(""Op_Can_Add_Alias""));
        usersVoiceAddAlias = Boolean.parseBoolean(configuration.getProperty(""Voice_Can_Add_Alias""));
        // Server
        serverAddress = configuration.getProperty(""Server_Address"");
        serverPassword = configuration.getProperty(""Server_Password"");
        serverPort = Integer.parseInt(configuration.getProperty(""Server_Port""));

        // Dev
        devVerboseOutput = Boolean.parseBoolean(configuration.getProperty(""Output_Verbose""));
        devStateVersionOnJoin = Boolean.parseBoolean(configuration.getProperty(""State_Version_On_Join""));
    }
"
2946,28e32e45-1c41-44f0-a033-09118eabe7de,"    public static String getNick() {
        return botNickname;
    }
"
2947,11609880-fcb9-430d-9f46-f5027248d447,"    public static String getAuthMethod() {
        return botAuthMethod;
    }
"
2948,274a74d1-d94d-4a9e-b427-a10dbad546eb,"    public static String getAuthPassword() {
        return botAuthPassword;
    }
"
2949,b6418ba8-8a6d-4557-be77-0e1cf398c0bb,"    public static String getLogin() {
        return botLogin;
    }
"
2950,94d4c9f2-90d7-42ba-ab22-fb44afbded7d,"    public static String getVersion() {
        return botVersion;
    }
"
2951,4baa7131-d6ee-475f-bcfd-b8f63134166f,"    public static String getFinger() {
        return botFinger;
    }
"
2952,db2226c7-781b-46a8-89fa-1d6a6e3a3f0c,"    public static int getMessageDelay() {
        return botMessageDelay;
    }
"
2953,fc3e077f-0840-48cf-85db-68bf26582015,"    public static String[] getChannels() {
        return botChannels;
    }
"
2954,da573f41-930a-40bb-9431-010c59378736,"    public static boolean getAutoNickChange() {
        return botAutoNickChange;
    }
"
2955,b749787a-d1d6-4b73-a911-7a1ef4896267,"    public static boolean getWelcomeUsers() {
        return botWelcomeUsers;
    }
"
2956,4cb2ad26-3783-4fa8-bab0-1b5a5c4c7844,"    public static String getWelcomeMessage() {
        return botWelcomeMessage;
    }
"
2957,f4f77881-f279-4c0a-b307-5a7413994211,"    public static String getCommandPrefix() {
        return botCommandPrefix;
    }
"
2958,afdbd8fe-f0b9-41b4-9bab-92c3e3cc8df5,"    public static String getServerAddress() {
        return serverAddress;
    }
"
2959,f82c74ab-ea17-482d-82a4-8d99b9903493,"    public static String getServerPassword() {
        return serverPassword;
    }
"
2960,eaa7faee-179e-45fa-a47c-c9f25ac7e150,"    public static int getServerPort() {
        return serverPort;
    }
"
2961,1563ab01-0495-400b-b9e0-18668de73825,"    public static String[] getAccessList() {
        return usersAccessList;
    }
"
2962,d7819b8c-938e-45e8-a6fe-dd61ad5ccbcf,"    public static boolean getOpCanAddAlias() {
        return usersOpAddAlias;
    }
"
2963,018f02be-e275-4fd5-b0a5-caf279576fc0,"    public static boolean getVoiceCanAddAlias() {
        return usersVoiceAddAlias;
    }
"
2964,36bba5e2-5d87-4421-8560-1e5530d734bd,"    public static boolean getVersboseOutput() {
        return devVerboseOutput;
    }
"
2965,d870471c-b653-4506-8ccb-a34422e5a9d8,"    public static boolean getStateVersionOnJoin() {
        return devStateVersionOnJoin;
    }
"
2966,6c5444b2-53ff-4e0a-b278-8e9e7ff4a24d,"    public static void main(String[] args) {

        Meowzy bot = new Meowzy();

        Log.consoleLog(""Starting up..."");

        Config.loadConfiguration();
        
        File check = new File(""meowzy.db"");
        if(!check.exists()) {
            bot.sql.resetDatabase();
        }

        try {
            bot.connect(Config.getServerAddress());
        } catch (NickAlreadyInUseException e) {
            if (!Config.getAutoNickChange()) {
                Log.consoleLog(""Error"", ""Could not connect to server: "" + Config.getServerAddress());
                e.printStackTrace();
            } else {
                Log.consoleLog(""Error"", ""Nick already in use!"");
            }
        } catch (IOException e) {
            Log.consoleLog(""Error"", ""Could not connect to server: "" + Config.getServerAddress());
            e.printStackTrace();
        } catch (IrcException e) {
            Log.consoleLog(""Error"", ""Could not connect to server: "" + Config.getServerAddress());
            e.printStackTrace();
        }
    }
"
2967,fa32f1b2-83e2-4e6f-a6f0-2fade2fad15c,"    public Meowzy() {

        Config.loadConfiguration();

        this.setName(Config.getNick());
        this.setLogin(Config.getLogin());
        this.setVersion(Config.getVersion());
        this.setFinger(Config.getFinger());
        this.setAutoNickChange(Config.getAutoNickChange());
        this.setMessageDelay(Config.getMessageDelay());
        this.setVerbose(Config.getVersboseOutput());

        this.commands.add(new HelpCommand(this));
        //this.commands.add(new MeowzyCommand(this));
        //this.commands.add(new AliasCommand(this));
        this.commands.add(new NoteCommand(this));
        this.commands.add(new ServersCommand(this));
        this.commands.add(new McStatusCommand(this));
        this.commands.add(new FMLCommand(this));
    }
"
2968,367da2c3-fff2-4c49-9cbd-3f43a54a630c,"    public void onConnect() {
        Log.consoleLog(""Connected!"");
        authenticate();
    }
"
2969,a2ac6bc4-26d5-4ebf-bce2-6474d416686b,"    public void authenticate() {
        Log.consoleLog(""Authenticating with "" + Config.getAuthMethod() + ""..."");
        if (Config.getAuthMethod().equalsIgnoreCase(""NickServ"")) {
            identify(Config.getAuthPassword());
        } else if (Config.getAuthMethod().equalsIgnoreCase(""AuthServ"")) {
            sendMessage(""AuthServ@services.gamesurge.net"", ""AUTH Kieraanbreeze "" + Config.getAuthPassword());
        } else {
            Log.consoleLog(""Warn"", ""Unknown authentication method. ("" + Config.getAuthMethod() + "")"");
            dontAuth = true;
        }
        authed = true;
        joinChannels();
    }
"
2970,5aa5c447-48a3-4fe1-8710-dd0baaa083c6,"    public void joinChannels() {
        if (!authed && !dontAuth) {
            authenticate();
            return;
        }
        Log.consoleLog(""Joining channels..."");
        for (String channel : Config.getChannels()) {
            joinChannel(channel);
        }
    }
"
2971,21e857b0-4df7-4e72-b594-d401a886d37c,"    public void onJoin(String channel, String sender, String login, String hostname) {
        if (sender.equalsIgnoreCase(getNick())) {
            Log.consoleLog(""Info"", ""Joined channel: "" + channel);
            if (Config.getStateVersionOnJoin()) {
                sendMessage(channel, Config.getVersion());
            }
            return;
        }

        Log.consoleLog(""Join"", sender + "" just joined "" + channel);
        if (Config.getWelcomeUsers()) {
            sendMessage(channel, Config.getWelcomeMessage().replace(""<sender>"", sender).replace(""<channel>"", channel));
        }

    }
"
2972,37064617-102c-4419-b4ca-73703a9a4b81,"    public void onMessage(String channel, String sender, String login, String hostname, String message) {
        String msg = message.toLowerCase();
        String[] msgSplit = msg.split("" "");

        for (int i = 0; i < msgSplit.length; i++) {
            String urlTitle = """";

            if (isYoutube(msgSplit[i])) {
                /*try {
                    urlTitle = ""Youtube"";//getYoutubeInfo(msgSplit[i]);
                    sendMessage(channel, sender + ""'s YouTube URL: "" + urlTitle);
                    break;
                } catch (Exception ex1) {
                    ex1.printStackTrace();
                }*/
                break;
            } else if (isUrl(msgSplit[i])) {
                try {
                    urlTitle = getWebpageTitle(msgSplit[i]);
                    sendMessage(channel, sender + ""'s URL: "" + urlTitle);
                    break;
                } catch (Exception ex1) {
                    ex1.printStackTrace();
                }
            } 
        }

        if (!sender.equalsIgnoreCase(getNick())) {
            sql.checkNote(channel, sender);
        }

        if (msgSplit[0].startsWith(Config.getCommandPrefix())) {
            String commandName = msgSplit[0].replace(Config.getCommandPrefix(), """");

            for (MasterCommand command : commands) {
                if (commandName.equalsIgnoreCase(command.getCommandName())) {
                    Log.consoleLog(""Command"", sender + "" issued command: "" + message);
                    command.exec(channel, sender, commandName, msgSplit, login, hostname, message);
                }
            }
            return;
        }

        Log.consoleLog(""Message"", ""<"" + channel + ""> "" + sender + "": "" + message);

    }
"
2973,1384cb08-12d1-425f-9994-076fec94dc77,"    public void onKick(String channel, String kickerNick, String kickerLogin, String kickerHostname, String recipientNick, String reason) {
        if (recipientNick.equalsIgnoreCase(getNick())) {
            joinChannel(channel);
        }
    }
"
2974,ef4f5e8f-4b97-40e1-9c69-c090635e2284,"    public void onInvite(String targetNick, String sourceNick, String sourceLogin, String sourceHostname, String channel) {
        if (targetNick.equalsIgnoreCase(getNick())) {
            if (sourceNick.equalsIgnoreCase(""ChanServ"")) {
                channel = channel.replace(""ChanServ!ChanServ@Services.GameSurge.net INVITE Meowzy "", """");
            }
            Log.consoleLog(""Invite"", ""Being invited to "" + channel + "" by "" + sourceNick + "" ("" + sourceLogin + ""@"" + sourceHostname + "")"");
            if (sourceHostname.equalsIgnoreCase(""irc.kieraan.co.uk"") || sourceNick.equalsIgnoreCase(""ChanServ"")) {
                Log.consoleLog(""Invite"", ""Accepting "" + sourceNick + ""'s invite to "" + channel);
                joinChannel(channel);
            }
        }
    }
"
2975,b104d47c-857e-4423-9212-ed026bdab664,"    public void reConnect() {
        try {
            reconnect();
        } catch (Exception e) {
            try {
                Thread.sleep(10000);
                reConnect();
            } catch (Exception anye) {
                // Fail
            }
        }
    }
"
2976,e11fcb23-b40c-474b-b6b5-2959df0af7e1,"    public void onDisconnect() {
        while (!isConnected()) {
            authed = false;
            dontAuth = false;
            reConnect();
        }
    }
"
2977,3aa098ec-6907-4dcf-88ab-c64facf3466d,"    public boolean isInChannel(String channel, String bot) {
        for (User user : getUsers(channel)) {
            if (bot.equalsIgnoreCase(""%note"") && user.getNick().equalsIgnoreCase(""Kitteh"")) {
                return true;
            }
            if (bot.equalsIgnoreCase(""!note"") && user.getNick().equalsIgnoreCase(""benderj2"")) {
                return true;
            }
            if (bot.equalsIgnoreCase("".note"")) {
                if (user.getNick().equalsIgnoreCase(""Kitteh"") || user.getNick().equalsIgnoreCase(""benderj2"")) {
                    return true;
                }
            }

        }
        return false;
    }
"
2978,c4caf240-d9ee-4838-aae4-dad1eb16d60a,"    public static String getWebpageTitle(String s) {
        //Stolen from https://github.com/zack6849/Alphabot/blob/master/src/com/zack6849/alphabot/Utils.java :3
        String title = """";
        String error = ""none!"";
        try {
            Document doc = Jsoup.connect(s).userAgent(""Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.56 Safari/537.17"").get();

            Elements links = doc.select(""title"");
            for (Element e1 : links) {
                title += e1.text().replaceAll(""\n"", """").replaceAll(""\\s+"", "" "");
            }
        } catch (Exception e) {
            error = e.toString().split("":"")[1].split(""Status="")[1].split("","")[0];
        }
        if (!error.equalsIgnoreCase(""none"")) {
            if (error.contains(""404"")) {
                return ""Error: 404"";
            }
            if (error.contains(""502"")) {
                return ""Error: 502"";
            }
            if (error.contains(""401"")) {
                return ""Error: 401"";
            }
            if (error.contains(""403"")) {
                return ""Error: 403"";
            }
            if (error.contains(""500"")) {
                return ""Error: 500"";
            }
            if (error.contains(""503"")) {
                return ""Error: 503"";
            }
        }
        return title;
    }
"
2979,f01381e8-9b98-43c6-a015-7150740d5b18,"    public static boolean isUrl(String s) {
        String url_regex = ""^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"";
        Pattern p = Pattern.compile(url_regex);
        Matcher m = p.matcher(s);
        if (m.find()) {
            return true;
        } else {
            return false;
        }
    }
"
2980,82abd91a-dc26-4c0a-b108-36e0d570c243,"    public static boolean isYoutube(String s) {
        String url_regex = ""https?:\\/\\/(?:[0-9A-Z-]+\\.)?(?:youtu\\.be\\/|youtube\\.com\\S*[^\\w\\-\\s])([\\w\\-]{11})(?=[^\\w\\-]|$)(?![?=&+%\\w]*(?:['\""][^<>]*>|<\\/a>))[?=&+%\\w]*"";
        Pattern p = Pattern.compile(url_regex, Pattern.CASE_INSENSITIVE);
        Matcher m = p.matcher(s);
        while (m.find()) {
            return true;
        } 
        return false;
    }
"
2981,758fceec-5e47-41b1-a17e-9a82b74a12ef,"    public static String getYoutubeInfo(String s) throws IOException {
        String info;
        String title = null;
        String likes = null;
        String dislikes = null;
        String user = null;
        String veiws = null;
        @SuppressWarnings(""unused"")
        String publishdate;
        Document doc = Jsoup.connect(s).userAgent(""Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17"").get();
        for (Element e : doc.select(""a"")) {
            if (e.attr(""class"").equalsIgnoreCase(""yt-uix-sessionlink yt-user-videos"")) {
                user = e.attr(""href"").split(""/user/"")[1].split(""/"")[0];
            }
        }
        for (Element e : doc.select(""span"")) {
            if (e.attr(""class"").equalsIgnoreCase(""watch-view-count"")) {
                veiws = e.text();
            }
            if (e.attr(""class"").equalsIgnoreCase(""likes-count"")) {
                likes = e.text();
            }
            if (e.attr(""class"").equalsIgnoreCase(""dislikes-count"")) {
                dislikes = e.text();
            }
            if (e.attr(""class"").equalsIgnoreCase(""watch-title  yt-uix-expander-head"") || e.attr(""class"").equalsIgnoreCase(""watch-title long-title yt-uix-expander-head"")) {
                title = e.text();
            }
            if (e.attr(""class"").equalsIgnoreCase(""watch-video-date"")) {
                publishdate = e.text();
            }
        }
        info = title + "" - "" + user + ""  Views: "" + veiws + ""  Likes: "" + likes + ""  Dislikes: "" + dislikes;
        //System.out.println(info);
        return info;
    }
"
2982,7202c6b8-61e8-4a85-99a6-15bc0370c744,"    public String getCommandName();
"
2983,1f306127-0d90-4c86-8d51-a7e4f0e8b4b9,"    public void exec(String channel, String sender, String commandName, String[] args, String login, String hostname, String message);
"
2984,49b2c41d-9800-4b6a-8af2-81baca8ed316,"    public static String combineSplit(int startIndex, String[] string, String seperator) {
        final StringBuilder builder = new StringBuilder();
        for (int i = startIndex; i < string.length; i++) {
            builder.append(string[i]);
            builder.append(seperator);
        }
        builder.deleteCharAt(builder.length() - seperator.length());
        return builder.toString();
    }
"
2985,c99cacba-c75d-496e-8162-84f13b61ce81,"    public static void consoleLog(String type, String logMessage) {
        type = type.toUpperCase();
        String time = new Date().toString();
        System.out.println(time + "" ["" + type + ""] "" + logMessage);
    }
"
2986,22674a4a-e8e6-4bf1-9def-e37a6b261805,"    public static void consoleLog(String logMessage) {
        String time = new Date().toString();
        System.out.println(time + "" [INFO] "" + logMessage);
    }
"
2987,52db59e0-91c4-4ff7-870b-34390b57ca75,"    public MeowzyCommand(Meowzy bot) {
        this.bot = bot;
    }
"
2988,9c3ccc2a-3f58-4b6f-ba66-17486e0b77fb,"    @Override
    public String getCommandName() {
        return ""meowzy"";
    }
"
2989,fd18e38c-b038-416a-bfce-c20deb59928f,"    @Override
    public void exec(String channel, String sender, String commandName, String[] args, String login, String hostname, String message) {
        bot.sendMessage(channel, ""MeowzyCommand"");
        
    }
"
2990,c940b5e8-0000-450f-a91c-da3a1c77a361,"    public AliasCommand(Meowzy bot) {
        this.bot = bot;
    }
"
2991,8a33d509-e2bd-4d3b-a6cd-b17e15abaf09,"    @Override
    public String getCommandName() {
        return ""alias"";
    }
"
2992,e1ce4d2c-38b3-4074-bc83-167fe70c03a3,"    @Override
    public void exec(String channel, String sender, String commandName, String[] args, String login, String hostname, String message) {
        bot.sendMessage(channel, ""AliasCommand"");

    }
"
2993,eb1fc9f3-215b-4b3b-a506-5028b3befbd5,"    public FMLCommand(Meowzy bot) {
        this.bot = bot;
    }
"
2994,3f40d5b9-cb5c-4ba4-8ac7-6c7a1154c722,"    @Override
    public String getCommandName() {
        return ""fml"";
    }
"
2995,f41837e0-745a-4fb3-8184-48d2abb3533d,"    @Override
    public void exec(String channel, String sender, String commandName, String[] args, String login, String hostname, String message) {
        String fmlMessage = """";
        try {
            URL url = new URL(""http://rscript.org/lookup.php?type=fml"");
            BufferedReader bReader = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((fmlMessage = bReader.readLine()) != null) {
                if (fmlMessage.startsWith(""TEXT: "")) {
                    fmlMessage = fmlMessage.replace(""TEXT: "", """");
                    break;
                } 
            }
        } catch (IOException ex) {
            if (ex.getMessage().contains(""503"")) {
                this.bot.sendMessage(channel, ""Error: 503"");
            }
            if (ex.getMessage().contains(""404"")) {
                this.bot.sendMessage(channel, ""Error: 503"");
            }
        }
        this.bot.sendMessage(channel, ""[FML] "" + fmlMessage);
    }
"
2996,746de03d-6975-40de-af36-2b6db64361d1,"    public HelpCommand(Meowzy bot) {
        this.bot = bot;
    }
"
2997,e2978694-3883-438d-8421-8af4bb28265f,"    @Override
    public String getCommandName() {
        return ""help"";
    }
"
2998,8e53187e-3bed-4f1e-86ac-780cdabc9438,"    @Override
    public void exec(String channel, String sender, String commandName, String[] args, String login, String hostname, String message) {
        String response = ""Commands: "";
        
        for (MasterCommand command : bot.commands) {
            response += Config.getCommandPrefix() + command.getCommandName() + "" "";
        }
        
        bot.sendMessage(channel, response);
    }
"
2999,c466a4d9-6207-4724-aeab-76add428d4fe,"    public ServersCommand(Meowzy bot) {
        this.bot = bot;
    }
"
3000,1e513ef3-c49e-46fd-94ed-96f6e7437c78,"    @Override
    public String getCommandName() {
        return ""servers"";
    }
"
3001,fe777405-6685-479b-b27a-7e5e2c7af074,"    @Override
    public void exec(String channel, String sender, String commandName, String[] args, String login, String hostname, String message) {
        try {
            SourceServer tf4 = new SourceServer(""tf4.joe.to"");
            tf4.initialize();
            System.out.println(tf4.getServerInfo());
            this.bot.sendMessage(channel, ""[TF4] Map: "" + tf4.getServerInfo().get(""mapName"") + ""  Players: "" + tf4.getServerInfo().get(""numberOfPlayers"") + "" / "" + tf4.getServerInfo().get(""maxPlayers""));
          } catch (TimeoutException e) {
              this.bot.sendMessage(channel, ""[TF4] Error: Timed out."");
              e.printStackTrace();
          } catch (SteamCondenserException e) {
              this.bot.sendMessage(channel, ""[TF4] Error: I don't even know what went wrong."");
              e.printStackTrace();
          }
        
        try {
          SourceServer tf5 = new SourceServer(""tf5.joe.to"");
          tf5.initialize();
          System.out.println(tf5.getServerInfo());
          this.bot.sendMessage(channel, ""[TF5] Map: "" + tf5.getServerInfo().get(""mapName"") + ""  Players: "" + tf5.getServerInfo().get(""numberOfPlayers"") + "" / "" + tf5.getServerInfo().get(""maxPlayers""));
        } catch (TimeoutException e) {
            this.bot.sendMessage(channel, ""[TF5] Error: Timed out."");
            e.printStackTrace();
        } catch (SteamCondenserException e) {
            this.bot.sendMessage(channel, ""[TF5] Error: I don't even know what went wrong."");
            e.printStackTrace();
        }

    }
"
3002,df31bd16-8c33-4605-94b9-fcfc4823d8a2,"    public NoteCommand(Meowzy bot) {
        this.bot = bot;
    }
"
3003,62529589-f461-4ba4-a3ef-607fa07334b0,"    @Override
    public String getCommandName() {
        return ""note"";
    }
"
3004,efbae7fc-79a1-4226-b378-867505230d72,"    @Override
    public void exec(String channel, String sender, String commandName, String[] args, String login, String hostname, String message) {
        if(this.bot.isInChannel(channel, args[0])) {
            this.bot.sendMessage(channel, ""There's a proper bot in the channel, use them instead!"");
            return;
        }
        bot.sql.addNote(channel, sender, message);
    }
"
3005,55cfec0b-b97a-46ba-aeff-1a440a46305f,"    public EulerTest() {
        tol = 0.0001;
    }
"
3006,c86e0976-e827-4bc6-8539-284fd0df56ad,"    @BeforeClass
    public static void setUpClass() {
    }
"
3007,99951b44-5460-41db-9401-56f60734daa4,"    @AfterClass
    public static void tearDownClass() {
    }
"
3008,52a7611e-66ea-4d4e-87eb-efdd33a6dc50,"    @Before
    public void setUp() {
    }
"
3009,806a42de-5f33-4083-8145-3d7803e37991,"    @After
    public void tearDown() {
    }
"
3010,f6d6327a-dfd6-45df-a953-518d7ade8b8f,"    @Test
    public void solveTest() {
        Euler e = new Euler();
        
        double[][] expResult = {
            {0,1},
            {0.5,5.25},
            {1,5.875},
            {1.5,5.125}
        };
    
        DifferentialEquation f1 = new F1();
        
        double[] initialCondition = {0,1};
        double lastX = 1.5;
        double step = 0.5;
        double[][] result =e.solve( f1, initialCondition,lastX,step);
        
        assertArrayEquals(expResult, result);
       
    }
"
3011,eb7a0b4b-bfc0-431d-96cb-9b7c369c7044,"    @Test 
    public void solveODETest(){
        Euler  e = new Euler();
        double[][]  expResult ={
            {0,4,6},
            {0.5,3,6.9},
            {1,2.25,7.715},
            {1.5,1.6875,8.44525}
        };
        
        DifferentialEquation y1 = new Y1();
        DifferentialEquation y2 = new Y2();
        
        ODESystem sis = new ODESystem(y1,y2);
        
        double[] initialCondition = {0,4,6};
        double lastX = 1.5;
        double step = 0.5;
        
        double[][] result = e.solveOde(sis,initialCondition, lastX, step);
   
     //   assertArrayEquals(expResult, result  );
        
        for( int i = 0; i < result.length; i++){
            double[] res = result[i];
            double[] expres = expResult[i];
            
            double x = res[0];
            double yr1 = res[1];
            double yr2 = res[2];
            
            double expx = expres[0];
            double expy1 = expres[1];
            double expy2 = expres[2];
            
            assertEquals(expx, x,tol);
            assertEquals(expy1, yr1,tol);
            assertEquals(expy2, yr2,tol);
        }
    }
"
3012,b96e2d34-1ddf-43d0-9d1e-53488b81b68f,"    public DifferentialEquationTest() {
        tol = 0.0001;
    }
"
3013,75b99aa7-5331-4459-ad90-1273d31ba5e3,"    @BeforeClass
    public static void setUpClass() {
    }
"
3014,20202a03-eb2f-4c90-8d22-0e6e5918e102,"    @AfterClass
    public static void tearDownClass() {
    }
"
3015,a4c8625b-6c0c-44d6-a94b-0f792f55bc1e,"    @Before
    public void setUp() {
    }
"
3016,6a1df859-585c-40da-9365-3657262ed4b6,"    @After
    public void tearDown() {
    }
"
3017,8e06032d-8f48-4027-b28f-1d6e0f4669ac,"    @Test
    public void dydxTest(){
        DifferentialEquation f1 = new F1();
        
        double expResult = 8.5;
        double result = f1.dydx(0,1);
        
        assertEquals(expResult, result, tol);
        
    }
"
3018,f7a1cd21-1b76-4496-869b-873c7dde71b5,"    public RungeKutta4Test() {
        tol = 0.001;
    }
"
3019,4930d812-82c1-43fe-b31b-4a60fe35b305,"    @BeforeClass
    public static void setUpClass() {
    }
"
3020,79b66b40-4fcc-4b83-9297-bfce3dfc2ccb,"    @AfterClass
    public static void tearDownClass() {
    }
"
3021,05a3d247-077a-4059-bc24-567ad6045160,"    @Before
    public void setUp() {
    }
"
3022,7657a823-e13f-414e-a6ff-a4f9f27618a5,"    @After
    public void tearDown() {
    }
"
3023,17a6f90c-7584-48de-a00c-7106f979bb05,"    @Test
    public void testSolve() {
        System.out.println(""solve"");
        DifferentialEquation diferentialEquation = new Fcubica();
        double[] initialCondition = {0,1};
        double lastX = 0.5;
        double step = 0.5;
        RungeKutta4 instance = new RungeKutta4();
        double[][] expResult = {
            {0,1},
            {0.5,3.21875}
        };
        double[][] result = instance.solve(diferentialEquation, initialCondition, lastX, step);
        assertArrayEquals(expResult, result);

    }
"
3024,164a2885-769c-495c-adce-aad2b73c0c10,"    @Test
    public void testSolveOde() {
        System.out.println(""solveOde"");
        
        Y1 f1 = new Y1();
        Y2 f2 = new Y2();
       
        ODESystem sis = new ODESystem(f1,f2);
        
        double[] initialCondition = {0,4,6};
        double lastX = 2.0;
        double step = 0.5;
        RungeKutta4 instance = new RungeKutta4();
        double[][] expResult = {
            {0,4,6},
            {0.5,3.115234,6.857670},
            {1.0,2.426171,7.632106},    
            {1.5,1.889523,8.326886},
            {2.0,1.471577,8.9466865}
            
        };
        double[][] result = instance.solveOde(sis, initialCondition, lastX, step);
       // assertArrayEquals(expResult, result);
 for( int i = 0; i < result.length; i++){
            double[] res = result[i];
            double[] expres = expResult[i];
            
            double x = res[0];
            double yr1 = res[1];
            double yr2 = res[2];
            
            double expx = expres[0];
            double expy1 = expres[1];
            double expy2 = expres[2];
            
            assertEquals(expx, x,tol);
            assertEquals(expy1, yr1,tol);
            assertEquals(expy2, yr2,tol);
        }
    }
"
3025,bfd12123-48db-4230-982e-3609d79f3aef,"    @Override
    public double dydx(double x, double... y) {
        return 4 - 0.3 * y[1] - 0.1 * y[0];
    }
"
3026,a24542c1-a5b5-4cf4-aaf0-59fa54982564,"    public ODESystem(DifferentialEquation... odes){
        ode.addAll(Arrays.asList(odes));
    }
"
3027,70b5f624-999f-4aa7-b2f3-9d18735ce0f7,"    public DifferentialEquation getDifferentialEquation(int index){
        return ode.get(index);
    }
"
3028,763b8991-c7b6-4642-ad50-335235696f55,"    public int getNumberOfDifferentialEquations(){
        return ode.size();
    }
"
3029,868ef5f1-37ca-40b8-a729-8067bebce931,"    public void addODE(DifferentialEquation eq){
        ode.add(eq);
    }
"
3030,60653bb6-1633-47f2-9ae6-b602f0dc8d41,"    @Override
    public double dydx(double x,double... y) {
        return -2 * Math.pow(x,3) + 12 * Math.pow(x,2) - 20 * x + 8.5;
    }
"
3031,569b6236-fb63-4e5b-aeb6-e92351a8811d,"    public double dydx(double x, double... y) ;
"
3032,1418ed74-6556-46c7-ab94-4ced2881b211,"    @Override
    public double dydx(double x, double... y) {
        return -0.5 * y[0]; 
    }
"
3033,0f044eab-15ca-40be-a0f6-9e1f98a859bc,"    @Override
    public double dydx(double x, double... y) {
        return -2 * Math.pow(x,3) + 12 *Math.pow(x,2) - 20 * x + 8.5;
    }
"
3034,f08fd127-e481-4987-ba98-09eb4c0a8cbc,"    public double[][] solve(DifferentialEquation diferentialEquation, double[] initialCondition, double lastX, double step ) {
        double x = initialCondition[0];
        double y = initialCondition[1];
        
        int n  = (int) ((lastX - x)/ step) +1;
        
        double[][] result = new double[n][2];
        
        result[0] = initialCondition;
        
       for(int i = 1; i < n; i++){
           double k1 =diferentialEquation.dydx(x, y);
           double k2 = diferentialEquation.dydx(x + step / 2,y + k1 * step /2);
           double k3 = diferentialEquation.dydx(x+ step / 2, y + k2 * step /2);
           double k4 = diferentialEquation.dydx(x + step, k3 * step);
                   
            double m = (1d/6d) * (k1 + 2 * k2 + 2 * k3 + k4);
           y = y + m* step;
           x = i * step;
           double[] e = {x,y};
           result[i] = e;
           
       }
       
       return result;
        
        
    }
"
3035,bdc57d0e-2cd4-458f-a687-e1ef0f0ba5a9,"    public  double[][] solveOde(ODESystem sis, double[] initialCondition, double lastX, double step) {
       
        double x = initialCondition[0];
        int numberOfDependentVar = sis.getNumberOfDifferentialEquations();
        double[] y = new double[numberOfDependentVar];
        
        for(int i = 0 ; i < numberOfDependentVar; i++){
            y[i] =  initialCondition[i+1];
        }
        int n  = (int) ((lastX - x)/ step) +1;
        double[][] result = new double[n][y.length + 1];
        
        result[0] = initialCondition;
        
        for(int i = 1 ; i < n; i++){
            
            
            //k1
            double[]k1 = new double[y.length];
            for ( int j = 0; j < y.length; j++){                   
               k1[j] =sis.getDifferentialEquation(j).dydx(x, y);
            }  
            double[] yfork2 = new double[y.length];
            for(int j = 0; j < y.length; j++){
                yfork2[j] = y[j] + k1[j]* step / 2d;
            }
             double xfork2 = x +step /2d;
             
            //k2
            double[] k2 = new double[y.length];
            for(int j = 0; j<y.length; j++){
                k2[j]  = sis.getDifferentialEquation(j).dydx(xfork2, yfork2);
            }
          double[] yfork3 = new double[y.length];
            for(int j = 0; j < y.length; j++){
                yfork3[j] = y[j] + k2[j]* step / 2d;
            }
             double xfork3 = x +step/2d;
             
             //k3
            double[] k3 = new double[y.length];
            for(int j = 0; j<y.length; j++){
                k3[j]  = sis.getDifferentialEquation(j).dydx(xfork3, yfork3);
            }
          double[] yfork4 = new double[y.length];
            for(int j = 0; j < y.length; j++){
                yfork4[j] = y[j] + k3[j]* step;
            }
             double xfork4 = x +step;
             
             //k4
            double[] k4 = new double[y.length];
            for(int j = 0; j<y.length; j++){
                k4[j]  = sis.getDifferentialEquation(j).dydx(xfork4, yfork4);
            }
     
            double[] newY = new double[y.length];
            for(int j = 0; j < y.length; j++){
                double m = (1d/6d) * (k1[j] + 2 * k2[j] + 2 * k3[j] + k4[j]);           
                newY[j] = y[j] + m* step; 
            }     
            y = newY;
            
            x = i * step;
            double[] a = new double[y.length + 1];
            a[0] = x;
            System.arraycopy(y, 0, a, 1, y.length);
   
            result[i] = a;
        }

        return result;
    }
"
3036,2c47e49c-6cb2-4aee-8ff1-9050b7326700,"    public double[][] solve(DifferentialEquation diferentialEquation, double[] initialCondition, double lastX, double step ) {
        double x = initialCondition[0];
        double y = initialCondition[1];
        
        int n  = (int) ((lastX - x)/ step) +1;
        
        double[][] result = new double[n][2];
        
        result[0] = initialCondition;
        
       for(int i = 1; i < n; i++){
           y = y + diferentialEquation.dydx(x, y) * step;
           x = i * step;
           double[] e = {x,y};
           result[i] = e;
           
       }
       
       return result;
        
        
    }
"
3037,8cfc4fcf-1ca3-425d-a84a-475dd62a19ab,"    public  double[][] solveOde(ODESystem sis, double[] initialCondition, double lastX, double step) {
        double x = initialCondition[0];
        int numberOfDependentVar = sis.getNumberOfDifferentialEquations();
        double[] y = new double[numberOfDependentVar];
        
        for(int i = 0 ; i < numberOfDependentVar; i++){
            y[i] =  initialCondition[i+1];
        }
        int n  = (int) ((lastX - x)/ step) +1;
        double[][] result = new double[n][y.length + 1];
        
        result[0] = initialCondition;
        
        for(int i = 1 ; i < n; i++){
             double[] newY = new double[y.length];
            for ( int j = 0; j < y.length; j++){
               
                newY[j] =  y[j] + sis.getDifferentialEquation(j).dydx(x, y) * step;
            }
            y = newY;
            
            x = i * step;
            double[] a = new double[y.length + 1];
            a[0] = x;
            System.arraycopy(y, 0, a, 1, y.length);
            
            
            result[i] = a;
        }
        
        
        
        
        
        return result;
    }
"
3038,50febb1b-3242-43b3-8bc9-9a115cae725b,"	public Person(String name) {
		this.name = name;
	}
"
3039,78e1abeb-75c2-4835-a5bb-60bfa2b519bb,"	protected Person() {
	}
"
3040,b8dd54a3-bccc-461c-8862-ea1cf0a85ecc,"	public Long getId() {
		return id;
	}
"
3041,d285d5ea-64ee-45e1-8441-317a6a95fded,"	public String getName() {
		return name;
	}
"
3042,0d2db31e-4535-4648-a82b-7db32ba43c3a,"	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}
"
3043,42070d9a-22a3-4e6e-bf09-fcbf6de671c6,"	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Person other = (Person) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}
"
3044,3564b586-c3bf-4234-91cc-71ced352e98f,"	@Override
	public String toString() {
		return ""Person [id="" + id + "", name="" + name + ""]"";
	}
"
3045,f634f2db-2353-412a-ba22-89399b381044,"	protected Team() {
	}
"
3046,d790d43a-3926-4b19-aaed-0f9320cb7577,"	public Team(Long id) {
		this.id = id;
	}
"
3047,379e88c8-edac-43aa-92aa-8fb95ed5af37,"	public Team(Long id, String name, List<Person> people) {
		this.id = id;
		this.name = name;
		this.people = people;
	}
"
3048,2829771e-cb6a-4487-83a2-ffcd91279dcc,"	public Long getId() {
		return id;
	}
"
3049,ef6f2558-82a9-45d2-9860-7d3ebccb047c,"	public String getName() {
		return name;
	}
"
3050,21a2a826-7c61-490f-b4df-bb2ab4b86daa,"	public List<Person> getPeople() {
		return people;
	}
"
3051,444b8d02-5aba-47c2-a0a9-7b1ec28f3557,"	public TeamDAO() {
	}
"
3052,671d0adb-65c3-4c24-8f09-b9c5ca127b6f,"	@Autowired
	public TeamDAO(SessionFactory factory) {
		this.factory = factory;
	}
"
3053,c578aea0-7dc4-49e1-a444-8e985d50d407,"	public Team load(Long id) {
		return (Team) getSession().load(Team.class, id);
	}
"
3054,767862e1-84d6-4b12-b493-bf4770a53988,"	public void delete(Team team) {
		getSession().delete(team);
	}
"
3055,86ba4eae-06bb-4ab9-bbfb-d6f87ad2b51d,"	public Session getSession() {
		return factory.getCurrentSession();
	}
"
3056,3db67f42-22ab-489e-a854-4680a7f23df3,"	public void save(Team team) {
		getSession().save(team);
	}
"
3057,fa8ec963-6ef6-4e80-bb96-dc6e4ed24d0a,"	public void clear() {
		getSession().flush();
		getSession().clear();
	}
"
3058,30cabc6d-82b0-48b1-af14-f213a75d4a1e,"	public PersonDAO(){}
"
3059,e4850f5c-71f5-4a23-9c9b-99600a89a172,"	@Autowired
	public PersonDAO(SessionFactory factory) {
		this.factory = factory;
	}
"
3060,1ac1cc26-b9a0-4d63-9d84-72732fb83b5a,"	@SuppressWarnings(""unchecked"")
	public List<Person> list() {
		return getSession().createCriteria(Person.class).list();
	}
"
3061,3668d5ef-1ea7-4435-9690-0b6cc1498277,"	public Session getSession() {
		return factory.getCurrentSession();
	}
"
3062,467f7e6f-d960-4bb3-ad7f-7250879763fb,"	@Test
	public void shouldRemovedAllEntityWithObjectDetached() {
		teamDAO.delete(new Team(1L));

		assertTrue(""Should Removed all people from detached object"", personDAO.list().isEmpty());
	}
"
3063,5fdcbd7c-a0b1-4e12-a1d3-3f310b633a27,"	@Test
	public void shouldRemoveAllEntityWithObjectManaged() {
		teamDAO.delete(teamDAO.load(1L));

		assertTrue(""Should Removed all people from managed object"", personDAO.list().isEmpty());
	}
"
3064,a39bcfac-9f84-434b-9eab-d9a462993103,"	@Before
	public void setUp() {
		teamDAO.save(new Team(1L, ""Team"", Arrays.asList(new Person(""Person One""), new Person(""Person Two""))));
		teamDAO.clear();
	}
"
3065,6bdadb9f-7c1a-470e-8b7a-f2387e1f47e5,"    public WorkerRunnable(CrawlerContext context) {
        this.context = context;
    }
"
3066,65ab3680-656b-4f80-83d4-9c93bbe85ce4,"    public void run() {
        while(!context.shouldStop()) {
            CrawlerTask task = context.getTask();
            if(task == null) {
                continue;
            }
            
            while(true) {
                try {
                    task.execute(context);
                    break;
                } catch (IOException e) {                        
                }
            }
            
            context.finishTask(task);
        }
    }
"
3067,a63a6a76-bff5-4bd4-a8a0-365b6e074cef,"	public ProcessPlayer(String url) {
		this.url = url;
	}
"
3068,5ff562fc-e391-4709-a1b2-0ad1078194b0,"	public void execute(CrawlerContext crawlerContext) throws IOException {
		Document doc = Jsoup.connect(url).get();      	
		Element nameElement = doc.select(""#tombstone h1 *"").first();
    	String playerName = fixString(nameElement.ownText());    	
    	crawlerContext.addPlayerName(playerName);
	}
"
3069,fb1f99d5-4c32-4049-a3dc-be4481977d34,"	private static String fixString(String s) {
		return s.replace(String.valueOf((char)160), "" "").trim();
	}
"
3070,50ccc632-8caf-4a6e-abab-67523783d48f,"	public ProcessLetter(String url, boolean processPagination) {
		this.url = url;
		this.processPagination = processPagination;
	}
"
3071,ae651f1e-6f50-425a-86ff-ce7a81fad834,"	public void execute(CrawlerContext crawlerContext) throws IOException {
		Document doc = Jsoup.connect(url).get();
    	Elements elements = doc.select(""table.data > tbody > tr a[href*=player]"");
    	for(Element e : elements) {
    		crawlerContext.submitTask(new ProcessPlayer(e.attr(""abs:href"")));
    	}
    	
    	if(!processPagination) {
    		return;
    	}
    	
    	elements = doc.select("".pageNumbers > a"");
    	Set<String> urls = new HashSet<String>();
    	for(Element e : elements) {
    		urls.add(e.attr(""abs:href""));        		
    	}
    	
    	for(String url : urls) {
    		crawlerContext.submitTask(new ProcessLetter(url, false));
    	}
	}
"
3072,a28bb264-3eba-4b5b-91dc-ec7c52bcfd7f,"	public void submitTask(CrawlerTask task) {
	    synchronized(this) {
	        tasks.add(task);
	    }
	}
"
3073,a9b9eb06-0df8-45e2-af32-2b8b04f59e6b,"	public CrawlerTask getTask() {
	    synchronized(this) {
	        CrawlerTask task = tasks.poll();
	        if(task == null) {
	            return null;
	        }
	        
	        pendingTasks.add(task);
	        return task;
	    }
	}
"
3074,46d20f01-ecb6-4d2f-ad0b-1ea15295b67e,"	public void finishTask(CrawlerTask task) {
	    synchronized(this) {
	        pendingTasks.remove(task);
	    }
	}
"
3075,79ec8be5-da01-4f6b-803c-aa252100eca2,"	public boolean shouldStop() {
	    synchronized(this) {
	        return tasks.isEmpty() && pendingTasks.isEmpty();
	    }
	}
"
3076,4ab589bc-1741-4208-9412-48ef1e0a1ba9,"	public void addPlayerName(String playerName) {
		synchronized(players) {
			players.add(playerName);
			System.out.printf(
					""Got player '%s' [%d]\n"", 
					playerName, 
					players.size());
		}
	}
"
3077,36a51d26-8ea4-4093-9fac-c55f3f237e68,"	public ProcessAbc(String url) {
		this.url = url;
	}
"
3078,19a2a2ba-068e-4204-8b2c-cbe474577cc7,"	public void execute(CrawlerContext crawlerContext) throws IOException {
		Document doc = Jsoup.connect(url).get();
    	Elements elements = doc.select(""#playerSearch > .lastInitial > a"");
    	for(Element e : elements) {
    		crawlerContext.submitTask(new ProcessLetter(e.attr(""abs:href""), true));
    	}
	}
"
3079,3aa9da99-f690-4955-b17d-d3242f78bed0,"    public static void main(String[] args) throws IOException, InterruptedException {    	
    	CrawlerContext context = new CrawlerContext();
    	context.submitTask(new ProcessAbc(""http://www.nhl.com/ice/playersearch.htm""));
    	
    	long startTime = System.currentTimeMillis();
    	
    	int numberOfThreads = 80;
    	List<Thread> workerThreads = new ArrayList<Thread>();
    	for(int i = 0; i < numberOfThreads; ++i) {
    	    Thread thread = new Thread(new WorkerRunnable(context));
    	    thread.start();
    	    workerThreads.add(thread);
    	}
    	
    	for(Thread thread : workerThreads) {
    	    thread.join();
    	}
    	
    	long duration = System.currentTimeMillis() - startTime;
    	System.out.printf(""Finished in %d seconds\n"", duration / 1000);
    }
"
3080,eef21b5f-633b-4f3c-9bef-8d9251773867,"	void execute(CrawlerContext crawlerContext) throws IOException;
"
3081,20d53a47-b720-4bdc-8ea1-679a46cc4a68,"    public AppTest( String testName )
    {
        super( testName );
    }
"
3082,5142b154-3e7d-4ebd-b6e7-9a96cd72b4e4,"    public static Test suite()
    {
        return new TestSuite( AppTest.class );
    }
"
3083,b40ea41c-9da5-4ab1-a693-53d395578168,"    public void testApp()
    {
        assertTrue( true );
    }
"
3084,51be87a4-0849-4327-9eaf-88a222c3fc81,"	public void afterJob(JobExecution jobExecution) {
		if (jobExecution.getStatus() == BatchStatus.COMPLETED) {
			logger.info(""Job completed: "" + jobExecution.getJobId());
		} else if (jobExecution.getStatus() == BatchStatus.FAILED) {
			logger.info(""Job failed: "" + jobExecution.getJobId());
		}
	}
"
3085,e21b5480-ee6e-455b-866a-29919a33a626,"	public void beforeJob(JobExecution jobExecution) {
		if (jobExecution.getStatus() == BatchStatus.COMPLETED) {
			logger.info(""Job completed: "" + jobExecution.getJobId());
		} else if (jobExecution.getStatus() == BatchStatus.FAILED) {
			logger.info(""Job failed: "" + jobExecution.getJobId());
		}
	}
"
3086,ee751318-48de-4d97-91ce-c6a0370d187b,"	public void onReadError(Exception ex) {
		logger.error(""Encountered error on read"", ex);
	}
"
3087,44947113-6171-410f-9c67-cc679725be2c,"	public void onWriteError(Exception ex, Object item) {
		logger.error(""Encountered error on write"", ex);
	}
"
3088,5982d6b3-e305-4543-8331-54a678250acd,"	public void setTaskStartMessage(String taskStartMessage) {
		this.taskStartMessage = taskStartMessage;
	}
"
3089,366aba7e-71a2-42d4-ad8c-afc3b5f3188e,"	public RepeatStatus execute(StepContribution arg0, ChunkContext arg1)
			throws Exception {
		System.out.println(taskStartMessage);
		return RepeatStatus.FINISHED;
	}
"
3090,fca1dc7b-be51-4cb4-9d03-9cb95e00baa4,"	public RepeatStatus execute(StepContribution arg0, ChunkContext arg1)
			throws Exception {
		System.out.println(Calendar.getInstance().getTime());
		return RepeatStatus.FINISHED;
	}
"
3091,49a7c3e9-5835-4ad2-811a-2a1b6fc58b34,"	public void write(List items) throws Exception {
		for (Iterator<Ledger> iterator = items.iterator(); iterator.hasNext();) {
			Ledger item = iterator.next();
			itemDAO.save(item);
		}
	}
"
3092,dc08c3f3-b641-45ad-ad53-295343bbc4a3,"	public int getId() {
		return id;
	}
"
3093,34c22bb3-0069-4814-992f-b52ce331818c,"	public void setId(int id) {
		this.id = id;
	}
"
3094,624c13c9-ca3f-4682-afb8-91d41f0f88b5,"	public Date getReceiptDate() {
		return receiptDate;
	}
"
3095,bc74d763-0278-4b86-8dcd-86d7c3cbc869,"	public void setReceiptDate(Date receiptDate) {
		this.receiptDate = receiptDate;
	}
"
3096,c65ce3f7-5f01-4b1a-8035-782ab126f138,"	public String getMemberName() {
		return memberName;
	}
"
3097,427e67e7-6e08-4237-975e-81ba1d6959ab,"	public void setMemberName(String memberName) {
		this.memberName = memberName;
	}
"
3098,b1873006-022f-4481-986f-aa0e4f43ef5c,"	public String getCheckNumber() {
		return checkNumber;
	}
"
3099,edfb0711-9843-4855-a72d-66fd4f5544c5,"	public void setCheckNumber(String checkNumber) {
		this.checkNumber = checkNumber;
	}
"
3100,00507239-c727-44ec-9f06-c30b1e3c6309,"	public Date getCheckDate() {
		return checkDate;
	}
"
3101,baaa101e-b8cf-45fc-bfb3-5a842c43a782,"	public void setCheckDate(Date checkDate) {
		this.checkDate = checkDate;
	}
"
3102,ff84b79c-ce95-4bef-8244-39c56f7e0f1b,"	public String getPaymentType() {
		return paymentType;
	}
"
3103,f53b2305-8753-4313-a8be-8b59aa9fd7f9,"	public void setPaymentType(String paymentType) {
		this.paymentType = paymentType;
	}
"
3104,c9e5866e-6797-4045-93e0-38177cd5df02,"	public double getDepositAmount() {
		return depositAmount;
	}
"
3105,ef20ed22-bfa6-4f37-8d95-403ece67a507,"	public void setDepositAmount(double depositAmount) {
		this.depositAmount = depositAmount;
	}
"
3106,fead3cc8-95f2-4c77-af69-df35bf7fa600,"	public double getPaymentAmount() {
		return paymentAmount;
	}
"
3107,b3a43082-31c0-4e65-aa18-aef066e872f5,"	public void setPaymentAmount(double paymentAmount) {
		this.paymentAmount = paymentAmount;
	}
"
3108,06bd5fc9-d2d4-448d-a649-ea9981708b78,"	public String getComments() {
		return comments;
	}
"
3109,befafdbc-315e-4235-8346-a377b424edc8,"	public void setComments(String comments) {
		this.comments = comments;
	}
"
3110,edd6106d-d90b-4da8-9f71-82ccde574e52,"	@Transactional(propagation = Propagation.REQUIRED)
	public void save(final Ledger item) {
		jdbcTemplate
				.update(""insert into ledger (rcv_dt, mbr_nm, chk_nbr, chk_dt, pymt_typ, dpst_amt, pymt_amt, comments) values(?,?,?,?,?,?,?,?)"",
						new PreparedStatementSetter() {
							public void setValues(PreparedStatement stmt)
									throws SQLException {
								stmt.setDate(1, new java.sql.Date(item
										.getReceiptDate().getTime()));
								stmt.setString(2, item.getMemberName());
								stmt.setString(3, item.getCheckNumber());
								stmt.setDate(4, new java.sql.Date(item
										.getCheckDate().getTime()));
								stmt.setString(5, item.getPaymentType());
								stmt.setDouble(6, item.getDepositAmount());
								stmt.setDouble(7, item.getPaymentAmount());
								stmt.setString(8, item.getComments());
							}
						});
	}
"
3111,a6412024-da26-4909-b4b2-1c5fc3344e51,"							public void setValues(PreparedStatement stmt)
									throws SQLException {
								stmt.setDate(1, new java.sql.Date(item
										.getReceiptDate().getTime()));
								stmt.setString(2, item.getMemberName());
								stmt.setString(3, item.getCheckNumber());
								stmt.setDate(4, new java.sql.Date(item
										.getCheckDate().getTime()));
								stmt.setString(5, item.getPaymentType());
								stmt.setDouble(6, item.getDepositAmount());
								stmt.setDouble(7, item.getPaymentAmount());
								stmt.setString(8, item.getComments());
							}
"
3112,b829f43b-c89d-4ccc-8acd-f6e0143fcb1d,"	public Object mapFieldSet(FieldSet fs) {
		Ledger item = new Ledger();
		int idx = 0;
		item.setReceiptDate(fs.readDate(idx++, DATE_PATTERN));
		item.setMemberName(fs.readString(idx++));
		item.setCheckNumber(fs.readString(idx++));
		item.setCheckDate(fs.readDate(idx++, DATE_PATTERN));
		item.setPaymentType(fs.readString(idx++));

		// deposit amount
		try {
			DecimalFormat fmttr = new DecimalFormat(DOLLAR_PATTERN);
			Number number = fmttr.parse(fs.readString(idx++));
			item.setDepositAmount(number.doubleValue());
		} catch (ParseException e) {
			item.setDepositAmount(0);
		}

		// payment amount
		try {
			DecimalFormat fmttr = new DecimalFormat(DOLLAR_PATTERN);
			Number number = fmttr.parse(fs.readString(idx++));
			item.setPaymentAmount(number.doubleValue());
		} catch (ParseException e) {
			item.setPaymentAmount(0);
		}

		//
		return item;
	}
"
3113,f2cb91d1-97e2-43b1-a496-28f910a898f3,"	public void save(final Ledger note);
"
3114,84cad16c-12d2-4f63-861a-2d07eb59bf86,"	public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
		Ledger ledger = new Ledger();
		ledger.setId(rs.getInt(""id""));
		ledger.setReceiptDate(rs.getDate(""rcv_dt""));
		ledger.setMemberName(rs.getString(""mbr_nm""));
		ledger.setCheckNumber(rs.getString(""chk_nbr""));
		ledger.setCheckDate(rs.getDate(""chk_dt""));
		ledger.setPaymentType(rs.getString(""pymt_typ""));
		ledger.setDepositAmount(rs.getDouble(""dpst_amt""));
		ledger.setPaymentAmount(rs.getDouble(""pymt_amt""));
		ledger.setComments(rs.getString(""comments""));
		return ledger;
	}
"
3115,db77188e-ecb1-422d-8ccd-8c5147b3ece4,"	@Test
	public void testLaunchJob() throws Exception {
		StopWatch sw = new StopWatch();
		sw.start();
		jobLauncher.run(job, jobParameters);
		sw.stop();
		logger.info("">>> TIME ELAPSED:"" + sw.prettyPrint());
	}
"
3116,51a71bf3-f563-41d7-bf15-b2723379ffd4,"    public AppTest( String testName )
    {
        super( testName );
    }
"
3117,14672fb6-4e85-47a7-a0da-0b9143bc8e71,"    public static Test suite()
    {
        return new TestSuite( AppTest.class );
    }
"
3118,5e9b6257-ee3c-4319-adbe-b69d53ecf76f,"    public void testApp()
    {
        assertTrue( true );
    }
"
3119,5c46fe95-1fee-4e31-9a49-39a5e941d063,"	@Test
	public void testLaunchJob() throws Exception {
		StopWatch sw = new StopWatch();
		sw.start();
		launcher.run(job, jobParameters);
		sw.stop();
		logger.info("">>> TIME ELAPSED:"" + sw.prettyPrint());
	}
"
3120,74dc5f8e-25ab-4044-ad9f-c4c6715ae829,"	@Test
	public void testLaunchJob() throws Exception {
		StopWatch sw = new StopWatch();
		sw.start();
		launcher.run(job, jobParameters);
		sw.stop();
		logger.info("">>> TIME ELAPSED:"" + sw.prettyPrint());
	}
"
3121,ac4499a0-1969-4024-89b9-c45c751f4390," 	public String transforma(String textoASerTransformado);
"
3122,54f28cd5-862e-4d50-8d3e-e40c35101402,"	@Override
	public String transforma(String textoASerTransformado) {
		
		textoASerTransformado = textoASerTransformado.replaceAll(""_{2}(.*?)_{2}"", ""<u>$1</u>"");
		
		return textoASerTransformado;
	}
"
3123,6d8188d9-d21a-4d20-be44-79abe664293b,"	@Override
	public String transforma(String textoASerTransformado) {
			
		textoASerTransformado = textoASerTransformado.replaceAll(""\\*{2}(.*?)\\*{2}"", ""<br>$1</br>"");
		
		return textoASerTransformado;
		
	}
"
3124,cf6ac7b2-9ded-42fd-ba3e-7b15e6c27c5f,"	@Override
	public String transforma(String textoASerTransformado) {
		
		textoASerTransformado = textoASerTransformado.replaceAll(""[^\""]https?://w{3}.?\\..+\\.[^ ]+(\\.[^ ]+)*(//.*)*( |$|[^\\(])"", 
				""<a href=\""$0\"">$0</a>"");
		
		return textoASerTransformado;
		
	}
"
3125,f86a4361-c552-4c39-a1b0-986cb10c2f34,"	@Override
	public String transforma(String textoASerTransformado) {

		textoASerTransformado = textoASerTransformado.replaceAll(""\\[image *src=\""(.*)\"" *\\]"", ""<img src=\""$1\"" />"");
		
		return textoASerTransformado;
	}
"
3126,309469b1-4ca6-4dae-9d1b-2a5108a7910e,"	public static List<InterfaceTransformador> geraObjetosTransformadores(String textoASerValidado){
		
		List<InterfaceTransformador> listaTransformadores = new ArrayList<InterfaceTransformador>();
			
			listaTransformadores.addAll(Arrays.asList(new InterfaceTransformador[]{new TransformadorParaATagBR(),
					new TransformadorParaATagI(),new TransformadorParaATagU(), new TransformadorParaCaminhoDeImg(),
					new TransformadorParaLinkComApelido(), new TransformadorParaLink()}));	
		
		return listaTransformadores;
	}	
"
3127,5cf1f82c-5ff0-4458-af7b-e0e45f16d2a0,"	public static boolean validaParaATagBR(String texto){

		if(texto.matches("".*\\*{2}.*\\*{2}.*"")){
			return true;
		}else{
			return false;
		}
	}
"
3128,1f9670cf-5f59-4172-8ab7-ad90e5a087a0,"	public static boolean validaParaATagI(String texto){

		if(texto.matches("".*/{2}.*/{2}.*"")){
			return true;
		}else{
			return false;
		}
	}
"
3129,9aca5511-0465-4bda-bd42-fda5538322ef,"	public static void main(String[] args) {
		
	String texto = ""Testando a tag br     		...   **vivaaaaaa** \n"" +
				   ""Testando a tag i      		...   //vivaaaaaa// \n"" +
				   ""Testando a tag u      		...   __vivaaaaaa__ \n"" +
				   ""Testando path de img  		...   [image    src=\""C:\\Users\\SAA\\Pictures\""] \n"" +
				   ""Testando path de link 		...   http://www.youtube.com \n"" +
				   ""Testando path de link 		...   http://www.youtube.com.br \n"" +
				   ""Testando path de link 		...   https://www.brasilmelhorpais.gov.net \n"" +
				   ""Testando path de link 		...   Link para youtube = http://www.youtube.com.br \n"" +
				   ""Testando path de link 		...   Link para youtube   http://www.youtube.com/watch?v=/f46oqH/c8UF/E \n"" +
				   ""Testando path de link curto     ...   [http://www.google.com](Google)"";
		
	TransformaGeral transformaTudoEmHTML = new TransformaGeral();
	
	System.out.println(transformaTudoEmHTML.transformaTextoEmHTML(texto));

	}
"
3130,ca2d7c66-dd21-4cab-9859-f7f8c58a1187,"	@Override
	public String transforma(String textoASerTransformado) {

		textoASerTransformado = textoASerTransformado.replaceAll(""(\\[(https?://w{3}.?\\..+\\.[^ ]+(\\.[^ ]+)*(//.*)*)\\])\\((.*)\\)"", 
				""<a href=\""$2\"">$5</a>"");
		
		
		return textoASerTransformado;
	}
"
3131,f1d9718a-341e-4507-bb48-ad39665d48c5,"	public String transformaTextoEmHTML(String textoASerTransformado){
		
	List<InterfaceTransformador> listaDeTransformadores = GeraObjetosDeTransformacaoNecessarios.geraObjetosTransformadores(textoASerTransformado);
		
	for(InterfaceTransformador transforma : listaDeTransformadores){
		
	textoASerTransformado = transforma.transforma(textoASerTransformado);
		
	}	
		
	return textoASerTransformado;
	
	}	
"
3132,37492aeb-abcc-447c-abbb-313bfb339f93,"	@Override
	public String transforma(String textoASerTransformado) {
		String textoAnterior = """";
		String textoFinal = """";
		while(validacaoDeListaNaString(textoASerTransformado)){

			String textoAserTransformadoArray[] = textoASerTransformado.split(""\n"");

			for(String texto : textoAserTransformadoArray){
				
				if(textoAnterior.matches("".*<ul>.*"")){
				texto = texto.replaceAll(""\\*(.*)"", ""<li>$1</li>"");

				}else if(texto.matches(""\\*.*"") && textoAnterior.matches(""<li>.*</li>"")){
				texto = texto.replaceAll(""\\*(.*)"", ""<li>$1</li>"");
				}
				
				
				textoAnterior = texto;
				textoFinal.concat(texto);
			}

		}
		
		return textoASerTransformado;
	}
"
3133,28a16035-c4f8-4f4a-a560-e7e59fa48aa3,"	public boolean validacaoDeListaNaString(String textoASerTransformado){

		if(textoASerTransformado.matches(""<ul>.*\n\\*.*</ul>"")){
			return true;
		}else{
			return false;
		}

	}
"
3134,f0fc441b-ba95-4eb0-aa7a-9991aaeb84a0,"	@Override
	public String transforma(String textoASerTransformado) {
		
		textoASerTransformado = textoASerTransformado.replaceAll(""/{2}(.*?)/{2}"", ""<i>$1</i>"");
		
		return textoASerTransformado;
	}
"
3135,1c9b7d7f-8569-4d37-b142-5d96883e70f4,"    @Before
    public void preparar() {
        dao.preparar();
    }
"
3136,8155275e-6d75-4936-96cb-79335107c2ee,"    @Test
    public void test() {
        List<Restaurante> restTest = dao.consultarRestaurantes();
        assertEquals(4, restTest.size());
    }
"
3137,ce67b22b-ba83-4e91-9fd6-a766ac264851,"    @Test
    public void testConsultarPorBairroCentro() {
        List<Restaurante> restTest = dao.consultarRestaurantesBairro(new Bairro(""Centro""));
        assertEquals(2, restTest.size());
    }
"
3138,763a3bfe-a13d-4cba-966f-1d0868ed35a2,"    @Test
    public void testConsultarPorBairroAuxiliadora() {
        List<Restaurante> restTest = dao.consultarRestaurantesBairro(new Bairro(""Auxiliadora""));
        assertEquals(0, restTest.size());
    }
"
3139,a7f9d96e-cdc2-4f41-9f01-6285b35436f7,"    @Test
    public void testConsultarPorBairroAzenha() {
        List<Restaurante> restTest = dao.consultarRestaurantesBairro(new Bairro(""Azenha""));
        assertEquals(2, restTest.size());
    }
"
3140,cebc3870-9656-4893-b167-8bcbe8734604,"    @Test
    public void testConsultarPorNome123() {
        List<Restaurante> restTest = dao.consultarRestaurantesNome(""Restaurante 123"");
        assertEquals(1, restTest.size());
    }
"
3141,15a0294e-7876-4a22-83f0-7b7380cb3605,"    @Test
    public void testConsultarPorNomeABC() {
        List<Restaurante> restTest = dao.consultarRestaurantesNome(""Restaurante ABC"");
        assertEquals(1, restTest.size());
    }
"
3142,b3caadd3-c657-41f5-a0ed-444b17241c40,"    public JRestauranteFrame() {
        initComponents();
        rdao.preparar();
    }
"
3143,b6c7e1e2-9499-4a55-aff0-c9bb0eac22c5,"    @SuppressWarnings(""unchecked"")
    // <editor-fold defaultstate=""collapsed"" desc=""Generated Code"">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText(""Informe o bairro desejado:"");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText(""Consultar"");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jMenu1.setText(""Arquivos"");

        jMenuItem1.setText(""Adicionar Restaurante"");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText(""Adicionar Bairro"");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(""Ajuda"");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
"
3144,cf5eae61-11d7-4fa6-830d-5fdb5e2e56e8,"            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
"
3145,6f81d404-ab2d-4709-9767-feaa46b4c718,"            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
"
3146,aa269503-8474-4744-8cbc-793c46245eb4,"            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
"
3147,32b8ceeb-285f-412a-a7ef-932c18a84fc2,"            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
"
3148,16736c2d-7c5a-4eef-a0a7-b6aae3a09566,"    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
"
3149,5135cba0-0e67-492a-88ea-99e3c1ba165b,"    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
                JOptionPane.showInputDialog(null, ""Bairro a Cadastrar."");
    }//GEN-LAST:event_jMenuItem2ActionPerformed
"
3150,6b596e7d-a1ea-40b8-a26e-27b5f0b70c99,"    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Bairro b1 = new Bairro(jTextField1.getText());
        String s = """";
        List<Restaurante> rs = rdao.consultarRestaurantesBairro(b1);
        for (Restaurante r : rs) {
            s = s + r.toString() + ""\n"";
        }
        jTextArea1.setText(s);    }//GEN-LAST:event_jButton1ActionPerformed
"
3151,a2a94cdf-a006-4b24-ae3b-fb8e0ebc9102,"    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showInputDialog(null, ""Restaurante a Cadastrar."");
    }//GEN-LAST:event_jMenuItem1ActionPerformed
"
3152,07446c5b-8a11-49e3-8a79-40e8e5ab7d0e,"    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate=""collapsed"" desc="" Look and feel setting code (optional) "">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (""Nimbus"".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JRestauranteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JRestauranteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JRestauranteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JRestauranteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JRestauranteFrame().setVisible(true);
            }
        });
    }
"
3153,3fba2ff7-82dd-4875-acab-9f19d92d9893,"            public void run() {
                new JRestauranteFrame().setVisible(true);
            }
"
3154,4a95f98d-14d1-4c93-85a8-20a498c83add,"    public Restaurante(String nome, String endereco, Bairro bairro) {
        super();
        this.nome = nome;
        this.endereco = endereco;
        this.bairro = bairro;
    }
"
3155,b359f763-e36a-4812-b550-bc04cb3419b6,"    public String getEndereco() {
        return endereco;
    }
"
3156,dc1b109d-9e6f-4b85-a824-00301425dbc1,"    public String getNome() {
        return nome;
    }
"
3157,6619a1ec-15e9-45a0-a962-821296cc8498,"    public Bairro getBairro() {
        return bairro;
    }
"
3158,3e8087de-102e-4ef0-8b98-fd6b448e14dd,"    @Override
    public String toString() {
        return nome + "", Endereço: "" + endereco + "", Bairro: "" + bairro;
    }
"
3159,6e226604-9b25-4d10-8dff-3cefa1c2cd36,"    public Bairro(String nome) {
        this.nome = nome;
    }
"
3160,825db304-116e-48d9-9f19-9b492faf6965,"    public String getNome() {
        return nome;
    }
"
3161,7dfec9d4-295c-40e6-b450-17f5a95b912b,"    @Override
    public String toString() {
        return nome;
    }
"
3162,179a1896-a85b-48c7-ae02-d1aad934c103,"    @Override
    public int hashCode() {
        int hash = 7;
        return hash;
    }
"
3163,ba758f7c-8d16-4706-917d-2ee88421cddb,"    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }

        final Bairro other = (Bairro) obj;
        if (!Objects.equals(this.nome, other.nome)) {
            return false;
        }
        return true;
    }
"
3164,41c4fa78-3fbf-48e6-b48d-5325fe4779d7,"	public static void main(String[] args) throws IOException {
		
	}
"
3165,aed5937f-5757-4f87-8149-4c76f3256914,"    public List<Restaurante> consultarRestaurantes() {

        return resultado;
    }
"
3166,76351de0-388b-412f-96ed-a1bef9a682f3,"    public void inserirRestaurante(String nome, String endereco, Bairro bairro) {
        Restaurante rest = new Restaurante(nome, endereco, bairro);
        resultado.add(rest);
    }
"
3167,16cca43e-171a-43c4-8b0d-8867c79ff30e,"    public List<Restaurante> consultarRestaurantesBairro(Bairro bairro) {
        List<Restaurante> r = new ArrayList<>();
        for (Restaurante s : resultado) {
            if (s.getBairro().equals(bairro)) {
                r.add(s);
            }
        }

        return r;
    }
"
3168,30bf6013-305c-4bd0-9918-e5e9b5ce192f,"    public List<Restaurante> consultarRestaurantesNome(String nome) {
        List<Restaurante> r = new ArrayList<>();
        for (Restaurante s : resultado) {
            if (s.getNome().equals(nome)) {
                r.add(s);
            }
        }

        return r;
    }
"
3169,58242c3a-9aae-47ea-9b86-ad78c39408dd,"    public void preparar() {
        Bairro b1 = new Bairro(""Azenha"");
        Bairro b2 = new Bairro(""Centro"");
        inserirRestaurante(""Restaurante QWET"",""Rua A, nº1"", b1);
        inserirRestaurante(""Restaurante #$%&"",""Rua B, nº2"", b1);
        inserirRestaurante(""Restaurante ABC"",""Rua C, nº3"", b2);
        inserirRestaurante(""Restaurante 123"",""Rua D, nº4"", b2);
    }
"
3170,e1d018c7-9a8e-425e-affc-4dd2aa0d71c8,"    private Channels(int count) {
        m_count = count;
    }
"
3171,c97a7391-4e78-4ab2-9c44-b2e7ca5012bc,"    public int getCount() {
        return m_count;
    }
"
3172,dcab150f-d871-4784-a784-917bbb38c708,"    private SampleRate(int rate) {
        m_rate = rate;
    }
"
3173,3155bc7f-1fc1-4e39-8cde-635ea5990ea4,"    public int getRate() {
        return m_rate;
    }
"
3174,366f8386-8de4-47dd-bbbd-93e7f5284eb1,"    public OpusDecoder(int sampleRate, byte[] firstPacket) throws Exception {
        loadLibrary();
        this.sampleRate = sampleRate;
        if (sampleRate <= 0)
            throw new IllegalArgumentException(""Invalid sample rate"");
        this.channels = nativeParseChannels(firstPacket);
        if (channels < 1)
            throw new Exception(""Failed to parse channels count from the first packet"");
        this.buffer = buildDecoder();
    }
"
3175,5f1bd925-49c3-4c70-bf5a-95ea2c120a45,"    public OpusDecoder(SampleRate sampleRate, Channels channels) throws Exception {
        //System.out.println(""java.library.path="" + System.getProperty(""java.library.path""));
        loadLibrary();
        this.sampleRate = sampleRate.getRate();
        this.channels = channels.getCount();
        this.buffer = buildDecoder();
    }
"
3176,637a5fb6-5919-4ed8-b55a-9b8bd93d79e4,"    private short[] buildDecoder() throws Exception {
        short[] buffer = new short[5760 * this.channels];
        nativeDecoder = nativeCreate(this.sampleRate, this.channels);
        if (nativeDecoder == 0)
            throw new Exception();
        return buffer;
    }
"
3177,dc88f884-264f-4449-b2a8-bf2d55347ef2,"    private void loadLibrary() {
        try {
            System.loadLibrary(""opus"");
        } catch (UnsatisfiedLinkError e) {
            try {
                System.load(new File(""target/native/libopus.jnilib"").getAbsolutePath());
            } catch (UnsatisfiedLinkError e2) {
                System.load(new File(""target/dependency/libopus.jnilib"").getAbsolutePath());
            }
        }
    }
"
3178,0ed6d6be-2e24-4866-bfdd-8a4bca418ad5,"    public int getSampleRate() {
        return sampleRate;
    }
"
3179,176801de-ca42-4d88-902c-541b0172aece,"    public int getChannels() {
        return channels;
    }
"
3180,d992833c-d726-443b-8a41-6f55f27a683d,"    public short[] decode(byte[] packet) throws Exception {
        int decoded = nativeDecode(nativeDecoder, packet, buffer, 5760);
        if (decoded <= 0)
            throw new Exception();
        int samples = decoded * channels;
        short[] out = new short[samples];
        System.arraycopy(buffer, 0, out, 0, samples);
        return out;
    }
"
3181,8d088f35-0980-4b14-9715-f4217c9d82d1,"    public void destroy() {
        synchronized (this) {
            if (nativeDecoder != 0) {
                nativeDestroy(nativeDecoder);    
                nativeDecoder = 0;
            }
        }
    }
"
3182,522788e3-8341-44f0-826b-3576b40bc580,"    public void finalize() {
        destroy();
    }
"
3183,80f54b71-ff5f-45d9-bf8e-4bbbd4093f53,"    private native long nativeCreate(int samplerate, int channels);
"
3184,b235a57c-5468-4de3-b848-869dafc07a8f,"    private native int nativeParseChannels(byte[] packet);
"
3185,be3428b0-22c2-4888-a43b-39bda35b5057,"    private native int nativeDecode(long nativeDecoder, byte[] packet, short[] buffer, int nframes);
"
3186,f7fb3169-5590-4e79-83b3-c281108686cc,"    private native void nativeDestroy(long nativeDecoder);
"
3187,4535914a-4d17-47eb-956c-ee49f79894ea,"    @Test
    public void test() throws Exception {
        OpusDecoder decoder = new OpusDecoder(SampleRate.Rate_8Khz, Channels.Mono);
        try {
            Assert.assertNotNull(decoder);
        } finally {
            decoder.destroy();
        }
    }
"
3188,e4304d21-6326-4171-9a99-1ad3064d6e7a,"        public Map<String, Protocol> asMap() {
            Map<String, Protocol> out = new HashMap<String, Protocol>();
            for (Protocol protocol : protocols)
                out.put(protocol.name, protocol);
            return out;
        }
"
3189,f506e3d2-134a-483b-b547-66f5a023bcf1,"        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(""packet"");
            for (Protocol pr : protocols) {
                sb.append(""."").append(pr.name);
            }
            return sb.toString();
        }
"
3190,28cd0e10-90dd-4088-9d45-6e0e3f51705b,"        public Map<String,Field> asMap() {
            Map<String, Field> out = new HashMap<String, Field>();
            for (Field field : fields)
                out.put(field.name, field);
            return out;
        }
"
3191,cae035e1-80a2-4e29-b9b0-02e27b90854c,"        public String toString() {
            return ""protocol="" + name;
        }
"
3192,857ae415-a014-4c2e-8d35-9fe9f148b707,"        public Map<String, Protocol> asProtocolMap() {
            Map<String, Protocol> out = new HashMap<String, Protocol>();
            for (Protocol protocol : protocols)
                out.put(protocol.name, protocol);
            return out;
        }
"
3193,1b032624-afed-49c2-b933-f9f5e6618678,"        public Map<String, Field> asMap() {
            Map<String, Field> out = new HashMap<String, Field>();
            for (Field field : fields)
                out.put(field.name, field);
            return out;
        }
"
3194,f7940e3a-fa18-4ba9-a6aa-ff84cfba1c3f,"        public String toString() {
            return ""field="" + name + ""/"" + value;
        }
"
3195,4e386fb0-1e0f-4483-b202-697f8e166647,"    public Pdml unmarshall(URL pdmlUrl) throws JAXBException {
        JAXBContext c = JAXBContext.newInstance(Pdml.class);
        Object o = c.createUnmarshaller().unmarshal(pdmlUrl);
        if (o instanceof Pdml)
            return (Pdml)o;
        throw new JAXBException(""Wrong unmarshalled type"");
    }
"
3196,cfdaeec3-cb03-4aa5-8d24-215c461b31f0,"    public LittleEndianDataOutput(DataOutput out) {
        this.out = out;
    }
"
3197,0e8a164b-d2b4-432e-b12e-eb08f3766bb3,"    private void swapOut() throws IOException {
        byte[] b = baos.toByteArray();
        for (int i=b.length-1; i>=0; --i)
            out.write(b[i]);
        baos.reset();
    }
"
3198,af086d69-e6aa-4ad5-afe4-66b457dfed3e,"    @Override
    public void write(int b) throws IOException {
        out.write(b);
    }
"
3199,0310a1f4-84d2-4ea7-bd99-e52c194bbad3,"    @Override
    public void write(byte[] b) throws IOException {
        out.write(b);
    }
"
3200,7cb5f866-27e5-49a7-86df-628f530e492d,"    @Override
    public void write(byte[] b, int off, int len) throws IOException {
        out.write(b, off, len);
    }
"
3201,d280023b-7e5b-4bcb-840c-fdb2e0526c74,"    @Override
    public void writeBoolean(boolean v) throws IOException {
        d.writeBoolean(v);
        swapOut();
    }
"
3202,e2f4cfe0-e326-49db-828c-637f15e01dde,"    @Override
    public void writeByte(int v) throws IOException {
        out.write(v);
    }
"
3203,c9efa925-6f94-4256-ad41-638fddb5dcf5,"    @Override
    public void writeBytes(String s) throws IOException {
        d.writeBytes(s);
        swapOut();
    }
"
3204,b859f557-9996-4a1f-ad32-7d5c1de7ac07,"    @Override
    public void writeChar(int v) throws IOException {
        d.writeChar(v);
        swapOut();
    }
"
3205,3015956b-22de-4d39-bc5d-3a432085d4f0,"    @Override
    public void writeInt(int v) throws IOException {
        d.writeInt(v);
        swapOut();
    }
"
3206,c5048fed-b85d-4f99-9bb4-ae1bce1cafcb,"    @Override
    public void writeChars(String s) throws IOException {
        for (int i=0; i<s.length(); ++i) {
            d.writeChar(s.charAt(i));
            swapOut();
        }
    }
"
3207,f6c73b32-27b1-4c43-8094-6695636b5bd7,"    @Override
    public void writeDouble(double v) throws IOException {
        d.writeDouble(v);
        swapOut();
    }
"
3208,f56ccb77-9e85-4047-92b3-023fb82e159d,"    @Override
    public void writeFloat(float v) throws IOException {
        d.writeFloat(v);
        swapOut();
    }
"
3209,d062bcba-fe47-4d50-85bc-524baed68bee,"    @Override
    public void writeLong(long v) throws IOException {
        d.writeLong(v);
        swapOut();
    }
"
3210,2c8c589b-773f-423b-85a8-0b86ef0220ca,"    @Override
    public void writeShort(int v) throws IOException {
        d.writeShort(v);
        swapOut();
    }
"
3211,f599e043-fa56-430f-9d8a-a67799980403,"    @Override
    public void writeUTF(String s) throws IOException {
        d.writeUTF(s);
        out.write(baos.toByteArray());
        baos.reset();
    }
"
3212,cc976c5a-e590-4c16-9131-d3a5690be6ad,"    public void convert(URL pdmlUrl, File waveFileDir, SampleRate sampleRate, Channels channels) throws Exception {
        if (!waveFileDir.isDirectory())
            throw new IllegalArgumentException();
        Pdml pdml = new PdmlReader().unmarshall(pdmlUrl);
        RtpStream[] streams = new RtpExtracter().parse(pdml);
        for (int i=0; i<streams.length; ++i) {
            File waveFile = new File(waveFileDir, ""rtp-opus-"" + (i+1) + "".wav"");
            decodeOneStream(waveFile, sampleRate, channels, streams[i]);
        }
    }
"
3213,97e1efa1-a4d6-40fd-8000-69f14ba8a2d5,"    public void convert(URL pdmlUrl, File waveFiles[], SampleRate sampleRate, Channels channels) throws Exception {
        Pdml pdml = new PdmlReader().unmarshall(pdmlUrl);
        RtpStream[] streams = new RtpExtracter().parse(pdml);
        if (waveFiles.length != streams.length)
            throw new IllegalArgumentException();
        for (int i=0; i<streams.length; ++i) {
            decodeOneStream(waveFiles[i], sampleRate, channels, streams[i]);
        }
    }
"
3214,e661520f-af30-45dc-9fe1-eaa5c37c5544,"    private void decodeOneStream(File waveFile, SampleRate sampleRate, Channels channels, RtpStream stream) throws Exception {
        OpusDecoder decoder;
        if (channels == null)
            decoder = new OpusDecoder(stream.getSampleRate(), stream.getPackets()[0].getPayload());
        else
            decoder = new OpusDecoder(sampleRate, channels);
        try {
            RandomAccessFile f = new RandomAccessFile(waveFile, ""rw"");
            f.setLength(0);
            LittleEndianDataOutput outStream = new LittleEndianDataOutput(f);
            try {
                writeWaveHeader(decoder, outStream, 44);
                if (f.length() != 44)
                    throw new IllegalStateException(""Wave header should be 44 bytes, not "" + f.length());
                convert(decoder, stream, outStream);
                long fileSize = f.length();
                f.seek(0);
                writeWaveHeader(decoder, outStream, fileSize);
            } finally {
                f.close();
            }
        } finally {
            decoder.destroy();
        }
    }
"
3215,9ff090b2-e2c6-4c66-8bec-2bee61bb7b82,"    private void writeWaveHeader(OpusDecoder decoder, DataOutput os, long fileSize) throws IOException {

        // http://www.topherlee.com/software/pcm-tut-wavformat.html

        //        Positions     Sample Value     Description
        //        1 - 4     ""RIFF""     Marks the file as a riff file. Characters are each 1 byte long.
        //        5 - 8     File size (integer)     Size of the overall file - 8 bytes, in bytes (32-bit integer). Typically, you'd fill this in after creation.
        //        9 -12     ""WAVE""     File Type Header. For our purposes, it always equals ""WAVE"".
        //        13-16     ""fmt ""     Format chunk marker. Includes trailing null
        //        17-20     16     Length of format data as listed above
        //        21-22     1     Type of format (1 is PCM) - 2 byte integer
        //        23-24     2     Number of Channels - 2 byte integer
        //        25-28     44100     Sample Rate - 32 byte integer. Common values are 44100 (CD), 48000 (DAT). Sample Rate = Number of Samples per second, or Hertz.
        //        29-32     176400     (Sample Rate * BitsPerSample * Channels) / 8.
        //        33-34     4     (BitsPerSample * Channels) / 8.1 - 8 bit mono2 - 8 bit stereo/16 bit mono4 - 16 bit stereo
        //        35-36     16     Bits per sample
        //        37-40     ""data""     ""data"" chunk header. Marks the beginning of the data section.
        //        41-44     File size (data)     Size of the data section.

        Charset UTF8 = Charset.forName(""UTF-8"");
        int sampleRate = decoder.getSampleRate();
        int channels = decoder.getChannels();
        int bitsPerSample = 16;
        os.write(""RIFF"".getBytes(UTF8));
        os.writeInt((int)fileSize - 8);
        os.write(""WAVE"".getBytes(UTF8));
        os.write(""fmt "".getBytes(UTF8));
        os.writeInt(16);
        os.writeShort(1);
        os.writeShort(channels);
        os.writeInt(sampleRate);
        os.writeInt(sampleRate * bitsPerSample * channels / 8 );
        os.writeShort(bitsPerSample * channels / 8);
        os.writeShort(bitsPerSample);
        os.write(""data"".getBytes(UTF8));
        os.writeInt((int)fileSize - 44);
    }
"
3216,9886cdc0-1dab-4c01-b085-df422a0bcc7c,"    public void convert(OpusDecoder decoder, RtpStream stream, DataOutput outStream) throws Exception {
        for (RtpPacket packet : stream.getPackets()) {
            short[] pcm = decoder.decode(packet.getPayload());
            for (short sample : pcm)
                outStream.writeShort(sample);
        }
    }
"
3217,119aaef5-7546-41fe-b28e-f1d6a32f8ac5,"    public static void main(String[] args) throws Exception {
        URL pdmlUrl = new File(args[0]).toURI().toURL();
        File waveDir = new File(args[1]);
        new OpusToWaveConverter().convert(pdmlUrl, waveDir, null, null);
    }
"
3218,c6a763a0-fcd7-4fe9-b68d-22be4df4e295,"    public RtpStream[] parse(Pdml pdml) {
        Map<String,RtpStream> out = new LinkedHashMap<String,RtpStream>();
        for (Packet packet : pdml.packets) {
            for (Protocol protocol : packet.protocols) {
                if (""rtp"".equals(protocol.name)) {
                    Map<String, Field> fields = protocol.asMap();
                    if (fields.containsKey(""rtp.ssrc"")) {
                        String ssrc = fields.get(""rtp.ssrc"").value;
                        RtpStream stream = out.get(ssrc);
                        if (null == stream) {
                            stream = new RtpStream(ssrc);
                            out.put(ssrc, stream);
                            if (fields.containsKey(""rtp.setup"")) {
                                int setupFrame = Integer.parseInt(fields.get(""rtp.setup"").asMap().get(""rtp.setup-frame"").show);
                                stream.setSetupPacket(pdml.packets[setupFrame-1]);
                            }
                        }
                        stream.add(new RtpPacket(fields));
                    }
                }
            }
        }
        return out.values().toArray(new RtpStream[out.size()]);
    }
"
3219,dd2da317-b0f4-488e-a59d-52042ed5f25c,"        public RtpStream(String ssrc) {
            this.ssrc = ssrc;
        }
"
3220,21a54e26-7850-446d-a677-4abfe8d0ce46,"        private void setSetupPacket(Packet setupPacket) {
            this.setupPacket = setupPacket;
        }
"
3221,6913e51f-ede0-43e6-943e-006b0cd5556e,"        private void add(RtpPacket packet) {
            packets.add(packet);
        }
"
3222,2fd299d3-57b8-436e-9833-cbd774d7423b,"        public String getSsrc() {
            return ssrc;
        }
"
3223,94f9f1e4-4e17-4061-a735-2d7db5477a42,"        public RtpPacket[] getPackets() {
            return packets.toArray(new RtpPacket[packets.size()]);
        }
"
3224,5a377ac3-8aec-4e02-ae9c-dc312fe89769,"        public int getSampleRate() {
            if (setupPacket == null)
                throw new IllegalStateException(""No setup packet found"");
            Protocol sip = setupPacket.asMap().get(""sip"");
            Field body = sip.asMap().get(""sip.msg_body"");
            Protocol sdp = body.asProtocolMap().get(""sdp"");
            //Field media = sdp.asMap().get(""sdp.media"");
            Map<String, Integer> sampleRatesByMediaCode = new HashMap<String, Integer>();
            for (Field field : sdp.fields) {
                if (""sdp.media_attr"".equals(field.name) && field.asMap().containsKey(""sdp.sample_rate"")) {
                    int sampleRate = Integer.parseInt(field.asMap().get(""sdp.sample_rate"").show);
                    String mediaCode = field.asMap().get(""sdp.media.format"").show;
                    sampleRatesByMediaCode.put(mediaCode, sampleRate);
                }
            }

            RtpPacket first = packets.get(0);
            String mediaCode = first.fields.get(""rtp.p_type"").show;
            return sampleRatesByMediaCode.get(mediaCode);
        }
"
3225,c8e06bab-e4eb-4b9d-a02e-6d581a7ab465,"        public RtpPacket(Map<String, Field> fields) {
            this.fields = fields;
        }
"
3226,7ea59d75-b230-4aa6-bed1-6b56ce280f05,"        public Map<String, Field> getFields() {
            return fields;
        }
"
3227,0437106f-7ff9-4e92-8586-11b161b90780,"        public byte[] getPayload() {
            String s = fields.get(""rtp.payload"").value;
            int len = s.length();
            byte[] b = new byte[len/2];
            for (int i=0; i<b.length; ++i) {
                b[i] = (byte) Integer.parseInt(s.substring(i*2, i*2+2), 16);
            }
            return b;
        }
"
3228,01b4c2e4-b2fd-4c7a-bba9-68cb834aa9c5,"    @Test
    public void test() throws Exception {
        URL pdmlUrl = RtpExtracterTest.class.getResource(""sipcall.pdml"");
        Assert.assertNotNull(pdmlUrl);
        File[] waveFiles = new File[2];
        for (int i=0; i<waveFiles.length; ++i)
            waveFiles[i] = File.createTempFile(OpusToWaveConverterTest.class.getSimpleName(), "".wav"");
        try {
            new OpusToWaveConverter().convert(pdmlUrl, waveFiles, SampleRate.Rate_8Khz, Channels.Mono);
            new OpusToWaveConverter().convert(pdmlUrl, waveFiles, null, null);
        } finally {
            for (int i=0; i<waveFiles.length; ++i)
                waveFiles[i].delete();
        }
    }
"
3229,4924a7a9-bad7-446b-8b57-da6c7ac3654d,"    @Test
    public void test() throws Exception {
        OpusDecoder decoder = new OpusDecoder(SampleRate.Rate_8Khz, Channels.Mono);
        try {
            Assert.assertNotNull(decoder);
            URL pdml = OpusReaderTest.class.getResource(""sipcall.pdml"");
            Assert.assertNotNull(pdml);
            
        } finally {
            decoder.destroy();
        }
    }
"
3230,9b5a13ff-dc60-43f7-8c89-95ea73f41865,"    @Test
    public void test() throws Exception {
        URL pdmlUrl = PdmlReaderTest.class.getResource(""sipcall.pdml"");
        Assert.assertNotNull(pdmlUrl);
        Pdml pdml = new PdmlReader().unmarshall(pdmlUrl);
        Assert.assertNotNull(pdml);
        Assert.assertEquals(1571, pdml.packets.length);
        Assert.assertEquals(6, pdml.packets[300].protocols.length);
        Assert.assertEquals(""rtp"", pdml.packets[300].protocols[5].name);
        Assert.assertEquals(12, pdml.packets[300].protocols[5].fields.length);
        Assert.assertEquals(""rtp.payload"", pdml.packets[300].protocols[5].fields[11].name);
        Assert.assertEquals(""080b88fef3bc8a9f4c55fe46a1281fbeb1a4b4ee9ac01ff880"", pdml.packets[300].protocols[5].fields[11].value);
    }
"
3231,caaf6717-448c-4d11-bed7-ab311858b56d,"    @Test
    public void test() throws Exception {
        URL pdmlUrl = RtpExtracterTest.class.getResource(""sipcall.pdml"");
        Assert.assertNotNull(pdmlUrl);
        Pdml pdml = new PdmlReader().unmarshall(pdmlUrl);
        Assert.assertNotNull(pdml);
        RtpStream[] streams = new RtpExtracter().parse(pdml);
        Assert.assertNotNull(streams);
        Assert.assertEquals(2, streams.length);
        Assert.assertEquals(""ce8947be"", streams[0].getSsrc());
        Assert.assertEquals(""607f30aa"", streams[1].getSsrc());
        Assert.assertEquals(700, streams[0].getPackets().length);
        Assert.assertEquals(707, streams[1].getPackets().length);
        Assert.assertArrayEquals(new byte[] {0x08, 0x0b, (byte) 0xe4, 0x53, 0x14, 0x7e, 0x10}, streams[0].getPackets()[0].getPayload());
//        
//        
//        Assert.assertEquals(6, pdml.packets[300].protocols.length);
//        Assert.assertEquals(""rtp"", pdml.packets[300].protocols[5].name);
//        Assert.assertEquals(12, pdml.packets[300].protocols[5].fields.length);
//        Assert.assertEquals(""rtp.payload"", pdml.packets[300].protocols[5].fields[11].name);
//        Assert.assertEquals(""080b88fef3bc8a9f4c55fe46a1281fbeb1a4b4ee9ac01ff880"", pdml.packets[300].protocols[5].fields[11].value);
    }
"
3232,3633f64e-38ad-43b9-ac82-71c6481bc5ca,"    public Dretva(ResourceProvider rp, ResourceUser ru, Model model, View view) {
        this.model = model;
        this.view = view;
        this.rp = rp;
        this.ru = ru;
    }
"
3233,2701a180-52da-4a4a-a6bf-2280322c3d79,"    @Override
    public synchronized void start() {
        super.start(); //To change body of generated methods, choose Tools | Templates.
    }
"
3234,7b9191cf-4ddd-4af8-a267-385ed957ecdc,"    @Override
    public void run() {
        controler = new Controller(view);
        while (true) {
            ru.dohvatiResurs(Ztintor_zadaca_4.pocetniLink, rp, model);
            model.dohvatiListupoveznica();
            controler.provjeriUnos();

        }//while
    }//run
"
3235,4eea0219-cf18-4518-92a8-aa972d9793f3,"    @Override
    public void interrupt() {
        super.interrupt(); //To change body of generated methods, choose Tools | Templates.
    }
"
3236,45c57de0-f360-45e0-9d6a-ac9c59d0392c,"    public static void main(String[] args) throws MalformedURLException {

        Model model = new Model();
        View view = new View(model);
        model.addObserver(view);
        view.setCac(model.getC());
        model.provjeriSintaksu(args, model, view);

        long pocetak;
        long kraj;
        pocetak = System.currentTimeMillis();

        while (true) {

            kraj = System.currentTimeMillis();
            try {
                Thread.currentThread().sleep(model.getInterval() * 1000 - (kraj - pocetak));
            } catch (InterruptedException ex) {
                Logger.getLogger(Ztintor_zadaca_4.class.getName()).log(Level.SEVERE, null, ex);
            }
            pocetak = System.currentTimeMillis();
            model.osvjeziStranicu();

        }//while

    }
"
3237,032fa78a-fb80-43dd-9100-1b702b09a79a,"    public boolean izbaci(ArrayList list, String nazivSpremista);
"
3238,a367150b-b8a7-4af0-b1bf-015d0fe2abcd,"    public boolean izbaciKB(ArrayList list, String nazivSpremista);
"
3239,daff3423-1d0c-4f3b-8804-fd4ad3207f1f,"    public void obrisi(Resource r, String nazivSpremista);
"
3240,9ca1c892-dc56-4171-bd3c-790982b39787,"    @Override
    public boolean izbaci(ArrayList list, String nazivSpremista) {
        if (list.isEmpty()) {
            System.out.println(""Datoteka prevelika za spremiste"");
            return true;
        } else {
            najstariji = new Date();
            for (int i = 0; i < list.size(); i++) {
                r = (Resource) list.get(i);
                d = r.getVrijemeSpremanja();
                if (d.compareTo(najstariji) < 0 && r.isSpremljen()) {
                    najstariji = d;
                    najr = r;
                }
            }
            obrisi(najr, nazivSpremista);
            return false;
        }

    }
"
3241,5b117667-184b-4fc6-9492-ff4d5cde2e7d,"    @Override
    public boolean izbaciKB(ArrayList list, String nazivSpremista) {
        if (list.isEmpty()) {
            System.out.println(""Datoteka prevelika za spremiste"");
            return true;
        } else {
            ArrayList jednaki = new ArrayList();
            for (int i = 0; i < list.size(); i++) {
                r = (Resource) list.get(i);
                broj = r.getBrojKoristenja();
                if (broj == najkoristeniji) {
                    jednaki.add(r);
                } else if (broj > najkoristeniji) {
                    najkoristeniji = broj;
                    najr = r;
                    jednaki = new ArrayList();
                    jednaki.add(r);
                }
            }//for
            if (jednaki.size() > 1) {
                izbaci(jednaki, nazivSpremista);
            } else {
                obrisi(najr, nazivSpremista);
            }
            return false;
        }

    }//funkcija
"
3242,5608caaf-e11d-4738-937c-35498efbf4e7,"    @Override
    public void obrisi(Resource r, String nazivSpremista) {
        r.setVrijemeBrisanja(new Date());
        r.setSpremljen(false);
        File file = new File(nazivSpremista + ""\\"" + r.getNaziv());
        System.out.println(""Iz spremista se izbacuje datoteka: "" + file.getName());
        file.delete();

        File dnevnik = new File(nazivSpremista + ""\\dnevnik.txt"");

        try {
            if (!dnevnik.exists()) {
                dnevnik.createNewFile();
            }

            FileWriter fwd = new FileWriter(dnevnik.getAbsoluteFile(), true);
            BufferedWriter bwd = new BufferedWriter(fwd);
            bwd.write(""Izbačen dokument: "" + r.getNaziv() + ""   Vrijeme zadržavanja "" + ((r.getVrijemeBrisanja().getTime() - r.getVrijemeSpremanja().getTime()) / 1000) + "" sekundi    Broj koristenja: "" + r.getBrojKoristenja() + ""\r\n"");
            bwd.close();
        } catch (IOException ex) {
            Logger.getLogger(Izbaci.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
"
3243,4a7a29eb-d150-491e-b1a2-fc3d168425aa,"    public int getBrojKoristenja() {
        return brojKoristenja;
    }
"
3244,2cb32a7e-233c-4888-b6db-bd1977a7ef02,"    public void setBrojKoristenja(int brojKoristenja) {
        this.brojKoristenja = brojKoristenja;
    }
"
3245,523db5ea-dc9c-4d34-866b-85e505ecb370,"    public Date getVrijemeSpremanja() {
        return vrijemeSpremanja;
    }
"
3246,8209ebf9-3a77-4e9a-8676-b5ec1f2ef16d,"    public void setVrijemeSpremanja(Date vrijemeSpremanja) {
        this.vrijemeSpremanja = vrijemeSpremanja;
    }
"
3247,27b7e5ce-ccb8-49fc-a0dd-4ec362cc1c44,"    public Date getZadnjeKoistenje() {
        return zadnjeKoistenje;
    }
"
3248,18193f3a-a374-43bf-b26e-0843c4aac7be,"    public void setZadnjeKoistenje(Date zadnjeKoistenje) {
        this.zadnjeKoistenje = zadnjeKoistenje;
    }
"
3249,5b7ab1c3-6126-4e2a-8528-7a48e0fa013b,"    public URL getUrl() {
        return url;
    }
"
3250,41c519c0-23b1-42a3-b7d1-5bdfe3822ab6,"    public void setUrl(URL url) {
        this.url = url;
    }
"
3251,fc932608-0a32-4933-9c86-6a1d3b070e96,"    public String getNaziv() {
        return naziv;
    }
"
3252,287950b8-88d8-4087-b320-9b40ba000963,"    public void setNaziv(String naziv) {
        this.naziv = naziv;
    }
"
3253,a85f22c4-cd23-4329-9843-5fe9efd57e2f,"    public ArrayList getListaURLa() {
        return listaURLa;
    }
"
3254,985f55b7-4737-4fdc-9930-c6cd4c115fbf,"    public void setListaURLa(ArrayList listaURLa) {
        this.listaURLa = listaURLa;
    }
"
3255,3497fd45-3994-437d-bba4-86cee2e6894c,"    public StringBuilder getSadrzaj() {
        return sadrzaj;
    }
"
3256,1675de22-8f0e-4dc5-b05b-33d90fa2aff3,"    public void setSadrzaj(StringBuilder sadrzaj) {
        this.sadrzaj = sadrzaj;
    }
"
3257,fac795f1-028d-4c7f-b15e-b23f85c42399,"    public boolean isSpremljen() {
        return spremljen;
    }
"
3258,cfad655d-ea4d-411e-bcb3-7f1282cfce15,"    public void setSpremljen(boolean spremljen) {
        this.spremljen = spremljen;
    }
"
3259,07880ab4-b387-4721-8c33-e2885cda2cc2,"    public int getId() {
        return id;
    }
"
3260,ccda8299-d36f-4a07-8ac6-c6f525b4c57f,"    public void setId(int id) {
        this.id = id;
    }
"
3261,f6f843c6-2e71-4e07-b3d9-bb5a9682d6d1,"    public Date getVrijemeBrisanja() {
        return vrijemeBrisanja;
    }
"
3262,5d915e81-e472-45a7-8bc2-1c8404a9fa60,"    public void setVrijemeBrisanja(Date vrijemeBrisanja) {
        this.vrijemeBrisanja = vrijemeBrisanja;
    }
"
3263,5f19812e-31c0-4669-b82a-8d1f0238874c,"    public StringBuilder dohvatiSadrzaj(URL url) {
        BufferedReader in;
        try {
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            sadrzaj = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                sadrzaj.append(inputLine);
                sadrzaj.append(""\n"");
            }
        } catch (IOException ex) {
            Logger.getLogger(Dretva.class.getName()).log(Level.SEVERE, null, ex);
        }

        return sadrzaj;
    }
"
3264,8a9bc06c-81ef-43b5-89f0-88d5096ef0fa,"    public Resource dohvatiResurs(URL url, Model m) {


        nazivDatoteke = dohvatiImeDatoteke(url);
        webStranica = cache.dohvatiResurs(nazivDatoteke);
        if (webStranica == null) {
            webStranica = new Resource();
            webStranica.setUrl(url);
            webStranica.setNaziv(nazivDatoteke);
            webStranica.setSadrzaj(dohvatiSadrzaj(url));
            cache.spremi(webStranica);
        } else {
            webStranica.setSadrzaj(m.dohvatiSadrzajDatoteke(nazivDatoteke));
        }
        return webStranica;
    }//funkcija
"
3265,0a82dd4b-9653-4565-a167-ded745a9c65a,"    public String dohvatiImeDatoteke(URL url) {
        String ime = """";
        String[] naziv;
        naziv = url.toString().substring(7).split(""/"");
        for (int i = 0; i < naziv.length; i++) {
            ime = ime.concat(naziv[i].toString() + ""."");
        }
        ime = ime + ""html"";
        return ime;
    }
"
3266,005e4475-4946-48e0-8ca6-fc2cd860e207,"    public Cache getCache() {
        return cache;
    }
"
3267,2c917bdf-3eb6-4425-b02b-66d0a828da6c,"    public void setCache(Cache cache) {
        this.cache = cache;
    }
"
3268,6dc46f9f-d381-40e1-a942-90c8032aee6d,"    public void spremi(Resource r);
"
3269,34a2718a-51ae-4578-b578-dc8a9ac34fc7,"    public ArrayList getLista();
"
3270,a23cd5ea-3a57-42a9-8832-760cf702b112,"    public void setLista(ArrayList list);
"
3271,e4ebd35b-36c9-4d82-b827-76520b53efbc,"    public Resource dohvatiResurs(String ime);
"
3272,35a4f7d9-cfb4-4102-ba3b-70dca927d285,"    public Model getM();
"
3273,2f21dae8-13b9-4df7-ba17-77b86fa660c4,"    public void setM(Model m);
"
3274,fdda6963-276f-4c68-8c0d-6ab2d9977b64,"    @Override
    public void spremi(Resource r) {
        Evictor e = new Izbaci();
        File file = new File(m.getNazivSpremista() + ""\\"" + r.getNaziv());
        try {

            if (m.isKb()) {
                trenutnaVelicina = m.izracunajVelicinu();
                if ((trenutnaVelicina + r.getSadrzaj().toString().getBytes().length / 1000) > m.getOgranicenje()) {
                    if (m.isStrategija()) {
                        toBig = e.izbaci(lista, m.getNazivSpremista());
                    } else {
                        toBig = e.izbaciKB(lista, m.getNazivSpremista());
                    }

                }
            } else {
                if (Ztintor_zadaca_4.postoji) {
                    //Ztintor_zadaca_4.ser=true;
                    m.setOgranicenje(m.getOgranicenje() + 1);
                    Ztintor_zadaca_4.postoji = false;
                }
                System.out.println(""-----------------------------------------------------""+m.getOgranicenje());
                if (new File(m.getNazivSpremista()).listFiles().length == m.getOgranicenje() + 1) {
                    if (m.isStrategija()) {
                        toBig = e.izbaci(lista, m.getNazivSpremista());
                    } else {
                        toBig = e.izbaciKB(lista, m.getNazivSpremista());
                    }
                }
            }

            if (toBig) {
                System.exit(1);
            }

            if (!m.provjeriListu(r.getNaziv())) {
                r.setVrijemeSpremanja(new Date());
                r.setId(getLista().size());
                r.setSpremljen(true);
                r.setBrojKoristenja(0);
                lista.add(r);
                setLista(lista);
                m.upisiUDnevnik(r);
            }
            file.createNewFile();
            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(r.getSadrzaj().toString());
            bw.close();

        } catch (IOException ex) {
            Logger.getLogger(CacheImpl.class.getName()).log(Level.SEVERE, null, ex);
        }



    }
"
3275,92be9dea-4638-4ef8-b811-a53d298c4ae6,"    @Override
    public Resource dohvatiResurs(String ime) {
        Resource resurs = null;
        Resource r;
        for (int i = 0; i < getLista().size(); i++) {
            r = (Resource) getLista().get(i);
            if (r.getNaziv().equals(ime) && r.isSpremljen()) {
                resurs = r;
                resurs.setBrojKoristenja(r.getBrojKoristenja() + 1);
                break;
            }
        }
        return resurs;

    }
"
3276,3be0d818-97c9-417a-a4ad-3ae3abba9809,"    @Override
    public ArrayList getLista() {
        return lista;
    }
"
3277,232fd7f3-c507-4d5d-bea3-e49fc55f4cfb,"    @Override
    public void setLista(ArrayList list) {
        this.lista = list;
    }
"
3278,0f28ff21-9f16-42e9-8c1d-00f4f4238427,"    @Override
    public Model getM() {
        return m;
    }
"
3279,0cc14777-63ef-47b4-959d-95c053ffd345,"    @Override
    public void setM(Model m) {
        this.m = m;
    }
"
3280,bde75213-0f33-4bd7-9bd8-6d673de22555,"    public void dohvatiResurs(URL url, ResourceProvider rp, Model model) {
        webStranica = rp.dohvatiResurs(url, model);
        setWebStranica(webStranica);
        model.setWebStranica(webStranica);
    }
"
3281,ff213f28-975a-4234-98d6-6edf8d0f3780,"    public Resource getWebStranica() {
        return webStranica;
    }
"
3282,c79627e9-a398-4257-8d03-979e427670ab,"    public void setWebStranica(Resource webStranica) {
        this.webStranica = webStranica;
    }
"
3283,8782a21e-dee4-43f4-b235-dd67048a5fcb,"    public ResourceProvider getProvider() {
        return provider;
    }
"
3284,c25ee2a2-ea17-49a7-89cd-22e28119740f,"    public void setProvider(ResourceProvider provider) {
        this.provider = provider;
    }
"
3285,38bc1082-c6de-4d22-b8bd-66c35f5679fb,"    public void provjeriSintaksu(String[] args, Model model, View view) {
        for (int i = 0; i < args.length; i++) {
            stb.append(args[i]).append("" "");
        }
        String p = stb.toString().trim();
        // url putanja interval ograničenje (-KB) -NS|-NK (-clean)
        String sintaksa = ""^[^\\s]+ ([A-Z]\\:\\\\[^\\s]+) ([\\d]+) ([\\d]+)( +-KB)? (-NS|-NK+)( +-clean)?$"";
        pattern = Pattern.compile(sintaksa);
        m = pattern.matcher(p);
        status = m.matches();
        if (status) {
            nazivSpremista = m.group(1);
            interval = Integer.parseInt(m.group(2));
            ogranicenje = Integer.parseInt(m.group(3));
            if (m.group(4) == null) {
                kb = false;
            } else {
                kb = true;
            }
            if (m.group(5).equals(""-NS"")) {
                strategija = true;
            } else {
                strategija = false;
            }
            if (m.group(6) == null) {
                ocisti = false;
            } else {
                ocisti = true;
            }

            dohvatiSerializaciju();
            brisiSpremiste();
            postaviCacheUzorak();
            pokreniDretvu(args, model, view);
        } else {
            setChanged();
            notifyObservers(""Sintaksa ne odgovara"");
            System.exit(1);
        }
    }
"
3286,1524e220-4d14-4e16-89e6-5c73a04cc255,"    public void dohvatiSerializaciju() {
        FileInputStream fileIn;
        try {
            fileIn = new FileInputStream(nazivSpremista + ""\\serijalizacija.ser"");
            postoji = true;
            Ztintor_zadaca_4.ser = true;
            ObjectInputStream in;
            in = new ObjectInputStream(fileIn);
            list = (ArrayList) in.readObject();
            in.close();
            fileIn.close();
        } catch (FileNotFoundException ex) {
            setChanged();
            notifyObservers(""Ne postoji datoteka serializacije"");
            postoji = false;
            Ztintor_zadaca_4.ser = false;
        } catch (IOException ex) {
            Logger.getLogger(Ztintor_zadaca_4.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Ztintor_zadaca_4.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
"
3287,cfc9048d-a7fb-4286-8e92-b97f260bbc19,"    public void brisiSpremiste() {
        if (ocisti) {
            File f = new File(nazivSpremista);
            for (File file : f.listFiles()) {
                file.delete();
            }
            list.clear();
            setChanged();
            notifyObservers(""Spremiste "" + nazivSpremista + "" je ocisceno"");
        }
    }
"
3288,0a8670d7-128d-4938-bcf0-764cf04773ef,"    public void postaviCacheUzorak() {

        c.setLista(list);
        c.setM(this);
        rp.setCache(c);
    }
"
3289,1d3e9acf-c1dc-44e9-9f2a-c2f0dc375fb7,"    public void pokreniDretvu(String[] args, Model model, View view) {
        try {
            pocetniLink = new URL(args[0]);
        } catch (MalformedURLException ex) {
            setChanged();
            notifyObservers(""Krivi link"");
            System.exit(1);
        }
        Dretva dretva = new Dretva(rp, ru, model, view);
        dretva.start();
    }
"
3290,c9e75628-2a42-4881-88c9-e55d1b487f6e,"    public void osvjeziStranicu() {
        StringBuilder sss;
        setChanged();
        notifyObservers(""Novi interval!!!!!!"");
        sb = rp.dohvatiSadrzaj(pocetniLink);
        imeDatoteke = rp.dohvatiImeDatoteke(pocetniLink);
        sss = dohvatiSadrzajDatoteke(imeDatoteke);
        if (sss != null) {
            webStranica.setSadrzaj(sss);
        } else {
            if (Ztintor_zadaca_4.ser) {
                setOgranicenje(getOgranicenje() - 1);
            }
            ru.dohvatiResurs(pocetniLink, rp, this);
            dohvatiListupoveznica();
        }
        res = update(sb, imeDatoteke);
        setWebStranica(res);
        dohvatiListupoveznica();
    }
"
3291,d0da571c-1f39-4dd4-8c16-d2c5ff4d0778,"    public void dohvatiListupoveznica() {
        ArrayList listaURLa = new ArrayList();
        String text;
        String linkText;
        int prvi = 0;
        int zadnji;
        int zadnji1;
        int zadnji2;
        while (true) {
            try {
                prvi = webStranica.getSadrzaj().toString().indexOf(""href="", prvi) + 6;
                if (prvi == 5) {
                    break;
                }
                text = webStranica.getSadrzaj().toString().substring(prvi);
                zadnji1 = text.indexOf(""\"""");
                zadnji2 = text.indexOf(""'"");
                if ((zadnji1 < zadnji2)) {
                    zadnji = zadnji1;
                } else {
                    zadnji = zadnji2;
                }
                if (zadnji1 == -1) {
                    zadnji = zadnji2;
                }
                if (zadnji2 == -1) {
                    zadnji = zadnji1;
                }
                if (text.startsWith(""http:"")) {
                    linkText = text.substring(0, zadnji);
                } else if (text.startsWith(""www."")) {
                    linkText = ""http://"" + text.substring(0, zadnji);
                } else if (text.startsWith(""/"")) {
                    linkText = webStranica.getUrl().toString() + text.substring(0, zadnji);
                } else {
                    linkText = webStranica.getUrl().toString() + ""/"" + text.substring(0, zadnji);
                }
                URL link = new URL(linkText);
                listaURLa.add(link);
                velicina = linkText.length();
                if (velicina > max) {
                    max = velicina;
                }

            } //while
            catch (MalformedURLException ex) {
                Logger.getLogger(ResourceUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }//while
        webStranica.setListaURLa(listaURLa);
    }
"
3292,0e33650d-0e2c-4318-9c56-8ad2e615a4e2,"    public void promjeniStranicu(String redniBroj) {
        webStranica.setZadnjeKoistenje(new Date());
        Ztintor_zadaca_4.pocetniLink = (URL) webStranica.getListaURLa().get(Integer.parseInt(redniBroj) - 1);
    }
"
3293,9874f67a-c562-48a0-be4d-aab8129de675,"    public void serijaliziraj() {
        webStranica.setZadnjeKoistenje(new Date());
        try {
            for (int i = 0; i < c.getLista().size(); i++) {
                ((Resource) c.getLista().get(i)).setSadrzaj(null);
            }
            FileOutputStream fileOut =
                    new FileOutputStream(nazivSpremista + ""\\serijalizacija.ser"");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(c.getLista());
            out.close();
            fileOut.close();
            //System.out.printf(""Serialized data is saved in "" + nazivSpremista + ""\\serijalizacija.ser"");
        } catch (IOException i) {
            i.printStackTrace();
        }
        System.exit(1);
    }
"
3294,178bf944-f369-484c-812b-284e0be55e92,"    public boolean provjeriListu(String ime) {
        Resource r;
        boolean ima = false;
        for (int i = 0; i < c.getLista().size(); i++) {
            r = (Resource) c.getLista().get(i);
            if (r.getNaziv().equals(ime)) {
                r.setBrojKoristenja(r.getBrojKoristenja() + 1);
                r.setVrijemeSpremanja(new Date());
                r.setSpremljen(true);
                upisiUDnevnik(r);
                ima = true;
                break;
            }
        }
        return ima;
    }
"
3295,1d7024cf-b438-4a88-b59c-187394ee61c1,"    public void upisiUDnevnik(Resource r) {
        File dnevnik = new File(nazivSpremista + ""\\dnevnik.txt"");

        try {
            if (!dnevnik.exists()) {
                dnevnik.createNewFile();
            }
            FileWriter fwd = new FileWriter(dnevnik.getAbsoluteFile(), true);
            BufferedWriter bwd = new BufferedWriter(fwd);
            bwd.write(""Dodan dokument: "" + r.getNaziv() + ""   "" + r.getVrijemeSpremanja() + ""\r\n"");
            bwd.close();
        } catch (IOException ex) {
            Logger.getLogger(CacheImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
"
3296,03ac154d-ba84-4469-8070-74f4fb10ef69,"    public long izracunajVelicinu() {
        long velicinaSpremnika = 0;
        File dir = new File(nazivSpremista);
        File[] listf = dir.listFiles();
        for (int i = 0; i < listf.length; i++) {
            if (listf[i].getName().endsWith("".html"")) {
                velicinaSpremnika = velicinaSpremnika + (int) (listf[i].length() / 1000);
            }
        }
        return velicinaSpremnika;
    }
"
3297,d92fb4ca-d3b8-4cf2-a362-e004ef11a4c2,"    public Resource update(StringBuilder sb, String ime) {
        Resource resu;
        resu = c.dohvatiResurs(ime);
        resu.setSadrzaj(dohvatiSadrzajDatoteke(ime));
        System.out.println(ime);
        File file = new File(nazivSpremista + ""\\"" + ime);
        if (resu.getSadrzaj().toString().equals(sb.toString())) {
            setChanged();
            notifyObservers(""Stranica nije updaejtana"");
        } else {
            setChanged();
            notifyObservers(""Stranica Updejtana"");
            try {
                FileWriter fw = new FileWriter(file.getAbsoluteFile());
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write(sb.toString());
                bw.close();
            } catch (IOException ex) {
                Logger.getLogger(CacheImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return resu;
    }
"
3298,5bf239a4-2633-4c46-b373-a3cd7e5d66af,"    public StringBuilder dohvatiSadrzajDatoteke(String naziv) {
        StringBuilder sadrzaj = new StringBuilder();
        try {

            String outputLine;
            File file = new File(nazivSpremista + ""\\"" + naziv);
            if (!file.exists()) {
                setChanged();
                notifyObservers(""datoteka izbrisna, citam sa stranice!"");
                return null;

            }

            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);


            while ((outputLine = br.readLine()) != null) {
                sadrzaj.append(outputLine);
                sadrzaj.append(""\n"");
            }
            br.close();

        } catch (IOException ex) {
            Logger.getLogger(CacheImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return sadrzaj;
    }
"
3299,5875d7f4-c37c-4553-985a-55ee41d0b555,"    public Resource getWebStranica() {
        return webStranica;
    }
"
3300,5f0520c6-e377-4af2-827e-2a11935995e4,"    public void setWebStranica(Resource webStranica) {
        this.webStranica = webStranica;
    }
"
3301,fdb1e627-c3ff-4677-b1ba-f33a92f15884,"    public int getMax() {
        return max;
    }
"
3302,e176359b-7ade-4311-9f30-23f7b97ced67,"    public void setMax(int max) {
        this.max = max;
    }
"
3303,691e144e-37ee-4e57-8c5b-74578efd0289,"    public String getNazivSpremista() {
        return nazivSpremista;
    }
"
3304,a2617cef-ecef-43b1-a65c-1e7aeb52484e,"    public void setNazivSpremista(String nazivSpremista) {
        this.nazivSpremista = nazivSpremista;
    }
"
3305,c52bf4f4-b5fe-4d8d-bda2-53fa9ffb27d4,"    public Cache getC() {
        return c;
    }
"
3306,b0f2bdd0-2bec-4b60-8ab3-1aee0efa9f09,"    public void setC(Cache c) {
        this.c = c;
    }
"
3307,b26d8595-4e8a-447a-8168-3a673aed8024,"    public int getInterval() {
        return interval;
    }
"
3308,6cb6c3c0-5694-4dcc-98b7-f39e25559eee,"    public void setInterval(int interval) {
        this.interval = interval;
    }
"
3309,9fc95bd8-6af0-4cf0-8ee1-c86bf1136fa3,"    public boolean isOcisti() {
        return ocisti;
    }
"
3310,5cb99a1c-14c5-4e03-a35e-6103e0f638c9,"    public void setOcisti(boolean ocisti) {
        this.ocisti = ocisti;
    }
"
3311,c6f5a5f2-d010-4056-99e8-4042ed5fe183,"    public int getOgranicenje() {
        return ogranicenje;
    }
"
3312,1e305f4d-e50b-4125-a86f-b36a7d47ad53,"    public void setOgranicenje(int ogranicenje) {
        this.ogranicenje = ogranicenje;
    }
"
3313,f350e102-6262-49dc-92a5-9cef7af2c48e,"    public boolean isKb() {
        return kb;
    }
"
3314,7e1bd684-cc93-4e5e-b1da-393a39a20e9c,"    public void setKb(boolean kb) {
        this.kb = kb;
    }
"
3315,ba8558c9-7726-417b-b5dd-8c6e590cd202,"    public boolean isStrategija() {
        return strategija;
    }
"
3316,4575de98-f34c-457f-8637-d1761c6ff635,"    public void setStrategija(boolean strategija) {
        this.strategija = strategija;
    }
"
3317,4726d67d-7c24-4f0a-84b5-3b29cda5ebb2,"    public View(Model model) {
        this.m = model;
    }
"
3318,9a454b64-ecd7-40ba-8cfb-e13732acb676,"    public void ispisiUpute() {
        System.out.println(""----------KOMANDE-------------"");
        System.out.println(""-I - ispis adresa poveznica s rednim brojem"");
        System.out.println(""-J n - prijelaz na poveznicu s rednim brojem n te ucitavanje web stranice"");
        System.out.println(""-S - prikaži sadrzaj spremista"");
        System.out.println(""-E - prazni spremiste"");
        System.out.println(""-Q - prekid rada programa"");
        System.out.println(""------------------------------"");
    }
"
3319,43220b83-c3de-452e-a6cc-7614c3f3983d,"    public void ispisPoveznica() {
        m.dohvatiListupoveznica();
        System.out.println(""---------POVEZNICE-------------"");
        ispisiLinije(m.getMax());
        for (int i = 0; i < m.getWebStranica().getListaURLa().size(); i++) {
            System.out.print(""| "" + (i + 1) + ""."");
            ispisipraznineBroja((Integer.toString(m.getWebStranica().getListaURLa().size()).length() - Integer.toString(i + 1).length()) + 1);
            System.out.print(""|  "" + m.getWebStranica().getListaURLa().get(i));
            ispisipraznineURLa(m.getMax() - m.getWebStranica().getListaURLa().get(i).toString().length());
            ispisiLinije(m.getMax());
        }
    }
"
3320,92c3fbf0-47b1-42c8-8a03-e877b113523d,"    public void ispisiLinije(int broj) {
        for (int a = 0; a < broj + 12; a++) {
            System.out.print(""-"");
        }
        System.out.println("""");

    }
"
3321,f76f0bae-5baf-4f53-b0d9-e9751978b0da,"    public void ispisipraznineURLa(int broj) {
        for (int a = 0; a < broj; a++) {
            System.out.print("" "");
        }
        System.out.println(""  |"");

    }
"
3322,b3d5c637-e278-4306-8eaf-6e328e9f52d7,"    public void ispisipraznineBroja(int broj) {
        for (int a = 0; a < broj; a++) {
            System.out.print("" "");
        }
    }
"
3323,2836cb89-fea4-4b38-99f7-65937201675d,"    public void novaStranica(String redniBroj) {
        m.promjeniStranicu(redniBroj);
        System.out.println(""---------------Nova stranica------------"");
        System.out.println(Ztintor_zadaca_4.pocetniLink.toString());
    }
"
3324,9778806f-173c-4851-8e0e-2d2a0105394d,"    public void ispisiStatistiku() {
        Resource r;
        System.out.println(""--------------STATISTIKA--------------"");
        System.out.println(m.getNazivSpremista());
        for (int i = 0; i < cac.getLista().size(); i++) {
            r = (Resource) cac.getLista().get(i);
            if (r.isSpremljen()) {
                if (m.getWebStranica().getNaziv().equals(r.getNaziv())) {
                    System.out.println((i + 1) + "". "" + r.getNaziv() + ""   "" + r.getBrojKoristenja() + ""   "" + ""Koristi se"");
                } else {
                    System.out.println((i + 1) + "". "" + r.getNaziv() + ""   "" + r.getBrojKoristenja() + ""   "" + r.getZadnjeKoistenje());
                }
            }
        }
        System.out.println(""--------------------------------------"");
    }
"
3325,dc4c96f3-8268-4165-aaa8-a0987f704913,"    public void izadi() {
        System.out.printf(""Serijalizirani podatci spremljeni u: "" + m.getNazivSpremista() + ""\\serijalizacija.ser"");
        m.serijaliziraj();
    }
"
3326,81759458-4f06-443c-9c32-15f488c61f1a,"    public void brisiNaZahtjev() {
        m.setOcisti(true);
        m.brisiSpremiste();
        System.out.println(""Obrisano spremiste "" + m.getNazivSpremista());
    }
"
3327,90998cb3-7542-4c6d-8ea3-7d303c8716c3,"    public Cache getCac() {
        return cac;
    }
"
3328,a7ca1b17-4bf9-47e4-a114-3364e5e73c7e,"    public void setCac(Cache cac) {
        this.cac = cac;
    }
"
3329,f7e684ea-7c8c-4852-97cc-bc4a89a3b627,"    @Override
    public void update(Observable o, Object arg) {
        System.out.println(arg);
    }
"
3330,2d81bd6c-cc5a-436a-9d0b-121cfff2db0b,"    public Controller(View view) {
        this.v = view;
    }
"
3331,9758108d-6178-4895-bc9a-f724d228644f,"    public void provjeriUnos() {
        Console c = System.console();
        if (c == null) {
            System.exit(1);
        }

        v.ispisiUpute();

        petlja = true;
        while (petlja) {
            input = c.readLine();
            String split[] = input.split("" "");
            switch (split[0]) {
                case ""-I"":
                    v.ispisPoveznica();
                    break;
                case ""-J"":
                    v.novaStranica(split[1]);
                    petlja = false;
                    break;

                case ""-S"":
                    v.ispisiStatistiku();
                    break;
                case ""-E"":
                    v.brisiNaZahtjev();
                    break;
                case ""-Q"":
                    v.izadi();
                    break;
            }
        }
    }
"
3332,343b8835-176c-4280-90c8-c8629cdf4517,"	public Board(int width, int height) {
		this.width = width;
		this.height = height;
				
		starfield = new Starfield(this.width, this.height, 50);
		
		// Start listening for key input
		addKeyListener(new TAdapter());
		
		// Prepare JPanel
		setFocusable(true);
		setDoubleBuffered(true);
		setBackground(Color.black);
		setSize(width, height);
		setPreferredSize(new java.awt.Dimension(width, height));
		setVisible(true);
		
		// Load all resources into RAM
		loadResources();
		
		// Set variables to their default values
		resetGame();
		
		// Start the game loop - it goes on forever!!! :D (should work like 30FPS but needs improvement)
		timer = new Timer(33, this);
		timer.start();
	}
"
3333,d4c8ae0f-1d5b-4b66-8dd7-dfea48352e4f,"	private void loadResources() {
		ClassLoader classLoader = getClass().getClassLoader();
		
		// Load images
		rock32Image = new ImageIcon(classLoader.getResource(""resources/asteroid2-32.png"")).getImage();
		rock48Image = new ImageIcon(classLoader.getResource(""resources/asteroid2-48.png"")).getImage();
		rock64Image = new ImageIcon(classLoader.getResource(""resources/asteroid2-64.png"")).getImage();
		shipImage = new ImageIcon(classLoader.getResource(""resources/spaceship2-64.png"")).getImage();
		bulletImage = new ImageIcon(classLoader.getResource(""resources/bullet2-6x12.png"")).getImage();
		
		for(int i = 0; i <= 17; i++) {
			explosionImages.add(new ImageIcon(classLoader.getResource(""resources/explosion/ex""+i+"".png"")).getImage());
		}
		
		// Load bounds for images
		rock32Bounds = ObjectBounds.parseFromFile(classLoader.getResource(""resources/asteroid2-32.txt""));
		rock48Bounds = ObjectBounds.parseFromFile(classLoader.getResource(""resources/asteroid2-48.txt""));
		rock64Bounds = ObjectBounds.parseFromFile(classLoader.getResource(""resources/asteroid2-64.txt""));
		shipBounds = ObjectBounds.parseFromFile(classLoader.getResource(""resources/spaceship2-64.txt""));
		bulletBounds = ObjectBounds.parseFromFile(classLoader.getResource(""resources/bullet2-6x12.txt""));
		
		// Load sounds
		explosionSound = Helper.fileToByteArray(classLoader.getResource(""resources/explosion.wav""));
	}
"
3334,0ba66e62-cf52-41e0-9156-338852d85d10,"	private void resetGame() {
		// Reset movements
		moveLeft = false;
		moveRight = false;
		moveUp = false;
		moveDown = false;
		isFiring = false;
		enterPressed = false;
		
		// Re-created game objects
		ship = new Ship(shipImage, shipBounds, width, height);
		rocks = new ArrayList<Rock>();
		bullets = new ArrayList<Bullet>();
		explosions = new ArrayList<Explosion>();
		
		// Reset environment variables
		score = 0;
		bulletFiringRate = 250;
		rockCreatingRate = 500;
		
		// Re-create timings
		gameStartedAt = new Date();
		lastBulletFiredAt = new Date();
		lastRockCreatedAt = new Date();
		lastRockCreatedAt.setTime(lastRockCreatedAt.getTime() - 15000);
		
		selectedMenuItem = 0;
		menuControlsBuffer = new Queue<Integer>();
	}
"
3335,0d0632d0-0dab-4d37-a0b2-418ce525b637,"	private void doLogic() {
		starfield.doLogic();
		
		if(gameState == 0) { // Main Menu
			doMenuLogic();
		} else if(gameState == 1) { // Game Play
			doGameLogic();
		} else { // Game Over
			doGameOverLogic();
		}
	}
"
3336,94086911-d910-4a5d-84a4-9110bc6fe493,"	private void doMenuLogic() {
		if(menuControlsBuffer.isEmpty()) {
			return;
		}
		
		int key = 0;
		
		try {
			key = menuControlsBuffer.dequeue();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		if(key == KeyEvent.VK_UP) {
			if(selectedMenuItem == 0) {
				selectedMenuItem = 2;
			} else {
				selectedMenuItem--;
			}
		} else if(key == KeyEvent.VK_DOWN) {
			if(selectedMenuItem == 2) {
				selectedMenuItem = 0;
			} else {
				selectedMenuItem++;
			}
		} else if(key == KeyEvent.VK_ENTER) {
			if(selectedMenuItem == 0) { // Start button
				resetGame();
				gameState = 1;
			} else if(selectedMenuItem == 1) { // Settings button
				// TODO: Create the settings menu
			} else { // Exit button
				timer.stop();
				//Spaceship.spaceship.dispose();
			}
		} 
	}
"
3337,5f661682-c236-4600-90f8-cf687ed461a8,"	private void doGameLogic() {
		handleObjectCreations();
		handleObjectMovements();
		handleObjectCollisions();
		handleObjectEndings();
		handleExplosions();
	}
"
3338,1acb8c81-f7d8-49b9-8077-197d1fc8a306,"	private void handleObjectCreations() {
		Date now = new Date();
		
		// Create new rock if possible
		if(now.getTime() - lastRockCreatedAt.getTime() > rockCreatingRate) {
			int rnd = GameObject.randomWithRange(2, 4);
			Image imageToPass = null;
			ObjectBounds boundsToPass = null;
			
			
			if(rnd == 2) {
				imageToPass = rock32Image;
				boundsToPass = (ObjectBounds)rock32Bounds.clone();
			} else if(rnd == 3) {
				imageToPass = rock48Image;
				boundsToPass = (ObjectBounds)rock48Bounds.clone();
			} else if(rnd == 4) {
				imageToPass = rock64Image;
				boundsToPass = (ObjectBounds)rock64Bounds.clone();
			}
			
			rocks.add(new Rock(rnd, imageToPass, boundsToPass, width, height));
			
			lastRockCreatedAt = now;
		}
		
		// Create a bullet if possible
		if(now.getTime() - lastBulletFiredAt.getTime() > bulletFiringRate && isFiring) {
			
			// left side bullet
			bullets.add(new Bullet(ship.getX()+3, ship.getY()+20, this.width, this.height, bulletImage, (ObjectBounds)bulletBounds.clone()));
			
			// right side bullet
			bullets.add(new Bullet(ship.getX()+ship.getWidth()-8, ship.getY()+20, this.width, this.height, bulletImage, (ObjectBounds)bulletBounds.clone()));
			
			// center bullet
			int x = (int)(ship.getX() + (ship.getWidth() / 2)) - (bulletImage.getWidth(null) / 2);
			bullets.add(new Bullet(x, ship.getY(), this.width, this.height, bulletImage, (ObjectBounds)bulletBounds.clone()));
			
			lastBulletFiredAt = now;
		}
	}
"
3339,06c5c969-7877-435f-bcb1-7df7a521a57e,"	private void handleObjectMovements() {
		for(Rock rock : rocks) {
			rock.advanceY(Direction.DOWN);
		}
		
		for(Bullet bullet : bullets) {
			bullet.advanceY(Direction.UP);
		}
		
		if(moveUp) {
			ship.advanceY(GameObject.Direction.UP);
		}
		
		if(moveDown) {
			ship.advanceY(GameObject.Direction.DOWN);
		}
		
		if(moveLeft) {
			ship.advanceX(GameObject.Direction.LEFT);
		}
		
		if(moveRight) {
			ship.advanceX(GameObject.Direction.RIGHT);
		}
	}
"
3340,0bebecbd-16c4-4b3c-b8a3-1ef338cfb7b3,"	private void handleObjectCollisions() {
		for(Rock rock : rocks) {
			if(rock.getBounds().isInside(ship.getBounds())) {
				// Collision with ship detected
				gameState = 2;
				break;
			}
			
			for(Bullet bullet : bullets) {
				if(rock.getBounds().isInside(bullet.getBounds())) {
					rocks.remove(rock);
					bullets.remove(bullet);
					explosions.add(new Explosion(rock.getX(), rock.getY(), rock.getWidth()));
					Helper.playSoundFromByteArray(explosionSound);
					score += 50;
					handleObjectCollisions();
					return;
				}
			}
		}
	}
"
3341,60455845-a7ca-4ee3-bf1a-d6bd1afbb1d6,"	private void handleObjectEndings() {
		for(Rock rock : rocks) {
			if(rock.isOutsideScreen(Direction.DOWN)) {
				rocks.remove(rock);
				handleObjectEndings();
				return;
			}
		}
		
		for(Bullet bullet : bullets) {
			if(bullet.isOutsideScreen(Direction.UP)) {
				bullets.remove(bullet);
				handleObjectEndings();
				return;
			}
		}
	}
"
3342,8f173001-828a-428a-aacb-33e4d846a6e9,"	private void handleExplosions() {
		handleExplosionRemoval();
		
		for(Explosion explosion : explosions) {
			explosion.stepInto();
		}
	}
"
3343,a71c7074-b227-4349-9d6b-e92743d4a1bc,"	private void handleExplosionRemoval() {
		for(Explosion explosion : explosions) {
			if(explosion.isDone()) {
				explosions.remove(explosion);
				handleExplosionRemoval();
				return;
			}
		}
	}
"
3344,87f8a4c3-13c7-4d80-9695-98ca1cd458a2,"	private void doGameOverLogic() {
		if(enterPressed) {
			resetGame();
			gameState = 1;
		}
	}
"
3345,da434900-a618-4c53-bbeb-93e654b9bc7a,"	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		starfield.draw(g);
		
		//g.drawImage(backgroundImage, 0, 0, width, height, null);
		
		if(gameState == 0) { // Main Menu
			paintMenu(g);
		} else if(gameState == 1) { // Game Play
			paintGame(g);
		} else { // Game Over
			paintGame(g);
			paintGameOver(g);
		}
	}
"
3346,20e3269b-a005-4734-be67-866a9f6f9869,"	private void paintMenu(Graphics g) {
		
		String menuStartName= ""START"";
		Rectangle2D menuStartBounds = g.getFontMetrics().getStringBounds(menuStartName, g);
		String menuSettingsName = ""SETTINGS"";
		Rectangle2D menuSettingsBounds = g.getFontMetrics().getStringBounds(menuSettingsName, g);
		String menuExitName = ""QUIT"";
		Rectangle2D menuExitBounds = g.getFontMetrics().getStringBounds(menuExitName, g);
		
		int padding = 30;
		int middleY = (int)(height / 2);
		
		g.setColor(Color.WHITE);
		g.setFont(new Font(""Helvetica"", Font.PLAIN, 24));
		
		int startX = (int)((width / 2) - (menuStartBounds.getWidth()));
		int startY = middleY - padding - (int)(menuStartBounds.getHeight());
		int settingsX = (int)((width / 2) - (menuSettingsBounds.getWidth()));
		int settingsY = middleY - (int)(menuSettingsBounds.getHeight() / 2);
		int exitX = (int)((width / 2) - (menuExitBounds.getWidth()));
		int exitY = middleY + padding;
		
		// Display START button
		g.drawString(menuStartName, startX, startY);
		
		// Display SETTINGS button
		g.drawString(menuSettingsName, settingsX, settingsY);
		
		// Display EXIT button
		g.drawString(menuExitName, exitX, exitY);
		
		// Draw a line under the selected menu item
		if(selectedMenuItem == 0) {
			g.drawLine(startX, startY+5, startX + (int)menuStartBounds.getWidth()*2, startY+5);
		} else if(selectedMenuItem == 1) {
			g.drawLine(settingsX, settingsY+5, settingsX + (int)menuSettingsBounds.getWidth()*2, settingsY+5);
		} else if(selectedMenuItem == 2) {
			g.drawLine(exitX, exitY+5, exitX + (int)menuExitBounds.getWidth()*2, exitY+5);
		}
	}
"
3347,e1ea3cc7-0bd1-40f2-b6f0-364b45834693,"	private void paintGame(Graphics g) {
		for(Rock rock : rocks) {
			Image img = null;
			
			if(rock.getType() == GameObject.Type.ROCK32) {
				img = rock32Image;
			} else if(rock.getType() == GameObject.Type.ROCK48) {
				img = rock48Image;
			} else if(rock.getType() == GameObject.Type.ROCK64) {
				img = rock64Image;
			}
			
			g.drawImage(img, rock.getX(), rock.getY(), rock.getWidth(), rock.getHeight(), null);
			
			if(drawObjectBorders) {
				g.setColor(Color.WHITE);
				for(Point point : rock.getBounds().getPoints()) {
					g.drawLine(point.getX()+rock.getX(), point.getY()+rock.getY(), point.getX()+rock.getX(), point.getY()+rock.getY());
				}
			}
		}
		
		for(Explosion explosion : explosions) {
			g.drawImage(explosionImages.get(explosion.getAnimationStep()), explosion.getX(), explosion.getY(), explosion.getSize(), explosion.getSize(), null);
		}
		
		for(Bullet bullet : bullets) {
			g.setColor(Color.BLUE);
			//g.fillRect(bullet.getX(), bullet.getY(), bullet.getWidth(), bullet.getHeight());
			g.drawImage(bullet.getImage(), bullet.getX(), bullet.getY(), bullet.getWidth(), bullet.getHeight(), null);
		}
		
		// Draw the spaceship
		g.drawImage(shipImage, ship.getX(), ship.getY(), ship.getWidth(), ship.getHeight(), null);
		
		if(drawObjectBorders) {
			g.setColor(Color.WHITE);
			
			for(Point point : ship.getBounds().getPoints()) {
				// Draw the border of the spaceship
				g.drawLine(point.getX()+ship.getX(), point.getY()+ship.getY(), point.getX()+ship.getX(), point.getY()+ship.getY());
			}
		}
		
		g.setColor(Color.blue);
		g.setFont(new Font(""Helvetica"", Font.PLAIN, 18));
		
		// Calculate position of score text
		String score = ""SCORE: "" + this.score;
		int scoreWidth = (int)g.getFontMetrics().getStringBounds(score, g).getWidth();
		int startX = this.width - scoreWidth - 10;
		int startY = 20;
		
		// Draw player score
		g.drawString(score, startX, startY);
		
		// Draw the amount of time elapsed since the game started
		g.drawString(""Time elapsed: "" + (int)((new Date().getTime() - gameStartedAt.getTime()) / 1000), 10, 20);
	}
"
3348,9941d058-8feb-4f6e-8111-12733214b708,"	private void paintGameOver(Graphics g) {
		g.setColor(Color.WHITE);
		g.setFont(new Font(""Helvetica"", Font.PLAIN, 48));
		
		String gameOverText = ""GAME OVER"";
		Rectangle2D gameOverBounds = g.getFontMetrics().getStringBounds(gameOverText, g);
        int startX = (int)((width / 2) - (gameOverBounds.getWidth() / 2)-2);
        int startY = (int)((height / 2) + (gameOverBounds.getHeight() / 2)-2);
        
		g.drawString(gameOverText, startX, startY);
		
		g.setColor(Color.BLUE);
		g.setFont(new Font(""Helvetica"", Font.PLAIN, 48));
		
		gameOverBounds = g.getFontMetrics().getStringBounds(gameOverText, g);
        startX = (int)((width / 2) - (gameOverBounds.getWidth() / 2));
        startY = (int)((height / 2) + (gameOverBounds.getHeight() / 2));
        
		g.drawString(gameOverText, startX, startY);
		
		g.setColor(Color.BLUE);
		g.setFont(new Font(""Helvetica"", Font.PLAIN, 24));
		
		gameOverText = ""PRESS ENTER TO RESTART"";
		gameOverBounds = g.getFontMetrics().getStringBounds(gameOverText, g);
        startX = (int)((width / 2) - (gameOverBounds.getWidth() / 2));
        startY = (int)((height / 2) + (gameOverBounds.getHeight() / 2) + 50);
        
		g.drawString(gameOverText, startX, startY);
	}
"
3349,a91bc0d9-34fc-4da4-9b34-0ea8b71e606d,"	@Override
	public void actionPerformed(ActionEvent e) {
		Date loopStart = new Date();
		
		doLogic();
		repaint();
		
		Date loopEnd = new Date();
		
		if(gameTicks.size() < 30) {
			gameTicks.add(loopEnd.getTime() - loopStart.getTime());
		} else {
			Long total = new Long(0L);
			
			for(Long one : gameTicks) {
				total += one;
			}
			
			System.out.println(""Game tick averages at about: "" + (total / gameTicks.size()) + "" milliseconds"");
			
			gameTicks.clear();
		}
	}
"
3350,187dd206-fbc0-4b61-895d-f279db13bddd,"		@Override
		public void keyPressed(KeyEvent e) {
			
			int key = e.getKeyCode();
			
			if(gameState == 0) { // Main Menu
				menuControlsBuffer.enqueue(key);
				return;
			}
			
			if(key == KeyEvent.VK_LEFT) {
				moveRight = false;
				moveLeft = true;
			} else if(key == KeyEvent.VK_RIGHT) {
				moveLeft = false;
				moveRight = true;
			} else if(key == KeyEvent.VK_UP) {
				moveDown = false;
				moveUp = true;
			} else if(key == KeyEvent.VK_DOWN) {
				moveUp = false;
				moveDown = true;
			} else if(key == KeyEvent.VK_F) {
				isFiring = true;
			} else if(key == KeyEvent.VK_ENTER) {
				enterPressed = true;
			}
			
		}
"
3351,22494799-f915-4cc6-9c15-5b8d65e4d9a3,"		@Override
		public void keyReleased(KeyEvent e) {
			
			int key = e.getKeyCode();
			
			if(key == KeyEvent.VK_LEFT) {
				moveLeft = false;
			} else if(key == KeyEvent.VK_RIGHT) {
				moveRight = false;
			} else if(key == KeyEvent.VK_UP) {
				moveUp = false;
			} else if(key == KeyEvent.VK_DOWN) {
				moveDown = false;
			} else if(key == KeyEvent.VK_F) {
				isFiring = false;
			} else if(key == KeyEvent.VK_ENTER) {
				enterPressed = false;
			}
		}
"
3352,3013aa5a-3ea3-4c04-9375-619181a35866,"	public Starfield(int width, int height, int density) {
		this.width = width;
		this.height = height;
		this.density = density;
		this.stars = new ArrayList<Star>();
		
		for(int i = 0; i < density; i++) {
			this.stars.add(Star.createRandomWithin(width, height));
		}
	}
"
3353,7c850984-3536-4b63-9bf5-190e901570af,"	public void doLogic() {
		handleStarCreation();
		handleStarMovement();
		handleStarRemoval();
	}
"
3354,97fe86fb-f012-4d4b-897c-b98962d450c1,"	public void handleStarCreation() {
		for(int i = stars.size(); i < density; i++) {
			stars.add(Star.createRandomWithin(width, 5));
		}
	}
"
3355,8885d2fa-dac1-4e6c-b223-fbde150fcc50,"	public void handleStarMovement() {
		for(Star star : stars) {
			star.move();
		}
	}
"
3356,2922d10d-8c86-46d2-b1d0-6e725f69a03b,"	public void handleStarRemoval() {
		for(Star star : stars) {
			if(star.isOutside(width, height)) {
				stars.remove(star);
				handleStarRemoval();
				return;
			}
		}
	}
"
3357,2d509649-f109-4283-aea0-81f0e6a84223,"	public void draw(Graphics g) {
		
		for(Star star : stars) {
			g.setColor(Color.WHITE);
			g.fillOval(star.getX(), star.getY(), star.getSize(), star.getSize());
			//g.drawLine(star.getX(), star.getY(), star.getX(), star.getY());
		}
		
	}
"
3358,272968b8-2300-4467-b2d0-cd3190eb3835,"	public static final byte[] fileToByteArray(URL fileUrl) {
		try {
			// Create instances to start reading
			File file = new File(fileUrl.toURI());
			FileInputStream fileInputStream = new FileInputStream(new File(fileUrl.toURI()));
			
			// Create a temporary byte array
			byte[] tmpByteArray = new byte[(int)file.length()];
			
			// Read file into temporary byte array
			fileInputStream.read(tmpByteArray);
			fileInputStream.close();
			
			// Return the temporary byte arrays
			return tmpByteArray;
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return null;
	}
"
3359,81aeb68a-c0cc-4606-a959-1c2a8aa8cbb8,"	public static final void playSoundFromByteArray(byte[] soundBytes) {
		try {
			// Open an audio input stream from the soundBytes array
			AudioInputStream inputStream = AudioSystem.getAudioInputStream(new ByteArrayInputStream(soundBytes));
			
			// Create a sound clip from the audio input stream, and play the sound
			Clip clip = AudioSystem.getClip();
			clip.open(inputStream);
			inputStream.close();
			clip.start();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
"
3360,1a5a8a25-5e45-49bd-ad53-b3b4c6a92f00,"	public ObjectBounds(ArrayList<Point> points) {
		this.points = points;
	}
"
3361,084e1b55-b622-4b56-a6dc-de219a225bd4,"	public void setXElevation(int xElevation) {
		this.xElevation = xElevation;
	}
"
3362,c97ff733-9717-4690-9993-0994d34be3ea,"	public int getXElevation() {
		return this.xElevation;
	}
"
3363,ef872439-4abe-4f2b-9cd7-a04e9f156d4b,"	public void setYElevation(int yElevation) {
		this.yElevation = yElevation;
	}
"
3364,fb32622d-999f-44d2-b791-4e9acc0dbc58,"	public int getYElevation() {
		return this.yElevation;
	}
"
3365,80748019-cc12-44dd-b627-b19bebf2d5d0,"	public void setElevation(int xElevation, int yElevation) {
		this.xElevation = xElevation;
		this.yElevation = yElevation;
	}
"
3366,e88c3daa-a69a-49f0-b27b-0a11dea2edee,"	public ArrayList<Point> getPoints() {
		return this.points;
	}
"
3367,42a02231-cd8d-4857-a2a7-7a9ddd364e63,"	public boolean isInside(ObjectBounds objectBounds2) {
		for(Point point : points) {
			for(Point point2 : objectBounds2.getPoints()) {
				if(point.getX() + xElevation == point2.getX() + objectBounds2.xElevation) {
					if(point.getY() + yElevation == point2.getY() + objectBounds2.yElevation) {
						return true;
					}
				}
			}
		}
		
		return false;
	}
"
3368,29744373-a2ea-4f5b-adc1-e2ee11d37581,"	public static ObjectBounds parseFromFile(URL fileUrl) {
		try {
			ArrayList<Point> points = new ArrayList<Point>();
			
			BufferedReader bReader = new BufferedReader(new InputStreamReader(fileUrl.openStream()));
			String fileContent = bReader.readLine();
			
			String[] rawPoints = fileContent.split(""\\|"");
			
			for(String rawPoint : rawPoints) {
				String[] splittedPoint = rawPoint.split("","");
				
				int x = Integer.parseInt(splittedPoint[0]);
				int y = Integer.parseInt(splittedPoint[1]);
				
				points.add(new Point(x, y));
			}
			
			bReader.close();
			
			return new ObjectBounds(points);
		} catch(Exception ex) {
			ex.printStackTrace();
		}
		
		return null;
	}
"
3369,bee90fa2-e741-4cff-9215-ef018a5fdea5,"	public Object clone() {
		try {
			return super.clone();
		} catch(Exception ex) {
			ex.printStackTrace();
		}
		
		return null;
	}
"
3370,f330016e-53f8-4ad2-b8e1-22960cdb60cc,"	public Ship(Image image, ObjectBounds bounds, int panelWidth, int panelHeight) {
		setPanelSize(panelWidth, panelHeight);
		setType(GameObject.Type.SHIP);
		
		setImage(image);
		setBounds(bounds);
		
		setSizeByImage();
		setSpeed(5);
		
		// Position the spaceship at the bottom center of the screen
		setX((int)((panelWidth / 2) - (getWidth() / 2)));
		setY(panelHeight - getHeight());
		
		getBounds().setElevation(getX(), getY());
		
		limitToScreenBounds(true);
	}
"
3371,6dd4b033-4bd0-4a32-a0e1-d810b114620c,"	public Star() {
		this(0, 0, 1, 1);
	}
"
3372,10bf6f45-d222-4b70-9b1a-71542d9db688,"	public Star(int x, int y, int size, int speed) {
		this.x = x;
		this.y = y;
		this.size = size;
		this.speed = speed;
	}
"
3373,44610193-e2f5-4668-8c88-6f073bbe6e9e,"	public int getX() {
		return this.x;
	}
"
3374,aceb10ff-8c90-4391-b9b6-612683ffc87c,"	public void setX(int x) {
		this.x = x;
	}
"
3375,e8308f68-233b-4ecd-bfa1-af375aa66825,"	public int getY() {
		return this.y;
	}
"
3376,0d51a8b1-5434-47ae-a03d-7a572b539bb7,"	public void setY(int y) {
		this.y = y;
	}
"
3377,97125d6e-5743-4ba7-8519-3c65174c6f67,"	public int getSize() {
		return this.size;
	}
"
3378,5ef04ff6-210b-43a3-9685-d319c4565cd9,"	public void setSize(int radius) {
		this.size = radius;
	}
"
3379,f30fedcc-4be3-4dd3-842c-9d838fbd6a91,"	public int getSpeed() {
		return this.speed;
	}
"
3380,101a0d09-1e22-4c01-99c3-0066334c16e7,"	public void setSpeed(int speed) {
		this.speed = speed;
	}
"
3381,458f9019-9d61-406e-938d-2dccf36daba9,"	public void move() {
		this.y += speed;
	}
"
3382,0b150adf-4c62-4976-b2df-75710d3f95cc,"	public boolean isOutside(int width, int height) {
		if(this.y > height) {
			return true;
		}
		
		return false;
	}
"
3383,3bbf65f7-3b6f-4d48-8204-c11930d2192b,"	public static Star createRandomWithin(int width, int height) {
		int ranRadius = GameObject.randomWithRange(1, 2);
		int ranX = GameObject.randomWithRange(0, width-1-(ranRadius*2));
		int ranY = GameObject.randomWithRange(0, height-1-(ranRadius*2));
		int ranSpeed = ranRadius;
		
		return new Star(ranX, ranY, ranRadius, ranSpeed);
	}
"
3384,7994eb4d-0584-4764-a00f-50409a611602,"	public Spaceship() {
		setTitle(""Spaceship Game by Erik Kralj"");
		setSize(WIDTH, HEIGHT);
		setResizable(false);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setVisible(true);
		
		add(new Board(getContentPane().getWidth(), getContentPane().getHeight()));
	}
"
3385,c8401844-f2bb-4884-9d93-d824dcfc3447,"	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new Spaceship();
			}
		});
	}
"
3386,fb345b95-77f9-4540-9463-4d7f2dec55a0,"			@Override
			public void run() {
				new Spaceship();
			}
"
3387,83715a06-a510-435c-b984-42cde58b2c21,"	public Explosion(int locationX, int locationY, int size) {
		this.locationX = locationX;
		this.locationY = locationY;
		this.size = size;
	}
"
3388,80e5889a-be24-4283-8bb2-e1e1afbc1c9e,"	public int getX() {
		return this.locationX;
	}
"
3389,3535a102-2f32-4e6d-80b6-accc3f4c6a05,"	public int getY() {
		return this.locationY;
	}
"
3390,62d8fcf8-e4c9-43e5-82e9-699c2fc8bb3d,"	public int getSize() {
		return this.size;
	}
"
3391,9f893dc5-4488-4f27-bbc9-29c6cfc336b6,"	public boolean isDone() {
		return this.done;
	}
"
3392,0736f406-7e4f-4bfb-b8c3-9c48a111563f,"	public void stepInto() {
		if(animationStep == animationStopAt) {
			done = true;
			return;
		}
		
		animationStep++;
	}
"
3393,d730ca20-ef4d-49e9-92ab-16feb2933681,"	public int getAnimationStep() {
		return this.animationStep;
	}
"
3394,dfce595f-96b2-467b-8a11-607d0e33dc38,"	public Rock(int type, Image image, ObjectBounds bounds, int panelWidth, int panelHeight) {
		setPanelSize(panelWidth, panelHeight);
		setType(GameObject.Type.values()[type]);
		setImage(image);
		setBounds(bounds);
		setSizeByImage();
		setSpeed(3);
		setX(GameObject.randomWithRange(0, panelWidth - getWidth()));
		setY(-getHeight());
		limitToScreenBounds(false);
	}
"
3395,12908fba-c071-4783-8552-c97879482916,"	public Bullet(int locationX, int locationY, int panelWidth, int panelHeight, Image image, ObjectBounds bounds) {
		setPanelSize(panelWidth, panelHeight);
		setType(GameObject.Type.BULLET);
		setX(locationX);
		setY(locationY);
		setImage(image);
		setBounds(bounds);
		setSizeByImage();
		setSpeed(8);
		getBounds().setElevation(getX(), getY());
		limitToScreenBounds(false);
	}
"
3396,55815a3c-7dbf-4a6a-a636-7e7b3999b742,"	public Type getType() {
		return this.type;
	}
"
3397,726711f2-09cb-45c2-905e-2943e0b3c87e,"	public void setType(Type type) {
		this.type = type;
	}
"
3398,8805e3bd-7c6c-48e2-be17-d3ac1d043e10,"	public int getX() {
		return this.x;
	}
"
3399,587a5223-823a-4a7c-8f5a-ff58699d19ff,"	public void setX(int x) {
		this.x = x;
	}
"
3400,8c7d0ecc-a922-4e12-b878-d6f75a3fd47d,"	public int getY() {
		return this.y;
	}
"
3401,f3a275e5-7912-4a79-bea1-ccbf442290fe,"	public void setY(int y) {
		this.y = y;
	}
"
3402,c2c827b9-8020-4482-b13f-254fcf6f33ae,"	public int getWidth() {
		return this.width;
	}
"
3403,187bacf4-1aa2-462b-8cbb-f2ce5372c210,"	public void setWidth(int width) {
		this.width = width;
	}
"
3404,cf5d5b08-72f5-4e92-84b2-518cabbab352,"	public int getHeight() {
		return this.height;
	}
"
3405,c8963fb8-838b-4ada-ae2a-a5189f88de94,"	public void setHeight(int height) {
		this.height = height;
	}
"
3406,97ed94b1-07d0-47b1-ad1c-2f67b8bc2e39,"	public int getSpeed() {
		return this.speed;
	}
"
3407,393145d4-27fa-46a4-9ef7-5c796436a666,"	public void setSpeed(int speed) {
		this.speed = speed;
	}
"
3408,651fffb1-caf6-49eb-bb71-ce5fefea5294,"	public Image getImage() {
		return this.image;
	}
"
3409,50937e44-ab10-4a7f-a3be-5e9de4906766,"	public void setImage(Image image) {
		this.image = image;
	}
"
3410,fda12bf8-486a-496f-844d-160dc643e14b,"	public ObjectBounds getBounds() {
		return this.bounds;
	}
"
3411,4b3cae76-8b60-4437-b782-0a2a77e1c1a0,"	public void setBounds(ObjectBounds bounds) {
		this.bounds = bounds;
	}
"
3412,7fcd36a3-dee5-4c04-97d1-8c16d6f6d170,"	public boolean isLimitedToScreenBounds() {
		return this.limitToScreenBounds;
	}
"
3413,abf5b10e-4893-4daf-befe-87d135769181,"	public void limitToScreenBounds(boolean limit) {
		this.limitToScreenBounds = limit;
	}
"
3414,44cb1830-9c39-4107-be50-d815f12b765b,"	public int getPanelWidth() {
		return this.panelWidth;
	}
"
3415,b66190ba-2788-4557-98ea-3083f271487b,"	public void setPanelWidth(int panelWidth) {
		this.panelWidth = panelWidth;
	}
"
3416,535f7196-53fc-4ae0-b083-f37724f2ed98,"	public int getPanelHeight() {
		return this.panelHeight;
	}
"
3417,14f5ca21-4eb8-4c42-9434-f8668a7f0ad9,"	public void setPanelHeight(int panelHeight) {
		this.panelHeight = panelHeight;
	}
"
3418,1d074ab8-2894-456c-9303-1a59b786a5f3,"	public void setPanelSize(int panelWidth, int panelHeight) {
		this.panelWidth = panelWidth;
		this.panelHeight = panelHeight;
	}
"
3419,1c085e1e-ebc7-406b-8423-f7a4d424d516,"	public void setBoundsBySize() {
		ArrayList<Point> points = new ArrayList<Point>();
		
		for(int y = 0; y < this.height; y++) {
			for(int x = 0; x < this.width; x++) {
				points.add(new Point(x, y));
			}
		}
		
		this.bounds = new ObjectBounds(points);
	}
"
3420,058a5059-7daa-44bf-a549-f2b92d70fa22,"	public void advanceX(Direction direction) {
		if(limitToScreenBounds) {
			if(direction == Direction.LEFT) {
				if((this.x - speed) < 0) {
					// Prevent movement, object is at min screen bounds
					return;
				}
			} else if(direction == Direction.RIGHT) {
				if((this.x + speed) > (this.panelWidth - this.width)) {
					// Prevent movement, object is at max screen bounds
					return;
				}
			}
		}
		
		if(direction == Direction.LEFT) {
			this.x -= speed;
		} else if(direction == Direction.RIGHT) {
			this.x += speed;
		} else {
			System.out.println(""Unsupported direction for x axis!"");
		}
		
		this.bounds.setElevation(this.x, this.y);
	}
"
3421,7b7c00c5-3c6f-49fa-8c7c-3046be309cc5,"	public void advanceY(Direction direction) {
		if(limitToScreenBounds) {
			if(direction == Direction.UP) {
				if((this.y - speed) < 0) {
					// Prevent movement, object is at min screen bounds
					return;
				}
			} else if(direction == Direction.DOWN) {
				if((this.y + speed) > (this.panelHeight - this.height)) {
					// Prevent movement, object is at max screen bounds
					return;
				}
			}
		}
		
		if(direction == Direction.UP) {
			this.y -= speed;
		} else if(direction == Direction.DOWN) {
			this.y += speed;
		} else {
			System.out.println(""Unsupported direction for y axis!"");
		}
		
		this.bounds.setElevation(this.x, this.y);
	}
"
3422,1dd7e0f0-60da-4432-9d3e-6a4fd133b4bb,"	public void setSizeByImage() {
		this.width = image.getWidth(null);
		this.height = image.getHeight(null);
	}
"
3423,dad5f453-5928-43f0-8b29-8b6ebb6baaf5,"	public boolean isOutsideScreen(Direction direction) {
		if(direction == Direction.DOWN) {
			if(this.y > this.panelHeight) {
				return true;
			}
		} else if(direction == Direction.UP) {
			if((this.y + this.height) < 0) {
				return true;
			}
		}
		
		return false;
	}
"
3424,062233b3-f68a-411b-a2a6-2336db1b3da7,"	public static int randomWithRange(int min, int max)
	{
	   int range = (max - min) + 1;     
	   return (int)(Math.random() * range) + min;
	}
"
3425,db9593b5-b78c-4502-895a-c9d15194102c,"	public Point() { }
"
3426,951d07b4-1783-4f69-a547-37af28ce78d5,"	public Point(int x, int y) {
		this.x = x;
		this.y = y;
	}
"
3427,fbdc32f6-6da3-4bca-993b-f9ad13665522,"	public int getX() {
		return this.x;
	}
"
3428,bdf31ddb-cfe5-458e-bc1a-090491bf927b,"	public int getY() {
		return this.y;
	}
"
3429,f56e673e-3c6a-4461-8f60-deb15ebf72d7,"	public void setX(int x) {
		this.x = x;
	}
"
3430,ad109e2f-1f25-4d54-a583-3487b9f8ddfc,"	public void setY(int y) {
		this.y = y;
	}
"
3431,4d0bef03-b75e-4b76-82d1-7bd4a45f420b,"	public boolean isBigger(Point p) {
		
		if(this.x > p.x && this.y > p.y) {
			return true;
		}
		
		return false;
	}
"
3432,7b8eb997-f75c-402f-b38c-d5dd3b38f58d,"	public boolean isSmaller(Point p) {
		
		if(this.x < p.x && this.y < p.y) {
			return true;
		}
		
		return false;
	}
"
3433,6797b21e-7b83-483a-8032-80b76ccfabf9,"    public BasePage(WebDriver driver){
        this.webDriver = driver;
        PageFactory.initElements(webDriver, this);


    }
"
3434,bb63da35-ed70-4e1b-8574-5fbf126583f2,"    public void chooseJava(String category, String language, String value){
        $(categoryDrpdwn).selectOption(category);
        $(languageDrpdwn).shouldHave(Condition.hasText(language)).selectOption(language);
        $(values).setValue(value);
        $(codeInItBtn).click();
    }
"
3435,8d39baae-9e13-46d5-9570-33eda8084496,"    public BasicAjaxPage(WebDriver driver) {
        super(driver);
    }
"
3436,9be601f0-4fbf-49a7-9fc6-20bfe19b4ea8,"    public void clickShowAlertBoxPageBtn() {
        $(showAlertBoxPageBtn).shouldBe(Condition.visible).click();
    }
"
3437,9fb0b8e5-070f-4ab4-953d-337eb4cac47d,"    public AlertPage(WebDriver driver) {
        super(driver);
    }
"
3438,26d1d851-5d40-427a-9d42-eac12e993d5a,"    public void chooseRequiredByFullName(String fullName){
        SelenideElement element =  $(By.xpath(""//ul[@id = 'optional_listbox']/li[contains(text(), '"" + fullName + ""')]""));
        multiSelectOptional.click();
        element.click();
    }
"
3439,ef066e42-27dc-4f11-b2f8-cbb2ba8583d1,"    public void deleteChoosenByFullName(String fullName){
        SelenideElement element
                = $(By.xpath(""//ul[@id = 'required_taglist']/li/span[contains(text(), '"" + fullName + ""')]/following-sibling::span""));
        element.click();
    }
"
3440,410b6d58-f89f-4d3d-bbd2-7291f672f37f,"    public void clickSendInvitationBtn() {
        $(sendInvitationBtn).shouldBe(Condition.enabled).click();
    }
"
3441,5dc2f0dc-c0da-48aa-975f-baba969936f2,"    public KendouiMultiselectPage(WebDriver driver) {
        super(driver);
    }
"
3442,4c02a9b1-1013-44ff-9aa2-3682852872ef,"    public WebElement getTableRaw() {
        return tableRaw;
    }
"
3443,f1e40834-53c7-4ac9-b8a8-7721cd5a1232,"    public int getCountOfRowsInTable (String xpath){
        List<WebElement> rows = webDriver.findElements(By.xpath(xpath));
        return rows.size() ;
    }
"
3444,69ca827c-7457-4edc-bf6d-cd6dbab7faaa,"    public void choseAndApplyFilter(String nameOfColumn,String nameCondition, String inputValue ) {
        clickOnChoosenFilter(nameOfColumn);
        chooseFilterAction(nameCondition, inputValue);

    }
"
3445,c4b136fc-0dc2-40a2-b4b9-99c61b258114,"    public void chooseFilterAction(String nameConditions, String inputValue) {
        builder = new Actions(webDriver);
        builder.click(condition);
        builder.sendKeys(condition,nameConditions);
        builder.sendKeys(input, inputValue);
        builder.click(submitBtn);
        Action filter = builder.build();

        filter.perform();

    }
"
3446,c84cbae5-3b9b-4bac-b247-4db8df7d19c7,"    private void clickOnChoosenFilter(String nameOfColumn) {
        SelenideElement filter  =
                $(By.xpath(""//div[@id = 'grid']//thead//th[@data-field = '"" + nameOfColumn + ""']/a""));
        filter.click();
    }
"
3447,69f60b86-46a6-43f0-a087-335d6ae79086,"    public FilterMenuCustomizationPage(WebDriver driver) {
        super(driver);
    }
"
3448,bf781224-9166-43aa-8c56-74ac7c9a6eeb,"    @Test
    public void verifyMultiSelect() {
        KendouiMultiselectPage kendouiMultiselectPage = new KendouiMultiselectPage(getWebDriver());
        kendouiMultiselectPage.chooseRequiredByFullName(""Nancy Davolio"");
        kendouiMultiselectPage.deleteChoosenByFullName(""Andrew Fuller"");
        kendouiMultiselectPage.clickSendInvitationBtn();
        //home


    }
"
3449,386d758c-e26d-43c9-b6ff-2a668ae81dad,"    @Override
    protected String getUrl(){
        return ""web/multiselect/index.html"";
    }
"
3450,3249bead-b949-436a-94be-5336c247992a,"    @Test
    public void verifyBasicAjax() {
        BasicAjaxPage basicAjaxPage = new BasicAjaxPage(getWebDriver());

        basicAjaxPage.chooseJava(""Server"",""Cobol"",""1"");

    }
"
3451,bd439e60-c26c-45ec-945f-852b15b81a07,"    @Override
    protected String getUrl(){
        return ""/basic_ajax.html"";
    }
"
3452,6fb425ce-8516-49d4-8964-e0232056a398,"    @Test
    public void verifyFilter() {
        FilterMenuCustomizationPage filterMenuCustomizationPage  = new FilterMenuCustomizationPage(getWebDriver());

        filterMenuCustomizationPage.choseAndApplyFilter(""Title"", ""Is equal to"",""Web Designer"");

        int i = filterMenuCustomizationPage.getCountOfRowsInTable(""//div[@id = 'grid']//tbody/tr"");
        System.out.println(i);
    }
"
3453,44f62bd5-c6cb-4590-a623-1b674bd62bd8,"    @Override
    protected  String getUrl() {
        return ""web/grid/filter-menu-customization.html"";
    }
"
3454,b9bf715a-e8b6-41e8-939d-0faccedb64b2,"    public WebDriver getWebDriver() {
        return driver;
    }
"
3455,dc172d15-7b57-4c89-b099-c447e67cb5cd,"    @BeforeClass
    public void SetUp(){
        System.out.println(""webdriver init"");
        driver = new FirefoxDriver();
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        WebDriverRunner.setWebDriver(driver);
        Configuration.timeout = 4000;
        //getWebdriver().get(""http://compendiumdev.co.uk/selenium"" + getUrl());
        driver.get(""http://demos.kendoui.com/"" + getUrl());
    }
"
3456,8c797f36-efcf-4274-91e2-249271aa726b,"    protected String getUrl(){
        return ""/"";
    }
"
3457,ca3a7087-f447-4802-a859-658ca142986b,"    @Test
    public void verifyAlert() {
        AlertPage alertPage  = new AlertPage(getWebDriver());
        alertPage.clickShowAlertBoxPageBtn();

    }
"
3458,d2e026ba-d8f0-446a-9a04-e1f25eef4e05,"    @Override
    protected String getUrl(){
        return ""/alert.html"";
    }
"
3459,1e52ba7d-fd42-4768-be90-0447fff93081,"	public Estoque() {
		Cerveja cvj1 = new Cerveja(""Stella Artois"", ""A cerveja belga mais francesa do mundo"", ""Artois"", Tipo.LAGER);
		Cerveja cvj2 = new Cerveja(""Erdinger Weissbier"", ""Cerveja de trigo alemã"", ""Erdinger Weissbrau"", Tipo.WEIZEN);
		this.cervejas.put(cvj1.getNome(), cvj1);
		this.cervejas.put(cvj2.getNome(), cvj2);
	}
"
3460,6950c5ab-2422-43ee-b11f-9d21dfd24009,"	public Collection<Cerveja> listarCervejas(){
		return new ArrayList<Cerveja>(this.cervejas.values());
	}
"
3461,0d34a594-729d-4695-8f2b-9034f51796c1,"	public void adicionarCerveja(Cerveja cerveja){
		this.cervejas.put(cerveja.getNome(), cerveja);
	}
"
3462,048f7e1c-ee4e-46d0-b4df-32a418f9537a,"	public Cerveja recuperarCervejaPeloNome(String nome){
		return this.cervejas.get(nome);
	}
"
3463,d0edda54-51f8-45b5-8d4b-0a02b511de75,"	public Cerveja() {
		// TODO Auto-generated constructor stub
	}
"
3464,bff2c483-7c18-49c3-8854-0d5d5cc77801,"	public Cerveja(String nome, String descricao, String cervejaria, Tipo tipo) {
		super();
		this.nome = nome;
		this.descricao = descricao;
		this.cervejaria = cervejaria;
		this.tipo = tipo;
	}
"
3465,b6ac5157-690c-4c38-b9a7-00a0d82f8088,"	public String getNome() {
		return nome;
	}
"
3466,a3a18cff-0457-46e4-bfd3-912c90ead3a3,"	public void setNome(String nome) {
		this.nome = nome;
	}
"
3467,3c82fdae-b014-499f-9a71-31a1b8e0a55f,"	public String getDescricao() {
		return descricao;
	}
"
3468,9a0ca503-04ae-4827-abb5-70e1bd8c1e39,"	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}
"
3469,8bd36c88-2c99-4c8b-b28d-5e96b9b09bad,"	public String getCervejaria() {
		return cervejaria;
	}
"
3470,a97ff98a-642f-49dc-90f2-8d93e5f3cad7,"	public void setCervejaria(String cervejaria) {
		this.cervejaria = cervejaria;
	}
"
3471,f6d185b1-04d2-4c96-a225-462f6d6b6ce1,"	public Tipo getTipo() {
		return tipo;
	}
"
3472,a3cd7b2e-c350-4d0b-ae85-bfb03eb4b14c,"	public void setTipo(Tipo tipo) {
		this.tipo = tipo;
	}
"
3473,dc852f97-1e20-4e94-b2a5-d06be5dbfe0d,"	@Override
	public String toString() {
		return this.nome + "" - "" + this.descricao;
	}
"
3474,ee33c10e-bd27-4bda-94fe-df9965edb969,"	@XmlElement(name=""cerveja"")
	public List<Cerveja> getCervejas() {
		return cervejas;
	}
"
3475,71c1609b-e2e4-459a-abdf-9965d6e34c84,"	public void setCervejas(List<Cerveja> cervejas) {
		this.cervejas = cervejas;
	}
"
3476,dc3ce583-0745-4f72-bf0a-dfd030b6b812,"	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String acceptHeader = request.getHeader(""Accept"");
		if(acceptHeader == null || acceptHeader.contains(""application/xml"")){
			escreveXML(request, response);
		}else if(acceptHeader.contains(""application/json"")){
			escreveJSON(request, response);
		}else{
			response.sendError(415); // formato nao suportado
		}
	}
"
3477,4cc0272c-1a3e-47fb-b128-a7f3078373f7,"	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		try {
			String identificador = null;
			try {
				identificador = obtemIdentificador(req);
			} catch (RecursoSemIdentificadorException e) {
				resp.sendError(400, e.getMessage());
			}
			if(identificador != null && estoque.recuperarCervejaPeloNome(identificador) != null){
				resp.sendError(409, ""Ja existe uma cerveja com esse nome"");
				return;
			}
			String tipoDeConteudo = req.getContentType();
			Cerveja cerveja = null;
			Unmarshaller unmarshaller = context.createUnmarshaller();
			if(tipoDeConteudo == null || tipoDeConteudo.contains(""application/xml"")){
				cerveja = (Cerveja) unmarshaller.unmarshal(req.getInputStream());
				cerveja.setNome(identificador);
				estoque.adicionarCerveja(cerveja);
				String requestURI = req.getRequestURI();
				resp.setHeader(""Location"", requestURI);
				resp.setStatus(201);
				escreveXML(req, resp);
			}else if(tipoDeConteudo.contains(""application/json"")){
				List<String> lines = IOUtils.readLines(req.getInputStream());
				StringBuilder builder = new StringBuilder();
				for (String line : lines) {
					builder.append(line);
				}
				MappedNamespaceConvention con = new MappedNamespaceConvention();
				JSONObject jsonObject = new JSONObject(builder.toString());
				XMLStreamReader xmlStreamReader = new MappedXMLStreamReader(jsonObject, con);
				cerveja = (Cerveja) unmarshaller.unmarshal(xmlStreamReader);
				cerveja.setNome(identificador);
				estoque.adicionarCerveja(cerveja);
				String requestURI = req.getRequestURI();
				resp.setHeader(""Location"", requestURI);
				resp.setStatus(201);
				escreveJSON(req, resp);
			}else{
				resp.sendError(415);
				return;
			}
		} catch (Exception e) {
			resp.sendError(500, e.getMessage());
		}
	}
"
3478,89610b8d-9413-4a1b-9281-629aba044d49,"	private void escreveXML(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		Object obj = localizaObjetoASerEnviado(request);
		if(obj == null){
			// objeto nao encontrado
			response.sendError(404);
			//return;
		}else{
			try {
				Marshaller marshaller = context.createMarshaller();
				response.setContentType(""application/xml;charset=UTF-8"");
				marshaller.marshal(obj, response.getWriter());
			} catch (JAXBException e) {
				response.sendError(500, e.getMessage());
			}
		}
	}
"
3479,72c4aa4f-53b3-4201-9257-3d05069920d5,"	private void escreveJSON(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		Object obj = localizaObjetoASerEnviado(request);
		if(obj == null){
			// objeto nao encontrado
			response.sendError(404);
			//return;
		}else{
			try {
				response.setContentType(""application/json;charset=UTF-8"");
				MappedNamespaceConvention con = new MappedNamespaceConvention();
				XMLStreamWriter xmlStreamWriter = new MappedXMLStreamWriter(con, response.getWriter());
				Marshaller marshaller = context.createMarshaller();
				marshaller.marshal(obj, xmlStreamWriter);
			} catch (JAXBException e) {
				response.sendError(500, e.getMessage());
			}
		}
	}
"
3480,0bd1bbb6-b6e0-473b-a8cd-893dc3449cc9,"	private String obtemIdentificador(HttpServletRequest req) throws RecursoSemIdentificadorException{
		String requestURI = req.getRequestURI();
		String[] pedacosDaUri = requestURI.split(""/"");
		boolean contextoCervejasEncontrado = false;
		for(String contexto : pedacosDaUri){
			if(contexto.equals(""cervejas"")){
				contextoCervejasEncontrado = true;
				continue;
			}
			if(contextoCervejasEncontrado){
				try{
					return URLDecoder.decode(contexto, ""UTF-8"");
				}catch(UnsupportedEncodingException e){
					return URLDecoder.decode(contexto);
				}
			}
		}
		throw new RecursoSemIdentificadorException(""Recurso sem identificador"");
	}
"
3481,d89e3e86-9c08-489c-b4af-4b5ecb4ded58,"	private Object localizaObjetoASerEnviado(HttpServletRequest req){
		Object obj = null;
		try {
			String identificador = obtemIdentificador(req);
			obj = estoque.recuperarCervejaPeloNome(identificador);
		} catch (RecursoSemIdentificadorException e) {
			Cervejas cervejas = new Cervejas();
			cervejas.setCervejas(new ArrayList<Cerveja>(estoque.listarCervejas()));
			obj = cervejas;
		}
		return obj;
	}
"
3482,82023adc-f78e-47e4-a9e9-7b3d57670644,"	public RecursoSemIdentificadorException(String message) {
		super(message);
	}
"
3483,1f021d7d-a37b-4bc1-a8f6-5701df35676a,"	public Coin(double _x, double _y) {
		x = _x;
		y = _y;
		yspeed = 3 + Math.random()*12;
		xspeed = (Math.random()*2-1)*5;
	}
"
3484,a38f8383-1228-4583-b89d-aa66462e5c09,"	public void logic() {
		x+=xspeed;
		y+=yspeed;
		
		yspeed -= 0.4;
	}
"
3485,0d7fd1c9-1049-445b-91cb-dbd6458a3900,"	public void draw() {
		logic();

		glPushMatrix();

		glTranslated(x, y, 0);
		
		glColor3d(1, 1, 0);
		glBegin(GL_QUADS);


		glVertex2d(-4, 0);

		glVertex2d(4, 0);

		glVertex2d(4, 8);

		glVertex2d(-4, 8);

		glEnd();

		glPopMatrix();
	}
"
3486,a0fc32ed-6866-44ba-a931-3aa365c5ff8c,"	public void init() {
		try {
			wavEffect = AudioLoader.getAudio(""WAV"", ResourceLoader.getResourceAsStream(""res/death.wav""));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
"
3487,8f76ed6f-b89e-4930-8a2b-31757ef17679,"	public Player() {
		x = 100;
		y = 100;
		xspeed = 1;
		dead = false;

	}
"
3488,c99a81ca-a6b1-41a7-bb87-3da115384ddd,"	public void logic() {
		x += xspeed;
		y += yspeed;

		yspeed -= 0.4;
		if (dead) {
			if (y < -800)
				dead = false;
			return;
		}

		if (y <= 32) { // if on floor
			yspeed = 0;
			y = 32;
			jumpsRemaining = 2;

			if (!Keyboard.isKeyDown(Keyboard.KEY_LEFT) && xspeed < 0)
				xspeed = xspeed * 0.9;
			if (!Keyboard.isKeyDown(Keyboard.KEY_RIGHT) && xspeed > 0)
				xspeed = xspeed * 0.9;
		}
		
		// check if player is too far outside borders
		if (x >= 660) {
			x = 5;
		}
		if (x <= -10) {
			x = 645;
		}
		
		// teleport for the lulz
		if (Keyboard.isKeyDown(Keyboard.KEY_T)) {
			x = Math.random()*640;
			y = Math.random()*480;
		}
		
		// Kill command! teleport to right above enemy
				if (Keyboard.isKeyDown(Keyboard.KEY_K) && Game.killCommand == 1) {
					Game.killCommand = 0;
					x = Enemy.x + 3;
					y = Enemy.y + 17;
				}
		
		if (jumpPressed && !jumpWasPressed && jumpsRemaining-- > 0)
			yspeed = 7;

		if (Keyboard.isKeyDown(Keyboard.KEY_LEFT))
			xspeed = Math.max(-5, xspeed - 1);
		if (Keyboard.isKeyDown(Keyboard.KEY_RIGHT))
			xspeed = Math.min(5, xspeed + 1);

		jumpWasPressed = jumpPressed;
		jumpPressed = Keyboard.isKeyDown(Keyboard.KEY_UP);

		// check collision with enemy

		if (Math.abs(x - Game.enemy.x) > 16 || Math.abs(y - Game.enemy.y) > 16)
			return;
		// if were here, then we the player is colliding with the enemy
		if (yspeed < 0)
			Game.enemy.kill();
		else
			kill();
	}
"
3489,a41f8ffb-056c-42eb-8e81-4e182b69bfff,"	public void kill() {
		dead = true;
		yspeed = 12;
		deaths++;
		init();
		if (dead) {
			wavEffect.playAsSoundEffect(1.3f, 0.04f, false);
		}
	}
"
3490,003a22cc-138e-4a77-8fc8-9a08f0f69b51,"	public void draw() {

		logic();

		glPushMatrix();

		glTranslated(x, y, 0);
		

		glBegin(GL_QUADS);

		glColor3d(1, 0, 0);
		glVertex2d(-8, 0);

		glColor3d(0, 1, 0);
		glVertex2d(8, 0);

		glColor3d(0, 0, 1);
		glVertex2d(8, 16);

		glColor3d(1, 1, 0);
		glVertex2d(-8, 16);

		glEnd();

		glPopMatrix();

	}
"
3491,edbed323-22bf-4dba-9d41-dbb2cb800e5b,"	public static void Show() {
		
		if (Keyboard.isKeyDown(Keyboard.KEY_H)) {
			glBegin(GL_QUADS);
	
			glColor3d(0.7, 0.8, 0.9);
			glVertex2d(0, 0);
			glVertex2d(640, 0);
	
			glColor3d(0.5, 0.6, 0.8);
			glVertex2d(640, 480);
			glVertex2d(0, 480);
	
			glEnd();
		}
	
	}
"
3492,8fa464f2-612b-4644-a51a-8980f9f23e09,"	public static void main(String[] args) {
		Game game = new Game();
		game.start();
	}
"
3493,d3e00d85-a77b-4aed-8d98-0f693718ee9a,"	public void initSong() {
		try {
			song = AudioLoader.getAudio(""WAV"", ResourceLoader.getResourceAsStream(""res/song.wav""));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
"
3494,f5636c47-bed5-417c-b632-908f325be353,"	public void start(){
		
		try {
			Display.setDisplayMode(new DisplayMode(640, 480));
			Display.create();
			Display.setTitle(""Boxio"");
		} catch (LWJGLException e) {
			e.printStackTrace();
		}
		
		initSong();
		
		glEnable(GL_TEXTURE_2D);	
		
		player = new Player();
		enemy = new Enemy();
		coinList = new ArrayList<Coin>(0);
		song.playAsMusic(1.0f, 0.05f, true);
		while (!Display.isCloseRequested()) {
			setCamera();
			drawBackground();
			player.draw();
			enemy.draw();
			for (Coin c : coinList)
				c.draw();

			DrawString.drawString(""Deaths "" + Player.deaths + ""\n"" + ""Kills "" + Enemy.kills + ""\n"" + ""Press T to teleport random"" + ""\n"" + ""Press K to kill once per round"" + ""\n"" + ""Get 10 kills to win!"", 320, 360);
			End.end();
			HighScore.Show();
			
			Display.update();
			Display.sync(60);
			
		}
		Display.destroy();
		AL.destroy();
		
	}
"
3495,4bbe562c-de34-4003-998d-816c12c9facc,"	public static void setCamera() {
		glEnable(GL_TEXTURE_2D);
		glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
		// alpha blending
		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

		glViewport(0, 0, 640, 480);
		glMatrixMode(GL_MODELVIEW);
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		glOrtho(0, 640, 0, 480, 1, -1);
		glMatrixMode(GL_MODELVIEW);

	}
"
3496,956ff001-0d64-4b14-8ea1-de960962b70b,"	public static void drawBackground() {

		// sky
		
		glBegin(GL_QUADS);

		glColor3d(0.7, 0.8, 0.9);
		glVertex2d(0, 0);
		glVertex2d(640, 0);

		glColor3d(0.5, 0.6, 0.8);
		glVertex2d(640, 480);
		glVertex2d(0, 480);

		glEnd();

		// ground

		glBegin(GL_QUADS);

		glColor3d(0.5, 0.2, 0.1);
		glVertex2d(0, 0);
		glVertex2d(640, 0);

		glVertex2d(640, 32);
		glVertex2d(0, 32);

		glEnd();

		// grass
		
		glBegin(GL_QUADS);

		glColor3d(0.2, 0.8, 0.2);
		glVertex2d(0, 25);
		glVertex2d(640, 25);

		glVertex2d(640, 32);
		glVertex2d(0, 32);


		glEnd();
		
	}
"
3497,2d4d9a91-a17d-464a-91dd-1dee4c538c71,"	public void init() {
		try {
			wavEffect = AudioLoader.getAudio(""WAV"", ResourceLoader.getResourceAsStream(""res/kill.wav""));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
"
3498,4ca247a5-cf7e-4594-ada4-0b7555457e43,"	public Enemy() {
		x = 200;
		y = 32;

	}
"
3499,a3a6df90-b7d7-4c4f-8e8d-68d9bf297e38,"	public void logic() {
		x += 1;
		if (x > 640 + 10)
			x = -10;

	}
"
3500,2c3688e9-7217-4218-b528-fbfb882815df,"	public void draw() {

		logic();

		glPushMatrix();

		glTranslated(x, y, 0);

		glColor3d(0.9, 0, 0);
		glBegin(GL_QUADS);

		glVertex2d(-8, 0);

		glVertex2d(8, 0);

		glVertex2d(8, 16);

		glVertex2d(-8, 16);

		glEnd();

		glPopMatrix();

	}
"
3501,e4106362-bf26-4bda-9c41-7684bd25c9d2,"	public void kill() {
		double coins = 4 + Math.random()*15;
		for (int i = 0; i < coins; i++) Game.coinList.add(new Coin(x, y));
		x = Math.random()*640 + Player.x;
		kills++;
		kill = true;
		init();
		if (kill) {
			wavEffect.playAsSoundEffect(1.3f, 0.04f, false);
		}
		
	}
"
3502,dd404847-ec57-4512-86bc-7b7102e0cf1f,"	   public static void drawString(String s, int x, int y) {
		      int startX = x;
		      GL11.glBegin(GL11.GL_POINTS);
		      for (char c : s.toLowerCase().toCharArray()) {
		         if (c == 'a') {
		            for (int i = 0; i < 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		               GL11.glVertex2f(x + 7, y + i);
		            }
		            for (int i = 2; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		               GL11.glVertex2f(x + i, y + 4);
		            }
		            x += 8;
		         } else if (c == 'b') {
		            for (int i = 0; i < 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            for (int i = 1; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y);
		               GL11.glVertex2f(x + i, y + 4);
		               GL11.glVertex2f(x + i, y + 8);
		            }
		            GL11.glVertex2f(x + 7, y + 5);
		            GL11.glVertex2f(x + 7, y + 7);
		            GL11.glVertex2f(x + 7, y + 6);
		            GL11.glVertex2f(x + 7, y + 1);
		            GL11.glVertex2f(x + 7, y + 2);
		            GL11.glVertex2f(x + 7, y + 3);
		            x += 8;
		         } else if (c == 'c') {		
		            for (int i = 1; i <= 7; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            for (int i = 2; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y);
		               GL11.glVertex2f(x + i, y + 8);
		            }
		            GL11.glVertex2f(x + 6, y + 1);
		            GL11.glVertex2f(x + 6, y + 2);

		            GL11.glVertex2f(x + 6, y + 6);
		            GL11.glVertex2f(x + 6, y + 7);

		            x += 8;
		         } else if (c == 'd') {
		            for (int i = 0; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            for (int i = 2; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y);
		               GL11.glVertex2f(x + i, y + 8);
		            }
		            GL11.glVertex2f(x + 6, y + 1);
		            GL11.glVertex2f(x + 6, y + 2);
		            GL11.glVertex2f(x + 6, y + 3);
		            GL11.glVertex2f(x + 6, y + 4);
		            GL11.glVertex2f(x + 6, y + 5);
		            GL11.glVertex2f(x + 6, y + 6);
		            GL11.glVertex2f(x + 6, y + 7);

		            x += 8;
		         } else if (c == 'e') {
		            for (int i = 0; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            for (int i = 1; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y + 0);
		               GL11.glVertex2f(x + i, y + 8);
		            }
		            for (int i = 2; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y + 4);
		            }
		            x += 8;
		         } else if (c == 'f') {
		            for (int i = 0; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            for (int i = 1; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		            }
		            for (int i = 2; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y + 4);
		            }
		            x += 8;
		         } else if (c == 'g') {
		            for (int i = 1; i <= 7; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            for (int i = 2; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y);
		               GL11.glVertex2f(x + i, y + 8);
		            }
		            GL11.glVertex2f(x + 6, y + 1);
		            GL11.glVertex2f(x + 6, y + 2);
		            GL11.glVertex2f(x + 6, y + 3);
		            GL11.glVertex2f(x + 5, y + 3);
		            GL11.glVertex2f(x + 7, y + 3);

		            GL11.glVertex2f(x + 6, y + 6);
		            GL11.glVertex2f(x + 6, y + 7);

		            x += 8;
		         } else if (c == 'h') {
		            for (int i = 0; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		               GL11.glVertex2f(x + 7, y + i);
		            }
		            for (int i = 2; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y + 4);
		            }
		            x += 8;
		         } else if (c == 'i') {
		            for (int i = 0; i <= 8; i++) {
		               GL11.glVertex2f(x + 3, y + i);
		            }
		            for (int i = 1; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y + 0);
		               GL11.glVertex2f(x + i, y + 8);
		            }
		            x += 7;
		         } else if (c == 'j') {
		            for (int i = 1; i <= 8; i++) {
		               GL11.glVertex2f(x + 6, y + i);
		            }
		            for (int i = 2; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y + 0);
		            }
		            GL11.glVertex2f(x + 1, y + 3);
		            GL11.glVertex2f(x + 1, y + 2);
		            GL11.glVertex2f(x + 1, y + 1);
		            x += 8;
		         } else if (c == 'k') {
		            for (int i = 0; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            GL11.glVertex2f(x + 6, y + 8);
		            GL11.glVertex2f(x + 5, y + 7);
		            GL11.glVertex2f(x + 4, y + 6);
		            GL11.glVertex2f(x + 3, y + 5);
		            GL11.glVertex2f(x + 2, y + 4);
		            GL11.glVertex2f(x + 2, y + 3);
		            GL11.glVertex2f(x + 3, y + 4);
		            GL11.glVertex2f(x + 4, y + 3);
		            GL11.glVertex2f(x + 5, y + 2);
		            GL11.glVertex2f(x + 6, y + 1);
		            GL11.glVertex2f(x + 7, y);
		            x += 8;
		         } else if (c == 'l') {
		            for (int i = 0; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            for (int i = 1; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y);
		            }
		            x += 7;
		         } else if (c == 'm') {
		            for (int i = 0; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		               GL11.glVertex2f(x + 7, y + i);
		            }
		            GL11.glVertex2f(x + 3, y + 6);
		            GL11.glVertex2f(x + 2, y + 7);
		            GL11.glVertex2f(x + 4, y + 5);

		            GL11.glVertex2f(x + 5, y + 6);
		            GL11.glVertex2f(x + 6, y + 7);
		            GL11.glVertex2f(x + 4, y + 5);
		            x += 8;
		         } else if (c == 'n') {
		            for (int i = 0; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		               GL11.glVertex2f(x + 7, y + i);
		            }
		            GL11.glVertex2f(x + 2, y + 7);
		            GL11.glVertex2f(x + 2, y + 6);
		            GL11.glVertex2f(x + 3, y + 5);
		            GL11.glVertex2f(x + 4, y + 4);
		            GL11.glVertex2f(x + 5, y + 3);
		            GL11.glVertex2f(x + 6, y + 2);
		            GL11.glVertex2f(x + 6, y + 1);
		            x += 8;
		         } else if (c == 'o' || c == '0') {
		            for (int i = 1; i <= 7; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		               GL11.glVertex2f(x + 7, y + i);
		            }
		            for (int i = 2; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		               GL11.glVertex2f(x + i, y + 0);
		            }
		            x += 8;
		         } else if (c == 'p') {
		            for (int i = 0; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            for (int i = 2; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		               GL11.glVertex2f(x + i, y + 4);
		            }
		            GL11.glVertex2f(x + 6, y + 7);
		            GL11.glVertex2f(x + 6, y + 5);
		            GL11.glVertex2f(x + 6, y + 6);
		            x += 8;
		         } else if (c == 'q') {
		            for (int i = 1; i <= 7; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		               if (i != 1)
		                  GL11.glVertex2f(x + 7, y + i);
		            }
		            for (int i = 2; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		               if (i != 6)
		                  GL11.glVertex2f(x + i, y + 0);
		            }
		            GL11.glVertex2f(x + 4, y + 3);
		            GL11.glVertex2f(x + 5, y + 2);
		            GL11.glVertex2f(x + 6, y + 1);
		            GL11.glVertex2f(x + 7, y);
		            x += 8;
		         } else if (c == 'r') {
		            for (int i = 0; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            for (int i = 2; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		               GL11.glVertex2f(x + i, y + 4);
		            }
		            GL11.glVertex2f(x + 6, y + 7);
		            GL11.glVertex2f(x + 6, y + 5);
		            GL11.glVertex2f(x + 6, y + 6);

		            GL11.glVertex2f(x + 4, y + 3);
		            GL11.glVertex2f(x + 5, y + 2);
		            GL11.glVertex2f(x + 6, y + 1);
		            GL11.glVertex2f(x + 7, y);
		            x += 8;
		         } else if (c == 's') {
		            for (int i = 2; i <= 7; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		            }
		            GL11.glVertex2f(x + 1, y + 7);
		            GL11.glVertex2f(x + 1, y + 6);
		            GL11.glVertex2f(x + 1, y + 5);
		            for (int i = 2; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y + 4);
		               GL11.glVertex2f(x + i, y);
		            }
		            GL11.glVertex2f(x + 7, y + 3);
		            GL11.glVertex2f(x + 7, y + 2);
		            GL11.glVertex2f(x + 7, y + 1);
		            GL11.glVertex2f(x + 1, y + 1);
		            GL11.glVertex2f(x + 1, y + 2);
		            x += 8;
		         } else if (c == 't') {
		            for (int i = 0; i <= 8; i++) {
		               GL11.glVertex2f(x + 4, y + i);
		            }
		            for (int i = 1; i <= 7; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		            }
		            x += 7;
		         } else if (c == 'u') {
		            for (int i = 1; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		               GL11.glVertex2f(x + 7, y + i);
		            }
		            for (int i = 2; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y + 0);
		            }
		            x += 8;
		         } else if (c == 'v') {
		            for (int i = 2; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		               GL11.glVertex2f(x + 6, y + i);
		            }
		            GL11.glVertex2f(x + 2, y + 1);
		            GL11.glVertex2f(x + 5, y + 1);
		            GL11.glVertex2f(x + 3, y);
		            GL11.glVertex2f(x + 4, y);
		            x += 7;
		         } else if (c == 'w') {
		            for (int i = 1; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		               GL11.glVertex2f(x + 7, y + i);
		            }
		            GL11.glVertex2f(x + 2, y);
		            GL11.glVertex2f(x + 3, y);
		            GL11.glVertex2f(x + 5, y);
		            GL11.glVertex2f(x + 6, y);
		            for (int i = 1; i <= 6; i++) {
		               GL11.glVertex2f(x + 4, y + i);
		            }
		            x += 8;
		         } else if (c == 'x') {
		            for (int i = 1; i <= 7; i++)
		               GL11.glVertex2f(x + i, y + i);
		            for (int i = 7; i >= 1; i--)
		               GL11.glVertex2f(x + i, y + 8 - i);
		            x += 8;
		         } else if (c == 'y') {
		            GL11.glVertex2f(x + 4, y);
		            GL11.glVertex2f(x + 4, y + 1);
		            GL11.glVertex2f(x + 4, y + 2);
		            GL11.glVertex2f(x + 4, y + 3);
		            GL11.glVertex2f(x + 4, y + 4);

		            GL11.glVertex2f(x + 3, y + 5);
		            GL11.glVertex2f(x + 2, y + 6);
		            GL11.glVertex2f(x + 1, y + 7);
		            GL11.glVertex2f(x + 1, y + 8);

		            GL11.glVertex2f(x + 5, y + 5);
		            GL11.glVertex2f(x + 6, y + 6);
		            GL11.glVertex2f(x + 7, y + 7);
		            GL11.glVertex2f(x + 7, y + 8);
		            x += 8;
		         } else if (c == 'z') {
		            for (int i = 1; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y);
		               GL11.glVertex2f(x + i, y + 8);
		               GL11.glVertex2f(x + i, y + i);
		            }
		            GL11.glVertex2f(x + 6, y + 7);
		            x += 8;
		         } else if (c == '1') {
		            for (int i = 2; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y);
		            }
		            for (int i = 1; i <= 8; i++) {
		               GL11.glVertex2f(x + 4, y + i);
		            }
		            GL11.glVertex2f(x + 3, y + 7);
		            x += 8;
		         } else if (c == '2') {
		            for (int i = 1; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y);
		            }
		            for (int i = 2; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		            }
		            GL11.glVertex2f(x + 1, y + 7);
		            GL11.glVertex2f(x + 1, y + 6);

		            GL11.glVertex2f(x + 6, y + 7);
		            GL11.glVertex2f(x + 6, y + 6);
		            GL11.glVertex2f(x + 6, y + 5);
		            GL11.glVertex2f(x + 5, y + 4);
		            GL11.glVertex2f(x + 4, y + 3);
		            GL11.glVertex2f(x + 3, y + 2);
		            GL11.glVertex2f(x + 2, y + 1);
		            x += 8;
		         } else if (c == '3') {
		            for (int i = 1; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		               GL11.glVertex2f(x + i, y);
		            }
		            for (int i = 1; i <= 7; i++) {
		               GL11.glVertex2f(x + 6, y + i);
		            }
		            for (int i = 2; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y + 4);
		            }
		            x += 8;
		         } else if (c == '4') {
		            for (int i = 2; i <= 8; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            for (int i = 2; i <= 7; i++) {
		               GL11.glVertex2f(x + i, y + 1);
		            }
		            for (int i = 0; i <= 4; i++) {
		               GL11.glVertex2f(x + 4, y + i);
		            }
		            x += 8;
		         } else if (c == '5') {
		            for (int i = 1; i <= 7; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		            }
		            for (int i = 4; i <= 7; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            GL11.glVertex2f(x + 1, y + 1);
		            GL11.glVertex2f(x + 2, y);
		            GL11.glVertex2f(x + 3, y);
		            GL11.glVertex2f(x + 4, y);
		            GL11.glVertex2f(x + 5, y);
		            GL11.glVertex2f(x + 6, y);

		            GL11.glVertex2f(x + 7, y + 1);
		            GL11.glVertex2f(x + 7, y + 2);
		            GL11.glVertex2f(x + 7, y + 3);

		            GL11.glVertex2f(x + 6, y + 4);
		            GL11.glVertex2f(x + 5, y + 4);
		            GL11.glVertex2f(x + 4, y + 4);
		            GL11.glVertex2f(x + 3, y + 4);
		            GL11.glVertex2f(x + 2, y + 4);
		            x += 8;
		         } else if (c == '6') {
		            for (int i = 1; i <= 7; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            for (int i = 2; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y);
		            }
		            for (int i = 2; i <= 5; i++) {
		               GL11.glVertex2f(x + i, y + 4);
		               GL11.glVertex2f(x + i, y + 8);
		            }
		            GL11.glVertex2f(x + 7, y + 1);
		            GL11.glVertex2f(x + 7, y + 2);
		            GL11.glVertex2f(x + 7, y + 3);
		            GL11.glVertex2f(x + 6, y + 4);
		            x += 8;
		         } else if (c == '7') {
		            for (int i = 0; i <= 7; i++)
		               GL11.glVertex2f(x + i, y + 8);
		            GL11.glVertex2f(x + 7, y + 7);
		            GL11.glVertex2f(x + 7, y + 6);

		            GL11.glVertex2f(x + 6, y + 5);
		            GL11.glVertex2f(x + 5, y + 4);
		            GL11.glVertex2f(x + 4, y + 3);
		            GL11.glVertex2f(x + 3, y + 2);
		            GL11.glVertex2f(x + 2, y + 1);
		            GL11.glVertex2f(x + 1, y);
		            x += 8;
		         } else if (c == '8') {
		            for (int i = 1; i <= 7; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		               GL11.glVertex2f(x + 7, y + i);
		            }
		            for (int i = 2; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		               GL11.glVertex2f(x + i, y + 0);
		            }
		            for (int i = 2; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y + 4);
		            }
		            x += 8;
		         } else if (c == '9') {
		            for (int i = 1; i <= 7; i++) {
		               GL11.glVertex2f(x + 7, y + i);
		            }
		            for (int i = 5; i <= 7; i++) {
		               GL11.glVertex2f(x + 1, y + i);
		            }
		            for (int i = 2; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y + 8);
		               GL11.glVertex2f(x + i, y + 0);
		            }
		            for (int i = 2; i <= 6; i++) {
		               GL11.glVertex2f(x + i, y + 4);
		            }
		            GL11.glVertex2f(x + 1, y + 0);
		            x += 8;
		         } else if (c == '.') {
		            GL11.glVertex2f(x + 1, y);
		            x += 2;
		         } else if (c == ',') {
		            GL11.glVertex2f(x + 1, y);
		            GL11.glVertex2f(x + 1, y + 1);
		            x += 2;
		         } else if (c == '\n') {
		            y -= 10;
		            x = startX;
		         } else if (c == ' ') {
		            x += 8;
		         }
		      }
		      GL11.glEnd();
		   }
"
3503,3bfccf8c-4f45-4dc0-969b-e8e56da54c7d,"	public static void end() {
		if (Enemy.kills == 10 && Player.deaths <= 10) {
			
			Player.y = -32;
			Enemy.y = 0;
			
			glBegin(GL_QUADS);

			glColor3d(0.7, 0.8, 0.9);
			glVertex2d(0, 0);
			glVertex2d(640, 0);

			glColor3d(0.5, 0.6, 0.8);
			glVertex2d(640, 480);
			glVertex2d(0, 480);

			glEnd();
			
			glColor3d(0.9, 0, 0);
			DrawString.drawString(""You Win!"", 320, 240);
			DrawString.drawString(""Press SPACE to play again!"", 320, 220);
			if (Keyboard.isKeyDown(Keyboard.KEY_SPACE)) {
				Enemy.kills = 0;
				Enemy.y = 32;
				
				Player.deaths = 0;		
				Player.y = 32;
				
				Game.killCommand = 1;
				
			}
		} else if (Player.deaths == 10) {
			
			Player.y = -32;
			Enemy.y = 0;
			
			glBegin(GL_QUADS);

			glColor3d(0.7, 0.8, 0.9);
			glVertex2d(0, 0);
			glVertex2d(640, 0);

			glColor3d(0.5, 0.6, 0.8);
			glVertex2d(640, 480);
			glVertex2d(0, 480);

			glEnd();
			
			glColor3d(0.9, 0, 0);
			DrawString.drawString(""You Lose!"", 320, 240);
			DrawString.drawString(""Press SPACE to try again!"", 320, 220);
			if (Keyboard.isKeyDown(Keyboard.KEY_SPACE)) {
				Enemy.kills = 0;
				Enemy.y = 32;
				
				Player.deaths = 0;		
				Player.y = 32;
				
				Game.killCommand = 1;
				
			}
		}
	}
"
3504,8ed2a3b5-6e7f-40b5-9f79-ca64daeb0e41,"	@Override
	public void init(NutConfig config) {
		// log.debug(""config ioc:"" + config.getIoc());
		Dao dao = config.getIoc().get(Dao.class);
		for (Class<?> clazz : Scans.me().scanPackage(""com.gemas.platform"")) {
			if (null != clazz.getAnnotation(Table.class)) {
				dao.create(clazz, false);
			}
		}
		if (dao.count(User.class) == 0) {
			User admin = new User();
			admin.setName(""admin"");
			admin.setPasswd(""123456"");
			dao.insert(admin);
		}

	}
"
3505,d4198d44-6971-4f45-9cb3-2de3ad488910,"	@Override
	public void destroy(NutConfig config) {

	}
"
3506,2969ba90-2e68-4a7e-9822-3435e5526816,"	@At
	public boolean login(@Param(""name"") String name,
			@Param(""passwd"") String passwd, HttpSession session) {

		if (Strings.isBlank(name) || Strings.isBlank(passwd)) {
			return false;
		}
		name = name.trim().intern();
		passwd = passwd.trim().intern();

		User user = dao.fetch(User.class,
				Cnd.where(""name"", ""="", name).and(""passwd"", ""="", passwd));
		if (user == null) {
			return false;
		} else {
			session.setAttribute(""user"", user);
			return true;
		}
	}
"
3507,07ffe90c-9bb2-4811-a9e2-afb5be6a0fa2,"	@At
	@Ok("">>:/"")
	public void logout(HttpSession session) {
		session.invalidate();
	}
"
3508,801da574-6672-4843-8c53-d8899ee2cf03,"	@At
	public User me(@Attr(""user"") User user) {
		return user;
	}
"
3509,15baeaec-55d2-40ec-ae8c-afb0e95b3fdc,"	@At(""/ping"")
	public Object ping() {
		log.debug(""Dao == "" + dao);
		Date date = new Date();
		return date;
	}
"
3510,bdaf9749-5137-4e65-a292-30651dd34dab,"	public Integer getId() {
		return id;
	}
"
3511,4c172177-ea5e-4e0e-b109-84b89e23d232,"	public void setId(Integer id) {
		this.id = id;
	}
"
3512,77fdf47f-7525-471e-a74b-7f5021062c5f,"	public String getName() {
		return name;
	}
"
3513,fa5ecd64-1a54-4358-abd9-5b34e4d59280,"	public void setName(String name) {
		this.name = name;
	}
"
3514,67626654-4dbb-458c-99bd-1c29dd9cc89a,"	public String getPasswd() {
		return passwd;
	}
"
3515,bfbd353b-e2b7-4340-b554-ba65c8f441b1,"	public void setPasswd(String passwd) {
		this.passwd = passwd;
	}
"
3516,e4bf868b-03d5-4c0a-af62-e4f9e8fe3999,"    GridLocation(int locationRow, int locationCol)
    {
        row = locationRow;
        col = locationCol;
        clear();
    }
"
3517,cab6ff81-050d-4776-9c25-7f7da041dbc8,"    void clear()
    {
        seed = Content.EMPTY;
    }
"
3518,400a0d5e-5082-4655-975c-b8061a56a133,"    void drawCell()
    {
        switch(seed)
        {
            case CROSS : System.out.print(""X"");
                break;
            case NOUGHT : System.out.print(""O"");
                break;
            case EMPTY : System.out.print("" "");
                break;
        }
    }
"
3519,83f15e24-60c2-457c-a13d-adb812fb9df7,"    Grid()
    {
        // initializing the cell array, allocating memory
        cell = new GridLocation[ROWS][COLS];
        emptySpacesRemaining = ROWS * COLS;
        for(int i = 0 ; i<ROWS ; i++)
        {
            for(int j=0 ; j<COLS ; j++)
            {
                // initializing each cell in the array
                cell[i][j] = new GridLocation(i, j);
            }
        }
    }
"
3520,a1a0c767-892a-4210-ab57-cfd4927282bf,"    public void init() 
    {
      for (int row = 0; row < ROWS; ++row) 
      {
         for (int col = 0; col < COLS; ++col) 
         {
            cell[row][col].clear();  
         }
      }
    }
"
3521,3d0991bb-3d37-47b0-94ca-fcf7cb4652e0,"    void drawGrid()
    {
        for(int i=0 ; i<ROWS ; i++)
        {
            for(int j=0 ; j<COLS ; j++)
            {
                cell[i][j].drawCell();
                 if (j < COLS - 1) System.out.print(""|"");
            }
            System.out.println();
             if (i < ROWS - 1) 
            {
                System.out.println(""-------"");
            }
        }
    }
"
3522,dfd25363-5ae8-4890-9cbc-4626a883f825,"    boolean isDraw()
    {
        // the grid does not have any empty space hence the game is drawn
        if(emptySpacesRemaining == 0)
            return true;
        else return false;
    }
"
3523,0fd1170f-88cd-4359-b082-00f90d719d9e,"    boolean hasWon(Content thisSeed)
    {               // checking rows for victory
        return ( (cell[currentRow][0].seed == thisSeed &&
                  cell[currentRow][1].seed == thisSeed &&
                  cell[currentRow][2].seed == thisSeed) 
                ||  // checking columns for victory
                 (cell[0][currentCol].seed == thisSeed &&
                  cell[1][currentCol].seed == thisSeed &&
                  cell[2][currentCol].seed == thisSeed)
                ||  // checking the diagonal '\' for victory
                  (currentRow == currentCol   &&
                  cell[0][0].seed == thisSeed &&
                  cell[1][1].seed == thisSeed &&
                  cell[2][2].seed == thisSeed)
                ||  // checking the diagonal '/' for victory
                  (currentRow + currentCol == 2 &&
                   cell[0][2].seed == thisSeed &&
                   cell[1][1].seed == thisSeed &&
                   cell[2][0].seed == thisSeed));
    }
"
3524,3307939e-b63d-4911-8113-5d502f6853e0,"    static void about()
    {
        System.out.println(""About entered"");
    }
"
3525,59319b41-b2cf-4f17-a617-91914e4af51f,"    static void instructions()
    {
        System.out.println(""Instructions entered"");
    }
"
3526,7741c3fa-245c-4565-b1d4-9880c6d8ac0a,"    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        GameState cont = null ;
        int choice; 
        do{

            System.out.println(""MENU:"");
            System.out.println(""--------------------"");
            System.out.println(""1) About"");
            System.out.println(""2) Intructions"");
            System.out.println(""3) Play Game"");
            System.out.println(""4) Exit"");
            System.out.println(""--------------------"");
            choice = input.nextInt();

            switch(choice)
            {
                case 1:
                    about();
                    break;

                case 2:
                    instructions();
                    break;

                case 3:
                    GameWorld newGame = new GameWorld();
                    cont = newGame.getState();
                    break;

                case 4:
                    break;
                    
                default: 
                    System.out.println(""Please enter a valid input"");
                    choice = 0;
            }
        }
        while(choice >= 0 && choice<4 || cont != null);
        
    }
"
3527,9da1bdcc-1b41-4731-b79d-ea3dd0254551,"    GameWorld()
    {
        // creating the grib object
        gameGrid = new Grid();
        
        // initializing the world
        worldInit();
        do
        {
            // letting the current player make a move
            playerMove(currentPlayer);
            
            // updating the grid and print the grid.
            gameGrid.drawGrid();
            
            // update the game state after the move.
            updateGameState(currentPlayer);
             
            if(currentState == GameState.CROSS_WON)
                System.out.println(""Player X Won the game"");
            else if(currentState == GameState.NOUGHT_WON)
                System.out.println(""Player O Won the game"");
            else if(currentState == GameState.DRAW)
                System.out.println(""Game Drawn. Bye!"");
            
            if(currentPlayer == Content.CROSS)
                currentPlayer = Content.NOUGHT;
            else if(currentPlayer == Content.NOUGHT)
                currentPlayer = Content.CROSS;
        }
        // keep on playing until one player wins or the game is drawn
        while(currentState == GameState.PLAYING);
    }
"
3528,4cbef0b6-1dd6-4924-9622-bec8648857d6,"    GameState getState()
    {
        return this.currentState;
    }
"
3529,1e713154-ca0f-42c0-835a-a5546a684ade,"    void playerMove(Content thisSeed)
    {
        // flag that keeps track of the correctness of the input
        boolean validInput = true;
        do
        {
            // player X's turn
            if(thisSeed == Content.CROSS)
                System.out.println(""Player X please enter the location where you want to place your ""+thisSeed+""\n""
                + ""The input should be (row[1-3] , column[1-3]) WITHOUT commas, and ONLY SPACES between two digits"");
            // Player O's turn
            else if(thisSeed == Content.NOUGHT) 
                System.out.println(""Player O please enter the location where you want to place your ""+thisSeed+""\n""
                + ""The input should be (row[1-3] , column[1-3]) WITHOUT commas, and ONLY SPACES between two digits"");
            int row = input.nextInt()-1;
            int col = input.nextInt()-1;
            
            // checking the correctness of the input and seeing whether that cell to be filled is empty.
            if(row>=0 && row<3 && col>=0 && col<3 && gameGrid.cell[row][col].seed == Content.EMPTY)
            {
                // placing the symbol on the mentioned rows and columns
                gameGrid.cell[row][col].seed = thisSeed;
                gameGrid.currentRow = row;
                gameGrid.currentCol = col;
                // reducing the the number of empty spaces after filling the cell
                gameGrid.emptySpacesRemaining--;
                validInput = true;
            }
            else
            {
                System.out.println("" The entered input is incorrect please enter it again"");
                validInput = false;
            }
        }
        // till the input is valid.
        while(!validInput);
    }
"
3530,ec22b7fa-b2a9-4724-b1c5-d7b228b0d9b0,"    void worldInit()
    {
        gameGrid.init();
        currentState = GameState.PLAYING;
        currentPlayer = Content.NOUGHT;        
    }
"
3531,cf5f516d-c2a6-47da-a8d3-b3e5320e871d,"    void updateGameState(Content thisSeed)
    {
        // updating the state of the game on the basis of who won the game or game drawn, accordingly
        if(gameGrid.hasWon(thisSeed))
        {
            if(thisSeed == Content.CROSS)
                currentState = GameState.CROSS_WON;
             if(thisSeed == Content.NOUGHT)
                currentState = GameState.NOUGHT_WON;
        }
        else if(gameGrid.isDraw())
            currentState = GameState.DRAW;
    }
"
3532,1aac3a7f-c6e0-4ca8-a9fc-562451c6ede6,"	proxy2()
	{
		createproxy();
		readaddr();
		Thread t=new Thread(this);
		t.start();
	}
"
3533,b2d3803a-1694-4532-8b53-005897264887,"	void readaddr()
	{
		try
		{
			fin=new FileInputStream(""tracker.txt"");
			while((ch=fin.read())!=-1)
			trackeraddr+=(char)ch;
			trackeraddr.trim();
			System.out.println(trackeraddr);
			
			fin=new FileInputStream(""proxy1.txt"");
			while((ch=fin.read())!=-1)
			proxy1addr+=(char)ch;
			proxy1addr.trim();
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
	}
"
3534,9d991833-2cba-4cb4-ad9c-5daae6a756e3,"	void createproxy()
	{
		jf=new JFrame(""PROXY_SERVER"");
		Container cp=jf.getContentPane();
		cp.setLayout(null);
		
		JLabel jl=new JLabel(""PROXY SERVER ##2"",JLabel.CENTER);
		jl.setFont(new Font(""Times New Roman"",Font.BOLD,28));
		jl.setForeground(Color.BLACK);
		
		JLabel jl1=new JLabel(""Details of Requests given to Proxy1:"");
		jta=new JTextArea(""Waiting for request..\n"");
		JScrollPane jsp=new JScrollPane(jta);
		jta.setBackground(Color.WHITE);
		jta.setForeground(Color.BLACK);
	
		
		JLabel jl2=new JLabel(""List of available files in the proxy Server:"");
		String dirname=""C:\\Users\\vamshi krishna s\\Desktop\\proxyserverfiles1"";
		File f=new File(dirname);
		String files[]=f.list();
		for (int i=0;i<files.length;i++)
		v.add(files[i]);
		jlist=new JList(files);
		JScrollPane jsp2=new JScrollPane(jlist) ;
		
		jbexit=new JButton(""EXIT"");
		proxyinfo=new JButton(""System Info"");


		stats=new JButton(""Statistics"");
		JLabel jla=new JLabel(""CSE FINAL YEAR PROJECT 2012"",JLabel.RIGHT);
		
		cp.add(jl);
		cp.add(jl1);
		cp.add(jsp);
		cp.add(jl2);
		cp.add(jsp2);
		cp.add(jbexit);
		cp.add(jla);
		cp.add(proxyinfo);
		cp.add(stats);
		Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
		

		jl.setBounds(0,0,d.width,30);
		jl1.setBounds(10,50,400,20);
		jsp.setBounds(10,80,600,600);
		jl2.setBounds(630,50,300,30);
		jsp2.setBounds(630,80,300,300);
		jbexit.setBounds(700,400,150,30);
		proxyinfo.setBounds(700,500,150,30);
		stats.setBounds(700,600,150,30);
		jf.setSize(d.width,d.height);
		jf.setVisible(true);
		jbexit.addActionListener(this);
		proxyinfo.addActionListener(this);
		stats.addActionListener(this);
	}
"
3535,d69328ec-9a6b-472f-9ef5-aa0545347372,"	public void actionPerformed(ActionEvent ae)
	{
		if(ae.getSource()==jbexit)
		{
			System.exit(0);
		}
		else if(ae.getSource()==proxyinfo)
		{
			System.out.print(""System Info"");
			try {
				
				JOptionPane.showMessageDialog(null,""IP Address of the System: ""+InetAddress.getLocalHost().getHostAddress()+""\nHost Name:""+InetAddress.getLocalHost().getHostName()+""\n"");
				
				
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else if(ae.getSource()==stats)
		{
				JOptionPane.showMessageDialog(null,""Total No of Requests handled By Proxy Server In this Session\n ""+no_of_req+""\n"");
		}
	}
"
3536,55eeb05d-89c3-457b-ac60-f0669d15f84a,"	public void run()
	{
		try
		{
			jta.append(""Thread Started."");
			Socket soc=new Socket(trackeraddr,2000);
			DataOutputStream dout=new DataOutputStream(soc.getOutputStream());
			dout.writeUTF(""PROXY2INFO"");
			ObjectOutputStream oos=new ObjectOutputStream(soc.getOutputStream());
			oos.writeObject(v);
			oos.close();
			dout.close();
			soc.close();
			
			ServerSocket ss=new ServerSocket(1800);
			
			while(true)
			{
				Socket s=ss.accept();
				jta.append(""\nNew Client Request Received..\n"");
				new processreqq(this,s);
			}
		}
		catch(Exception e)
		{
			System.out.println(e+""Error in Server"");
			e.printStackTrace();
		}
	}
"
3537,021ed72e-dd7d-41d8-8ea8-a65f4ece6fac,"	public static void main(String args[])
	{
		new proxy2();
	}
"
3538,64afe38d-7ec9-471c-a5c4-d5b01c7166e8,"	processreqq(proxy2 obj,Socket s)
	{
		parent=obj;
		soc=s;
		//readaddr();
		Thread t=new Thread(this);
		t.start();
	}
"
3539,188a0081-a086-40d8-a3bc-d03cf222afed,"	public void run()
	{
		try
		{
			String trackeraddr=parent.trackeraddr,proxy1addr=parent.proxy1addr;
			DataInputStream din=new DataInputStream(soc.getInputStream());
			String req=din.readUTF();
			System.out.println(req);
			
			if (req.equals(""download""))
			{
				parent.no_of_req++;
				parent.jta.append(""Request is download..\n"");
				String ip=din.readUTF();
				int port=din.readInt();
				String fname=din.readUTF();
				
				
				parent.jta.append(""check for file in list\n"");
				File f=new File(dirname);
				File files[]=f.listFiles();
				
				int i=0;
				for (i=0;i<files.length;i++)
				{
					String name=files[i].getName();
					if (fname.equalsIgnoreCase(name))
					{
						FileInputStream fin=new FileInputStream(dirname+""//""+name);
						byte b[]=new byte[fin.available()];
						fin.read(b);
						fin.close();
						
						Socket s=new Socket(ip,port);
						DataOutputStream dout=new DataOutputStream(s.getOutputStream());
						dout.writeUTF(""SUCCESS"");
						dout.writeUTF(name);
						
						ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());
						oos.writeObject(b);
						
						parent.jta.append(""File found and forwarded to client..\n"") ;
						
						oos.close();
						dout.close();
						s.close();
						break;
					}
					
					
					
					
					
				}
				
				if (i==files.length)
				{
					parent.jta.append(""File not found\n"");
					Socket s=new Socket(trackeraddr,2000);
					DataOutputStream dout=new DataOutputStream(s.getOutputStream());
					dout.writeUTF(""PROXY2REQ"");
					dout.writeUTF(ip);
					dout.writeInt(port);
					dout.writeUTF(fname);
					dout.close();
					s.close();
					parent.jta.append(""Request forwarded to tracker.\n"");
				}
				
			//	din.close();
			//	soc.close();
				
				
			}
			else
			if (req.equals(""SERVERRESPONSE1""))
			{
				parent.jta.append(""File response from server\n"");
				String cip=din.readUTF();
				int cport=din.readInt();
				String fname=din.readUTF();
				ObjectInputStream oin=new ObjectInputStream(soc.getInputStream());
				byte b[]=(byte[]) oin.readObject();
				FileOutputStream fout=new FileOutputStream(dirname+""//""+fname);
				fout.write(b);
				fout.close();
				parent.jta.append(""File saved in proxy.\n"");
				
				Socket s=new Socket(cip,cport);
				DataOutputStream dout=new DataOutputStream(s.getOutputStream());
				dout.writeUTF(""SUCCESS"");
				dout.writeUTF(fname);
					
				ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());
				oos.writeObject(b);
				
				parent.jta.append(""File forwardedt to client\n"");
						
				oos.close();
				dout.close();
				s.close();
				
				oin.close();
				
				File f=new File(dirname);
				String files[]=f.list();
				Vector<String> v=new Vector<String>();
				for (int i=0;i<files.length;i++)
				v.add(files[i]);
				parent.jlist.setListData(v);
				
				Socket soc1=new Socket(trackeraddr,2000);
				DataOutputStream dout1=new DataOutputStream(soc1.getOutputStream());
				dout1.writeUTF(""PROXY2INFO"");
				ObjectOutputStream oos1=new ObjectOutputStream(soc1.getOutputStream());
				oos1.writeObject(v);
				oos1.close();
				dout1.close();
				soc1.close();
				
			}
			else
			if (req.equals(""SERVERRESPONSE2""))
			{
				parent.jta.append(""File response from server\n"");
				String cip=din.readUTF();
				int cport=din.readInt();
				String fname=din.readUTF();
				Socket s=new Socket(cip,cport);
				DataOutputStream dout=new DataOutputStream(s.getOutputStream());
				dout.writeUTF(""FAIL"");
				dout.writeUTF(fname);
				
				parent.jta.append(""File not found, response forwarded to client.\n"");
				
				dout.close();
				s.close();
			}
			else
			if (req.equals(""download1""))
			{
				String cip=din.readUTF();
				int cport=din.readInt();
				String fname=din.readUTF();
				
				parent.jta.append(""check for file in list\n"");
				File f=new File(dirname);
				File files[]=f.listFiles();
				int i=0;
				for (i=0;i<files.length;i++)
				if (fname.equalsIgnoreCase(files[i].getName()))
				break;
				
				FileInputStream fin=new FileInputStream(dirname+""//""+files[i].getName());
				byte b[]=new byte[fin.available()];
				fin.read(b);
				fin.close();
						
				Socket s=new Socket(proxy1addr,1500);
				DataOutputStream dout=new DataOutputStream(s.getOutputStream());
				dout.writeUTF(""FORWARD"");
				dout.writeUTF(cip);
				dout.writeInt(cport);
				dout.writeUTF(files[i].getName());
						
				ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());
				oos.writeObject(b);
				
				parent.jta.append(""File found and forwarded to Proxy1..\n"") ;
						
				oos.close();
				dout.close();
				s.close();
			}
			else
			if (req.equals(""FORWARD""))
			{
				parent.jta.append(""File response from Proxy1\n"");
				String cip=din.readUTF();
				int cport=din.readInt();
				String fname=din.readUTF();
				ObjectInputStream oin=new ObjectInputStream(soc.getInputStream());
				byte b[]=(byte[]) oin.readObject();
				FileOutputStream fout=new FileOutputStream(dirname+""//""+fname);
				fout.write(b);
				fout.close();
				parent.jta.append(""File saved in proxy.\n"");
				
				Socket s=new Socket(cip,cport);
				DataOutputStream dout=new DataOutputStream(s.getOutputStream());
				dout.writeUTF(""SUCCESS"");
				dout.writeUTF(fname);
					
				ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());
				oos.writeObject(b);
				
				parent.jta.append(""File forwarded to client\n"");
						
				oos.close();
				dout.close();
				s.close();
				
				oin.close();
				
				File f=new File(dirname);
				String files[]=f.list();
				Vector<String> v=new Vector<String>();
				for (int i=0;i<files.length;i++)
				v.add(files[i]);
				parent.jlist.setListData(v);
				
				Socket soc1=new Socket(trackeraddr,2000);
				DataOutputStream dout1=new DataOutputStream(soc1.getOutputStream());
				dout1.writeUTF(""PROXY2INFO"");
				ObjectOutputStream oos1=new ObjectOutputStream(soc1.getOutputStream());
				oos1.writeObject(v);
				oos1.close();
				dout1.close();
				soc1.close();
				
				
			}
			
			
			din.close();
			soc.close();
		}
		catch(Exception e)
		{
			System.out.println(""in process req:""+e);
		}
	}
"
3540,1ef19a9c-83cf-400e-ba45-610f67c7ebc8,"	tracker()
	{
		create_tracker();
		Thread t=new Thread(this);
		t.start();
	}
"
3541,7696ead7-5c6e-4ec6-9d41-ca9d3a52bd9d,"	void create_tracker()
	{
		jf=new JFrame(""Tracker"");
		Container cp=jf.getContentPane();
		cp.setLayout(null);
		
		JLabel jl=new JLabel(""TRACKER"",JLabel.CENTER);
		jl.setFont(new Font(""Times new Roman"",Font.BOLD,28));
		jl.setForeground(Color.BLACK);
		
		JLabel jl1=new JLabel(""Details of Requests given to Tracker:"");
		jta=new JTextArea(""Waiting for request..\n"");
		JScrollPane jsp=new JScrollPane(jta);
		jta.setBackground(Color.WHITE);
		jta.setForeground(Color.RED); 
		
		JLabel jl2=new JLabel(""List of Files Available in Proxy Server 1:"");
		jlist1=new JList();
		JScrollPane jsp2=new JScrollPane(jlist1) ;
		
		JLabel jl3=new JLabel(""List of available files in Proxy Server 2:"");
		jlist2=new JList();
		JScrollPane jsp3=new JScrollPane(jlist2) ;
		
		exit=new JButton(""EXIT"");
		trackerinfo=new JButton(""Tracker Info"");
		stats=new JButton(""Statistics"");
		cp.add(jl);
		cp.add(jl1);
		cp.add(jsp);
		cp.add(jl2);
		cp.add(jsp2);
		cp.add(jl3);
		cp.add(jsp3);
		cp.add(exit);
		cp.add(trackerinfo);
		cp.add(stats);
		Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
		
		jl.setBounds(0,0,d.width,30);
		jl2.setBounds(10,50,300,20);
		jsp2.setBounds(10,80,300,300);
		jl3.setBounds(380,50,300,20);
		jsp3.setBounds(380,80,300,300);
		jl1.setBounds(10,420,400,20);
		jsp.setBounds(10,450,600,200);
		exit.setBounds(700,400,150,30);
		trackerinfo.setBounds(700,500,150,30);
		stats.setBounds(700,600,150,30);
		
		jf.setSize(d.width,d.height);
		jf.setVisible(true);
		exit.addActionListener(this);
		trackerinfo.addActionListener(this);
		stats.addActionListener(this);
		
	}
"
3542,074d75ee-5a1e-46e3-884a-32a6cad5934f,"	public void run()
	{
		try
		{
			jta.append(""Thread Started in Tracker\n"");
			ServerSocket ss=new ServerSocket(2000);//opening server port in tracker
			
			while (true)
			{
				Socket soc=ss.accept();
				jta.append(""Request from proxy.\n"");
				//no_of_reqs++;
				new proxyinfo(this,soc);
			}
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
	}
"
3543,cfe5ec54-bcea-4460-980e-6c91d6701316,"	public void actionPerformed(ActionEvent ae)
	{
		if(ae.getSource()==exit)
			System.exit(0);
		else if(ae.getSource()==trackerinfo)
		{
			try {
				
					JOptionPane.showMessageDialog(null,""IP Address of the System: ""+InetAddress.getLocalHost().getHostAddress()+""\nHost Name:""+InetAddress.getLocalHost().getHostName()+""\n"");
				
				
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else if(ae.getSource()==stats)
		{
			//System.out.println(""No of requests handled by tracker in this session::\n""+no_of_reqs+""\n No of reqs Forwarded 2 Server in this session""+no_of_server);
			JOptionPane.showMessageDialog(null,""No of requests handled by tracker in this session::\n""+no_of_reqs+""\n No of reqs Forwarded 2 Server in this session::\n""+no_of_server);
		}
	}
"
3544,644f7167-f9e0-4a9b-bbde-c9a2b32bddc7,"	public static void main(String args[])
	{
		new tracker();
	}
"
3545,ed18e2e8-14ec-4ced-bc18-2c1bba567a00,"	proxyinfo(tracker obj,Socket s)
	{
		parent=obj;
		soc=s;
		readaddr();
		Thread t=new Thread(this);
		t.start();
	}
"
3546,530046f3-58b5-462f-8af9-5f8f5d4d9758,"	void readaddr()
	{
		try
		{
			fin=new FileInputStream(""server.txt"");
			while((ch=fin.read())!=-1)
			serveraddr+=(char)ch;
			serveraddr.trim();
			System.out.println(serveraddr);
			
			fin=new FileInputStream(""proxy1.txt"");
			while((ch=fin.read())!=-1)
			proxy1addr+=(char)ch;
			proxy1addr.trim();
			System.out.println(proxy1addr);
			fin=new FileInputStream(""proxy2.txt"");
			while((ch=fin.read())!=-1)
			proxy2addr+=(char)ch;
			proxy2addr.trim();
			System.out.println(proxy2addr);
			
			
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
	}
"
3547,4fc0579f-d00e-4a8f-9fae-ca974e5a6751,"	public void run()
	{
		try
		{
			DataInputStream din=new DataInputStream(soc.getInputStream());
			String req=din.readUTF();
			
			if (req.equals(""PROXY1INFO""))
			{
				parent.jta.append(""File names received from proxy1.\n"");
				ObjectInputStream oin=new ObjectInputStream(soc.getInputStream());
				Vector<String> v=(Vector<String>) oin.readObject();
				oin.close();
				parent.jlist1.setListData(v);
				
			}
			else
			if (req.equals(""PROXY2INFO""))
			{
				parent.jta.append(""File names received from proxy2.\n"");
				ObjectInputStream oin=new ObjectInputStream(soc.getInputStream());
				Vector<String> v=(Vector<String>) oin.readObject();
				oin.close();
				parent.jlist2.setListData(v);
				
			}
			else
			if (req.equals(""PROXY1REQ""))
			{
				
				parent.no_of_reqs++;
				parent.jta.append(""Request for file from proxy1..\n"");
				String cip=din.readUTF();
				int cport=din.readInt();
				String fname=din.readUTF();
				
				int size=parent.jlist2.getModel().getSize();
				boolean found=false;
				
				for (int i=0;i<size;i++)
				{
					if ((parent.jlist2.getModel().getElementAt(i).toString()).equalsIgnoreCase(fname))
					{
						found=true;
						break;
					}
				}
				
				if (found)
				{
					Socket s=new Socket(proxy2addr,1800);
					DataOutputStream dout=new DataOutputStream(s.getOutputStream());
					dout.writeUTF(""download1"");
					dout.writeUTF(cip);
					dout.writeInt(cport);
					dout.writeUTF(fname);
					dout.close();
					parent.jta.append(""Request forwarded to Proxy2.\n"");
				}
				else
				{
					parent.no_of_server++;
					Socket s=new Socket(serveraddr,1900);
					DataOutputStream dout=new DataOutputStream(s.getOutputStream());
					dout.writeUTF(""PROXY1REQ"");
					dout.writeUTF(cip);
					dout.writeInt(cport);
					dout.writeUTF(fname);
					dout.close();
					parent.jta.append(""Request forwarded to server.\n"");
				}
			}
			else
			if (req.equals(""PROXY2REQ""))
			{
				parent.no_of_reqs++;
				parent.jta.append(""Request for file from proxy2..\n"");
				String cip=din.readUTF();
				int cport=din.readInt();
				String fname=din.readUTF();
				
				int size=parent.jlist1.getModel().getSize();
				boolean found=false;
				
				for (int i=0;i<size;i++)
				{
					if ((parent.jlist1.getModel().getElementAt(i).toString()).equalsIgnoreCase(fname))
					{
						found=true;
						break;
					}
				}
				
				if (found)
				{
					Socket s=new Socket(proxy1addr,1500);
					DataOutputStream dout=new DataOutputStream(s.getOutputStream());
					dout.writeUTF(""download1"");
					dout.writeUTF(cip);
					dout.writeInt(cport);
					dout.writeUTF(fname);
					dout.close();
					parent.jta.append(""Request forwarded to Proxy1.\n"");
				}
				else
				{
					parent.no_of_server++;
					Socket s=new Socket(serveraddr,1900);
					DataOutputStream dout=new DataOutputStream(s.getOutputStream());
					dout.writeUTF(""PROXY2REQ"");
					dout.writeUTF(cip);
					dout.writeInt(cport);
					dout.writeUTF(fname);
					dout.close();
					parent.jta.append(""Request forwarded to server.\n"");
				}
			}
			
			
			
			din.close();
				soc.close();
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
	}
"
3548,719f12f3-5dcd-437e-aa26-efa8d1e22a7b,"	void readaddr()
	{
		try
		{
			fin=new FileInputStream(""tracker.txt"");
			while((ch=fin.read())!=-1)
			trackeraddr+=(char)ch;
			trackeraddr.trim();
			
			fin=new FileInputStream(""proxy2.txt"");
			while((ch=fin.read())!=-1)
			proxy2addr+=(char)ch;
			proxy2addr.trim();
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
	}
"
3549,14bbc715-6e98-40b7-897b-fafb5f10464c,"	proxyserver()
	{
		createproxy();
		readaddr();
		Thread t=new Thread(this);
		t.start();
	}
"
3550,e413c602-7a8e-460c-9986-2268d916f6b4,"	void createproxy()
	{
		jf=new JFrame(""PROXY_SERVER"");
		Container cp=jf.getContentPane();
		cp.setLayout(null);
		
		JLabel jl=new JLabel(""PROXY SERVER ##1"",JLabel.CENTER);
		jl.setFont(new Font(""Times New Roman"",Font.BOLD,28));
		jl.setForeground(Color.BLACK);
		
		JLabel jl1=new JLabel(""Details of Requests given to Proxy1:"");
		jta=new JTextArea(""Waiting for request..\n"");
		JScrollPane jsp=new JScrollPane(jta);
		jta.setBackground(Color.WHITE);
		jta.setForeground(Color.BLACK);
	
		
		JLabel jl2=new JLabel(""List of available files in the proxy Server:"");
		String dirname=""C:\\Users\\vamshi krishna s\\Desktop\\proxyserverfiles"";
		File f=new File(dirname);
		String files[]=f.list();
		for (int i=0;i<files.length;i++)
		v.add(files[i]);
		jlist=new JList(files);
		JScrollPane jsp2=new JScrollPane(jlist) ;
		
		jbexit=new JButton(""EXIT"");
		proxyinfo=new JButton(""System Info"");
		stats=new JButton(""Statistics"");
		JLabel jla=new JLabel(""CSE FINAL YEAR PROJECT 2012"",JLabel.RIGHT);
		
		cp.add(jl);
		cp.add(jl1);
		cp.add(jsp);
		cp.add(jl2);
		cp.add(jsp2);
		cp.add(jbexit);
		cp.add(jla);
		cp.add(proxyinfo);
		cp.add(stats);
		Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
		

		jl.setBounds(0,0,d.width,30);
		jl1.setBounds(10,50,400,20);
		jsp.setBounds(10,80,600,600);
		jl2.setBounds(630,50,300,30);
		jsp2.setBounds(630,80,300,300);
		jbexit.setBounds(700,400,150,30);
		proxyinfo.setBounds(700,500,150,30);
		stats.setBounds(700,600,150,30);
		jf.setSize(d.width,d.height);
		jf.setVisible(true);
		jbexit.addActionListener(this);
		proxyinfo.addActionListener(this);
		stats.addActionListener(this);
	}
"
3551,c3fc5c56-f459-4319-9a5b-24d458c7139f,"	public void actionPerformed(ActionEvent ae)
	{
		if(ae.getSource()==jbexit)
		{
			System.exit(0);
		}
		else if(ae.getSource()==proxyinfo)
		{
			System.out.print(""System Info"");
			try {
				
				JOptionPane.showMessageDialog(null,""IP Address of the System: ""+InetAddress.getLocalHost().getHostAddress()+""\nHost Name:""+InetAddress.getLocalHost().getHostName()+""\n"");
				
				
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else if(ae.getSource()==stats)
		{
			JOptionPane.showMessageDialog(null,""Total No of Requests handled By Proxy Server In this Session\n ""+no_of_req+""\n"");
		}
	}
"
3552,06e8821e-5e38-423f-ac5d-3bc0b562d303,"	public void run()
	{
		try
		{
			jta.append(""Thread Started."");
			Socket soc=new Socket(trackeraddr,2000);
			DataOutputStream dout=new DataOutputStream(soc.getOutputStream());
			dout.writeUTF(""PROXY1INFO"");
			ObjectOutputStream oos=new ObjectOutputStream(soc.getOutputStream());
			oos.writeObject(v);
			oos.close();
			dout.close();
			soc.close();
			
			ServerSocket ss=new ServerSocket(1500);
			
			while(true)
			{
				Socket s=ss.accept();
				jta.append(""\nNew Client Request Received..\n"");
				new processreq(this,s);
			}
		}
		catch(Exception e)
		{
			System.out.println(e+""PServer"");
			e.printStackTrace();
		}
	}
"
3553,4f3e93eb-c26c-4c39-a74f-44199e346412,"	public static void main(String args[])
	{
		new proxyserver();
	}
"
3554,fe121912-daf4-4c0f-96f6-5a3296ef7a84,"	processreq(proxyserver obj,Socket s)
	{
		parent=obj;
		soc=s;
		//readaddr();
		Thread t=new Thread(this);
		t.start();
	}
"
3555,fe46776a-f65b-4013-bba3-f6201b80b035,"	public void run()
	{
		try
		{
			String trackeraddr=parent.trackeraddr,proxy2addr=parent.proxy2addr;
			DataInputStream din=new DataInputStream(soc.getInputStream());
			String req=din.readUTF();
			System.out.println(req);
			
			if (req.equals(""download""))
			{
				parent.no_of_req++;
				parent.jta.append(""Request is download..\n"");
				String ip=din.readUTF();
				int port=din.readInt();
				String fname=din.readUTF();
				
				
				parent.jta.append(""check for file in list\n"");
				
				File f=new File(dirname);
				File files[]=f.listFiles();
				
				int i=0;
				for (i=0;i<files.length;i++)
				{
					String name=files[i].getName();
					if (fname.equalsIgnoreCase(name))
					{
						FileInputStream fin=new FileInputStream(dirname+""\\""+name);
						byte b[]=new byte[fin.available()];
						fin.read(b);
						fin.close();
						
						Socket s=new Socket(ip,port);
						DataOutputStream dout=new DataOutputStream(s.getOutputStream());
						dout.writeUTF(""SUCCESS"");
						dout.writeUTF(name);
						
						ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());
						oos.writeObject(b);
						
						parent.jta.append(""File found and forwarded to client..\n"") ;
						
						oos.close();
						dout.close();
						s.close();
						break;
					}
					
					
					
					
					
				}
				
				if (i==files.length)
				{
					parent.jta.append(""File not found\n"");
					Socket s=new Socket(trackeraddr,2000);
					DataOutputStream dout=new DataOutputStream(s.getOutputStream());
					dout.writeUTF(""PROXY1REQ"");
					dout.writeUTF(ip);
					dout.writeInt(port);
					dout.writeUTF(fname);
					dout.close();
					s.close();
					parent.jta.append(""Request forwarded to tracker.\n"");
				}
				
			//	din.close();
			//	soc.close();
				
				
			}
			else
			if (req.equals(""SERVERRESPONSE1""))
			{
				parent.jta.append(""File response from server\n"");
				String cip=din.readUTF();
				int cport=din.readInt();
				String fname=din.readUTF();
				ObjectInputStream oin=new ObjectInputStream(soc.getInputStream());
				byte b[]=(byte[]) oin.readObject();
				FileOutputStream fout=new FileOutputStream(dirname+""\\""+fname);
				fout.write(b);
				fout.close();
				parent.jta.append(""File saved in proxy.\n"");
				
				Socket s=new Socket(cip,cport);
				DataOutputStream dout=new DataOutputStream(s.getOutputStream());
				dout.writeUTF(""SUCCESS"");
				dout.writeUTF(fname);
					
				ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());
				oos.writeObject(b);
				
				parent.jta.append(""File forwardedt to client\n"");
						
				oos.close();
				dout.close();
				s.close();
				
				oin.close();
				
				File f=new File(dirname);
				String files[]=f.list();
		
				Vector<String> v=new Vector<String>();
				for (int i=0;i<files.length;i++)
				v.add(files[i]);
				parent.jlist.setListData(v);
				
				Socket soc1=new Socket(trackeraddr,2000);
				DataOutputStream dout1=new DataOutputStream(soc1.getOutputStream());
				dout1.writeUTF(""PROXY1INFO"");
				ObjectOutputStream oos1=new ObjectOutputStream(soc1.getOutputStream());
				oos1.writeObject(v);
				oos1.close();
				dout1.close();
				soc1.close();
				
			}
			else
			if (req.equals(""SERVERRESPONSE2""))
			{
				parent.jta.append(""File response from server\n"");
				String cip=din.readUTF();
				int cport=din.readInt();
				String fname=din.readUTF();
				Socket s=new Socket(cip,cport);
				DataOutputStream dout=new DataOutputStream(s.getOutputStream());
				dout.writeUTF(""FAIL"");
				dout.writeUTF(fname);
				
				parent.jta.append(""File not found, response forwarded to client.\n"");
				
				dout.close();
				s.close();
			}
			else
			if (req.equals(""download1""))
			{
				String cip=din.readUTF();
				int cport=din.readInt();
				String fname=din.readUTF();
				
				parent.jta.append(""check for file in list\n"");
				File f=new File(dirname);
				File files[]=f.listFiles();
				int i=0;
				for (i=0;i<files.length;i++)
				if (fname.equalsIgnoreCase(files[i].getName()))
				break;
				
				FileInputStream fin=new FileInputStream(dirname+""//""+files[i].getName());
				byte b[]=new byte[fin.available()];
				fin.read(b);
				fin.close();
						
				Socket s=new Socket(proxy2addr,1800);
				DataOutputStream dout=new DataOutputStream(s.getOutputStream());
				dout.writeUTF(""FORWARD"");
				dout.writeUTF(cip);
				dout.writeInt(cport);
				dout.writeUTF(files[i].getName());
						
				ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());
				oos.writeObject(b);
				
				parent.jta.append(""File found and forwarded to client..\n"") ;
						
				oos.close();
				dout.close();
				s.close();
			}
			else
			if (req.equals(""FORWARD""))
			{
				parent.jta.append(""File response from Proxy2\n"");
				String cip=din.readUTF();
				int cport=din.readInt();
				String fname=din.readUTF();
				ObjectInputStream oin=new ObjectInputStream(soc.getInputStream());
				byte b[]=(byte[]) oin.readObject();
				FileOutputStream fout=new FileOutputStream(dirname+""//""+fname);
				fout.write(b);
				fout.close();
				parent.jta.append(""File saved in proxy.\n"");
				
				Socket s=new Socket(cip,cport);
				DataOutputStream dout=new DataOutputStream(s.getOutputStream());
				dout.writeUTF(""SUCCESS"");
				dout.writeUTF(fname);
					
				ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());
				oos.writeObject(b);
				
				parent.jta.append(""File forwardedt to client\n"");
						
				oos.close();
				dout.close();
				s.close();
				
				oin.close();
				
				File f=new File(dirname);
				String files[]=f.list();
				Vector<String> v=new Vector<String>();
				for (int i=0;i<files.length;i++)
				v.add(files[i]);
				parent.jlist.setListData(v);
				
				Socket soc1=new Socket(trackeraddr,2000);
				DataOutputStream dout1=new DataOutputStream(soc1.getOutputStream());
				dout1.writeUTF(""PROXY1INFO"");
				ObjectOutputStream oos1=new ObjectOutputStream(soc1.getOutputStream());
				oos1.writeObject(v);
				oos1.close();
				dout1.close();
				soc1.close();
				
				
			}
			
			
			din.close();
			soc.close();
		}
		catch(Exception e)
		{
			System.out.println(""in process proxy server 1:""+e);
		}
	}
"
3556,665c4577-0d84-4763-9545-39ad6d4378a3,"	server()
	{
		createwin();
		Thread t=new Thread(this);
		t.start();
	}
"
3557,998068d3-b4c8-460f-abcc-b1a78983e921,"	void createwin()
	{
		jf=new JFrame(""SERVER"");
		Container cp=jf.getContentPane();
		cp.setLayout(null);
		
		JLabel jl=new JLabel(""Server Side of the Architecture "",JLabel.CENTER);
		jl.setFont(new Font(""Dialog"",Font.BOLD,20));
		jl.setForeground(Color.BLACK);
		
		JLabel jl1=new JLabel(""Server Activity:"");
		jta=new JTextArea(""Waiting for request..\n"");
		JScrollPane jsp=new JScrollPane(jta);
		jta.setBackground(Color.WHITE);
		jta.setForeground(Color.BLUE);
		
		JLabel jl2=new JLabel(""List of available files:"");
		String dirname=""C:\\Users\\vamshi krishna s\\Desktop\\serverfiles"";
		File f=new File(dirname);
		
		String files[]=f.list();
		jlist=new JList(files);
		JScrollPane jsp2=new JScrollPane(jlist) ;
		
		jbexit=new JButton(""EXIT"");
		info=new JButton(""System Info"");
		stats=new JButton(""Statistics"");
		cp.add(jl);
		cp.add(jl1);
		cp.add(jsp);
		cp.add(jl2);
		cp.add(jsp2);
		cp.add(jbexit);
		cp.add(info);
		cp.add(stats);
		Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
		
		jl.setBounds(0,0,d.width,30);
		jl1.setBounds(10,50,400,20);
		jsp.setBounds(10,80,600,600);
		jl2.setBounds(630,50,150,20);
		jsp2.setBounds(630,80,300,300);
		jbexit.setBounds(700,400,100,30);
		info.setBounds(850,400,150,30);
		stats.setBounds(700,550,150,30);
		jf.setSize(d.width,d.height);
		jf.setVisible(true);
		jbexit.addActionListener(this);
		info.addActionListener(this);
		stats.addActionListener(this);
	}
"
3558,4acddb51-f29b-4554-ba3f-6f68d0844c51,"	public void actionPerformed(ActionEvent ae)
	{
		if(ae.getSource()==jbexit)
		{
			System.exit(0);
		}
		else if(ae.getSource()==info)
		{
			System.out.print(""System Info"");
			try {
				
				JOptionPane.showMessageDialog(null,""IP Address of the System: ""+InetAddress.getLocalHost().getHostAddress()+""\nHost Name:""+InetAddress.getLocalHost().getHostName()+""\n"");
				
				
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else if(ae.getSource()==stats)
		{
			JOptionPane.showMessageDialog(null,""Total No of Requests handled By Server In this Session\n ""+no_of_req+""\n"");
		}
	}
"
3559,a472b7ae-f709-4a91-8a05-18aa58a163ab,"	public void run()
	{
		try
		{
			ServerSocket ss=new ServerSocket(1900);
			while(true)
			{
				Socket s=ss.accept();
				jta.append(""\nRequest recedived from tracker\n"");
	//			no_of_req++;
				new serverprocess(this,s);
			}
		}
		catch(Exception e)
		{
			System.out.println(e);
			e.printStackTrace();
		}
	}
"
3560,ff13a93e-dd8b-4b7f-ae0b-b0637a48f66c,"	public static void main(String args[])
	{
		new server();
	}
"
3561,c715877e-a17d-42d4-8fd1-3fe707a98173,"	serverprocess(server obj,Socket s)
	{
		parent=obj;
		soc=s;
		readaddr();
		
		Thread t=new Thread(this);
		parent.jta.append(""Server Thread Started"");
		
		t.start();
		
	}
"
3562,c191c706-92dc-4015-951d-48ca0b1fdea2,"	void readaddr()
	{
		try
		{
			fin=new FileInputStream(""proxy1.txt"");
			while((ch=fin.read())!=-1)
			proxy1addr+=(char)ch;
			proxy1addr.trim();
			
			fin=new FileInputStream(""proxy2.txt"");
			while((ch=fin.read())!=-1)
			proxy2addr+=(char)ch;
			proxy2addr.trim();
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
	}
"
3563,ba0f46a3-94f5-481f-bb89-c01f656bbcf9,"	public void run()
	{
		try
		{
			parent.no_of_req++;
			DataInputStream din=new DataInputStream(soc.getInputStream());
			String req=din.readUTF();
			String cip=din.readUTF();
			int cport=din.readInt();
			String fname=din.readUTF();
			parent.jta.append(""File Name is ""+fname+""\n"");
			
			boolean found=false;
			int size=parent.jlist.getModel().getSize();
			
			int i=0;
			for (i=0;i<size;i++)
			{
				if ((parent.jlist.getModel().getElementAt(i).toString()).equalsIgnoreCase(fname))
				{
					found=true;
					break;
				}
			}
			
			if (req.equals(""PROXY1REQ""))
			{
				if (found)
				{
					FileInputStream fin=new FileInputStream(dirname+""//""+parent.jlist.getModel().getElementAt(i).toString());
					byte b[]=new byte[fin.available()];
					fin.read(b);
					fin.close();
					
					Socket s=new Socket(proxy1addr,1500);
					DataOutputStream dout=new DataOutputStream(s.getOutputStream());
					dout.writeUTF(""SERVERRESPONSE1"");
					dout.writeUTF(cip);
					dout.writeInt(cport);
					dout.writeUTF(fname);
					ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());
					oos.writeObject(b);
					oos.close();
					dout.close();
					s.close();
					
					parent.jta.append(""File found and forwarded to Proxy1.\n "");
				}
				else
				{
					Socket s=new Socket(proxy1addr,1500);
					DataOutputStream dout=new DataOutputStream(s.getOutputStream());
					dout.writeUTF(""SERVERRESPONSE2"");
					dout.writeUTF(cip);
					dout.writeInt(cport);
					dout.writeUTF(fname);
					dout.close();
					s.close();
					parent.jta.append(""File not found. Response sent to proxy1.\n"");
				}
			}
			else
			if (req.equals(""PROXY2REQ""))
			{
				if (found)
				{
					FileInputStream fin=new FileInputStream(dirname+""//""+parent.jlist.getModel().getElementAt(i).toString());
					byte b[]=new byte[fin.available()];
					fin.read(b);
					fin.close();
					
					Socket s=new Socket(proxy2addr,1800);
					DataOutputStream dout=new DataOutputStream(s.getOutputStream());
					dout.writeUTF(""SERVERRESPONSE1"");
					dout.writeUTF(cip);
					dout.writeInt(cport);
					dout.writeUTF(fname);
					ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());
					oos.writeObject(b);
					oos.close();
					dout.close();
					s.close();
					parent.jta.append(""File found and frowarded to Proxy2.\n"");
				}
				else
				{
					Socket s=new Socket(proxy2addr,1800);
					DataOutputStream dout=new DataOutputStream(s.getOutputStream());
					dout.writeUTF(""SERVERRESPONSE2"");
					dout.writeUTF(cip);
					dout.writeInt(cport);
					dout.writeUTF(fname);
					dout.close();
					s.close();
					parent.jta.append(""File not found. Response sent to proxy2.\n"");
				}
			}
			
			
			
		}
		catch(Exception e)
		{
			System.out.println(e);
			e.printStackTrace();
		}
	}
"
3564,b9688ef9-39e5-4025-bf74-c786f47ad055,"	public Query(List<QueryItem> items) {
		mItems = items;
	}
"
3565,e348936b-2daf-476c-a7c2-6338b8766fa8,"	public List<QueryItem> getItems() {
		return mItems;
	}
"
3566,3e50e562-bd9c-4a77-aef3-84d8fc9afb7b,"	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (QueryItem item : mItems) {
			sb.append(item.toString());
			sb.append(' ');
		}
		return sb.toString().trim();
	}
"
3567,bd118f6f-388e-46ed-be1c-73afef222016,"	@Test
	public void testTrivialEquation() {
		String expected = ""2"";
		String actual = CalcParser.solve(""1+1"");
		assertEquals(""1+1 should equal 2"", expected, actual);
	}
"
3568,46e622df-c8dc-4dae-a6a2-ce8ddfce0ffd,"	@Test
	public void testAnotherTrivialEquation() {
		String expected = ""4"";
		String actual = CalcParser.solve(""2*2"");
		assertEquals(""2*2 should equal 4"", expected, actual);
	}
"
3569,bbf11dca-1d0c-408e-a1ce-6b841cf06938,"	@Test
	public void testTrivialWithWhiteSpaceEquation() {
		String expected = ""4"";
		String actual = CalcParser.solve(""2 * 2"");
		assertEquals(""2 * 2 should equal 4"", expected, actual);
	}
"
3570,c2d796d7-9b90-4440-9bd3-1a17b859db49,"	@Test
	public void testComprehensiveStrings(){
		for(String[] equationPair : testStr){
			String expected = equationPair[0];
			String actual = CalcParser.solve(equationPair[1]);
			assertEquals(
					String.format(""Comprehensive test of \""%s\"""", equationPair[1]), 
					expected, 
					actual);
		}
	}
"
3571,3ded0506-ce13-44e3-8a1c-a1b1a46da716,"	public SearchEngine(String filepath) {
		dataFilepath = filepath;
	}
"
3572,ef56fb52-b302-46af-997a-c372a0f413f4,"	public static boolean isMatch(String sentence, String query) {
		SearchEngine e = new SearchEngine(PATH);
		QueryParser q = new QueryParser();
		Query qobj = q.parse(query);
		
		List<String> a = new ArrayList<String>();
		a.add(sentence);
		
		for (QueryItem item : qobj.getItems()) {
			a = e.searchSentence(a, item);
		}
		
		return a.size() > 0;
	}
"
3573,224de425-790e-4f6a-9761-1dc9bfb8d7ac,"	public List<String> search(Query query) {
		// load data
		List<String> searchResults = DataRetriever.getData(dataFilepath);
		
		for (QueryItem subQuery : query.getItems()) {
			searchResults = searchSentence(searchResults, subQuery);
		}
		
		return searchResults;
	}
"
3574,a972b388-4f58-490d-9781-89b613a1c6a9,"	private List<String> searchSentence(List<String> data, QueryItem query) {
		String queryWord = query.getWord();
		queryWord = queryWord.toLowerCase();
		
		switch(query.getBeforeOperator()) {
			case Not:
				queryNOT(data, queryWord);
				break;
			case Or:
				queryOR(data, queryWord);
				break;
			case And:
				queryAND(data, queryWord, query.getAtLeast());
				break;
		}
		
		return data;
	}
"
3575,44287b84-4c05-4b0f-a86c-cae43687c4b2,"	private void queryNOT(List<String> data, String word) {
		String[] dataAr = new String[data.size()];
		for(int i = 0; i < data.size(); i++){
			dataAr[i] = data.get(i);
		}
		for (String sentence : dataAr) {
			String caseInsensitiveSentence = sentence.toLowerCase();
			
			if (caseInsensitiveSentence.contains(word)) {
				data.remove(sentence);
			}
		}
	}
"
3576,477dd92b-c7d7-431a-a2ff-63491a127aa5,"	private void queryOR(List<String> data, String word) {
		
	}
"
3577,81e22bc4-9a5f-4ebd-8847-b6002ec6189e,"	private void queryAND(List<String> data, String word, int atLeast) {
		String[] dataAr = new String[data.size()];
		for(int i = 0; i < data.size(); i++){
			dataAr[i] = data.get(i);
		}

		for (String sentence : dataAr) {
			String caseInsensitiveSentence = sentence.toLowerCase();
			
			if (!queryANDHasAtLeast(caseInsensitiveSentence, word, atLeast)) {
				data.remove(sentence);
			}
		}
	}
"
3578,2b1f2280-ee57-46fc-9673-92b7224d24dd,"	private boolean queryANDHasAtLeast(String sentence, String word, int atLeast) {
		if (atLeast < 0) {
			return true;
		}
		else if (sentence.contains(word)) {
			String strippedSentence = sentence.replaceFirst(word, """");
			return queryANDHasAtLeast(strippedSentence, word, atLeast - 1);
		}
		return false;
	}
"
3579,9bb4de75-945c-4099-97f3-7a95a16fa8aa,"	private void queryEXACT(List<String> data, String word) {
		String[] dataAr = new String[data.size()];
		for(int i = 0; i < data.size(); i++){
			dataAr[i] = data.get(i);
		}
		
		for (String sentence : dataAr) {
			String caseInsensitiveSentence = sentence.toLowerCase();
			
			if (!caseInsensitiveSentence.contains(word)) {
				data.remove(sentence);
			}
		}
	}
"
3580,13d4e042-af5a-45a5-8c5a-f71f0c9d843b,"	private void queryRANGE(List<String> data, String word) {
		String[] dataAr = new String[data.size()];
		for(int i = 0; i < data.size(); i++){
			dataAr[i] = data.get(i);
		}
		for (String sentence : dataAr) {
			String caseInsensitiveSentence = sentence.toLowerCase();
			
			if (!caseInsensitiveSentence.matches(""([0-9])+(\\s..){1}([0-9])+"")) {
				data.remove(sentence);
			}
		}
	}
"
3581,570fa78c-0826-4b41-97c7-64e181309442,"	public static String solve(String equation){
		String cleanEqn = stripWhitespace(equation);
		return pythonEval(cleanEqn);
	}
"
3582,ac6e0d15-83fe-4b5a-80f2-0910460f2ee3,"	private static String stripWhitespace(String equation) {
		return equation.replaceAll(""\\s"", """");
	}
"
3583,af74a4b1-28ae-4bbc-81c7-3a772d0b2db9,"	private static String pythonEval(String equation){
		PrintStream tempWriter = null;
		BufferedReader reader = null;
		try {
			// create the python program
			File tempFile = new File(""temp.py"");
			tempWriter = new PrintStream(tempFile);
			tempWriter.printf(""print(%s)"", equation);
			
			// prepare it
			Process python = new ProcessBuilder(""python"", ""temp.py"").start();
			reader = new BufferedReader(new InputStreamReader(python.getInputStream()));
			// let it run
			python.waitFor();
			// get the output of the python program
			String response = reader.readLine();
			// kill the python process
			python.destroy();
			// cleanup
			tempFile.delete();
			
			return response;
		} catch (IOException e) {
			// don't care
		} catch (InterruptedException e) {
			// don't care
		} finally {
			close(tempWriter);
			close(reader);
		}
		return """";
	}
"
3584,6a4546f4-3fc1-4b7d-a031-b4264ece98a0,"	private static void close(Closeable c){
		if(c != null){
			try {
				c.close();
			} catch (IOException e) {
				// don't care!!
			}
		}
	}
"
3585,2f637cdd-a883-432e-8814-a7001982b1a2,"	public Query parse(String query) {
		query = preprocess(query);
		String[] tokens = tokenize(query);
		
		List<QueryItem> items = parse(tokens);
		return new Query(items);
	}
"
3586,80d88d09-fe05-4222-9c11-d7f730dc866c,"	private String[] tokenize(String query) {
		int position = 0;
		boolean inQuotes = false;
		ArrayList<String> words = new ArrayList<String>();
		
		StringBuilder sb = new StringBuilder();
		while (position < query.length()) {
			char c = query.charAt(position++);
			
			if (inQuotes) {
				if (c == '""') {
					words.add(sb.toString());
					sb.setLength(0);
				} else {
					sb.append(c);
				}
			} else if (c == '{' && sb.length() > 0) {
				words.add(sb.toString());
				sb.setLength(0);
				sb.append(c);
			} else if (c == ' ') {
				words.add(sb.toString());
				sb.setLength(0);
			} else if (c != '""') {
				sb.append(c);
			}
			
			if (c == '""') {
				inQuotes = !inQuotes;
			}
		}
		
		if (sb.length() > 0) {
			words.add(sb.toString());
		}
		
		return words.toArray(new String[words.size()]);
	}
"
3587,fdf21fce-7e76-4bf7-8d6b-f651dbdb54df,"	private List<QueryItem> parse(String[] tokens) {
		ArrayList<QueryItem> items = new ArrayList<QueryItem>();
		
		QueryOperator nextOp = QueryOperator.And;
		for (String token : tokens) {
			token = token.toLowerCase();
			if (token.charAt(0) == '{') {
				token = token.substring(1, token.length()-1);
				items.get(items.size()-1).setAtLeast(Integer.parseInt(token));
			} else if (token.equals(""and"")) {
				nextOp = QueryOperator.And;
			} else if (token.equals(""or"")) {
				nextOp = QueryOperator.Or;
			} else if (token.equals(""not"")) {
				nextOp = QueryOperator.Not;
			} else {
				QueryItem item = new QueryItem(token, nextOp);
				items.add(item);
				nextOp = QueryOperator.And;
			}
		}
		
		return items;
	}
"
3588,8e29d525-b031-414b-a585-7a77d651dfe9,"	private String preprocess(String query) {
		// Extract CALC operations
		CalcParser calc = new CalcParser();
		Matcher m = RE_CALC.matcher(query);
		
		StringBuilder sb = new StringBuilder();
		
		int position = 0;
		while (!m.hitEnd()) {
			if (m.find()) {
				// Add everything before the match to the StringBuilder
				sb.append(query.substring(position, m.start()));
				position = m.start();
				
				// Extract the match, process it, append to the StringBuilder
				String match = m.group(1);
				sb.append(calc.solve(match));
				
				// Advance the position by the length of the match
				position += match.length() + ""{CALC }"".length();
			}
		}
		
		// Add the rest of the query to the end of the QueryParser
		if (position >= 0 && position < query.length()) {
			sb.append(query.substring(position));
		}
		
		return sb.toString();
	}
"
3589,8b501f42-a7ee-465f-8728-4d49a7b627cb,"	private static void main(String[] argv) {
		QueryParser q = new QueryParser();
		System.out.println(q.parse(""The{5}""));
		System.out.println(q.parse(""\""the * example\""{4} {CALC 8*(8+9/3)}..{CALC 90000/10+1} OR *park NOT bench""));
		System.out.println(q.parse(""Test {CALC 8+1+3+5/2} oaeu {calc 4+2}""));
		System.out.println(q.parse(""an example {CALC 3}""));
		System.out.println(q.parse(""{CALC 3} an example""));
	}
"
3590,8f5d8d07-66a4-4a46-8153-7d50b403f388,"    public static void main(String[] args) throws FileNotFoundException {
        List<String> sentences = loadSentences(args[0]);
        String query = args[1];

        for (String sentence : sentences) {
            if (SearchEngine.isMatch(sentence, query)) {
                System.out.println(sentence);
            }
        }
    }
"
3591,453115e6-c14a-49e6-a1f1-433fd4258e78,"    private static List<String> loadSentences(String filename) throws FileNotFoundException {
        Scanner scanner = new Scanner(new File(filename));
        scanner.useDelimiter(""\n"");
        List<String> sentences = new ArrayList<String>();

        while (scanner.hasNext()) {
            sentences.add(scanner.next().trim());
        }
        scanner.close();

        return sentences;
    }
"
3592,9f4c7be1-690a-4eb6-a263-38856b3dc301,"	public QueryItem(String word, QueryOperator op) {
		this.mWord = word;
		mBeforeOperator = op;
	}
"
3593,456141ad-44f9-4313-9394-dd0e9c3340cf,"	public String getWord() {
		return mWord;
	}
"
3594,f06676b9-41c7-486b-9bb0-c80b3554c925,"	public int getAtLeast() {
		return mAtLeast;
	}
"
3595,e76f04ea-0660-4801-bbae-db853101815c,"	public void setAtLeast(int v) {
		mAtLeast = v;
	}
"
3596,e5d3e37b-f499-4608-a3e9-b8a83ba2bc9d,"	public QueryOperator getBeforeOperator() {
		return mBeforeOperator;
	}
"
3597,a5764a10-5b4f-48c4-904d-5b005a54afeb,"	public String toString() {
		String r = this.mWord;
		if (mWord.contains("" "")) {
			r = '""' + r + '""';
		}
		
		r = mBeforeOperator.toString().toUpperCase() + "" "" + r;
		
		if (mAtLeast > 0) {
			r += ""{"" + Integer.toString(mAtLeast) + ""}"";
		}
		
		return r;
	}
"
3598,8704f789-e22b-4a13-a4e4-fb1133a5ea41,"	public static List<String> getData(String filepath) {
		ArrayList<String> sentenceData = new ArrayList<String>();

		try {
			// get file
			File rawData = new File(filepath);
			// load file
			FileInputStream inputStream = new FileInputStream(rawData);

			StringBuilder sentence = new StringBuilder();
			
			// read data
			while (true) {
				int character = inputStream.read();

				if ( character == END_OF_FILE ) {
					sentenceData.add(sentence.toString());
					break;
				}
				else if ( character == NEWLINE ) {
					// newline = add sentence and clear string builder
					sentenceData.add(sentence.toString());
					sentence = new StringBuilder();
				}
				else {
					sentence.append((char)character);
				}
			}
			
			// LOWERCASING
			for (String str : sentenceData) {
				str = str.toLowerCase();
			}
			
			inputStream.close(); //cleanup
		}
		catch (FileNotFoundException e) {
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return sentenceData;
	}	
"
3599,39fc5d7c-6ca1-48e3-af34-0a05b28f0a9f,"	public void setup() {
		size(1280,520);
		kinect = new Kinect(this);
		kinect.start();
		kinect.enableDepth(depth);
		kinect.enableRGB(rgb);
	
		int h = kinect.getVideoImage().height;
		int w = kinect.getVideoImage().width;
		int hd = kinect.getDepthImage().height;
		int wd = kinect.getDepthImage().width;
		System.out.println(""h:""+h+"" w:""+w + "" hd:""+ hd + "" wd:""+wd);
		
	}
"
3600,4275a91e-a0a6-49ac-b35b-55fee365250e,"	public void draw() {
		background(0);
		image(kinect.getDepthImage(),640,0);
		image(kinect.getVideoImage(),0,0);
	}
"
3601,b35e3ef3-360e-4fc7-99eb-d134d2c3d411,"	public void keyPressed() {
		if (key == 'q') {
			stop();
			exit();
			
		}	
	}
"
3602,36f2e0de-b9ce-431e-8b31-3e0ba9bbb22d,"	public void stop() {
		kinect.quit();
		super.stop();
	}
"
3603,3d0b3680-f56e-414e-8c31-81b8f2ee1c86,"	@Override
    public String toString(){
        return ""id=""+messageId+"", name=""+message;
    }
"
3604,d3b5b20c-05ae-4a30-a74c-797b7bf728a1,"	public Message() {
	}
"
3605,a47fb2f7-3763-438b-9cc2-da42025431ea,"	 public Message(int messageId, String message, String createdDate) {
			super();
			this.messageId = messageId;
			this.message = message;
			this.createdDate = createdDate;
		}
"
3606,236dcc7a-23a9-4122-b19e-997e7dacf27a,"	public String getCreatedDate() {
		return createdDate;
	}
"
3607,3261da25-0559-497e-ab81-182d83407735,"	public void setCreatedDate(String createdDate) {
		this.createdDate = createdDate;
	}
"
3608,471e04cf-8bbd-4361-8552-0968b90247a5,"	public int getMessageId() {
		return messageId;
	}
"
3609,ac895b41-a753-4d35-8db0-6bf0c39bbe9d,"	public void setMessageId(int messageId) {
		this.messageId = messageId;
	}
"
3610,b43f48d8-db48-4a60-a8be-330e2909706a,"	public String getMessage() {
		return message;
	}
"
3611,5cb04d66-9192-4360-a62f-3c130f63ca28,"	public void setMessage(String message) {
		this.message = message;
	}
"
3612,8bfbb827-4122-4ad5-9ae5-dc56534ef59a,"	@ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = ""CHATROOMID"")
	 public ChatRoom getChatRoom() {
		return chatRoom;
	}
"
3613,033b1fb9-5b57-44aa-892b-4e8c1da72961,"	public void setChatRoom(ChatRoom chatRoom) {
		this.chatRoom = chatRoom;
	}
"
3614,ad0a3378-12c5-43e5-8715-63ddcc8685bb,"	@Override
    public String toString(){
        return ""id=""+userId+"", name=""+name;
    }
"
3615,4af24357-abd2-4007-95aa-85d9167a01f1,"	public User() {
	}
"
3616,5d14823d-8f5a-42f8-91c8-ef1e9e9e36c0,"	public int getUserId() {
		return userId;
	}
"
3617,47af0976-33a7-4923-9c96-f315afbab5e3,"	public void setUserId(int userId) {
		this.userId = userId;
	}
"
3618,00401383-ca43-4a1e-a04a-f5dbd1f89880,"	public String getEmail() {
		return email;
	}
"
3619,9a053291-c243-49af-ad26-58cc730cfc5a,"	public void setEmail(String email) {
		this.email = email;
	}
"
3620,1998b0ce-3501-4de7-af16-c311e1a5bfc3,"	public String getPassword() {
		return password;
	}
"
3621,903b3bd1-8124-4c14-baa0-33660897f220,"	public void setPassword(String password) {
		this.password = password;
	}
"
3622,2ac6e62c-f7dc-46c2-be94-8365d70a752b,"	public String getStatus() {
		return status;
	}
"
3623,9e79198a-d98d-4955-bd29-f50864b4a74f,"	public void setStatus(String status) {
		this.status = status;
	}
"
3624,c3edb5a8-5831-40f1-8b40-a7d69eb58c45,"	public String getCreatedDate() {
		return createdDate;
	}
"
3625,0073fcb2-c049-47dc-9119-0cff0bd60916,"	public void setCreatedDate(String createdDate) {
		this.createdDate = createdDate;
	}
"
3626,c2bed075-8d35-40bf-b80b-0bec7ae19871,"	public String getStatusMessage() {
		return statusMessage;
	}
"
3627,21821bed-540d-4ac6-ba55-ea11a84fe716,"	public void setStatusMessage(String statusMessage) {
		this.statusMessage = statusMessage;
	}
"
3628,2087cb5d-4fcb-41d5-99b2-a7afd290e9b4,"	public String getName() {
		return name;
	}
"
3629,e077a4e5-6594-4ef1-bc4f-5af81e72e47d,"	public void setName(String name) {
		this.name = name;
	}
"
3630,e831185c-003b-4d51-888a-ab909f41c14b,"	@Override
    public String toString(){
        return ""id=""+ ""name=""+name;
    }
"
3631,0b9e532e-6c66-4d13-a64c-eb75962ff2dc,"	public ChatRoom() {
	}
"
3632,36f0df36-f2f2-4604-a24f-4c306e2a6132,"	 public ChatRoom(int chatRoomId, String message, String createdDate) {
			super();
			this.chatRoomId = chatRoomId;
			this.name = message;
			this.createdDate = createdDate;
		}
"
3633,5a06d226-3395-497c-928f-26c5faf6e6ce,"	public String getCreatedDate() {
		return createdDate;
	}
"
3634,33478735-4081-4443-8532-5331741195e6,"	public void setCreatedDate(String createdDate) {
		this.createdDate = createdDate;
	}
"
3635,5de4f1be-d5df-4964-829c-15b2995cb107,"	public int getChatRoomId() {
		return chatRoomId;
	}
"
3636,58447b80-57b2-463c-bd37-2c236e60055a,"	public void setChatRoomId(int chatRoomId) {
		this.chatRoomId = chatRoomId;
	}
"
3637,3365ae88-6c76-4c71-af4d-b67940b103f2,"	public String getName() {
		return name;
	}
"
3638,048ba696-7588-477d-a25d-3609c2f419d4,"	public void setName(String name) {
		this.name = name;
	}
"
3639,699650b1-3935-4d92-b653-7597ebb35603,"	public UserChatRoomCompoundKey(int chatRoomId, int userId) {
		super();
		this.chatRoomId = chatRoomId;
		this.userId = userId;
	}
"
3640,cb997808-96c6-4074-a1d9-d2976ea3857b,"	public UserChatRoomCompoundKey() {
		super();
	}
"
3641,b1b68952-c890-4520-809d-2da3b1a0bf98,"	public int getChatRoomId() {
		return chatRoomId;
	}
"
3642,9d5d1852-5e4e-4d0d-8876-fd9f70c058da,"	public void setChatRoomId(int chatRoomId) {
		this.chatRoomId = chatRoomId;
	}
"
3643,730b645d-cc3c-4659-b6a9-9aded880c6cf,"	public int getUserId() {
		return userId;
	}
"
3644,0ef13860-c2f9-4941-97f4-09646e070ff7,"	public void setUserId(int userId) {
		this.userId = userId;
	}
"
3645,c53bad41-9fec-419d-805f-61284ec1b525,"	public String getCreatedDate() {
		return createdDate;
	}
"
3646,7728a3b8-38da-4099-bb1e-c7c006ab0182,"	public void setCreatedDate(String createdDate) {
		this.createdDate = createdDate;
	}
"
3647,1d329486-e9bf-4db1-9a6a-0b714e59510a,"	public UserChatRoomCompoundKey getUserChatRoomCk() {
		return userChatRoomCk;
	}
"
3648,3ca58551-95fb-45d8-91aa-3df191cd04c8,"	public void setUserChatRoomCk(UserChatRoomCompoundKey userChatRoomCk) {
		this.userChatRoomCk = userChatRoomCk;
	}
"
3649,526d3898-38b1-4e1d-bc7c-888c0b046475,"	public User save(User user);
"
3650,81c8220e-208f-40b0-8dd0-7d7234e1b7d3,"	public User getUser(int userId);
"
3651,37418173-8e24-4c72-8b4f-af5e9e02344a,"	public void postMessage(Message message);
"
3652,836bc8aa-d0af-4a57-a668-6c930eb8e2ec,"	public User save(User user){ 
	
    Session session=this.sessionFactory.getCurrentSession();
    session.save(user);
    return user;
	}
"
3653,42abfc4b-dac3-4086-83de-c74d1b6cc625,"	public User getUser(int userId){ 
		
	    Session session=this.sessionFactory.getCurrentSession();
	    Criteria criteria=session.createCriteria(User.class).add(Restrictions.eq(""userId"", userId));
	    Object result =  criteria.uniqueResult();
	    if(result !=null)
	    	return (User)result;
	    else
	    return null;
		}
"
3654,da1d4a4d-f240-4e20-8d56-80619ae89254,"	@Override
	public void postMessage(Message message) {
		Session session=this.sessionFactory.getCurrentSession();
	    session.save(message);
	}
"
3655,de626ccd-610d-462f-8b08-be7d3edf52c4,"	@Override
	public ChatRoom createChatRoom(ChatRoom chatRoom) {
		Session session=this.sessionFactory.getCurrentSession();
	    session.save(chatRoom);
	    return chatRoom;
	}
"
3656,502bf2c0-34ef-4a97-aaef-5ea3759956f0,"	@Override
	public UserChatRoom joinChatRoom(UserChatRoom userChatRoom) {
		Session session=this.sessionFactory.getCurrentSession();
	    session.save(userChatRoom);
	    return userChatRoom;
	}
"
3657,4a08519f-9352-4bb9-a1b7-6299b96b12d7,"	@Override
	public ChatRoom getChatRoom(int chatRoomId) {
		    
	    Session session=this.sessionFactory.getCurrentSession();
	    Criteria criteria=session.createCriteria(ChatRoom.class).add(Restrictions.eq(""chatRoomId"", chatRoomId));
	    Object result =  criteria.uniqueResult();
	    if(result !=null)
	    	return (ChatRoom)result;
	    else
	    return null;
		}
"
3658,06d6eaa3-71f5-4d32-a994-b8367d61f73b,"	public ChatRoom createChatRoom(ChatRoom chatRoom);
"
3659,792eb0f0-28fb-4338-b4d6-2906c2be482a,"	public UserChatRoom joinChatRoom(UserChatRoom userChatRoom);
"
3660,3a5c7c78-8030-4e9d-b609-7a166ef4c63c,"	public ChatRoom getChatRoom(int chatRoomId);
"
3661,63983a5f-41eb-4ae5-900e-85cf22f069a4,"	 @RequestMapping( ApplicationConstants.CREATE_USR)
	 @ResponseBody
	    public  Object createUser(@RequestParam(""name"") String name,
	    		@RequestParam(""email"") String email,
	    		@RequestParam(""password"") String password) {
	    	User user=new User();
	    	Map<Object,String> errorMap=new HashMap<Object, String>(); 
	    	if(name==null || """".equals(name)){
	    		errorMap.put(1, ""Please enter name"");
	    	}
	    	if(email==null || """".equals(email)){
	    		errorMap.put(2, ""Please enter email"");
	    	}
	    	if(password==null || """".equals(password)){
	    		errorMap.put(3, ""Please enter password"");
	    	}
	    	if (errorMap.size()>0){
	    		return errorMap;
	    	}else{
		    	user.setName(name);
		    	user.setEmail(email);
		    	user.setPassword(password);
		    	user.setCreatedDate(new Date().toString());
		    	user.setStatus(ApplicationConstants.STATUS_ACTIVE);
		    	userDao.save(user);
		        return user;
	    	}
	    }
"
3662,cf7ed4ea-f435-4d32-8feb-1472b9772aec,"	 @RequestMapping( ApplicationConstants.POST_CHAT)
	 @ResponseBody
	    public  Object postMessage(@RequestParam(""message"") String message,
	    		@RequestParam(""chatRoomId"") String chatRoomId) {
	    	Map<Object,String> errorMap=new HashMap<Object, String>(); 
	    	if(message==null || """".equals(message)){
	    		errorMap.put(1, ""Please enter message"");
	    	}
	    	if(chatRoomId==null || """".equals(chatRoomId)){
	    		errorMap.put(2, ""Please enter chatRoomId"");
	    	}
	    	
	    	if (errorMap.size()>0){
	    		return errorMap;
	    	}else{
	    		Message messageToSave=new Message();
	    		messageToSave.setMessage(message);
	    		ChatRoom chatRoom=chatRoomDao.getChatRoom(Integer.parseInt(chatRoomId));
	    		if(chatRoom==null){
	    			errorMap.put(3, ""ChatRoom does not exist"");
	    			return errorMap;
	    		}
	    		messageToSave.setChatRoom(chatRoom);
	    		messageToSave.setCreatedDate(new Date().toString());
		    	messageDao.postMessage(messageToSave);
		        return messageToSave;
	    	}
	    }
"
3663,5467ca8c-00db-4b05-9613-f96b518b6ee6,"	 @RequestMapping( ApplicationConstants.CREATE_CHAT)
	 @ResponseBody
	    public  Object createChatRoom(@RequestParam(""name"") String name) {
	    	ChatRoom chatRoom=new ChatRoom();
	    	Map<Object,String> errorMap=new HashMap<Object, String>(); 
	    	System.out.println(""name11111""+name);
	    	if(name==null || """".equals(name)){
	    		errorMap.put(1, ""Please enter name"");
	    	}
	    	
	    	if (errorMap.size()>0){
	    		return errorMap;
	    	}else{
	    		chatRoom.setName(name);
	    		chatRoom.setCreatedDate(new Date().toString());
		    	chatRoomDao.createChatRoom(chatRoom);
		        return chatRoom;
	    	}
	    }
"
3664,9a54d2d2-465c-48b6-acaf-77640003abbf,"	 @RequestMapping( ApplicationConstants.JOIN_CHAT)
	    public  Object joinChatRoom(@RequestParam(""chatRoomId"") String chatRoomId,
	    		@RequestParam(""userId"") String userId) {
	    	UserChatRoom chatRoom=new UserChatRoom();
	    	Map<Object,String> errorMap=new HashMap<Object, String>(); 
	    	System.out.println(""name11111""+chatRoomId);
	    	if(chatRoomId==null || """".equals(chatRoomId)){
	    		errorMap.put(1, ""Please enter chatRoomId"");
	    	}
	    	if(userId==null || """".equals(userId)){
	    		errorMap.put(2, ""Please enter userId"");
	    	}
	    	
	    	if (errorMap.size()>0){
	    		return errorMap;
	    	}else{
	    		
	    		User userFromDb=userDao.getUser(Integer.parseInt(userId));
	    		ChatRoom chatRoomFromDb=chatRoomDao.getChatRoom(Integer.parseInt(chatRoomId));
	    		if(userFromDb==null){
	    			errorMap.put(3, ""User does not exist"");
	    			return errorMap;
	    		}
	    		else if(chatRoomFromDb==null){
	    		errorMap.put(4, ""Chat Room does not exist"");
	    			return errorMap;
	    			
	    		}else{
		    		UserChatRoomCompoundKey userChatRoom=new UserChatRoomCompoundKey();
		    		userChatRoom.setUserId(Integer.parseInt(userId));
		    		userChatRoom.setChatRoomId(Integer.parseInt(chatRoomId));
		    		chatRoom.setUserChatRoomCk(userChatRoom);
		    		chatRoom.setCreatedDate(new Date().toString());
			    	System.out.println(""##########################"");
			    	chatRoomDao.joinChatRoom(chatRoom);
			        return chatRoom;
	    		}
	    	}
	    }
"
3665,3fcf3955-83f1-411c-ac9b-0d71886d68db,"@Override
public void commence(HttpServletRequest arg0, HttpServletResponse arg1,
		AuthenticationException arg2) throws IOException, ServletException {
	
	arg1.sendError( HttpServletResponse.SC_UNAUTHORIZED, ""Unauthorized"" );
	// TODO Auto-generated method stub
	
}
"
3666,95c6338c-d722-4e4a-9ba1-9ec83c7e4e84,"    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
      Authentication authentication) throws ServletException, IOException {
        SavedRequest savedRequest = requestCache.getRequest(request, response);
        if (savedRequest == null) {
            return;
        }
        String targetUrlParam = getTargetUrlParameter();
        if (isAlwaysUseDefaultTargetUrl() ||
          (targetUrlParam != null &&
          StringUtils.hasText(request.getParameter(targetUrlParam)))) {
            requestCache.removeRequest(request, response);
            clearAuthenticationAttributes(request);
            return;
        }
        clearAuthenticationAttributes(request);
    }
"
3667,10ed4cc6-205d-47e0-8bb3-7e8cf1813c4e,"    public void setRequestCache(RequestCache requestCache) {
        this.requestCache = requestCache;
    }
"
3668,7a1cd44e-f31b-469b-9ee5-40d38d3a0103,"	public static void main(String[] args) throws DatabaseException, UnsupportedEncodingException {

		// Open the environment, creating one if it does not exist
		EnvironmentConfig envConfig = new EnvironmentConfig();
		envConfig.setTransactional(true);
		envConfig.setAllowCreate(true);
		Environment myDbEnvironment = new Environment(new File(""testdb""), envConfig);
		// Open the database, creating one if it does not exist
		DatabaseConfig dbConfig = new DatabaseConfig();
		dbConfig.setAllowCreate(true);
		dbConfig.setTransactional(true);
		Database myDatabase = myDbEnvironment.openDatabase(null, ""TestDatabase"", dbConfig);

		//C  
		for (int i = 0; i < 5; i++) {
			myDatabase.put(null, new DatabaseEntry((""KEY"" + (i + 1)).getBytes(""utf-8"")), new DatabaseEntry(
					(""VALUE"" + (i + 1)).getBytes(""utf-8"")));
		}

		DatabaseEntry key = new DatabaseEntry();
		DatabaseEntry value = new DatabaseEntry();

		//D (by Cursor)  
		Transaction txn = myDatabase.getEnvironment().beginTransaction(null, null);
		Cursor cursor1 = myDatabase.openCursor(txn, null);
		OperationStatus result1 = cursor1.getFirst(key, value, null);
		while (result1 == OperationStatus.SUCCESS) {
			if (""VALUE3"".equals(new String(value.getData(), ""utf-8""))) {
				cursor1.delete();
			}
			result1 = cursor1.getNext(key, value, null);
		}

		if (cursor1 != null) {
			cursor1.close();
		}
		if (txn != null) {
			txn.commit();
		}

		//R (by Cursor)  
		Cursor cursor2 = myDatabase.openCursor(null, null);
		OperationStatus result2 = cursor2.getFirst(key, value, null);

		while (result2 == OperationStatus.SUCCESS) {
			System.out.println(""Cursor Read Value:"" + new String(value.getData(), ""utf-8""));
			result2 = cursor2.getNext(key, value, null);
		}

		if (cursor2 != null) {
			cursor2.close();
		}

		if (myDatabase != null) {
			myDatabase.close();
		}
		if (myDbEnvironment != null) {
			myDbEnvironment.sync();
			myDbEnvironment.cleanLog();
			myDbEnvironment.close();
		}

	}
"
3669,0d67ddf3-0847-435e-9e8d-5de695250d4b,"	public static void main(String[] args) throws Exception {

		// Open the environment, creating one if it does not exist
		EnvironmentConfig envConfig = new EnvironmentConfig();
		envConfig.setTransactional(true);
		envConfig.setAllowCreate(true);
		Environment myDbEnvironment = new Environment(new File(""/testdb""), envConfig);
		// Open the database, creating one if it does not exist
		DatabaseConfig dbConfig = new DatabaseConfig();
		dbConfig.setAllowCreate(true);
		Database myDatabase = myDbEnvironment.openDatabase(null, ""TestDatabase"", dbConfig);

		// Writing records to the database
		String key = ""myKey"";
		String data = ""myData"";
		DatabaseEntry theKey = new DatabaseEntry(key.getBytes(""UTF-8""));
		DatabaseEntry theData = new DatabaseEntry(data.getBytes(""UTF-8""));
		myDatabase.put(null, theKey, theData);

		// Reading records from the database
		// Create two DatabaseEntry instances:
		// theKey is used to perform the search
		// theData will hold the value associated to the key, if found
		DatabaseEntry outData = new DatabaseEntry();

		// Call get() to query the database
		if (myDatabase.get(null, theKey, outData, LockMode.DEFAULT) == OperationStatus.SUCCESS) {
			// Translate theData into a String.
			byte[] retData = outData.getData();
			String foundData = new String(retData, ""UTF-8"");
			System.out.println(""key: '"" + key + ""' data: '"" + foundData + ""'."");
		} else {
			System.out.println(""No record found with key '"" + key + ""'."");
		}

		// Deleting records
		myDatabase.delete(null, theKey);

		// Process all records in the database
		Cursor myCursor = null;

		try {
			myCursor = myDatabase.openCursor(null, null);

			// Cursors returns records as pairs of DatabaseEntry objects
			DatabaseEntry foundKey = new DatabaseEntry();
			DatabaseEntry foundData = new DatabaseEntry();

			// Retrieve records with calls to getNext() until the
			// return status is not OperationStatus.SUCCESS
			while (myCursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS) {
				String keyString = new String(foundKey.getData(), ""UTF-8"");
				String dataString = new String(foundData.getData(), ""UTF-8"");
				System.out.println(""Key| Data : "" + keyString + "" | "" + dataString + """");
			}
		} catch (DatabaseException de) {
			System.err.println(""Error reading from database: "" + de);
		} finally {
			try {
				if (myCursor != null) {
					myCursor.close();
				}
			} catch (DatabaseException dbe) {
				System.err.println(""Error closing cursor: "" + dbe.toString());
			}
		}

		if (myDatabase != null) {
			myDatabase.close();
		}
		if (myDbEnvironment != null) {
			myDbEnvironment.sync();
			myDbEnvironment.cleanLog();
			myDbEnvironment.close();
		}
	}
"
3670,090f630f-dae8-4931-87cc-b67c3168a50c,"	@Override
	public Person entryToObject(TupleInput input) {
		Person p = new Person();
		p.setId(input.readInt());
		p.setName(input.readString());
		p.setSex(input.readBoolean());
		return p;
	}
"
3671,217003f5-2ce1-4c68-bed2-429d5bf825e3,"	@Override
	public void objectToEntry(Person p, TupleOutput output) {
		output.writeInt(p.getId());
		output.writeString(p.getName());
		output.writeBoolean(p.isSex());
	}
"
3672,93060b5b-dc24-4153-aa94-28bd6b3fb086,"	public static void main(String[] args) throws UnsupportedEncodingException {

		// Open the environment, creating one if it does not exist
		EnvironmentConfig envConfig = new EnvironmentConfig();
		envConfig.setTransactional(true);
		envConfig.setAllowCreate(true);
		Environment myDbEnvironment = new Environment(new File(""testdb""), envConfig);
		// Open the database, creating one if it does not exist
		DatabaseConfig dbConfig = new DatabaseConfig();
		dbConfig.setAllowCreate(true);
		Database myDatabase = myDbEnvironment.openDatabase(null, ""TestDatabase"", dbConfig);

		//C  
		String key = ""key-rensanning-Object"";
		Person value = new Person(9527, ""rensanning"", true);

		DatabaseEntry keyEntry = new DatabaseEntry(key.getBytes(""utf-8""));
		DatabaseEntry valEntry = new DatabaseEntry();
		PersonTupleBinding personBinding = new PersonTupleBinding();
		personBinding.objectToEntry(value, valEntry);

		OperationStatus status = myDatabase.put(null, keyEntry, valEntry);
		System.out.println(""Put Person Status: "" + status);

		//R  
		DatabaseEntry valGet = new DatabaseEntry();
		status = myDatabase.get(null, keyEntry, valGet, LockMode.DEFAULT);
		if (status == OperationStatus.SUCCESS) {
			value = personBinding.entryToObject(valGet);
			System.out.println(""Read Person Value:"" + value.getId() + ""\t"" + value.getName() + ""\t"" + value.isSex());
		}

		myDatabase.close();
		myDbEnvironment.sync();
		myDbEnvironment.cleanLog();
		myDbEnvironment.close();
	}
"
3673,6d8120ca-e29e-4ece-9b0e-d6e223d9659e,"	public Person() {
		//		/
	}
"
3674,1ace3688-3ebc-4a90-b384-209d46876894,"	public Person(int id, String name, boolean sex) {
		this.id = id;
		this.name = name;
		this.sex = sex;
	}
"
3675,248d8fa0-2d14-482b-a301-20c2af4b8270,"	public int getId() {
		return id;
	}
"
3676,a1ade21a-6b94-4855-bc5c-5e7ac1c9de09,"	public void setId(int id) {
		this.id = id;
	}
"
3677,1874a093-9583-45f0-85c1-61bb31acd2d5,"	public String getName() {
		return name;
	}
"
3678,776a66e0-09ac-4ed3-9270-0aebfb6ab49c,"	public void setName(String name) {
		this.name = name;
	}
"
3679,9d9b45fd-94fc-4fa8-9425-38ee3cfb8dfb,"	public boolean isSex() {
		return sex;
	}
"
3680,11e45866-a396-4db3-9cfe-d91bb8944c47,"	public void setSex(boolean sex) {
		this.sex = sex;
	}
"
3681,d5a34aef-355f-4838-b1ed-64ce9eb7e35a,"	public static void main(String[] args) throws UnsupportedEncodingException {

		// Open the environment, creating one if it does not exist
		EnvironmentConfig envConfig = new EnvironmentConfig();
		envConfig.setTransactional(true);
		envConfig.setAllowCreate(true);
		Environment myDbEnvironment = new Environment(new File(""testdb""), envConfig);
		// Open the database, creating one if it does not exist
		DatabaseConfig dbConfig = new DatabaseConfig();
		dbConfig.setAllowCreate(true);
		dbConfig.setTransactional(true);
		Database myDatabase = myDbEnvironment.openDatabase(null, ""TestDatabase"", dbConfig);

		Transaction txn = myDatabase.getEnvironment().beginTransaction(null, null);
		try {
			for (int i = 0; i < 5; i++) {
				System.out.println(i);
				myDatabase.put(txn, new DatabaseEntry((""TXN-KEY"" + (i + 1)).getBytes(""utf-8"")), new DatabaseEntry(
						(""TXN-VALUE"" + (i + 1)).getBytes(""utf-8"")));
			}
		} catch (DatabaseException e) {
			if (txn != null) {
				txn.abort();
				txn = null;
			}
			throw e;
		} finally {
			if (txn != null) {
				txn.commit();
			}
		}

		if (myDatabase != null) {
			myDatabase.close();
		}
		if (myDbEnvironment != null) {
			myDbEnvironment.sync();
			myDbEnvironment.cleanLog();
			myDbEnvironment.close();
		}

	}
"
3682,e7ae3974-c649-479c-a6d5-2ce1b576ddb7,"	public UserInfo() {
		//
	}
"
3683,9b488921-c17c-4708-b9e8-63d0569bcae3,"	public UserInfo(String userId, String userName) {
		this.userId = userId;
		this.userName = userName;
	}
"
3684,d7b8a7ed-faa0-4d3c-b1ac-7ac1115ca026,"	public String getUserId() {
		return userId;
	}
"
3685,d0592386-6b45-47ce-a8de-ab528427f07f,"	public void setUserId(String userId) {
		this.userId = userId;
	}
"
3686,055ab724-4e76-4d07-9d62-4b8ae91036ef,"	public String getUserName() {
		return userName;
	}
"
3687,78983f45-3591-4b95-b222-d23f25bf7afb,"	public void setUserName(String userName) {
		this.userName = userName;
	}
"
3688,621f72b1-8565-40bd-94cd-63acf6edc136,"	@Override
	public String toString() {
		return ""UserInfo [userId="" + userId + "", userName="" + userName + ""]"";
	}
"
3689,83744886-f2a1-477f-aa74-77224e4f97ca,"	public static void main(String[] args) {

		EnvironmentConfig envConfig = new EnvironmentConfig();
		envConfig.setTransactional(true);
		envConfig.setAllowCreate(true);
		Environment myDbEnvironment = new Environment(new File(""testdb""), envConfig);

		StoreConfig storeConfig = new StoreConfig();
		storeConfig.setAllowCreate(true);
		storeConfig.setTransactional(true);

		EntityStore store = new EntityStore(myDbEnvironment, ""StoreDB"", storeConfig);

		PrimaryIndex<String, UserInfo> pIndex = store.getPrimaryIndex(String.class, UserInfo.class);

		//C  
		pIndex.put(new UserInfo(""001"", ""user001""));
		pIndex.put(new UserInfo(""002"", ""user002""));
		pIndex.put(new UserInfo(""003"", ""user003""));
		pIndex.put(new UserInfo(""004"", ""user004""));
		pIndex.put(new UserInfo(""005"", ""user005""));

		//R  
		UserInfo getData = pIndex.get(""001"");
		System.out.println(""Read User 001:"" + getData);

		//U  
		pIndex.put(new UserInfo(""002"", ""user002222""));

		//Read ALL  
		EntityCursor<UserInfo> cursor = pIndex.entities();
		try {
			Iterator<UserInfo> i = cursor.iterator();
			while (i.hasNext()) {
				System.out.println(""Cursor data:"" + i.next());
			}
		} finally {
			cursor.close();
		}

		//D  
		String pkey = ""003"";
		boolean flag = pIndex.delete(pkey);
		System.out.println(""delete object :"" + pkey + "" result:"" + flag);

		//关闭store  
		if (store != null) {
			store.close();
			store = null;
		}

	}
"
3690,1445a3c6-6667-42dd-bb0a-c16b1620219c,"	public BasicDatabase(String envUrl) {
		// 目录不存在的话创建新目录
		if (FileUtils.isExisted(envUrl)) {
			FileUtils.createPath(envUrl);
		}
		// 打开环境
		EnvironmentConfig envConfig = new EnvironmentConfig();
		envConfig.setTransactional(true);
		envConfig.setAllowCreate(true);
		environment = new Environment(new File(envUrl), envConfig);
		// 数据库配置
		dbConfig = new DatabaseConfig();
		dbConfig.setAllowCreate(true);
		dbConfig.setTransactional(true);
		// 设置一个key是否允许存储多个值
		dbConfig.setSortedDuplicates(true);
	}
"
3691,deb3e2c1-18a8-4aef-a401-69c9a8babc4d,"	public Database createOrOpenDB(String dbName) {
		return environment.openDatabase(null, dbName, dbConfig);
	}
"
3692,97d7de15-73a2-431f-8abb-59ad8ef36806,"	public boolean insertDataUnique(Database db, String key, String value, int type) {
		try {
			DatabaseEntry keyEntry = new DatabaseEntry(key.getBytes(""utf-8""));
			DatabaseEntry valEntry = new DatabaseEntry(value.getBytes(""utf-8""));
			OperationStatus status = null;
			if (type == 0) {
				// Database.put()： 向数据库写入数据，如果不支持重复记录，则会覆盖更新key对应的已有记录 
				status = db.put(null, keyEntry, valEntry);
			} else if (type == 1) {
				// Database.putNoOverwrite():向数据库写入数据，但是如果key已经存在，不会覆盖已有数据（即使数据库支持重复key） 
				status = db.putNoOverwrite(null, keyEntry, valEntry);
			} else if (type == 2) {
				// Database.putNoDupData():向数据库写入数据（该方法仅用于支持重复key的数据库），
				// 如果key和value对应的记录已经存在，那么操作结果是：OperationStatus.KEYEXIST 
				status = db.putNoDupData(null, keyEntry, valEntry);
			} else {
				throw new RuntimeException(""Param type="" + type + "" is error."");
			}
			if (status == OperationStatus.SUCCESS) {
				return Boolean.TRUE;
			} else if (status == OperationStatus.KEYEXIST) {
				logger.info(""putNoDupData KEYEXIST:"" + key);
				return Boolean.TRUE;
			} else {
				logger.error(""Insert '"" + value + ""' in '"" + key + ""' "" + status);
				return Boolean.FALSE;
			}
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}
"
3693,87d53ee1-3f39-4753-a74a-745f45f5ab04,"	public String selectData(Database db, String key, int type) {
		try {
			DatabaseEntry value = new DatabaseEntry();
			OperationStatus status = null;
			if (type == 0) {
				// Database.get() ：检索key对应的记录  
				status = db.get(null, new DatabaseEntry(key.getBytes(""utf-8"")), value, LockMode.DEFAULT);
			} else if (type == 1) {
				// Database.getSearchBoth() ：根据key和value 检索数据库记录  
				status = db.getSearchBoth(null, new DatabaseEntry(key.getBytes(""utf-8"")), value, LockMode.DEFAULT);
			} else {
				throw new RuntimeException(""Param type="" + type + "" is error."");
			}
			if (status == OperationStatus.SUCCESS) {
				return new String(value.getData(), ""utf-8"");
			} else {
				throw new RuntimeException(""Read data in '"" + key + ""' "" + status);
			}
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}
"
3694,e044c7c2-302a-4d84-82d8-c7386883aa25,"	public String updateData(Database db, String key, String value) {
		try {
			DatabaseEntry keyEntry = new DatabaseEntry(key.getBytes(""utf-8""));
			DatabaseEntry valEntry = new DatabaseEntry(value.getBytes(""utf-8""));
			OperationStatus status = db.put(null, keyEntry, valEntry);
			DatabaseEntry valueGet = new DatabaseEntry();
			status = db.get(null, keyEntry, valueGet, LockMode.DEFAULT);
			if (status == OperationStatus.SUCCESS) {
				return new String(valueGet.getData(), ""utf-8"");
			} else {
				throw new RuntimeException(""Update '"" + value + ""' in '"" + key + ""' "" + status);
			}
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}
"
3695,a927c64e-e373-46a0-93f6-55a288d17476,"	public boolean deleteData(Database db, String key) {
		try {
			OperationStatus status = db.delete(null, new DatabaseEntry(key.getBytes(""utf-8"")));
			if (status == OperationStatus.SUCCESS) {
				return Boolean.TRUE;
			} else {
				logger.error(""Read data in '"" + key + ""' "" + status);
				return Boolean.FALSE;
			}
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}
"
3696,be958e51-d477-4d11-990c-70c382833df8,"	public void close() {
		environment.sync();
		environment.cleanLog();
		environment.close();
	}
"
3697,6dbebab5-84ac-44a0-b3dc-915254ead810,"	public static boolean isExisted(String path) {
		return new File(path).exists();
	}
"
3698,007c6b3c-9d0a-46fa-b6f9-2cfe5d940528,"	public static void createPath(String path) {
		try {
			new File(path).createNewFile();
		} catch (IOException e) {
			//
		}
	}
"
3699,5ba358f8-4e5e-4395-8c4a-02b6b11d6f9d,"	public static void deletePath(String path) {
		File file = new File(path);
		if (file.isDirectory()) {
			String[] files = file.list();
			for (String f : files) {
				deletePath(file.getAbsolutePath() + ""/"" + f);
			}
		}
		file.delete();
	}
"
3700,faebfab9-eae4-4576-9ab3-9e1b712cc7e8,"	public ObjectDatabase(String envUrl) {
		// 目录不存在的话创建新目录
		if (FileUtils.isExisted(envUrl)) {
			FileUtils.createPath(envUrl);
		}
		// 打开环境
		EnvironmentConfig envConfig = new EnvironmentConfig();
		envConfig.setTransactional(true);
		envConfig.setAllowCreate(true);
		environment = new Environment(new File(envUrl), envConfig);
		// 数据库配置
		dbConfig = new DatabaseConfig();
		dbConfig.setAllowCreate(true);
		dbConfig.setTransactional(true);
		// 设置一个key是否允许存储多个值
		dbConfig.setSortedDuplicates(true);
	}
"
3701,bdb8c0a9-50e5-4b3a-9075-91cdb087e6bc,"	public Database createOrOpenDB(String dbName) {
		return environment.openDatabase(null, dbName, dbConfig);
	}
"
3702,98476e90-ca5e-4314-9f7e-884042842ece,"	public boolean insertDataUnique(Database db, String key, String value, int type) {
		try {
			DatabaseEntry keyEntry = new DatabaseEntry(key.getBytes(""utf-8""));
			DatabaseEntry valEntry = new DatabaseEntry(value.getBytes(""utf-8""));
			OperationStatus status = null;
			if (type == 0) {
				// Database.put()： 向数据库写入数据，如果不支持重复记录，则会覆盖更新key对应的已有记录 
				status = db.put(null, keyEntry, valEntry);
			} else if (type == 1) {
				// Database.putNoOverwrite():向数据库写入数据，但是如果key已经存在，不会覆盖已有数据（即使数据库支持重复key） 
				status = db.putNoOverwrite(null, keyEntry, valEntry);
			} else if (type == 2) {
				// Database.putNoDupData():向数据库写入数据（该方法仅用于支持重复key的数据库），
				// 如果key和value对应的记录已经存在，那么操作结果是：OperationStatus.KEYEXIST 
				status = db.putNoDupData(null, keyEntry, valEntry);
			} else {
				throw new RuntimeException(""Param type="" + type + "" is error."");
			}
			if (status == OperationStatus.SUCCESS) {
				return Boolean.TRUE;
			} else if (status == OperationStatus.KEYEXIST) {
				logger.info(""putNoDupData KEYEXIST:"" + key);
				return Boolean.TRUE;
			} else {
				logger.error(""Insert '"" + value + ""' in '"" + key + ""' "" + status);
				return Boolean.FALSE;
			}
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}
"
3703,c43a6739-4be3-490d-be8a-37cc08769af4,"	public String selectData(Database db, String key, int type) {
		try {
			DatabaseEntry value = new DatabaseEntry();
			OperationStatus status = null;
			if (type == 0) {
				// Database.get() ：检索key对应的记录  
				status = db.get(null, new DatabaseEntry(key.getBytes(""utf-8"")), value, LockMode.DEFAULT);
			} else if (type == 1) {
				// Database.getSearchBoth() ：根据key和value 检索数据库记录  
				status = db.getSearchBoth(null, new DatabaseEntry(key.getBytes(""utf-8"")), value, LockMode.DEFAULT);
			} else {
				throw new RuntimeException(""Param type="" + type + "" is error."");
			}
			if (status == OperationStatus.SUCCESS) {
				return new String(value.getData(), ""utf-8"");
			} else {
				throw new RuntimeException(""Read data in '"" + key + ""' "" + status);
			}
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}
"
3704,1379137e-2f53-488a-8a91-3f355197fdfe,"	public String updateData(Database db, String key, String value) {
		try {
			DatabaseEntry keyEntry = new DatabaseEntry(key.getBytes(""utf-8""));
			DatabaseEntry valEntry = new DatabaseEntry(value.getBytes(""utf-8""));
			OperationStatus status = db.put(null, keyEntry, valEntry);
			DatabaseEntry valueGet = new DatabaseEntry();
			status = db.get(null, keyEntry, valueGet, LockMode.DEFAULT);
			if (status == OperationStatus.SUCCESS) {
				return new String(valueGet.getData(), ""utf-8"");
			} else {
				throw new RuntimeException(""Update '"" + value + ""' in '"" + key + ""' "" + status);
			}
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}
"
3705,695eaa17-23af-4dbd-b2b4-b1d7436ebbd8,"	public boolean deleteData(Database db, String key) {
		try {
			OperationStatus status = db.delete(null, new DatabaseEntry(key.getBytes(""utf-8"")));
			if (status == OperationStatus.SUCCESS) {
				return Boolean.TRUE;
			} else {
				logger.error(""Read data in '"" + key + ""' "" + status);
				return Boolean.FALSE;
			}
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}
"
3706,6c152bb0-6ab0-4ab5-83ed-711a849ef79e,"	public void close() {
		environment.sync();
		environment.cleanLog();
		environment.close();
	}
"
3707,4451a047-a27a-4fd8-9571-a88edabc0285,"	public CuentaAtras10(String s, int i) {
		this.cont = i;
		this.id = s;
	}
"
3708,e8284d60-a35b-4981-93a8-23edc97a41e8,"	public void run() {
		PruebaThreads.setT(PruebaThreads.getT() + 1);

		while (cont >= 0) {
			String s = PruebaThreads.getClase();

			if (s == null) {
				System.out.println(this.id + "" - "" + cont
						+ "" Sin ultima lectura"");
			} else {
				System.out.println(this.id + "" - "" + cont
						+ "" Ultima escritura "" + s);
			}
			PruebaThreads.setClase(id);
			if (cont == 0) {
				int r = PruebaThreads.getT();
				PruebaThreads.setT(r - 1);
				System.out.println(""Ultima escritura ""
						+ PruebaThreads.getClase() + "" - "" + (r - 1)
						+ "" Threads activos"");
			} else {
				Delaysegundo();

			}
			cont--;

		}

	}
"
3709,ae92d087-33e3-423f-a3c6-bee3db7b05e3,"	private void Delaysegundo() {
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
		}
	}
"
3710,80f4c866-84c8-4040-abd0-8b8ec51bda8a,"	public static void main(String args[]) {

		(new Thread(new CuentaAtras11(""ID1"", 4))).start();
		(new Thread(new CuentaAtras11(""ID2"", 7))).start();
		(new Thread(new CuentaAtras11(""ID3"", 8))).start();

	}
"
3711,4b998c30-dbd6-4a4d-9cbd-72a4533dd40a,"	public synchronized static int getT() {
		return t;
	}
"
3712,fccd7eb4-f68e-4505-9585-e5c213dd5b0b,"	public synchronized static void setT(int i) {
		PruebaThreads11.t = i;
	}
"
3713,64ffa9b1-2899-414e-a239-7520635b5727,"	public synchronized static String getClase() {
		return clase;
	}
"
3714,04ad47c2-aaf9-4245-85ac-46f3659c2717,"	public synchronized static void setClase(String i) {
		PruebaThreads11.clase = i;
	}
"
3715,e377ccb1-99c3-4d28-a04a-3f4641ddd29a,"	public static void main(String args[]) {
		
		(new Thread(new CuentaAtras9(""ID1"", 4))).start();
		(new Thread(new CuentaAtras9(""ID2"", 7))).start();
		(new Thread(new CuentaAtras9(""ID3"", 8))).start();
	}
"
3716,c1e7281f-024c-4963-ba44-24a85986ba41,"	public static void main(String args[]) {

		(new Thread(new CuentaAtras10(""ID1"", 4))).start();
		(new Thread(new CuentaAtras10(""ID2"", 7))).start();
		(new Thread(new CuentaAtras10(""ID3"", 8))).start();
		
	}
"
3717,3cbc62ab-9a6c-476c-b10a-c855fff4e1c8,"	public static int getT()
	{
		return t;
	}
"
3718,807c73ae-0119-4090-9296-1a5afee50d02,"	public static void setT(int i)
	{
		PruebaThreads.t = i;
	}
"
3719,05358126-210d-42bd-9794-1184df0a09c6,"	public static String getClase()
	{
		return clase;
	}
"
3720,c4244100-5eef-4aad-b430-82542d271751,"	public static void setClase(String i)
	{
		PruebaThreads.clase = i;
	}
"
3721,04d281f2-8c11-4a45-804f-f6a87b46ed77,"	public static void main(String args[]) throws InterruptedException {
		CuentaAtras8 contador1 = new CuentaAtras8(""ID1"", 4);
		CuentaAtras8 contador2 = new CuentaAtras8(""ID2"", 7);
		CuentaAtras8 contador3 = new CuentaAtras8(""ID3"", 8);
		
		contador1.start();
		contador2.start();
		contador3.start();
	}
"
3722,0e6a96b9-5fae-46f5-b5a7-405cb03522aa,"	public CuentaAtras9(String s, int i) {
		this.cont = i;
		this.id = s;
	}
"
3723,7a87a894-f32b-43ed-af7f-097ccaa63c6b,"	public void run() {
		while (cont > 0) {
			System.out.println(this.id + "": "" + cont);
			cont--;
			Delaysegundo();
		}
	}
"
3724,f24087df-f913-4eca-bbca-5de1614f1f3f,"	private void Delaysegundo() {
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
		}
	}
"
3725,24b64aee-9b80-4f2f-bafc-76ef96cc9771,"	public CuentaAtras8(String s, int i) {
		this.cont = i;
		this.id = s;
	}
"
3726,9ec038cd-a99b-48ca-83b1-a429f6418908,"	public void run() {
		while (cont >= 0) {
			System.out.println(this.id + "": "" + cont);
			cont--;
			Delaysegundo();
		}
	}
"
3727,f82ce3ed-f013-4027-8fdd-235216616a2f,"	private void Delaysegundo() {
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
		}
	}
"
3728,6cec250a-3a4e-4eb7-8300-803d8b67774b,"	public CuentaAtras11(String s, int i) {
		this.cont = i;
		this.id = s;
	}
"
3729,183ef0db-65a1-4a60-9f06-cb870574cc49,"	public void run() {
		PruebaThreads11.setT(PruebaThreads11.getT() + 1);

		while (cont >= 0) {
			String s = PruebaThreads11.getClase();

			if (s == null) {
				System.out.println(this.id + "" - "" + cont
						+ "" Sin ultima lectura"");
			} else {
				System.out.println(this.id + "" - "" + cont
						+ "" Ultima escritura "" + s);
			}
			PruebaThreads11.setClase(id);
			if (cont == 0) {
				int r = PruebaThreads11.getT();
				PruebaThreads11.setT(r - 1);
				System.out.println(""Ultima escritura ""
						+ PruebaThreads11.getClase() + "" - "" + (r - 1)
						+ "" Threads activos"");
			} else {
				Delaysegundo();

			}
			cont--;
		}
	}
"
3730,2c35bd64-76fb-44da-8f69-b39ec11dbef2,"	private void Delaysegundo() {
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
		}
	}
"
3731,ca0ba069-6b98-43f8-966c-ead76761f0d0,"    public static void main( String[] args )
    {
        System.out.println( ""Hello World!"" );
    }
"
3732,8bdd3704-9fc1-4a18-9c6f-c63aa48df3e0,"    public AppTest( String testName )
    {
        super( testName );
    }
"
3733,eacd4890-144c-4868-aa23-6708c56a919d,"    public static Test suite()
    {
        return new TestSuite( AppTest.class );
    }
"
3734,ef5d715a-ad47-4c73-9f14-6788edacb6a2,"    public void testApp()
    {
        assertTrue( true );
    }
"
3735,8f0cdb02-261d-48ab-b637-cdc79ad9c52a,"    public void handlePacket(DatagramPacket packet)
    {
	try
	{
	    Packet.constructAndHandle(packet);
	} catch(Exception e)
	{
	    e.printStackTrace();
	}
    }
"
3736,f4e091b5-9a54-4fdf-8a24-6ff4421db328,"    private Server(String name, int port) throws SocketException
    {
	instance = this;
	logger = Logger.getLogger(""MCPE_Server"");
	logger.setLevel(Level.ALL);
	logger.setUseParentHandlers(false);
	for(Handler h : logger.getHandlers())
	    logger.removeHandler(h);
	logger.addHandler(new Handler()
	{
	    DateFormat df = new SimpleDateFormat(""YYYY-MM-dd HH:mm:ss"");
	    @Override
	    public void publish(LogRecord record)
	    {
		Level l = record.getLevel();
		PrintStream out = l.intValue() > Level.INFO.intValue() ? System.err : System.out;
		out.println(df.format(new Date(record.getMillis())) + "" ["" + record.getLoggerName() + ""]"" + 
			""["" + l.getLocalizedName() + ""] "" + record.getMessage());    
	    }
	    
	    @Override
	    public void flush()
	    {
		System.out.flush();
		System.err.flush();
	    }
	    
	    @Override
	    public void close() throws SecurityException
	    {
		System.out.close();
		System.err.close();
	    }
	});
	random = new Random();
	serverId = 0x372cdc9e;
	serverName = name;
	serverType = ""Demo"";
	try
	{
	    pcapLogger = new PcapLogger(new FileOutputStream(""packets.pcap""));
	    packetLogger = new PrintStream(""packets.log"");
	} catch(FileNotFoundException e)
	{
	    e.printStackTrace();
	}
	clients = new HashMap<Integer, EntityPlayer>();
	players = new HashMap<String, EntityPlayer>();
	whitelist = new ArrayList<String>();
	banned = new ArrayList<String>();
	bannedIps = new ArrayList<InetAddress>();
	serverSocket = new DatagramSocket(port);
	handler = new PacketHandler();
	log(""Starting Minecraft PE server on "" + serverSocket.getInetAddress()+ "":"" + port);
    }
"
3737,d8592aae-9304-41a8-99e0-8da255fb27f2,"	    @Override
	    public void publish(LogRecord record)
	    {
		Level l = record.getLevel();
		PrintStream out = l.intValue() > Level.INFO.intValue() ? System.err : System.out;
		out.println(df.format(new Date(record.getMillis())) + "" ["" + record.getLoggerName() + ""]"" + 
			""["" + l.getLocalizedName() + ""] "" + record.getMessage());    
	    }
"
3738,4f02f11e-35db-43a4-8a87-4e7530836f38,"	    @Override
	    public void flush()
	    {
		System.out.flush();
		System.err.flush();
	    }
"
3739,079a4172-f39f-4662-ac91-62ab9e159622,"	    @Override
	    public void close() throws SecurityException
	    {
		System.out.close();
		System.err.close();
	    }
"
3740,7a6dfa3e-c4e8-407c-bc4e-6ed1c01fc808,"    @Override
    public void run()
    {
        running = true;
        while(running)
        {
            DatagramPacket p = new DatagramPacket(new byte[18 + mtu], 18 + mtu);
            try
	    {
		serverSocket.receive(p);
		p.setData(p.getData(), 0, p.getLength());
		pcapLogger.logPacket(p, p.getAddress(), p.getPort(), serverSocket.getLocalAddress(), serverSocket.getLocalPort());
		Utils.dumpPacket(p, p.getAddress(), p.getPort(), serverSocket.getLocalAddress(), serverSocket.getLocalPort(), packetLogger);
		handler.handlePacket(p);
	    } catch(IOException e)
	    {
		e.printStackTrace();
	    }
        }
    }
"
3741,a6c287fb-dc73-49ac-9d5d-87b3b5a68798,"    public void sendToClient(DatagramPacket packet)
    {
	try
	{
	    pcapLogger.logPacket(packet, serverSocket.getLocalAddress(), serverSocket.getLocalPort(), packet.getAddress(), packet.getPort());
	    Utils.dumpPacket(packet, serverSocket.getLocalAddress(), serverSocket.getLocalPort(), packet.getAddress(), packet.getPort(), packetLogger);
	    serverSocket.send(packet);
	} catch(IOException e)
	{
	    e.printStackTrace();
	}
    }
"
3742,ee7a384c-f076-40ce-9583-7326e5e6957a,"    public void log(Level level, String message)
    {
	logger.log(level, message);
    }
"
3743,5379f5d4-48e6-476f-8db6-0237dc872666,"    public void log(String message)
    {
	log(Level.INFO, message);
    }
"
3744,4680aceb-88f4-404b-b313-8c7e8ca7106c,"    public void error(String message)
    {
	log(Level.SEVERE, message);
    }
"
3745,9788a081-6aef-4a3b-bcff-6ed0af27f14b,"    public void warning(String message)
    {
	log(Level.WARNING, message);
    }
"
3746,ebc71747-f24e-4e80-b6ea-d40a0e36f24e,"    public void debug(String message)
    {
	log(debugLevel, message);
    }
"
3747,2b501af0-221f-41c2-b3a6-03554ade870a,"    public static void main(String[] args)
    {
	try
	{
	    new Server(""SuperCraftServer"", 19132).start();
	} catch(SocketException e)
	{
	    e.printStackTrace();
	}
    }
"
3748,ccb60556-353c-4ddb-bf57-37fc33ab6a66,"    public static void writeString(String s, DataOutput out) throws IOException
    {
	out.writeShort(s.length());
	out.writeBytes(s);
    }
"
3749,a28d2de6-4209-4f9b-9647-e6bbb4866c26,"    public static String readString(DataInputStream in) throws IOException
    {
	short length = in.readShort();
	byte[] bytes = new byte[length];
	in.read(bytes);
	return new String(bytes);
    }
"
3750,c51c2e88-d46a-4ade-be42-d64a9ef59392,"    public static String toHex(byte[] bytes)
    {
	StringBuilder sb = new StringBuilder();
	for(byte b : bytes)
	{
	    sb.append(String.format(sb.length() == 0 ? ""%02X"" : "" %02X"", b));
	}
	return sb.toString();
    }
"
3751,bd288157-be65-49fa-a3d2-f70c8c3199b0,"    public static String hexdump(byte[] bytes)
    {
	StringBuilder sb = new StringBuilder();
	for(int addr = 0; addr < bytes.length; addr++)
	{
	    if((addr&0xF) == 0)
	    {
		if(addr != 0)
		    sb.append('\n');
		sb.append(String.format(""%08X: "", addr));
	    }
	    sb.append(String.format(""%02X"", bytes[addr]));
	    if((addr&0xF) != 15)
		sb.append(' ');
	}
	return sb.toString();
    }
"
3752,f704b3e4-d3f1-4285-8257-9baf924e2db6,"    public static void dumpPacket(DatagramPacket p, InetAddress src, int srcport, InetAddress dst, int dstport, PrintStream out)
    {
	out.println(""Timestamp  : "" + new SimpleDateFormat().format(new Date()));
	out.println(""Source     : "" + src + "":"" + srcport);
	out.println(""Destination: "" + dst + "":"" + dstport);
	out.println(""Data:"");
	out.println(hexdump(p.getData()));
    }
"
3753,80252f95-a5fd-4377-9887-2f5433188ddd,"    public PcapLogger(OutputStream out)
    {
	this.out = new DataOutputStream(out);
	startMillis = System.currentTimeMillis();
	startNanos = System.nanoTime();
    }
"
3754,4db54803-d1e1-43fc-9071-c2773564c80f,"    public void init()
    {
	if(init)return;
	try
	{
	    out.writeInt(0xa1b2c3d4);//Using microsecond resolution because most Java implementations return nanoTime() in steps of 1000
	    out.writeShort(2);//Version 2.4
	    out.writeShort(4);
	    out.writeInt(0);//Writing in UTC timezone
	    out.writeInt(0);//Everyone does so
	    out.writeInt(0xFFFF);//Capturing UDP so MAX_PACKET_LENGTH is 65535
	    out.writeInt(101);//Will write packets as IP packets
	    out.flush();
	} catch(IOException e)
	{
	    e.printStackTrace();
	}
	init = true;
    }
"
3755,7a968ea4-0083-4210-bf71-528e4b15fecd,"    public void logPacket(DatagramPacket packet, InetAddress src, int srcport, InetAddress dst, int dstport)
    {
	if(!init)
	    init();
	int ts_sec = (int)((System.currentTimeMillis())/1000);
	int ts_usec = (int)((System.nanoTime())/1000)%1000000;
	try
	{
	    out.writeInt(ts_sec);
	    out.writeInt(ts_usec);
	    byte[] bytes = encapsulateIP(packet, src, srcport, dst, dstport);
	    out.writeInt(bytes.length&0xFFFF);
	    out.writeInt(bytes.length);
	    out.flush();
	    if(bytes.length > 0)
	    out.write(bytes, 0, bytes.length&0xFFFF);
	    out.flush();
	} catch(IOException e)
	{
	    e.printStackTrace();
	}
    }
"
3756,1ccd57d5-5aad-4d6f-8fa2-704b9c834fd4,"    private byte[] encapsulateIP(DatagramPacket packet, InetAddress src, int srcport, InetAddress dst, int dstport) throws IOException
    {
	boolean ipv4 = src instanceof Inet4Address;
	int data_length = packet.getLength();
	int length = data_length + (ipv4 ? 20 : 40) + 8;
	ByteArrayOutputStream bytes = new ByteArrayOutputStream(length);
	DataOutputStream tout = new DataOutputStream(bytes);
	//IP Header
	byte[] ip_header = new byte[0];
	if(ipv4)
	{
	     ip_header = new byte[]{	0x45,0x00,(byte)((length<<8)&0xFF),(byte)(length&0xFF), 
		    			0x00, 0x00, 0x00, 0x00, (byte)0xFF, 0x11, 0x00, 0x00,
		    			0,0,0,0,//src ip
		    			0,0,0,0//dst ip
		    			};
	    System.arraycopy(src.getAddress(), 0, ip_header, 12, 4);
	    System.arraycopy(dst.getAddress(), 0, ip_header, 16, 4);
	    int checksum = 0;
	    for(int i = 0; i < ip_header.length - 1; i += 2)
	    {
		checksum += ip_header[i] << 8 | ip_header[i+1];
	    }
	    checksum&=0xFFFF;
	    checksum+=2;
	    checksum = ~checksum;
	    ip_header[10] = (byte) ((checksum>>8)&0xFF);
	    ip_header[11] = (byte) (checksum&0xFF);
	    tout.write(ip_header);
	}else
	{
	    return new byte[0];//TODO: IPv6
	}
	//UDP Header
	tout.writeShort(srcport);
	tout.writeShort(dstport);
	tout.writeShort(data_length);
	tout.writeShort(0);
	
	tout.write(packet.getData());
	
	return bytes.toByteArray();
    }
"
3757,78fe57a4-41d7-4bdf-80d1-6d7cdedc13c7,"    public PacketPayload(InetAddress ip, int port, byte[] data)
    {
	super(ip, port, data);
    }
"
3758,380ace69-f66e-415a-913b-7e2f5bab70f9,"    public PacketPayload(InetAddress ip, int port)
    {
	super(ip, port);
    }
"
3759,48d15832-f0a8-437e-91b4-9f3594bb9f32,"    @Override
    public void handle() throws Exception
    {
	int pid = in.readByte();
	int count = in.readShort()<<8;
	count |= ((int)in.readByte())&0xFF;
	//if(pid < 0x80 || pid > 0x8F)return;
	byte encapsulationId = in.readByte();
	short length = (short) (in.readShort()/8);
	if(length == 0)
	{
	    server.warning(String.format(""Recieved PacketPayload with 0 length (Packet id 0x%02X, Encapsulation 0x%02X, count 0x%06X)"", pid, encapsulationId, count));
	    return;
	}
	payload = new byte[length];
	if(encapsulationId == 0x40 || encapsulationId == 0x60)
	{
	    in.readByte();
	    in.readByte();
	    in.readByte();
	    if(encapsulationId == 0x60)
	    {
		in.readInt();
	    }
	}
	in.read(payload);
	in.close();
	server.debug(""Recieved "" + this);
	payloadIn = new DataInputStream(new ByteArrayInputStream(payload));
	EntityPlayer player = server.clients.get(ip.hashCode() + port);
	if(player == null)
	{
	    payloadIn.close();
	    server.warning(""No player from "" + ip + "":"" + port + "" exists. Packet dropped."");
	    return;
	}
	player.count = count;
	PacketAck ack = new PacketAck(ip, port);
	ack.construct(count);
	ack.send();
	player.handleDataPacket(payload, payloadIn);
	payloadIn.close();
    }
"
3760,5b041162-d133-4a6c-8c99-270f3aea19a6,"    @Override
    public void construct(Object... data)
    {
        payload = (byte[])data[1];
        int count = (short)(int)data[0];
        try
	{
	    out.writeInt(count | 0x80000000);
	    out.write(0x00);
	    out.writeShort(payload.length*8);
	    out.write(payload);
	} catch(IOException e)
	{
	    e.printStackTrace();
	}
    }
"
3761,d213c5d5-c12f-4b7a-a2d5-0e0561215ac0,"    @Override
    public String toString()
    {
        return super.toString() + (payload != null && payload.length > 0 ? String.format("" (0x%02X/%s)"", payload[0], Constants.MC_NAMES[((int)payload[0])&0xFF]) : """");
    }
"
3762,183390e4-14e8-454b-bbb9-ffec5da83115,"    public Packet(InetAddress ip, int port, byte[] data)
    {
	this.ip = ip;
	this.port = port;
	this.data = data;
	this.in = new DataInputStream(new ByteArrayInputStream(data));
    }
"
3763,43a07957-c372-4dd2-a648-9a7a84b1792c,"    public Packet(InetAddress ip, int port)
    {
	this.ip = ip;
	this.port = port;
	this.bout = new ByteArrayOutputStream();
	this.out = new DataOutputStream(bout);
    }
"
3764,aa059c69-fcf3-4bfb-bb67-73440c1c62a9,"    public void handle() throws Exception
    {
	server.error(""Packet type "" + this.getClass().getSimpleName() + "" cannot be handled"");
    }
"
3765,dc329f70-5f42-43ad-8c7f-895ac51e1345,"    public void send()
    {
	if(bout != null)
	this.data = bout.toByteArray();
	if(!(this instanceof PacketAck))server.debug(""Sending "" + this);
	server.sendToClient(new DatagramPacket(data, data.length, ip, port));
	try
	{
	    out.close();
	} catch(IOException e)
	{
	    e.printStackTrace();
	}
    }
"
3766,49c36179-62e9-4cfc-8e84-f8c569182df7,"    public void construct(Object... data)
    {
	server.error(""Packet type "" + this.getClass().getSimpleName() + "" cannot be constructed"");
    }
"
3767,7116d5b1-0f80-4284-8cc6-21da99c541c4,"    @Override
    public String toString()
    {
        return this.getClass().getSimpleName() + (data.length > 0 ? String.format("" 0x%02X"", data[0]) : """");
    }
"
3768,5855c550-c778-452c-ab03-6aad5ad9e5b7,"    public static Packet construct(DatagramPacket packet)
    {
	byte[] data = packet.getData();
	if(data.length == 0)
	{
	    server.warning(""Empty packet from "" + packet.getAddress() + "":"" + packet.getPort());
	    return null;
	}
	Class<? extends Packet> clazz = classes[((int)data[0])&0xFF];
	if(clazz == null)
	{
	    server.warning(String.format(""Invalid packet id 0x%02X from %s:%d"", ((int)data[0])&0xFF, packet.getAddress(), packet.getPort()));
	    return null;
	}
	try
	{
	    Constructor<? extends Packet> constructor = clazz.getConstructor(InetAddress.class, int.class, byte[].class);
	    Packet p = constructor.newInstance(packet.getAddress(), packet.getPort(), data);
	    if(!(p instanceof PacketPayload || p instanceof PacketAck))server.debug(""Recieved "" + p);
	    return p;
	} catch(Exception e)
	{
	    e.printStackTrace();
	    return null;
	}
    }
"
3769,4183e91c-26be-474c-86ea-24496e0c51a8,"    public static void constructAndHandle(DatagramPacket packet) throws Exception
    {
	Packet p = construct(packet);
	if(p != null)
	    p.handle();
    }
"
3770,700c2b4e-72f5-431b-a885-c96e9d4153d7,"    public PacketAck(InetAddress ip, int port)
    {
	super(ip, port);
    }
"
3771,a3e32a5e-cbe7-41bb-92d6-010c134ff2a7,"    public PacketAck(InetAddress ip, int port, byte[] data)
    {
	super(ip, port, data);
    }
"
3772,897d3318-a56f-4f93-b47e-2b3bbc19bb01,"    @Override
    public void handle() throws Exception
    {
    }
"
3773,88bb03c8-2a8c-4ef3-b8ac-30273e2ec067,"    @Override
    public void construct(Object... data)
    {
	try
	{
	    out.write(0xC0);
	    out.writeShort(1);
	    out.write(((int)data[0])&0xFFFFFF | 0x01000000);
	} catch(IOException e)
	{
	    e.printStackTrace();
	}
    }
"
3774,2d9fcaa9-208b-4ec6-9a6f-2fe9c20b9030,"    public PacketOpenConnectionReply(InetAddress ip, int port)
    {
	super(ip, port);
    }
"
3775,d2847134-02ae-4dd3-8aec-40f0483a83d0,"    @Override
    public void construct(Object... data)
    {
	try
	{
            out.writeByte(((Boolean)data[0]) ? 8 : 6);
	    out.write(Constants.RAKNET_MAGIC);
	    if((Boolean)data[0])
	    {
		out.writeLong(server.serverId);
		out.writeShort((Short)data[1]);
		out.writeShort((Short)data[2]);
		out.write(0);
	    }else
	    {
		out.writeLong(server.serverId);
		out.write(0);
		out.writeShort((Short)data[1]);
	    }
	} catch(IOException e)
	{
	    e.printStackTrace();
	}
    }
"
3776,af315d96-a45f-466d-b5d7-838fef761e29,"    public PacketIncompatibleProtocolVersion(InetAddress ip, int port)
    {
	super(ip, port);
    }
"
3777,e655cbf3-977e-4166-857e-729308d25c88,"    @Override
    public void construct(Object... data)
    {
	try
	{
            out.writeByte((Byte)Constants.RAKNET_VERSION);
	    out.write(Constants.RAKNET_MAGIC);
	    out.writeLong(server.serverId);
	} catch(IOException e)
	{
	    e.printStackTrace();
	}
    }
"
3778,e868d67e-e416-450b-879c-762ca3acf511,"    public PacketOpenConnectionRequest(InetAddress ip, int port, byte[] data)
    {
	super(ip, port, data);
    }
"
3779,787abdf4-f4e7-4917-9639-ecc55465783c,"    @Override
    public void handle() throws Exception
    {
	byte pid = in.readByte();
	if(!(pid == 5 || pid == 7))
	{
	    server.error(String.format(""%s got wrong packet id: %u02X"", this.getClass().getSimpleName(), pid));
	    in.close();
	    return;
	}
	if(pid == 5)
	{
	    in.readLong();
	    in.readLong();
	    byte version = in.readByte();
	    if(version != Constants.RAKNET_VERSION)
	    {
		Packet ipv = new PacketIncompatibleProtocolVersion(ip, port);
		ipv.construct();
		ipv.send();
		in.close();
		return;
	    }
	    short mtu = (short) (data.length - 18);
	    Packet reply = new PacketOpenConnectionReply(ip, port);
	    reply.construct(false, mtu);
	    reply.send();
	}else if(pid == 7)
	{
	    in.readLong();
	    in.readLong();
	    in.readByte();
	    in.readInt();
	    in.readShort();
	    short mtu = in.readShort();
	    long clientID = in.readLong();
	    server.clients.put(ip.hashCode() + port, new EntityPlayer(clientID, ip, port, mtu));
	    server.debug(""Adding client from "" + ip + "":"" + port);
	    server.log(String.format(""%016X logged in from %s:%d with mtu %d"", clientID, ip, port, mtu));
	    Packet reply = new PacketOpenConnectionReply(ip, port);
	    reply.construct(true, (short)port, mtu);
	    reply.send();
	}
    }
"
3780,c25202a8-88af-4b8d-a79b-e11fe222f884,"    public PacketPing(InetAddress from, int port, byte[] data)
    {
	super(from, port, data);
    }
"
3781,39dd2f7d-3f07-422c-bd2d-a2570a773ece,"    @Override
    public void handle() throws IOException
    {
	byte pid = in.readByte();
	if(!(pid == 1 || pid == 2))
	{
	    server.error(String.format(""%s got wrong packet id: %u02X"", this.getClass().getSimpleName(), pid));
	    in.close();
	    return;
	}
	pingId = in.readLong();
	magic1 = in.readLong();
	magic2 = in.readLong();
	boolean magic = magic1 == Constants.RAKNET_MAGIC_1 && magic2 == Constants.RAKNET_MAGIC_2;
	//server.debug(""Recieved ping from "" + ip + "":"" + port + "", packet-id: "" + pid + "", ping-id: "" + pingId + (magic ? "", magic matched"" : "", wrong magic: 0x"" + String.format(""%08X%08X"", magic1, magic2)));
	PacketPong response = new PacketPong(ip, port);
	response.construct((byte) 0x1C, pingId);
	response.send();
	in.close();
    }
"
3782,e3069ad3-94c1-4086-9ef7-14cb6929b21f,"    public PacketPong(InetAddress from, int port)
    {
	super(from, port);
    }
"
3783,a54a889f-44e4-466d-bc7c-0ec150190c65,"    @Override
    public void construct(Object... data)
    {
        try
	{
            out.writeByte((Byte)data[0]);
	    out.writeLong((Long)data[1]);
	    out.writeLong(server.serverId);
	    out.write(Constants.RAKNET_MAGIC);
	    Utils.writeString(""MCCPP;"" + server.serverType + "";"" + server.serverName + "" ["" + server.clients.size() + ""/"" + server.maxClients + ""]"", out);
	} catch(IOException e)
	{
	    e.printStackTrace();
	}
    }
"
3784,c2c6b34d-191b-4044-8e2f-7398c224ba25,"    public EntityPlayer(long clientID, InetAddress ip, int port, int mtu)
    {
	this.clientID = clientID;
	this.ip = ip;
	this.port = port;
	this.mtu = mtu;
    }
"
3785,be5aa308-ad36-42b9-8e21-3ff9343a48e2,"    public void handleDataPacket(byte[] payload, DataInputStream in) throws IOException
    {
	switch(in.readByte())
	{
	    case MC_PONG:
		break;
	    case MC_PING:
	    {
		long ptime = in.readLong();
		long time = System.currentTimeMillis();
		sendPacket(MC_PONG, ptime, time);
		break;
	    }
	    case MC_CLIENT_CONNECT:
	    {
		if(loggedIn)break;
		long clientID = in.readLong();
		long session = in.readLong();
		sendPacket(MC_SERVER_HANDSHAKE, 0x043f57f3, (byte)0xcd, (short)this.port, 
				new byte[]{(byte)0xf5,-1,-1,(byte)0xf5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				session, new byte[]{0x00,0x00,0x00,0x00,0x04,0x44,0x0b,(byte)0xa9});
		break;
	    }
	    case MC_CLIENT_HANDSHAKE:
		break;
	    case MC_LOGIN:
	    {
		if(loggedIn)break;
		String username = Utils.readString(in);
		int protocol1 = in.readInt();
		int protocol2 = in.readInt();
		int clientId = in.readInt();
		realmsData = new byte[in.readShort()];
		in.read(realmsData);
		if(server.clients.size() >= server.maxClients)
		{
		    close(""Server is full!"", false);
		    break;
		}
		if(protocol1 != PROTOCOL_VERSION)
		{
		    sendPacket(MC_LOGIN_STATUS, protocol1 < PROTOCOL_VERSION ? 1 : 2);
		    close(""Incorrect protocol#""+protocol1, false);
		    break;
		}
		if(username.matches(""[a-zA-Z0-9_]+"") && username.length() > 0)
		    this.username = username;
		else
		{
		    close(""Bad Username"", false);
		    break;
		}
		if(server.hasWhitelist && !server.whitelist.contains(username))
		{
		    close(""Server is white-listed"", false);
		    break;
		}
		if(server.banned.contains(username) || server.bannedIps.contains(ip))
		{
		    close(""You are banned!"", false);
		    break;
		}
		loggedIn = true;
		EntityPlayer p1 = server.players.get(username);
		if(p1 != null)
		    p1.close(""logged in from another location"", true);
		
		server.players.put(username, this);
		server.log(username + "" logged in from "" + ip + "":"" + port);
		sendPacket(MC_LOGIN_STATUS, 0);
	    }
	}
    }
"
3786,bf2b06dd-5c5c-4334-8147-f9e1da6bff33,"    public void close(String reason, boolean message)
    {
	
    }
"
3787,7792c403-387a-4aab-acdb-db39612f1dd2,"    public void sendChat(String message, String author)
    {
	
    }
"
3788,93d575d1-f5f6-4489-a715-034839d1b67c,"    public void sendChat(String message)
    {
	
    }
"
3789,4531edf2-4fb8-43b6-9c93-2a024359fb98,"    private void sendPacket(byte id, Object... data) throws IOException
    {
	ByteArrayOutputStream bo = new ByteArrayOutputStream();
	DataOutputStream out = new DataOutputStream(bo);
	out.write(id);
	for(Object o : data)
	{
	    if(o == null)
		throw new IOException(""Object is null"");
	    if(o instanceof String)
		Utils.writeString((String)o, out);
	    else if(o instanceof Byte)
		out.writeLong((Byte)o);
	    else if(o instanceof Short)
		out.writeShort((Short)o);
	    else if(o instanceof Integer)
		out.writeInt((Integer)o);
	    else if(o instanceof Long)
		out.writeLong((Long)o);
	    else if(o instanceof Float)
		out.writeFloat((Float)o);
	    else if(o instanceof Double)
		out.writeDouble((Double)o);
	    else if(o instanceof Character)
		out.writeChar((Character)o);
	    else if(o instanceof byte[])
		out.write((byte[])o);
	    else
		throw new IOException(""Invalid type "" + o.getClass().getName());
	}
	PacketPayload p = new PacketPayload(ip, port);
	p.construct(count++, bo.toByteArray());
	p.send();
    }
"
3790,037416e2-6fc9-4d48-b259-94b2cf2c110d,"public class Brie extends BaseCheese { String brieName() { return ""This is brie""; } }"
3791,a3a2506e-b62a-446c-8afd-c4d9ab7b520f,"public interface Visitor { void visit(Cheese c) throws Exception; }     
"
3792,395a414f-3d44-4e08-b991-1f5ef5a65a23,"    private Method getPolymorphicMethod(Cheese cheese) throws Exception {
        Class cl = cheese.getClass();  // the bottom-most class
        // Check through superclasses for matching method
        while(!cl.equals(Object.class)) {
            try {
                return this.getClass().getDeclaredMethod(""visit"", new Class[] { cl });
            } catch(NoSuchMethodException ex) {
                cl = cl.getSuperclass();
            }
        }
        // Check through interfaces for matching method
        Class[] interfaces = cheese.getClass().getInterfaces();
        for (int i=0; i<interfaces.length; i++) {
            try {
                return this.getClass().getDeclaredMethod(""visit"", new Class[] { interfaces[i] });
            } catch(NoSuchMethodException ex) {
            }
        }
        return null;
    }
"
3793,99351ec8-a338-4b27-9ea2-ccd5fbadc712,"    public void visit(Cheese c) throws Exception {
        Method downPolymorphic = getPolymorphicMethod(c);
        if (downPolymorphic == null) {
            defaultVisit(c);
        } else {
            downPolymorphic.invoke(this, new Object[] {c});
        }
    }
"
3794,335d14ea-81d0-4c8a-a736-58180cd2b987,"    void defaultVisit(Cheese c) { System.out.println(""A cheese""); }
"
3795,e5d53fae-884a-4b54-ab1e-2923ac4adf35,"    void visit(Wensleydale w) { System.out.println(w.wensleydaleName()); }
"
3796,28f97512-dd5a-45e8-ac8d-3ed059b94e2c,"    void visit(Gouda g) { System.out.println(g.goudaName()); }
"
3797,86862f29-5960-4b3a-8510-5b87ab098e01,"    void visit(Brie b) { System.out.println(b.brieName()); }
"
3798,2d67015e-cf44-4929-855f-a44573524524,"    void visit(AnotherCheese a) { System.out.println(a.otherCheeseName()); }
"
3799,44a68bda-4e1b-42dc-9047-d79bccd32b55,"public class Gorgonzola extends BaseCheese { String gorgonzolaName() { return ""This is gorgonzola""; } }
"
3800,413e96d2-aa66-4179-a6d4-27ba8793c435,"public class Wensleydale extends BaseCheese { String wensleydaleName() { return ""This is wensleydale""; } }"
3801,53a0257c-fec6-45de-aaee-17127780ed0d,"public interface Cheese { void accept(Visitor v) throws Exception; }
"
3802,c26fb64b-bd15-4329-bb0f-c234fbb2684b,"    public void accept(Visitor v) throws Exception { v.visit(this); } 
"
3803,1d260097-228a-4868-b02d-b6df733dd2c0,"    public static void main(String[] args) throws Exception {
        Cheese cheese1 = new Wensleydale();
        Cheese cheese2 = new Gouda();
        Cheese cheese3 = new Brie();
        Cheese cheese4 = new Gorgonzola();
        Cheese cheese5 = new SomeOtherCheese();

        Visitor v = new VisitorImpl();
        cheese1.accept(v);
        cheese2.accept(v);
        cheese3.accept(v);
        cheese4.accept(v);
        cheese5.accept(v);
    }
"
3804,74b57093-57fd-4528-ba42-4a3208f404e4,public interface AnotherCheese extends Cheese { String otherCheeseName(); }
3805,388534ed-20ce-4523-a030-d84049550b74,"    public String otherCheeseName() { return ""Different cheese ""; }
"
3806,ec33b15f-32b0-44d2-b0e1-0f742d37a08f,"public class Gouda extends BaseCheese { String goudaName() { return ""This is gouda""; } }"
3807,2c5295c6-54a5-4c94-b888-7ae26567242b,"    public Md5AvatarGenerator()
    {
        super( Hashing.md5() );
    }
"
3808,9c2efa1d-0a24-4c03-b155-1eb0a67ea81b,"    public BufferedImage generate( final String seed, final int size )
        throws IOException;
"
3809,b3c1d5ca-6d99-4ee5-b7b8-e00e9970765e,"    public HashAvatarGenerator( final HashFunction hashFunction )
    {
        this.hashFunction = hashFunction;
    }
"
3810,44760ca8-07fe-4469-a95d-6a78c29ab86b,"    @Override
    public final BufferedImage generate( final String seed, final int size )
        throws IOException
    {
        final HashCode hashCode = this.hashFunction.hashString( seed );
        return generate( hashCode, size );
    }
"
3811,bead3a5d-77cc-413e-bc89-14a99eb60134,"    protected abstract BufferedImage generate( HashCode hash, int size )
        throws IOException;
"
3812,5944e464-3592-44a7-9f1e-70d4e2677ec2,"    public static void main( String... args )
        throws Exception
    {
        final int width = 80 * 19;
        final int height = 80 * 7;

        final BufferedImage image = new BufferedImage( width, height, BufferedImage.TYPE_4BYTE_ABGR );
        final Graphics2D g = image.createGraphics();

        combine( g, 0, loadAll( ""fade"", 4 ) );
        combine( g, 80, loadAll( ""mask"", 11 ) );
        combine( g, 2 * 80, loadAll( ""shine"", 11 ) );
        combine( g, 3 * 80, loadAll( ""brow"", 8 ) );
        combine( g, 4 * 80, loadAll( ""eyes"", 13 ) );
        combine( g, 5 * 80, loadAll( ""pupils"", 11 ) );
        combine( g, 6 * 80, loadAll( ""mouth"", 19 ) );

        ImageIO.write( image, ""png"", new File( ""./wavatar.png"" ) );
    }
"
3813,9bf89c35-e3c1-460a-9894-d518ae4ffaa1,"    private static void combine( final Graphics2D g, final int y, final BufferedImage[] images )
        throws Exception
    {
        for ( int i = 0; i < images.length; i++ )
        {
            g.drawImage( images[i], null, i * 80, y );
        }
    }
"
3814,c64a0a30-dc87-4946-aeb8-af6dd02f7c14,"    private static BufferedImage[] loadAll( final String base, final int maxNum )
        throws Exception
    {
        final BufferedImage[] list = new BufferedImage[maxNum];
        for ( int i = 0; i < maxNum; i++ )
        {
            list[i] = loadSingle( base, i + 1 );
        }

        return list;
    }
"
3815,b3c4f0e8-0a94-4d04-b1a1-dbb3798db36d,"    private static BufferedImage loadSingle( final String base, final int num )
        throws Exception
    {
        final String name = String.format( base + ""%d.png"", num );
        final File file = new File( ""/Users/srs/development/workspace/identicon/monsterid/wavatars/parts/"" + name );
        System.out.println(file);
        return ImageIO.read( file );
    }
"
3816,e7dde92c-ac49-4592-ba5f-4a96ee2fcf4d,"    public WavatarGenerator()
        throws IOException
    {
        this.stencilImage = loadImage( ""wavatar.png"" );
    }
"
3817,00ea1942-5c79-48e5-b4c0-50439cbb2ff3,"    @Override
    protected BufferedImage generate( final HashCode hash, final int size )
        throws IOException
    {
        return generate( hash.asBytes() );
    }
"
3818,27c5c19c-f365-4d99-8b2c-6c3435d9c2c1,"    protected BufferedImage generate( final byte[] hash )
        throws IOException
    {
        final BufferedImage image = new BufferedImage( IMG_SIZE, IMG_SIZE, BufferedImage.TYPE_4BYTE_ABGR );
        final Graphics2D graphics = image.createGraphics();

        applyPart( graphics, 0, ( hash[0] & 0x8f ), 4 );
        applyPart( graphics, 1, ( hash[1] & 0x8f ), 11 );
        applyPart( graphics, 2, ( hash[2] & 0x8f ), 11 );
        applyPart( graphics, 3, ( hash[3] & 0x8f ), 8 );
        applyPart( graphics, 4, ( hash[4] & 0x8f ), 13 );
        applyPart( graphics, 5, ( hash[5] & 0x8f ), 11 );
        applyPart( graphics, 6, ( hash[6] & 0x8f ), 19 );

        // TODO: We need to colorize the wavatars.

        return image;
    }
"
3819,61520ed7-3dc7-41e1-a2ab-24d0df7e9b3e,"    private void applyPart( final Graphics2D graphics, final int partRow, final int hash, final int maxNum )
        throws IOException
    {
        final int num = hash % maxNum;
        final BufferedImage overlay = getImagePart( partRow, num );
        graphics.drawImage( overlay, null, 0, 0 );
    }
"
3820,492779ab-262a-41e7-a2fa-4ac6902b7d3d,"    private BufferedImage getImagePart( final int row, final int column )
        throws IOException
    {
        return this.stencilImage.getSubimage( column * IMG_SIZE, row * IMG_SIZE, IMG_SIZE, IMG_SIZE );
    }
"
3821,eff30112-7411-447a-8f23-060d5170b99f,"    private BufferedImage loadImage( final String name )
        throws IOException
    {
        final URL url = getClass().getResource( name );
        return ImageIO.read( url );
    }
"
3822,d0de1e4a-e61a-4136-968f-b1240e7eeecd,"    public static void main( String... args )
        throws Exception
    {
        ImageIO.write( new WavatarGenerator().generate( ""dummy@company.com"", 80 ), ""png"", new File( ""./test.png"" ) );
    }
"
3823,d35bc2a4-8c24-4ccb-a2b6-f349acc59d53,"    public MonsterGenerator( final boolean artistic )
        throws IOException
    {
        this.artistic = artistic;

        if ( artistic )
        {
            this.stencilImage = loadImage( ""artistic.png"" );
        }
        else
        {
            this.stencilImage = loadImage( ""simple.png"" );
        }
    }
"
3824,f1652404-d406-479f-af54-4ae5af2a2adf,"    @Override
    protected BufferedImage generate( final HashCode hash, final int size )
        throws IOException
    {
        return generate( hash.asBytes() );
    }
"
3825,be7a8203-f1a3-46fd-9ff5-2885e25a543e,"    protected BufferedImage generate( final byte[] hash )
        throws IOException
    {
        final BufferedImage image = new BufferedImage( IMG_SIZE, IMG_SIZE, BufferedImage.TYPE_4BYTE_ABGR );
        final Graphics2D graphics = image.createGraphics();

        applyPart( graphics, 0, ( hash[0] & 0x8f ), 14 );
        applyPart( graphics, 1, ( hash[1] & 0x8f ), 18 );
        applyPart( graphics, 2, ( hash[2] & 0x8f ), 20 );
        applyPart( graphics, 3, ( hash[3] & 0x8f ), 20 );
        applyPart( graphics, 4, ( hash[4] & 0x8f ), 17 );
        applyPart( graphics, 5, ( hash[5] & 0x8f ), 12 );

        // TODO: We need to colorize the monsters when in artistic mode.

        return image;
    }
"
3826,58892f46-7561-47be-8c2d-7fc92251e5d7,"    private void applyPart( final Graphics2D graphics, final int partRow, final int hash, final int maxNum )
        throws IOException
    {
        final int num = hash % maxNum;
        final BufferedImage overlay = getImagePart( partRow, num );
        graphics.drawImage( overlay, null, 0, 0 );
    }
"
3827,eb098f71-c451-4a9b-a7ff-653fd754fbe7,"    private BufferedImage getImagePart( final int row, final int column )
        throws IOException
    {
        return this.stencilImage.getSubimage( column * IMG_SIZE, row * IMG_SIZE, IMG_SIZE, IMG_SIZE );
    }
"
3828,8f66b09f-8d6f-4aa6-bb89-6b7d144e1f35,"    private BufferedImage loadImage( final String name )
        throws IOException
    {
        final URL url = getClass().getResource( name );
        return ImageIO.read( url );
    }
"
3829,0e0aa34d-8358-4a1d-8548-44a97fb920dd,"    Serializable getId();
"
3830,7b416217-5c70-4bf9-b43b-cc3e4527e1a3,"    Long count(Class<? extends Persistable> clazz);
"
3831,dc564c1b-8ddf-43a2-9022-f6e37448d172,"    void delete(Persistable entity);
"
3832,fba9f736-c2d3-43c4-981d-5376d0100621,"    void delete(Serializable id, Class<? extends Persistable> clazz);
"
3833,ab7a1a74-6e2d-438e-915f-8b6b97f08e14,"    <E extends Persistable> 
            List<E> findByExample(E exampleInstance, String[] includeProperties, PagingOrdering paging, Class<E> clazz);
"
3834,57326a87-7250-4902-ab01-cdb080f285fc,"    <E extends Persistable> 
            E findByNaturalKey(Object naturalKey, Class<E> clazz);
"
3835,c2d414c3-b547-47f2-892d-094eef774d8a,"    <E extends Persistable> 
            E findByPrimaryKey(Serializable id, Class<E> clazz);
"
3836,e313e06c-5839-455e-adb1-d2a2f62ee74c,"    <E extends Persistable>
            List<E> findByProperty(String property, Object value, PagingOrdering paging, Class<E> clazz);
"
3837,3bd01dc2-2277-4a09-bec3-d17717fd764c,"    <E extends Persistable> 
            List<E> getAll(Class<E> clazz);
"
3838,a34a5d89-a8b1-4b2e-abad-7bb38e49e575,"    <E extends Persistable>
            List<E> getPaginated(PagingOrdering paging, Class<E> clazz);
"
3839,b39892d2-bf73-496c-ad7d-7bb86f1458db,"    boolean isPersistent(Serializable id, Class<? extends Persistable> clazz);
"
3840,f524f4e8-da87-4820-a084-47ab78552faf,"    <E extends Persistable>
            E load(Serializable id, Class<E> clazz);
"
3841,064c5604-6e5f-4ef3-8bb4-d08633edfa08,"    Serializable save(Persistable entity);
"
3842,21ac6636-3520-4885-9a44-f7bc2d88e9dc,"    void saveOrUpdate(Persistable entity);
"
3843,6a4957cd-6a05-4268-9b80-2b8dcb116a75,"    void update(Persistable entity);
"
3844,3437adf0-afb5-475f-81f8-c0927be0958b,"    public OrderBy(String propertyName, boolean ascending) {
        this.propertyName = propertyName;
        this.ascending = ascending;
    }
"
3845,6e2e7b11-b4d9-4144-a849-28f45ee449fb,"    public static OrderBy asc(String propertyName) {
        return new OrderBy(propertyName, OrderBy.ASC);
    }
"
3846,6064445b-e6af-4434-8e65-1f08a9c2c525,"    public static OrderBy desc(String propertyName) {
        return new OrderBy(propertyName, OrderBy.DESC);
    }
"
3847,0d561e96-d592-4a27-853e-9704b4027027,"    public boolean isAscending() {
        return ascending;
    }
"
3848,5d9f2e30-a019-49bf-8a7a-23ee16487416,"    public String getPropertyName() {
        return propertyName;
    }
"
3849,d99e46ae-3af9-409f-9c67-133bb5457437,"    @Override
    public String toString() {
        return propertyName + ' ' + (ascending ? ""asc"" : ""desc"");
    }
"
3850,180b6397-c3c4-48cb-8d33-71b873522e23,"    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final OrderBy other = (OrderBy) obj;
        return new EqualsBuilder()
                .append(propertyName, other.propertyName)
                .append(ascending, other.ascending)
                .isEquals();
    }
"
3851,08536cb7-b4df-4f7c-8d97-d8bedb093c7f,"    @Override
    public int hashCode() {
        return new HashCodeBuilder(5, 83).append(propertyName).append(ascending).toHashCode();
    }
"
3852,09a3c5c1-9315-471b-b840-f3f61da4f518,"    boolean containsDAO(Class<? extends Persistable> entityClass);
"
3853,f544590e-1f5e-45a5-8a05-4fb6bbd49e27,"    DAO getDAO(Class<? extends Persistable> entityClass);
"
3854,65ab5bb8-e66d-4ebf-8728-2633be25c898,"    void register(DAO specificDAO);
"
3855,cf67ba8d-5f96-40e2-bb2c-f53bce48023a,"    public PagingOrdering() {
    }
"
3856,e1ce0ed3-254f-428a-a5e6-01e39c2d24b7,"    public PagingOrdering(int limit, int offset) {
        this.limit = limit;
        this.offset = offset;
    }
"
3857,9600b027-9753-4eb5-9fdb-7d58f191a525,"    public PagingOrdering(int limit, int offset, OrderBy order) {
        this(limit, offset);
        ordering.add(order);
    }
"
3858,d5c76ce7-9410-4daf-874f-f92f2f61012e,"    public PagingOrdering(int limit, int offset, List<OrderBy> ordering) {
        this.limit = limit;
        this.offset = offset;
        this.ordering = ordering;
    }
"
3859,57c99cc3-5250-46b6-bdca-bbbf0e25737e,"    public PagingOrdering limit(int limit) {
        this.limit = limit;
        return this;
    }
"
3860,4cbb4d55-0f2a-4200-9a16-64892b349b67,"    public PagingOrdering offset(int offset) {
        this.offset = offset;
        return this;
    }
"
3861,2f9b3082-c050-46f2-bd71-da7e8ca2b80a,"    public PagingOrdering orderBy(String propertyName) {
        ordering.add(new OrderBy(propertyName, OrderBy.ASC));
        return this;
    }
"
3862,27ac73e7-e750-478d-a7d8-da0937b01e00,"    public PagingOrdering orderBy(String propertyName, boolean ascending) {
        ordering.add(new OrderBy(propertyName, ascending));
        return this;
    }
"
3863,26a0e1a8-a0a0-46c2-9ed9-c18cb1074ac4,"    public int getLimit() { return limit; }
"
3864,b86e6c30-8c01-4acb-9eb1-e73b34973567,"    public void setLimit(int limit) { this.limit = limit; }
"
3865,70b2b80d-3e60-42ba-9a91-874df111082e,"    public int getOffset() { return offset; }
"
3866,d6062603-fbf9-448a-88fb-30aca2c38ef4,"    public void setOffset(int offset) { this.offset = offset; }
"
3867,96d79ab2-4de3-4a0e-a0ea-0eb2390555db,"    public void addOrderBy(OrderBy orderBy) {
        ordering.add(orderBy);
    }
"
3868,a1716a07-437d-4d15-9e49-ab1ad0cf25ce,"    public List<OrderBy> getOrdering() {
        return ordering;
    }
"
3869,259c23ed-e845-4bcd-a6bc-9b2c6ec52dfe,"    public boolean hasOrdering() {
        return !ordering.isEmpty();
    }
"
3870,8ddf476c-65b2-4478-b8a1-9516b045eb34,"    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        
        final PagingOrdering other = (PagingOrdering) obj;
        return new EqualsBuilder()
                .append(limit, other.limit)
                .append(offset, other.offset)
                .append(ordering, other.ordering)
                .isEquals();
    }
"
3871,28a0fcf5-504e-4853-8ff7-17f85c470ddc,"    @Override
    public int hashCode() {
        return new HashCodeBuilder(7, 17)
                .append(limit)
                .append(offset)
                .append(ordering)
                .toHashCode();
    }
"
3872,d5b4ddbd-210d-40cc-afe4-3bc3901aadcf,"    Long count();
"
3873,b134e75d-5e6a-4b4e-b090-667cda244496,"    void delete(E entity);
"
3874,5fc62ea3-8709-440c-946a-3ca53a8d3fe0,"    void delete(ID id);
"
3875,6bc74b0e-9b9d-458d-a940-a7603c7b213f,"    List<E> findByExample(E exampleInstance, String[] includeProperties, PagingOrdering paging);
"
3876,26f10381-1d11-43ba-b0bb-7686e48ef9ce,"    E findByNaturalKey(Object naturalKey);
"
3877,d0177b16-65ee-455f-be8d-aaa749b02db4,"    E findByPrimaryKey(ID id);
"
3878,bb4cd90c-1ae2-4f6c-9ed3-c7af6430c9ad,"    List<E> findByProperty(String property, Object value, PagingOrdering paging);
"
3879,8b07fc46-820a-4851-9403-8f9e5cad8c17,"    List<E> getAll();
"
3880,1befd382-c7c7-44e0-8f15-1cccbe1dd532,"    List<E> getPaginated(PagingOrdering paging);
"
3881,5d2fa1fa-a037-4129-8972-de6c2635f07e,"    boolean isPersistent(ID id);
"
3882,650c6b89-9bb3-481f-a1fd-4d0c2eef22b4,"    E load(ID id);
"
3883,37b5d76f-cb5a-414d-a328-63f9b3f18428,"    ID save(E entity);
"
3884,b030afa6-83f1-4958-9d05-f0559103a84d,"    void saveOrUpdate(E entity);
"
3885,d6f11d03-f78b-440c-9b02-0cb7aca897f0,"    void update(E entity);
"
3886,a65ff428-5e1d-4266-b115-3257979000ce,"    Class<E> getEntityClass();
"
3887,5107bc10-99a7-43d5-a573-389a1af99f3a,"    @Override
    public boolean containsDAO(Class<? extends Persistable> entityClass) {
        return registry.containsKey(entityClass);
    }
"
3888,ff732fff-143d-4608-9e63-a1ca66582332,"    @Override
    public SpecificDAO getDAO(Class<? extends Persistable> entityClass) {
        return registry.get(entityClass);
    }
"
3889,afd9c3cd-cb87-4508-96e7-98200901d9af,"    @Override
    public void register(SpecificDAO specificDAO) {
        LOG.info(""Registering Specific DAO for entity class: {}"", specificDAO.getEntityClass());
        registry.put(specificDAO.getEntityClass(), specificDAO);
    }
"
3890,866d5204-5d5c-4726-80aa-77bcb391a77a,"    public GenericDAODispatcher(GenericDAO genericDAO, SpecificDAORegistry registry) {
        this.genericDAO = genericDAO;
        this.registry = registry;
    }
"
3891,bf9be367-a2ee-4a43-bd67-98597b596c42,"    @Override
    public Long count(Class<? extends Persistable> clazz) {
        if (registry.containsDAO(clazz)) {
            return registry.getDAO(clazz).count();
        } else {
            return genericDAO.count(clazz);
        }
    }
"
3892,433bdc34-8683-42e8-a6c6-08e68b7e0173,"    @Override
    public void delete(Persistable entity) {
        if (registry.containsDAO(entity.getClass())) {
            registry.getDAO(entity.getClass()).delete(entity);
        } else {
            genericDAO.delete(entity);
        }
    }
"
3893,8f9bdc4f-cf37-424a-8df0-ca353b599ac5,"    @Override
    public void delete(Serializable id, Class<? extends Persistable> clazz) {
        if (registry.containsDAO(clazz)) {
            registry.getDAO(clazz).delete(id);
        } else {
            genericDAO.delete(id, clazz);
        }
    }
"
3894,e0f91f83-b9e7-404a-86b7-38f3a9af9793,"    @Override
    public <E extends Persistable> 
            List<E> findByExample(E exampleInstance, String[] includeProperties, PagingOrdering paging, Class<E> clazz) {
        
        if (registry.containsDAO(clazz)) {
            return registry.getDAO(clazz).findByExample(exampleInstance, includeProperties, paging);
        } else {
            return genericDAO.findByExample(exampleInstance, includeProperties, paging, clazz);
        }
    }
"
3895,1a276f6d-d22c-4ab1-bce0-cdb0b9261a3f,"    @Override
    public <E extends Persistable> 
            E findByNaturalKey(Object naturalKey, Class<E> clazz) {

        if (registry.containsDAO(clazz)) {
            return (E) registry.getDAO(clazz).findByNaturalKey(naturalKey);
        } else {
            return genericDAO.findByNaturalKey(naturalKey, clazz);
        }
    }
"
3896,9bd3d2be-538d-410e-82c7-f06744ee47bf,"    @Override
    public <E extends Persistable> 
            E findByPrimaryKey(Serializable id, Class<E> clazz) {

        if (registry.containsDAO(clazz)) {
            return (E) registry.getDAO(clazz).findByPrimaryKey(id);
        } else {
            return genericDAO.findByPrimaryKey(id, clazz);
        }
    }
"
3897,737af216-d9f7-4a6a-8ea2-bfb028548e2b,"    @Override
    public <E extends Persistable> 
            List<E> findByProperty(String property, Object value, PagingOrdering paging, Class<E> clazz) {
        
        if (registry.containsDAO(clazz)) {
            return registry.getDAO(clazz).findByProperty(property, value, paging);
        } else {
            return genericDAO.findByProperty(property, value, paging, clazz);
        }
    }
"
3898,25dab9c6-a438-436f-8404-46f7e155c539,"    @Override
    public <E extends Persistable> 
            List<E> getAll(Class<E> clazz) {
        
        if (registry.containsDAO(clazz)) {
            return registry.getDAO(clazz).getAll();
        } else {
            return genericDAO.getAll(clazz);
        }
    }
"
3899,f65553d7-c6a0-4f67-8116-407e72ffdf35,"    @Override
    public <E extends Persistable> 
            List<E> getPaginated(PagingOrdering paging, Class<E> clazz) {
        
        if (registry.containsDAO(clazz)) {
            return registry.getDAO(clazz).getPaginated(paging);
        } else {
            return genericDAO.getPaginated(paging, clazz);
        }
    }
"
3900,472a8aab-5f98-4eb2-ba2d-e5ad523316c7,"    @Override
    public boolean isPersistent(Serializable id, Class<? extends Persistable> clazz) {
        if (registry.containsDAO(clazz)) {
            return registry.getDAO(clazz).isPersistent(id);
        } else {
            return genericDAO.isPersistent(id, clazz);
        }
    }
"
3901,a77597e6-abae-4f28-9273-766c7bfa41c5,"    @Override
    public <E extends Persistable> 
            E load(Serializable id, Class<E> clazz) {
        
        if (registry.containsDAO(clazz)) {
            return (E) registry.getDAO(clazz).load(id);
        } else {
            return genericDAO.load(id, clazz);
        }
    }
"
3902,164d5660-049b-47ba-aaf9-ffcb4879c4c9,"    @Override
    public Serializable save(Persistable entity) {
        if (registry.containsDAO(entity.getClass())) {
            return registry.getDAO(entity.getClass()).save(entity);
        } else {
            return genericDAO.save(entity);
        }
    }
"
3903,e6ba9333-2b5c-466c-80ef-2ad9197021eb,"    @Override
    public void saveOrUpdate(Persistable entity) {
        if (registry.containsDAO(entity.getClass())) {
            registry.getDAO(entity.getClass()).saveOrUpdate(entity);
        } else {
            genericDAO.saveOrUpdate(entity);
        }
    }
"
3904,b990cd22-7a39-417c-80e5-f153080b1436,"    @Override
    public void update(Persistable entity) {
        if (registry.containsDAO(entity.getClass())) {
            registry.getDAO(entity.getClass()).update(entity);
        } else {
            genericDAO.update(entity);
        }
    }
"
3905,667c7fc3-7cae-451f-b862-b042ca407cb9,"    public DelegatingSpecificDAO(GenericDAO genericDAO) {
        this.genericDAO = genericDAO;
        this.entityClass = determineEntityClass();
        LOG.debug(""Initializing {} for entity {}"", this.getClass().getSimpleName(), entityClass.getSimpleName());
    }
"
3906,49c475bb-787b-47b4-9efa-0ae65ab0c951,"    public DelegatingSpecificDAO() {
        this(null);
    }
"
3907,457dfe12-4872-4260-a66b-0e83af17a684,"    @Override
    public Class<E> getEntityClass() {
        return entityClass;
    }
"
3908,d29a46c5-be91-495c-a72f-c7fda3749859,"    protected GenericDAO getGenericDAO() {
        return genericDAO;
    }
"
3909,1875a845-de29-49b0-b244-2ae4fd799e2b,"    protected void setGenericDAO(GenericDAO genericDAO) {
        assert genericDAO != null;
        this.genericDAO = genericDAO;
    }
"
3910,639e8931-47f5-4cb3-9f1b-fb1a53efbae6,"    private Class<E> determineEntityClass() {
        TypeVariable<?> typeVarE = DelegatingSpecificDAO.class.getTypeParameters()[0];
        Type implType = this.getClass();
        
        return (Class<E>) TypeUtils.getTypeArguments(implType, DelegatingSpecificDAO.class).get(typeVarE);
    }
"
3911,eee6305c-71e2-4a03-9e2e-54ce1b183d5c,"    @Override
    public Long count() {
        return genericDAO.count(entityClass);
    }
"
3912,30602513-5030-4900-8db9-6d182c958cd7,"    @Override
    public void delete(E entity) {
        genericDAO.delete(entity);
    }
"
3913,f46c336d-8c1f-42d4-bb02-a56d25ebeb22,"    @Override
    public void delete(ID id) {
        genericDAO.delete(id, entityClass);
    }
"
3914,10e5d08e-5804-448e-8c87-6801f05817e0,"    @Override
    public List<E> findByExample(E exampleInstance, String[] includeProperties, PagingOrdering paging) {
        return genericDAO.findByExample(exampleInstance, includeProperties, paging, entityClass);
    }
"
3915,d3fce46e-afe1-4ab8-a6c5-65704468844c,"    @Override
    public E findByNaturalKey(Object naturalKey) {
        return genericDAO.findByNaturalKey(naturalKey, entityClass);
    }
"
3916,13be93c1-9f3d-489e-93de-eaeac9157a37,"    @Override
    public E findByPrimaryKey(ID id) {
        return genericDAO.findByPrimaryKey(id, entityClass);
    }
"
3917,65bf7470-8044-4bca-b1a7-ec81e93f66d9,"    @Override
    public List<E> findByProperty(String property, Object value, PagingOrdering paging) {
        return genericDAO.findByProperty(property, value, paging, entityClass);
    }
"
3918,15ba44f0-8c96-43d1-b279-e4d82d0e8f68,"    @Override
    public List<E> getAll() {
        return genericDAO.getAll(entityClass);
    }
"
3919,c217e161-ebf6-4304-9183-f86c6d9d6660,"    @Override
    public List<E> getPaginated(PagingOrdering paging) {
        return genericDAO.getPaginated(paging, entityClass);
    }
"
3920,94322263-68ae-4ef9-b1f2-3fec95edb7da,"    @Override
    public boolean isPersistent(ID id) {
        return genericDAO.isPersistent(id, entityClass);
    }
"
3921,41da5294-de40-47c7-aa28-988b04ae18fe,"    @Override
    public E load(ID id) {
        return genericDAO.load(id, entityClass);
    }
"
3922,df7131b1-9743-4c34-9d5c-f23229a55c40,"    @Override
    public ID save(E entity) {
        return (ID) genericDAO.save(entity);
    }
"
3923,b7bbe265-90e2-465d-9cca-20cbc6140976,"    @Override
    public void saveOrUpdate(E entity) {
        genericDAO.saveOrUpdate(entity);
    }
"
3924,70dbb710-0fe0-4009-a2ac-2d7dbedd511a,"    @Override
    public void update(E entity) {
        genericDAO.update(entity);
    }
"
3925,91beccd7-93fa-4ae5-a5c3-b09ee360a8aa,"    private CompilerWarnings() {
        // Constants class
    }
"
3926,03c437e9-96b3-498a-a5e5-4a7abb5ea13a,"    public static <T> T nullsafe(@Nullable final T reference) {
        if (reference != null) {
            return reference;
        }

        throw new NullPointerException(); // NOPMD - we want to throw NPE here
    }
"
3927,2b0b91de-d247-4a81-9320-a7f85ec9cc44,"    public static <T> T nullsafe(@Nullable final T reference, final String message) {
        if (reference != null) {
            return reference;
        }

        throw new NullPointerException(message); // NOPMD - we want to throw NPE here
    }
"
3928,c9415df4-82b7-4a1b-8dbb-97011401dd0b,"    private Nullsafe() {
    	// utility class
    }
"
3929,50ec88bc-58df-486a-b429-b2a5dc3568d7,"    private PMDWarnings() {
        // Constants class
    }
"
3930,918c93c5-58b5-4ad5-b39f-f0842a87b6a1,"	private static void StartGame() throws IOException {
		FourInRowPuzzle p = new FourInRowPuzzle();
		Game game = new Game();
		Scanner in = new Scanner(System.in);

		boolean player = false;

		PUZZLE_HOLE_COLORS currentColor;
		short column = 0;
		short maxDepth;

		long startTime, endTime;

		System.out.print(""0: you play first, 1 computer play first: "");
		player = (in.nextByte() != 0);

		System.out.print(""enter max depth: "");
		maxDepth = in.nextShort();

		game.SetMaxDepth((byte) maxDepth);

		System.out.println(p.toString());

		while (!p.isFull() && !p.isDone()) {
			try {
				if (player) {
					currentColor = PLAYERS.PLAYER1;
					game.SetPuzzle(p);
					System.out.println(""computer is thinking ..."");
					startTime = System.currentTimeMillis();
					column = game.GetNextPlay();
					endTime = System.currentTimeMillis();
					System.out.println(""computer played: "" + column);
					System.out.println(""Created Nodes: "" + game.GetGraphNodesCount());
					System.out.println(""took("" + (float) (endTime - startTime) / 1000 + ""s)"");
				} else {
					currentColor = PLAYERS.PLAYER2;
					System.out.print(""your turn, type a column number: "");
					column = in.nextShort();
				}

				p.addToken(currentColor, (byte) column);

				System.out.println(p.toString());

				player = !player;

			} catch (FullColumn e) {
				System.out.println(""column is full!"");
			}
		}

		System.out.println(p.toString());

		if (p.isDone()) {
			if (p.getWinner() == PUZZLE_HOLE_COLORS.RED)
				System.out.println(""Red won!"");
			else if (p.getWinner() == PUZZLE_HOLE_COLORS.BLACK)
				System.out.println(""Black won!"");
		} else {
			System.out.println(""No body won!"");
		}

		System.out.println("""");
	}
"
3931,3baa0db7-a17a-4c64-b56c-82c81cd99b4d,"	public static void main(String[] args) throws IOException {
		StartGame();
	}
"
3932,21779da9-0ddf-4b3b-8c1f-a1c925b97cd2,"	public PuzzleHole() {
		this.color = PUZZLE_HOLE_COLORS.NO_COLOR;
	}
"
3933,522ae515-f0e1-4db5-a28a-209c982b88e6,"	public PuzzleHole(PuzzleHole B) {
		this.color = B.color;
	}
"
3934,1bc9d511-86e7-4e38-9e22-0491d1a0e1f4,"	public boolean isEmpty() {
		return (this.color == PUZZLE_HOLE_COLORS.NO_COLOR);
	}
"
3935,0f4c3a33-8edc-441b-a6ad-b066e4213ca6,"	public boolean isRed() {
		return (this.color == PUZZLE_HOLE_COLORS.RED);

	}
"
3936,bc149420-838e-4ef9-aabe-9978a39f6af2,"	public boolean isBlack() {
		return (this.color == PUZZLE_HOLE_COLORS.BLACK);

	}
"
3937,5ad90935-8398-45af-a7f5-26e4522040fa,"	public PUZZLE_HOLE_COLORS getColor() {
		return color;
	}
"
3938,decec59f-4d9e-4c23-88f1-9c829b2fc50e,"	public void setColor(PUZZLE_HOLE_COLORS color) {
		this.color = color;
	}
"
3939,5d008a79-f3de-42e7-b6fb-37d6a1cd1b7e,"	@Override
	public String toString() {
		if (this.isRed())
			return ""O"";
		else if (this.isBlack())
			return ""X"";

		return "" "";
	}
"
3940,1671fac6-f369-441b-bc12-6a6b2a7f715a,"	public FourInRowPuzzle() {
		this.numberOfPlays = 0;
		this.winner = PUZZLE_HOLE_COLORS.NO_COLOR;
		this.holes = new PuzzleHole[6][7];
		for (int i = 0; i < 6; i++) {
			for (int j = 0; j < 7; j++) {
				this.holes[i][j] = new PuzzleHole();
			}
		}
	}
"
3941,e5faf731-7a21-4e62-a539-4943d8cb415e,"	public FourInRowPuzzle(FourInRowPuzzle B) {
		this.holes = new PuzzleHole[6][7];
		for (int i = 0; i < 6; i++) {
			for (int j = 0; j < 7; j++) {
				this.holes[i][j] = new PuzzleHole();
			}
		}

		for (int row = 0; row < FourInRowPuzzle.hieght; row++) {
			for (int column = 0; column < FourInRowPuzzle.hieght; column++) {
				this.holes[row][column].setColor(B.holes[row][column].getColor());
			}
		}
	}
"
3942,571cb14f-90d7-4853-941c-e26262e086cb,"	public boolean isEmpty() {
		// check bottom row only
		for (byte column = 0; column < FourInRowPuzzle.width; column++)
			if (!this.holes[0][column].isEmpty())
				return false;

		return true;
	}
"
3943,e4224274-5fea-473a-acab-9b6cd6c895bb,"	public boolean isFull() {
		// check higher row only
		for (byte column = 0; column < FourInRowPuzzle.width; column++)
			if (this.holes[FourInRowPuzzle.hieght - 1][column].isEmpty())
				return false;

		return true;
	}
"
3944,23ebb00a-8146-48c5-b561-91e4002e33e1,"	public boolean isColumnFull(byte column) {
		return (!this.holes[FourInRowPuzzle.hieght - 1][column].isEmpty());
	}
"
3945,f672a230-e056-4cfc-a7c1-df86b507a242,"	public void addToken(PUZZLE_HOLE_COLORS token, byte column) throws FullColumn {
		// if column is full, throw error
		if (isColumnFull(column)) {
			System.out.println(this);
			throw new FullColumn();
		}

		// to indecate at what level the token should be added
		byte row = 0;

		// increment untill find empty hole
		while (!this.holes[row][column].isEmpty())
			row++;

		// set this hole with token color
		this.holes[row][column].setColor(token);

		// increment number of plays
		this.numberOfPlays++;

		// if (this.numberOfPlays > 42) {
		// System.out.println(""this.numberOfPlays > 42"");
		// }
	}
"
3946,48655364-794a-430b-b220-205bd0f19645,"	void removeToken(byte column) {
		// to indecate at what level the token should be removed
		byte row = (byte) (FourInRowPuzzle.hieght - 1);

		// decrement untill find non empty hole
		while (this.holes[row][column].isEmpty())
			row--;

		// set this hole with no color
		this.holes[row][column].setColor(PUZZLE_HOLE_COLORS.NO_COLOR);

		// decrement number of plays
		this.numberOfPlays--;
	}
"
3947,749b08d0-c965-49d9-950d-c758851e1c5e,"	public boolean isDone() {

		// to get the current color
		PUZZLE_HOLE_COLORS currentColor;

		// go through all holes
		for (byte row = 0; row < FourInRowPuzzle.hieght; row++) {
			for (byte column = 0; column < FourInRowPuzzle.width; column++) {

				// get currentcolor
				currentColor = this.holes[row][column].getColor();

				// if blank hole just continue to the next
				if (currentColor == PUZZLE_HOLE_COLORS.NO_COLOR) {
					continue;
				}

				// check vertically to Upper tokens
				if (row + 3 < FourInRowPuzzle.hieght) {
					if (this.holes[row + 1][column].getColor() == currentColor
							&& this.holes[row + 2][column].getColor() == currentColor
							&& this.holes[row + 3][column].getColor() == currentColor) {

						// set the winner
						this.winner = currentColor;
						return true;
					}
				}

				// check horizontally to right tokens
				if (column + 3 < FourInRowPuzzle.width) {
					if (this.holes[row][column + 1].getColor() == currentColor
							&& this.holes[row][column + 2].getColor() == currentColor
							&& this.holes[row][column + 3].getColor() == currentColor) {

						// set the winner
						this.winner = currentColor;
						return true;
					}
				}

				// check diagonally Up-Left
				if (row + 3 < FourInRowPuzzle.hieght && column - 3 >= 0) {
					if (this.holes[row + 1][column - 1].getColor() == currentColor
							&& this.holes[row + 2][column - 2].getColor() == currentColor
							&& this.holes[row + 3][column - 3].getColor() == currentColor) {

						// set the winner
						this.winner = currentColor;
						return true;
					}
				}

				// check diagonally Up-Right
				if (row + 3 < FourInRowPuzzle.hieght && column + 3 < FourInRowPuzzle.width) {
					if (this.holes[row + 1][column + 1].getColor() == currentColor
							&& this.holes[row + 2][column + 2].getColor() == currentColor
							&& this.holes[row + 3][column + 3].getColor() == currentColor) {

						// set the winner
						this.winner = currentColor;
						return true;
					}
				}
			}
		}

		this.winner = PUZZLE_HOLE_COLORS.NO_COLOR;
		return false;
	}
"
3948,70a8917f-6eca-4205-8d8b-7d3f09df9903,"	public PUZZLE_HOLE_COLORS getWinner() {
		return this.winner;
	}
"
3949,553a7c6c-c4b1-4ea9-88be-2c002313f0f2,"	@Override
	public String toString() {
		// the string to be returned
		StringBuilder aString = new StringBuilder("""");

		for (byte row = (byte) (FourInRowPuzzle.hieght - 1); row >= 0; row--) {

			// left boundry
			aString.append(""| "");

			for (byte column = 0; column < FourInRowPuzzle.width; column++) {
				aString.append(this.holes[row][column].toString()).append("" "");
			}

			// right boundry and new line
			aString.append(""|\n"");
		}

		aString.append(""  - - - - - - -\n"");
		aString.append(""  0 1 2 3 4 5 6\n"");

		return aString.toString();
	}
"
3950,8f54c640-e679-4d19-af18-654ecbe33c37,"	public static byte getHieght() {
		return FourInRowPuzzle.hieght;
	}
"
3951,31c32a94-b2bc-48c9-a1f2-60c59712d19d,"	public static byte getWidth() {
		return FourInRowPuzzle.width;
	}
"
3952,092c5e9e-0d6f-4913-9bd4-3967ae7e0366,"	public int getNumberOfPlays() {
		return numberOfPlays;
	}
"
3953,d3a1f39e-afa7-4c30-9da4-de9873ff19df,"	public void setNumberOfPlays(byte numberOfPlays) {
		this.numberOfPlays = numberOfPlays;
	}
"
3954,5fe91a73-3a66-4d69-9510-aaff333801ec,"	public Game() {
		// default is 5
		this.maxDepth = 5;
	}
"
3955,d28c03ff-a283-426a-a5ae-c72138f87dbb,"	public void SetPuzzle(FourInRowPuzzle aPuzzle) {
		this.aPuzzle = new FourInRowPuzzle(aPuzzle);
		this.originalPuzzle = new FourInRowPuzzle(aPuzzle);
	}
"
3956,4ca11751-0ca5-4eea-8147-47795b86a0b5,"	public void SetMaxDepth(byte maxDepth) {
		this.maxDepth = maxDepth;
	}
"
3957,0ca05277-b749-453b-92ee-633404c6ccaf,"	public short GetNextPlay() throws FullColumn {

		// allocate a new graph
		this.aGraph = new Graph();

		// call DepthFirstSearch function
		return DepthFirstSearch();
	}
"
3958,7989f6e7-76c4-4102-9037-8e6e43eda864,"	private short DepthFirstSearch() throws FullColumn {

		// create first node
		this.aGraphNode = new GraphNode();

		// add it in the graph
		this.aGraph.addGraphNode(this.aGraphNode);

		// push it to stack
		this.aStack.push(this.aGraphNode);

		// while stack is not empty
		while (!this.aStack.isEmpty()) {

			// get the top graphNode from stack
			this.aGraphNode = this.aStack.peek();

			// if it has no children and
			// not reach the maxDepth and not full, then develop children
			if (this.aGraphNode.edges.isEmpty() && this.aGraphNode.depth < maxDepth && !this.aPuzzle.isFull()) {

				// apply the move of this current aGraphNode
				ApplyMove();

				// check if it's not done yet
				if (!this.aPuzzle.isDone()) {

					// check if need to develop children based on Alpha-Beta
					// Alorithm
					if (IsNeedToDevelopChildren())
						// develop children
						DevelopChildren();
					else
						PopOutOfStackAndRevertMove();

					// else if done
				} else {
					// just calculate the minMaxValue
					CalculateMinMaxValue();

					PopOutOfStackAndRevertMove();
				}
			}

			// else if it has no children and
			// reach the maxDepth (i.e. leaf node), then calculate minMaxValue
			else if (this.aGraphNode.edges.isEmpty() && this.aGraphNode.depth >= maxDepth) {

				// apply the move of this current aGraphNode
				ApplyMove();

				// check if it's done
				this.aPuzzle.isDone();

				// calculate minMaxValue
				CalculateMinMaxValue();

				PopOutOfStackAndRevertMove();
			}

			// else if it has children and Depth is even, get Max child value
			else if (!this.aGraphNode.edges.isEmpty() && (this.aGraphNode.depth & 0x01) == 0x00) {

				// get Max child value
				this.aGraphNode.minMaxValue = GetMaxChildValue(this.aGraphNode);

				PopOutOfStackAndRevertMove();
			}

			// else if it has children and Depth is odd, get Min child value
			else if (!this.aGraphNode.edges.isEmpty() && (this.aGraphNode.depth & 0x01) == 0x01) {

				// get Min child value
				this.aGraphNode.minMaxValue = GetMinChildValue(this.aGraphNode);

				PopOutOfStackAndRevertMove();
			}

		} // end while

		// get the right play from root's children
		for (GraphNode g : this.aGraphNode.edges) {
			if (this.aGraphNode.minMaxValue == g.minMaxValue) {
				return g.tokenPosition;
			}
		}

		return this.aGraphNode.tokenPosition;
	}
"
3959,80daa05a-db2d-425e-a0b6-c6776724115e,"	private void ApplyMove() throws FullColumn {
		// check if valid play has been played
		if (this.aGraphNode.tokenPosition < 7) {
			// check if player1 has been played
			if ((this.aGraphNode.depth & 0x01) == 0x01)
				this.aPuzzle.addToken(PLAYERS.PLAYER1, this.aGraphNode.tokenPosition);
			// or player2
			else
				this.aPuzzle.addToken(PLAYERS.PLAYER2, this.aGraphNode.tokenPosition);
		}
	}
"
3960,f3bdd449-f061-4a1b-9edf-893c7d9be4c9,"	private void RevertBackMove() {
		// check if valid play has been played
		if (this.aGraphNode.tokenPosition < 7)
			this.aPuzzle.removeToken(this.aGraphNode.tokenPosition);

	}
"
3961,2f13004d-9bc4-4533-bba6-1497872b6cec,"	private void PopOutOfStackAndRevertMove() {
		// revert back the move
		RevertBackMove();

		// pop the graph node
		this.aStack.pop();
	}
"
3962,ebf27bd7-faac-4b6c-9f9f-15f40ff47770,"	private boolean IsNeedToDevelopChildren() {
		short max = SPECIAL_VALUES.NOT_ASSIGNED;
		short min = SPECIAL_VALUES.NOT_ASSIGNED;

		// check if parent or parents' parent are NULLS, then return true need
		// to develop children
		if (this.aGraphNode.parent == null || this.aGraphNode.parent.parent == null) {
			return true;
		}

		// check if the graph node in max level
		if ((this.aGraphNode.depth & 0x01) == 0x00) {
			// get min of brothers
			min = GetMinChildValue(this.aGraphNode.parent);

			// get max of unculs
			max = GetMaxChildValue(this.aGraphNode.parent.parent);
		}
		// else if it is in min level
		else if ((this.aGraphNode.depth & 0x01) == 0x01) {
			// get max of brothers
			max = GetMaxChildValue(this.aGraphNode.parent);

			// get min of unculs
			min = GetMinChildValue(this.aGraphNode.parent.parent);
		}

		// if max or min still not assigned, then return true need to develop
		// children
		if (max == SPECIAL_VALUES.NOT_ASSIGNED || min == SPECIAL_VALUES.NOT_ASSIGNED)
			return true;

		// return false if max is greater than min
		return !(max > min);
	}
"
3963,da18d8a9-cf16-41b6-a840-980bf5c6d99e,"	private void DevelopChildren() {
		// new graph node child
		GraphNode graphNodeChild;

		// go through all possible next play
		for (byte column = 0; column < FourInRowPuzzle.getWidth(); column++) {
			// check if column is not full
			if (!this.aPuzzle.isColumnFull(column)) {

				// create new graph node child
				graphNodeChild = new GraphNode();

				// set the token to be played
				graphNodeChild.tokenPosition = column;

				// add it to graph
				this.aGraph.addGraphNode(graphNodeChild);

				// add it to the parent edges
				this.aGraph.addEdge(this.aGraphNode, graphNodeChild);

				// push it to the stack
				this.aStack.push(graphNodeChild);
			} // end if
		} // end for column

	}
"
3964,7acc8ff2-bc61-4012-b221-d8f0650483fc,"	private short GetMaxChildValue(GraphNode aGraphNode) {
		short max = SPECIAL_VALUES.NOT_ASSIGNED;

		for (GraphNode g : aGraphNode.edges) {
			if (g.minMaxValue != SPECIAL_VALUES.NOT_ASSIGNED && g.minMaxValue > max) {
				max = g.minMaxValue;
			}
		}

		return max;
	}
"
3965,269e2425-19dc-4a5e-870f-686bbb31d808,"	private short GetMinChildValue(GraphNode aGraphNode) {
		short min = SPECIAL_VALUES.NOT_ASSIGNED;

		for (GraphNode g : aGraphNode.edges) {
			if (g.minMaxValue != SPECIAL_VALUES.NOT_ASSIGNED
					&& (min == SPECIAL_VALUES.NOT_ASSIGNED || g.minMaxValue < min)) {
				min = g.minMaxValue;
			}
		}

		return min;
	}
"
3966,e54dff44-bcee-4c03-b4e4-e80e970d2e5c,"	private void CalculateMinMaxValue() {
		// check if player1 won
		if (this.aPuzzle.getWinner() == PLAYERS.PLAYER1)
			// set minMaxValue to win value
			this.aGraphNode.minMaxValue = SPECIAL_VALUES.WIN_VALUE;

		// check if player2 won
		else if (this.aPuzzle.getWinner() == PLAYERS.PLAYER2)
			// set minMaxValue to loss value
			this.aGraphNode.minMaxValue = SPECIAL_VALUES.LOSS_VALUE;

		else
			// count up the sequentials
			this.aGraphNode.minMaxValue = (short) (CountSequentials() + CountCenterColumn());
	}
"
3967,d5010832-f342-46da-909d-621df0283d86,"	private short CountSequentials() {
		return (short) (CountSequentials(PLAYERS.PLAYER1) - CountSequentials(PLAYERS.PLAYER2));
	}
"
3968,46900de3-92ab-4840-a359-6e1350c9e7d8,"	private short CountSequentials(PUZZLE_HOLE_COLORS color) {
		// to hold the results
		short result = 0;

		// go through all holes
		for (byte row = 0; row < FourInRowPuzzle.getHieght() - 1; row++) {
			for (byte column = 0; column < FourInRowPuzzle.getWidth(); column++) {
				// if this is same color token then count for sequential tokens
				if (this.aPuzzle.holes[row][column].getColor() == color) {

					// check vertically to Upper token
					if (this.aPuzzle.holes[row + 1][column].getColor() == color)
						result += 2;

					// check horizontally to right token
					if (column < FourInRowPuzzle.getWidth() - 1
							&& this.aPuzzle.holes[row][column + 1].getColor() == color)
						result += 2;

					// check diagonally Up-Left
					if (column > 0 && this.aPuzzle.holes[row + 1][column - 1].getColor() == color)
						result += 2;

					// check diagonally Up-Right
					if (column < FourInRowPuzzle.getWidth() - 1
							&& this.aPuzzle.holes[row + 1][column + 1].getColor() == color)
						result += 2;
				} // if
			} // for column
		} // for row

		return result;
	}
"
3969,4328bfb8-ef79-4255-9670-3498ea8ad3b1,"	private short CountCenterColumn() {
		short result = 0;

		// go through all holes in center column
		for (byte row = 0; row < FourInRowPuzzle.getHieght() - 1; row++) {
			if (this.originalPuzzle.holes[row][3].isEmpty() && this.aPuzzle.holes[row][3].getColor() == PLAYERS.PLAYER1)
				result += 10;
			else if (this.originalPuzzle.holes[row][3].isEmpty()
					&& this.aPuzzle.holes[row][3].getColor() == PLAYERS.PLAYER2)
				result -= 10;
		}

		return result;
	}
"
3970,ed1e5f3a-6611-4854-a276-8989c1648640,"	public long GetGraphNodesCount() {
		return this.aGraph.getNodeNumbers();
	}
"
3971,2aa8bd17-a9f6-4a8b-aa9c-5bc4fbf711c1,"	public GraphNode() {
	}
"
3972,5ab93007-a077-45a6-8f91-2397af7c03a3,"	void addEdge(GraphNode child) {
		this.edges.addLast(child);
	}
"
3973,e3990286-0f9d-40f3-ba7d-cf13ed04bf43,"	public Graph() {
	}
"
3974,d6e23fba-77a5-43ff-bdb9-5c8da6eab5fa,"	public void addGraphNode(GraphNode graphNode) {
		this.graphNodes.add(graphNode);
	}
"
3975,b283b130-b3a1-4074-a32c-6e5e6cd7e8ef,"	public void addEdge(GraphNode A, GraphNode B) {
		// set child graph node's parent to current graph node
		B.parent = A;

		// set child graph node's depth
		B.depth = (byte) (A.depth + 1);

		// add B as successor of A
		A.edges.addLast(B);
	}
"
3976,5780b0a8-a681-4930-9914-8f81542ae20d,"	public GraphNode getFirstGraphNode() {
		return this.graphNodes.get(0);
	}
"
3977,d28f769b-c700-4d79-b81c-8080b163d737,"	public long getNodeNumbers() {
		return this.graphNodes.size();
	}
"
3978,f9345146-1cf6-4c84-9856-aba8905261c5,"    public String getText() {
        return text;
    }
"
3979,17d1bdaf-42bd-430d-9bf6-4ebb1c919648,"    public void setText(String text) {
        this.text = text;
    }
"
3980,2c2ae594-422d-49dc-be0b-35181d91e723,"    protected BaseModel() {
        this.created = new Date();
    }
"
3981,0e92543c-f481-416a-8e9f-fa88c61d14f1,"    public boolean hasValidId() {
        return id != null && id > 0;
    }
"
3982,ccdc430f-7ebc-41ad-b00c-1680a59f4755,"    public Long getId() {
        return id;
    }
"
3983,b8a20aa2-8175-4bff-930b-10be1d28fd6c,"    public void setId(Long id) {
        this.id = id;
    }
"
3984,6b2e1d31-442f-4f4c-9a7b-20ad6b180809,"    public boolean isDeleted() {
        return deleted;
    }
"
3985,b6596738-f7ab-455e-88ae-57f8a9e2fc38,"    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }
"
3986,48637346-a7fd-4219-baf9-89d003bf9cad,"    public Date getCreated() {
        return created;
    }
"
3987,832672c5-6796-4e07-9b0e-d659ba2b90a5,"    public void setCreated(Date created) {
        this.created = created;
    }
"
3988,30e162c4-f25c-4473-91aa-9680164b2110,"    public Date getUpdated() {
        return updated;
    }
"
3989,79d9caa1-afc4-4b15-a1b1-ad10531aa7dc,"    public void setUpdated(Date updated) {
        this.updated = updated;
    }
"
3990,c1140d3c-d80c-492a-ab95-4b122b888a73,"    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }

        if (!(this.getClass().isAssignableFrom(o.getClass()))) {
            return false;
        }

        BaseModel baseModel = (BaseModel) o;

        return id != null && id.equals(baseModel.id);
    }
"
3991,00a8635c-092b-405b-b340-c205de723b79,"    @Override
    public int hashCode() {
        if (id != null) {
            return id.hashCode();
        } else {
            return -1;
        }
    }
"
3992,0091adb2-ad05-47c6-b82e-9ac765ed3a58,"    public int compareTo(Object o) {
        BaseModel baseModel = (BaseModel) o;
        return this.id.compareTo(baseModel.getId());
    }
"
3993,1068e084-6c89-40ae-a0a4-34f0d7773571,"    Message addMessage(String text) throws Exception;
"
3994,ff4af54d-b564-4644-972c-c329e0a04cc3,"    DeferredResult<Message> getNewMessage() throws Exception;
"
3995,fc7fe5db-6b80-469b-94e9-12d1ede93837,"    public Message addMessage(String text) throws Exception {

        if (!StringUtils.hasText(text)) {
            throw new IllegalArgumentException(""Missing required param text"");
        }

        // create message and save
        Message message = new Message();
        message.setText(text);

        messageDao.save(message);

        return message;
    }
"
3996,7b744c69-9fe0-4c9d-984d-130df9d210ec,"    public void onMessage(
            org.springframework.data.redis.connection.Message redisMessage,
            byte[] pattern) {

        Message message = (Message) SerializationUtils.deserialize(redisMessage.getBody());
        
        // set the deferred results for the user
        for (DeferredResult<Message> deferredResult : this.messageDeferredResultList) {
                deferredResult.setResult(message);
        }

    }
"
3997,423fe31b-9f15-4a1c-9493-54dbb5d95266,"    public DeferredResult<Message> getNewMessage() throws Exception {

        final DeferredResult<Message> deferredResult =
                new DeferredResult<Message>(deferredResultTimeout);

        deferredResult.onCompletion(new Runnable() {
            public void run() {
                messageDeferredResultList.remove(deferredResult);
            }
        });

        deferredResult.onTimeout(new Runnable() {
            public void run() {
                messageDeferredResultList.remove(deferredResult);
            }
        });

        messageDeferredResultList.add(deferredResult);

        return deferredResult;
    }
"
3998,4f668c0e-4d9a-4775-9d88-33e81829796c,"            public void run() {
                messageDeferredResultList.remove(deferredResult);
            }
"
3999,c41517b4-c645-489e-bf50-bca23410ddd1,"            public void run() {
                messageDeferredResultList.remove(deferredResult);
            }
"
4000,4c72c0bc-c001-4334-aa16-f81c81bce53b,"    void save(Message message);
"
4001,88707ba2-5f8e-4536-9541-d5df78baf75a,"    public void save(Message message) {
        // TODO
    }
"
4002,5db79833-5a01-499f-bb5d-b44721b3e892,"    @RequestMapping(value = ""/add"", method = RequestMethod.POST,
            produces = ""application/json"")
    @ResponseBody
    public Message addMessage(
            @RequestParam(required = true) String text) throws Exception {
        return messageManager.addMessage(text);
    }
"
4003,a28d178b-869f-4d31-8228-4c8c74825995,"    @RequestMapping(value = ""/watch"", method = RequestMethod.GET,
            produces = ""application/json"")
    @ResponseBody
    public DeferredResult<Message> getNewMessage() throws Exception {
        return messageManager.getNewMessage();
    }
"
4004,2010bf81-db01-4615-b98a-cfb339f072ce,"    @After(""execution(* com.city81.redisPubSub.repository.MessageDao.save(..))"")
    public void interceptMessage(JoinPoint joinPoint) {
            
        Message message = (Message) joinPoint.getArgs()[0];
    
        // this publishes the message
        this.redisTemplate.convertAndSend(channelName, message);

    }
"
4005,644eb98f-01db-4033-8936-53e4b4361dad,"	public static List<VirtualMachine> buildVirtualMachines(int[] vram, int[] vcpu) {
		if(vram.length != vcpu.length) {
			throw new IllegalArgumentException(""vram array and vcpu array should have the same length"");
		}
		
		List<VirtualMachine> vms = new ArrayList<>(vram.length);
		for(int i=0; i<vram.length; i++) {
			vms.add(new VirtualMachine(""VM "" + i, vram[i], vcpu[i]));
		}
		
		return vms;
	}
"
4006,c22d2c6b-1be5-4a20-85fe-c3f99a871c7c,"	public static List<ComputeServer> buildComputeServer(int[] ram, int[] cpu, int[] cost, int[] reliability) {
		if(ram.length != cpu.length || ram.length != cost.length || cpu.length != cost.length) {
			throw new IllegalArgumentException(""ram array, cost array and cpu array should have the same length"");
		}
		
		List<ComputeServer> servers = new ArrayList<>(ram.length);
		for(int i=0; i<ram.length; i++) {
			servers.add(new ComputeServer(""Server "" + i, ram[i], cpu[i], cost[i], reliability[i]));
		}
		
		return servers;
	}
"
4007,d077d9b1-0e1f-4066-860f-fbfc036c8ff5,"	public static Collection<VirtualMachine> findVmsOnServer(final ComputeServer server, final List<VirtualMachine> virtualMachines) {
		return  Collections2.filter(virtualMachines, new Predicate<VirtualMachine>() {
			@Override
			public boolean apply(VirtualMachine input) {
				return input.getServer().equals(server);
			}
		});
	}
"
4008,277012ac-8ee0-48a2-a83a-85957479d841,"			@Override
			public boolean apply(VirtualMachine input) {
				return input.getServer().equals(server);
			}
"
4009,1d2a06c0-657f-4990-ba6c-7521e508c081,"	public static int sumVirtualMachinesCpu(Collection<VirtualMachine> virtualMachines) {
		int sum = 0;
		for(VirtualMachine vm : virtualMachines) {
			sum += vm.getVcpu();
		}
		return sum;
	}
"
4010,f64eeb43-99e1-41e7-b2bf-7a11f230b3bb,"	public static int sumVirtualMachinesRam(Collection<VirtualMachine> virtualMachines) {
		int sum = 0;
		for(VirtualMachine vm : virtualMachines) {
			sum += vm.getVram();
		}
		return sum;
	}
"
4011,ce452865-df05-4c27-92fd-c29b864bb699,"	@ValueRangeProvider(id = ""computeServersRangeProvider"")
	public List<ComputeServer> getComputeServersList() {
		return computeServers;
	}
"
4012,6bc48733-40c6-44f4-9f86-e5919b65da57,"	public void setComputeServersList(List<ComputeServer> computeServers) {
		this.computeServers = computeServers;
	}
"
4013,96f705b6-a2c2-4491-af6f-1df30a511516,"	@PlanningEntityCollectionProperty
	public List<VirtualMachine> getVirtualMachinesList() {
		return virtualMachine;
	}
"
4014,8a0b8c75-ff1e-4ef3-a35e-df2ce7986ce1,"	public void setVirtualMachinesList(List<VirtualMachine> virtualMachine) {
		this.virtualMachine = virtualMachine;
	}
"
4015,06072784-fa7d-46cc-bc21-0b054adf4886,"	public HardSoftScore getScore() {
		return score;
	}
"
4016,0d30e4fe-6d79-4489-b277-980f4b87a479,"	public void setScore(HardSoftScore score) {
		this.score = score;
	}
"
4017,85202735-98ab-4215-8520-d27849b3ee38,"	@Override
	public Collection<? extends Object> getProblemFacts() {
		List<ComputeServer> facts = new ArrayList<>();
		facts.addAll(computeServers);
		return facts;
	}
"
4018,d6dc72bd-7be3-49f0-b16e-3c87684b59dc,"	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();

		for (ComputeServer server : computeServers) {
			builder.append(""Server : "").append(server.getName()).append(""\n"");

			Collection<VirtualMachine> vmsOnServer = Utils.findVmsOnServer(server, virtualMachine);
			for (VirtualMachine vm : vmsOnServer) {
				builder.append(""VM : "").append(vm.getName()).append("" - "").append(vm.getVcpu()).append("" / "").append(vm.getVram());
				builder.append(""\n"");
			}
			
			builder.append(""Total CPU usage : "" ).append(Utils.sumVirtualMachinesCpu(vmsOnServer)).append(""/"").append(server.getCpu()).append(""\n"");
			builder.append(""Total RAM usage : "" ).append(Utils.sumVirtualMachinesRam(vmsOnServer)).append(""/"").append(server.getRam()).append(""\n"");
			builder.append(""Server cost : "").append(server.getCost()).append(""\n"");
			builder.append(""Server reliability : "").append(server.getReliability()).append(""\n"");
			builder.append(""================================================================================ \n"");
		}
		
		return builder.toString();
	}
"
4019,6c37d1b6-66cd-417a-b496-53ca0f44b1b6,"	public VirtualMachine() {		
	}
"
4020,f41235b6-ccc9-406c-8fa0-5b2726475cef,"	public VirtualMachine(String name, int vram, int vcpu) {
		this.name = name;
		this.vram = vram;
		this.vcpu = vcpu;
	}
"
4021,4b468314-c250-43be-9c3c-019470596fd7,"	public String getName() {
		return name;
	}
"
4022,31206455-2570-4765-b950-0d6ac70a131f,"	public void setName(String name) {
		this.name = name;
	}
"
4023,078bceae-281a-499e-aa87-8af0a51f0ad3,"	public int getVram() {
		return vram;
	}
"
4024,be7cc096-ed7e-4c63-a82f-130ea642ac9b,"	public void setVram(int vram) {
		this.vram = vram;
	}
"
4025,f9160933-e657-4de9-a119-b50f327068c4,"	public int getVcpu() {
		return vcpu;
	}
"
4026,29005bcd-0c9c-41da-a8ce-3cbd857f1ace,"	public void setVcpu(int vcpu) {
		this.vcpu = vcpu;
	}	
"
4027,9b133d9e-d22e-40f2-86b8-360c4bc9c2b7,"	@PlanningVariable(valueRangeProviderRefs = {""computeServersRangeProvider""})
	public ComputeServer getServer() {
		return server;
	}
"
4028,55041459-2ec0-4e1e-a08f-9cfe2804d38c,"	public void setServer(ComputeServer server) {
		this.server = server;
	}
"
4029,6a09abe8-f001-48e2-87b4-5266584b5574,"	public ComputeServer(String name, int ram, int cpu, int cost, int reliability) {
		this.name = name;
		this.ram = ram;
		this.cpu = cpu;
		this.cost = cost;
		this.reliability = reliability;
	}
"
4030,5a1534d8-c3bb-44e5-89cd-8b8fa3b6e852,"	public String getName() {
		return name;
	}
"
4031,0260fcf4-4bed-4196-830a-84c2de341821,"	public void setName(String name) {
		this.name = name;
	}
"
4032,4ecbb6b8-ea55-4d81-b4fd-f054ea7213a9,"	public int getRam() {
		return ram;
	}
"
4033,9899d125-544e-4680-b136-5846dc18a25c,"	public void setRam(int ram) {
		this.ram = ram;
	}
"
4034,0906b200-9a5d-42b5-9908-7dcda78557df,"	public int getCpu() {
		return cpu;
	}
"
4035,6cb313c8-23d1-476b-9298-510c85f1472f,"	public void setCpu(int cpu) {
		this.cpu = cpu;
	}
"
4036,91543a4b-cb58-4d5b-96fc-cb0ddbe24c52,"	public int getCost() {
		return cost;
	}
"
4037,f41dd7db-70b5-4433-b7e6-c0772b4aca08,"	public void setCost(int cost) {
		this.cost = cost;
	}
"
4038,e0981f56-9890-4754-ab17-ef25ecf67e21,"	public int getReliability() {
		return reliability;
	}
"
4039,5510c1c8-a471-48fd-8fc3-d191d1593c39,"	public void setReliability(int reliability) {
		this.reliability = reliability;
	}
"
4040,f1befb76-8d94-47ce-9702-2fe19627ddca,"	@Test
	public void nominalTest() {

		// Adapt
		final int[] serversRam = { 32, 32, 32, 32 };
		final int[] serversCpu = { 8, 8, 8, 8 };
		final int[] serversAnnualCosts = { 100, 100, 250, 300 };
		final int[] serversReliability = { 100, 100, 250, 300 };
		
		final int[] vmsRam = { 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16 };
		final int[] vmsCpu = { 1, 1, 1, 2, 2, 2, 2, 2, 2, 4, 4 };
		List<VirtualMachine> vms = ComputeFactory.buildVirtualMachines(vmsRam, vmsCpu);
		List<ComputeServer> servers = ComputeFactory.buildComputeServer(serversRam, serversCpu, serversAnnualCosts, serversReliability);

		VirtualMachinesAssignment unsolvedVirtualMachinesAssignment = new VirtualMachinesAssignment();
		unsolvedVirtualMachinesAssignment.setComputeServersList(servers);
		unsolvedVirtualMachinesAssignment.setVirtualMachinesList(vms);

		// Act
		solver.solve(unsolvedVirtualMachinesAssignment);
		VirtualMachinesAssignment solvedVirtualMachinesAssignments = (VirtualMachinesAssignment) solver.getBestSolution();

		// Assert
		assertTrue(solvedVirtualMachinesAssignments.getScore().isFeasible());

		for (VirtualMachine vm : solvedVirtualMachinesAssignments.getVirtualMachinesList()) {
			assertNotNull(vm.getServer());
		}

		for (final ComputeServer server : solvedVirtualMachinesAssignments.getComputeServersList()) {
			Collection<VirtualMachine> vmsOnServer = Utils.findVmsOnServer(server, solvedVirtualMachinesAssignments.getVirtualMachinesList());
			int usedRam = Utils.sumVirtualMachinesRam(vmsOnServer);
			int usedCpu = Utils.sumVirtualMachinesCpu(vmsOnServer);

			assertTrue(usedRam <= server.getRam());
			assertTrue(usedCpu <= server.getCpu());
		}
		
		System.out.println(solvedVirtualMachinesAssignments);
	}
"
4041,3f32d586-4336-49f2-aa6f-305ed1c0c77e,"	@Test
	public void testComputePacking_surcontrainte_ram() {
		final int[] serversRam = { 32, 32, 32, 32 };
		final int[] serversCpu = { 8, 8, 8, 8 };
		final int[] serversAnnualCosts = { 100, 100, 250, 300 };
		final int[] serversReliability = { 25, 25, 50, 100 };

		final int[] vmsRam = { 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16, 32, 32 };
		final int[] vmsCpu = { 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4 };

		List<VirtualMachine> vms = ComputeFactory.buildVirtualMachines(vmsRam, vmsCpu);
		List<ComputeServer> servers = ComputeFactory.buildComputeServer(serversRam, serversCpu, serversAnnualCosts, serversReliability);

		SolverFactory solverFactory = SolverFactory.createFromXmlResource(""virtualMachinesAssignmentSolverConfig.xml"");
		Solver solver = solverFactory.buildSolver();

		VirtualMachinesAssignment unsolvedVirtualMachinesAssignment = new VirtualMachinesAssignment();
		unsolvedVirtualMachinesAssignment.setComputeServersList(servers);
		unsolvedVirtualMachinesAssignment.setVirtualMachinesList(vms);

		// Act
		solver.solve(unsolvedVirtualMachinesAssignment);
		VirtualMachinesAssignment solvedVirtualMachinesAssignments = (VirtualMachinesAssignment) solver.getBestSolution();

		assertFalse(solvedVirtualMachinesAssignments.getScore().isFeasible());
	}
"
4042,816fd301-9629-4d48-acb0-37c091e3eafe,"	@Test
	public void testComputePacking_surcontrainte_cpu() {
		final int[] serversRam = { 32, 32, 32, 32 };
		final int[] serversCpu = { 8, 8, 8, 8 };
		final int[] serversAnnualCosts = { 100, 100, 250, 300 };
		final int[] serversReliability = { 25, 25, 50, 100 };

		final int[] vmsRam = { 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 8, 8, 8, 16, 16 };
		final int[] vmsCpu = { 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 6, 6, 8, 8 };

		List<VirtualMachine> vms = ComputeFactory.buildVirtualMachines(vmsRam, vmsCpu);
		List<ComputeServer> servers = ComputeFactory.buildComputeServer(serversRam, serversCpu, serversAnnualCosts, serversReliability);

		SolverFactory solverFactory = SolverFactory.createFromXmlResource(""virtualMachinesAssignmentSolverConfig.xml"");
		Solver solver = solverFactory.buildSolver();

		VirtualMachinesAssignment unsolvedVirtualMachinesAssignment = new VirtualMachinesAssignment();
		unsolvedVirtualMachinesAssignment.setComputeServersList(servers);
		unsolvedVirtualMachinesAssignment.setVirtualMachinesList(vms);

		// Act
		solver.solve(unsolvedVirtualMachinesAssignment);
		VirtualMachinesAssignment solvedVirtualMachinesAssignments = (VirtualMachinesAssignment) solver.getBestSolution();

		assertFalse(solvedVirtualMachinesAssignments.getScore().isFeasible());
	}
"
4043,74cf52da-c405-4f26-bda1-dce28507378f,"    void replaceRotors(Rotor[] rotors) {
        // FIXME
    }
"
4044,4f7f4664-2763-42f8-b431-50c866e6ac14,"    void setRotors(String setting) {
        // FIXME
    }
"
4045,24736cdf-e07b-49a7-bfd8-e509f6aaada9,"    String convert(String msg) {
        return null;
        // FIXME
    }
"
4046,0fb62d99-f3fa-4dee-9ece-80ddfca3b5ce,"    static char toLetter(int p) {
        return 'A';  // FIXME
    }
"
4047,600ad2c4-7a15-4366-aa13-0cf2e1447271,"    static int toIndex(char c) {
        return 0;  // FIXME
    }
"
4048,877fe0df-1709-4845-86f7-bb9b1cca4587,"    boolean advances() {
        return true;
    }
"
4049,ed0d27e9-d848-4523-9a94-8f261f01f022,"    boolean hasInverse() {
        return true;
    }
"
4050,e23fac08-ea1e-47c3-9c64-0fd7d439af08,"    int getSetting() {
        return _setting;
    }
"
4051,3f17bf8f-ff8f-4a69-95f5-40a9c789e3f8,"    void set(int posn) {
        assert 0 <= posn && posn < ALPHABET_SIZE;
        _setting = posn;
    }
"
4052,5e71df21-7496-4dff-83dd-50da0b9a309d,"    int convertForward(int p) {
        return 0; // FIXME
    }
"
4053,0577f481-310b-4628-a92e-b7e34c64db96,"    int convertBackward(int e) {
        return 0; // FIXME
    }
"
4054,a49bd0c0-2386-49bc-9b8d-82c394ffec1f,"    boolean atNotch() {
        return false; // FIXME
    }
"
4055,c76fed08-d994-49c5-9de9-41cd70520691,"    void advance() {
        // FIXME
    }
"
4056,ebdf4d4e-1119-4952-b7c5-f0bc90617397,"    @Override
    boolean hasInverse() {
        return false;
    }
"
4057,c3a1f557-40b2-42de-bc9e-8776f3e652fe,"    @Override
    int convertBackward(int unused) {
        throw new UnsupportedOperationException();
    }
"
4058,10b9e499-9ac7-4b01-975d-cad460b1becc,"    @Override
    boolean advances() {
        return false;
    }
"
4059,d9123c0c-5c2c-4ea9-a27b-bd5a261cda17,"    @Override
    boolean atNotch() {
        return false;
    }
"
4060,1be21a98-d61d-4481-bd2e-a29d93f4c5e5,"    @Override
    void advance() {
    }
"
4061,4f13150a-6afd-46e5-bb6d-9ba7c4cbc60b,"    public static void main(String[] unused) {
        Machine M;
        BufferedReader input =
            new BufferedReader(new InputStreamReader(System.in));

        buildRotors();

        M = null;

        try {
            while (true) {
                String line = input.readLine();
                if (line == null) {
                    break;
                }
                if (isConfigurationLine(line)) {
                    M = new Machine();
                    configure(M, line);
                } else {
                    printMessageLine(M.convert(standardize(line)));
                }
            }
        } catch (IOException excp) {
            System.err.printf(""Input error: %s%n"", excp.getMessage());
            System.exit(1);
        }
    }
"
4062,93b911e5-d898-4463-8a42-ab780df98825,"    private static boolean isConfigurationLine(String line) {
        return false; // FIXME
    }
"
4063,157c48b3-17bb-47eb-95c5-5ba8c6ff5631,"    private static void configure(Machine M, String config) {
        // FIXME
    }
"
4064,52ae5914-d30d-48d2-b696-23677859f7e6,"    private static String standardize(String line) {
        return line; // FIXME
    }
"
4065,10a478e7-5a2c-4e76-9c06-65ed58c07efe,"    private static void printMessageLine(String msg) {
    	String msgFinal = """";
    	int index = 0;
    	while (index < msg.length()) {
    		msgFinal += msg.substring(index, index + 1);
    		if ((index + 1) % 5 == 0) {
    			msgFinal += "" "";
    		}
    		index += 1;
    	}
    	System.out.println(msgFinal);
    }
"
4066,c11c310d-1e36-45af-ac56-e18e6dc3ffe5,"    private static void buildRotors() {
        // FIXME
    }
"
4067,a1599fd6-211d-4ee0-8ac7-0865dd4355ea,"	public void displayTreasureChestNearby(Grid grid);
"
4068,186b59e6-0e4d-4539-83c8-0ef741bcbf5a,"	public static void main(String[] args) {
		//				Grid g = new Grid(4, 5);
		//				g.addTreasureChest(new TreasureChest(""1""), 0, 0);
		//				g.addTreasureChest(new TreasureChest(""2""), 1, 2);
		//				TreasureChestManager v = new TreasureChestManager();
		//				v.displayTreasureChestNearby(g);
		instructions();
		runTreasurMapApp();		

	}
"
4069,142e5bf6-6947-403c-bfdd-34b858338584,"	private static void instructions(){
		System.out.println(""*************************************************************************************"");
		System.out.println();
		System.out.println(""                     TREASURE MAP INSTRUCTIONS        "");
		System.out.println();
		System.out.println(""1.Create a grid by defining the number of colums and rows"");
		System.out.println(""2.Add treasure chests to your grid"");
		System.out.println(""3.Display how many treasure chests are nearby"");
		System.out.println(""1.TYPE EXIT TO TERMINATE"");
		System.out.println();
		System.out.println(""*************************************************************************************"");

	}
"
4070,54f9a26d-e5d0-47b9-a853-d819e3139ad9,"	private static void runTreasurMapApp(){

		Scanner scanner = new Scanner(System.in);
		Grid grid = createGrid(scanner);
		addTreasureChestToGrid(scanner,grid);
	}
"
4071,2b5aacee-59f5-4e4d-8bf5-263d87a8c1cd,"	private static Grid createGrid(Scanner scanner){
		Grid grid = null;
		System.out.println(""Enter a name for your Grid :"");
		String name =getName(scanner);
		while(name==null||name.equals("""")){
			System.out.println(""please enter a name for your grid :"");
			name =getName(scanner);
		}

		System.out.println(""how many rows would you like your grid to have: "");
		int numRows =getRows(scanner);
		while(numRows<0){
			System.out.println(""Please enter a number and ensure its greater than 0 :"");
			numRows=getRows(scanner);
		}

		System.out.println(""how many columns would you like :"");
		int numCols =getColumns(scanner);
		while(numCols<0){
			System.out.println(""Please enter a number and ensure its greater than 0 :"");
			numCols=getColumns(scanner);
		}
		// display grid
		grid = new Grid(numRows, numCols);
		grid.setName(name);
		grid.displayGrid();

		return grid;

	}
"
4072,71af9deb-77b6-43e2-99ac-7490a25a424a,"	private static void addTreasureChestToGrid(Scanner scanner,Grid grid) {
		System.out.println(""would you like to add a treasure chest to your grid. Enter Y or N :"");
		String addTreasure = addTreasure(scanner);
		while(!addTreasure.equalsIgnoreCase(""y"")&&!addTreasure.equalsIgnoreCase(""n"")){
			System.out.println(""enter Y or N :"");
			addTreasure = addTreasure(scanner);
		}
		if(addTreasure.trim().toLowerCase().equalsIgnoreCase(""y"")){
			addTreasureChest(scanner,grid);
		}else{
			TreasureChestCounter counter = new TreasureChestManager();
			System.out.println(""**********Treasure maps nearby****************"" );
			counter.displayTreasureChestNearby(grid);

		}


	}
"
4073,d7b68c83-dc8c-43f1-b9a8-6198a659deec,"	private static int getRows(Scanner scanner){

		String rows = scanner.nextLine();
		int numRows =TreasureMapUtils.convertToInt(rows, -1);
		return numRows;
	}
"
4074,4016365a-802c-4f61-ade2-71ef796cb418,"	private static String getName(Scanner scanner){
		return scanner.nextLine();

	}
"
4075,ed389211-7a01-4018-86a8-4729ea601d46,"	private static int getColumns(Scanner scanner){
		String cols = scanner.nextLine();
		int numCols =TreasureMapUtils.convertToInt(cols, -1);
		return numCols;
	}
"
4076,2124d0b8-5e9d-48e1-a792-f71b0f956f8c,"	private static void addTreasureChest(Scanner scanner,Grid grid){
		System.out.println(""please provide a name for your treasure chest :"");
		String chest = scanner.nextLine();
		while(chest==null||chest.equals("""")){
			System.out.println(""please provide a name for your treasure chest :"");
			chest=scanner.nextLine();
		}
		System.out.println(""please provide a position for your treasure chest "");
		System.out.println(""please enter a row number row numbers start from 0 and should be less than ""+grid.getRows()+"" : "");
		int row = getRows(scanner);
		while(row==-1||row>grid.getRows()){
			System.out.println(""please enter a valid row number.Row numbers start from 0 and is less than ""+grid.getRows()+"" :"");
			row =getRows(scanner);
		}
		int col = getColumns(scanner);
		System.out.println(""please enter the column you would like to position your treasure chest columns starts 1 and should be less than ""+grid.getColumns()+"" : "");
		while(col==-1||col>grid.getColumns()){
			System.out.println(""please enter a valid column number. Column numbers start from 1 and is less than ""+grid.getColumns());
			col=getColumns(scanner);
		}
		grid.addTreasureChest(new TreasureChest(chest), row, col);
		grid.displayGrid();
		System.out.println(""would you like to add another treasure chest to the grid ? Y or N"");
		String yn=addTreasure(scanner);
		while(!yn.trim().equalsIgnoreCase(""Y"")&&!yn.trim().equalsIgnoreCase(""N"")){
			System.out.println(""enter Y or N :"");
			yn = scanner.nextLine();
		}
		if(yn.trim().equalsIgnoreCase(""Y"")){
			addTreasureChest(scanner,grid);
		}else{
			TreasureChestCounter counter = new TreasureChestManager();
			System.out.println(""**********Treasure maps nearby****************"" );
			counter.displayTreasureChestNearby(grid);

			System.out.println(""thank you for using the trasure map finder"");

		}

	}
"
4077,7d83431e-7465-4f7d-97ae-88d74f622d6a,"	private static String addTreasure(Scanner scanner){
		return scanner.nextLine();

	}
"
4078,e7d23376-5327-4178-97d9-48603680ef61,"	public Grid(int rows, int cols){
		treasureChest = new TreasureChest[rows][cols] ;
		this.rows =rows ;
		this.columns =cols ;
	}
"
4079,bbfb32f5-f63b-48f6-8f22-be4654f07a8f,"	public int getRows() {
		return rows;
	}
"
4080,47347ad9-beda-449a-bb33-d9a4d90c5a22,"	public int getColumns() {
		return columns;
	}
"
4081,ff581af7-a407-421b-8926-a9a2799eb088,"	public String getName() {
		return name;
	}
"
4082,c112fbaa-9932-4d28-bd6a-91845bba8c78,"	public void setName(String name) {
		this.name = name;
	}
"
4083,8bd598cb-93e3-4350-9d1c-859a98be482c,"	public TreasureChest[][] getTreasureChest() {
		return treasureChest;
	}
"
4084,7d0e918a-ea7e-4c7a-8b71-05789b0c8d38,"	public void addTreasureChest(TreasureChest chest, int row,int col){
		treasureChest[row][col] = chest ;
	}
"
4085,c4f74df1-0825-4005-8fee-a17b38655d13,"	public void removeTreasureChest(TreasureChest chest){
		for(int row=0;row<rows;row++){
			for(int col=0;col<columns;col++){
				TreasureChest chest1 = treasureChest[row][col];
				if(chest1.equals(chest)){
					chest1 = null;
					break;
				}
			}
		}
	}
"
4086,02088d9a-70b3-4bde-9258-2c95b0a469f1,"	public void displayGrid(){
		System.out.println(""Grid name :""+getName());
		for(int row=0;row<rows;row++){
			StringBuilder gridBulder = new StringBuilder();
			for(int col=0;col<columns;col++){
				TreasureChest chest = treasureChest[row][col];
				if(chest==null){
					gridBulder.append(""_ "");
				}else{
					gridBulder.append(""X "");
				}
			}
			
			System.out.println(gridBulder.toString());
		}
	}
"
4087,11c11d2d-ef13-4608-97fe-9e76a05cdc6b,"	public void displayTreasureChestNearby(Grid grid) {
		System.out.println(""RESULTS"");
		if(grid!=null){
			TreasureChest[][] treasureChestGrid = grid.getTreasureChest();
			int rows = grid.getRows();
			int cols =grid.getColumns();

			for(int row=0;row<rows;row++){
				StringBuilder result = new StringBuilder();
				// check first col
				for(int col=0;col<cols;col++){
					int counter = 0 ;
					counter=checkTreasureChestsNearby(row, col, rows, cols, counter, treasureChestGrid);
					result.append(counter);
				}
				System.out.println(result.toString());
			}
		}
	}
"
4088,45c8ce5c-2aa7-488c-a823-b54b58115cbf,"	private int checkPreviousColumn(int col,int row,TreasureChest[][] treasureChestGrid,int counter){
		if(col!=0){
			counter=checkColumn(treasureChestGrid, row, col-1, counter);
		}
		return counter;
	}
"
4089,14d89ddc-e5ad-408a-b40e-a601c0804fa4,"	private int  checkPreviousColumnRowBelow(int row,int col,TreasureChest[][]treasureChestGrid,int counter){
		if(col!=0){
			counter=checkColumn(treasureChestGrid, row+1, col-1, counter);
		}
		return counter;
	}
"
4090,4682c28c-ab6e-4dcf-8fcc-7cea069683a9,"	private int checkRightColumn(int row,int col,int cols,TreasureChest[][]treasureChestGrid,int counter){

		if(col!=(cols-1)){
			counter=checkColumn(treasureChestGrid, row, col+1, counter);
		}

		return counter;
	}
"
4091,c093006e-faa0-4cb0-b10c-f648bbe8bf76,"	private int checkRightColumnRowBelow(int row,int col,int cols,TreasureChest[][]treasureChestGrid,int counter){

		if(col!=(cols-1)){
			counter=checkColumn(treasureChestGrid, row+1, col+1, counter);
		}
		return counter;
	}
"
4092,df9ab819-d58e-4bfb-ba07-e0bca1c3336a,"	private int checkPreviousColumnRowAbove(int row, int col,TreasureChest[][]treasureChestGrid,int counter){
		// check previous col if it is not 0
		if(col!=0){
			counter=checkColumn(treasureChestGrid, row-1, col-1, counter);

		}
		return counter;
	}
"
4093,926ce75a-71e7-4910-9569-61ae39716854,"	private int checkRightColumnRowAbove(int row,int col,int cols,TreasureChest[][]treasureChestGrid,int counter){
		if(col!=(cols-1)){
			counter=checkColumn(treasureChestGrid, row-1, col+1, counter);
		}
		return counter ;

	}
"
4094,5cadbc4a-e215-4bcb-a791-4e1f7d5f7032,"	private int checkColumn(TreasureChest[][]treasureChestGrid,int row,int col,int counter){
		if(row<treasureChestGrid[0].length&&col<treasureChestGrid[1].length){
			TreasureChest nChest =treasureChestGrid[row][col];
			if(nChest!=null){
				counter++;
			}
		}
		return counter;
	}
"
4095,7e656cd1-b259-49a6-aa2a-142b2b6aa9de,"	private int checkFirstRow(int row,int col,int cols,int counter,TreasureChest[][] treasureChestGrid){
		counter =checkColumn(treasureChestGrid, row, col, counter);
		counter=checkPreviousColumn(col, row, treasureChestGrid, counter);
		counter=checkRightColumn(row, col, cols, treasureChestGrid, counter);

		return counter ;

	}
"
4096,03007c63-f6ba-42a6-9c6d-70527cb161c7,"	private int checkNextRow(int row,int col,int rows,int cols,int counter,TreasureChest[][] treasureChestGrid){
		if(row!=(rows-1)){
			counter=checkColumn(treasureChestGrid, row+1, col, counter);
			counter=checkPreviousColumnRowBelow(row, col, treasureChestGrid, counter);
			counter=checkRightColumnRowBelow(row, col, cols, treasureChestGrid, counter);
		}
		return counter;
	}
"
4097,17e50ed6-b349-4fe4-965d-ec2b7689792a,"	private int checkRowAbove(int row,int col,int rows,int cols,int counter,TreasureChest[][] treasureChestGrid){
		if(row!=0){
			counter=checkColumn(treasureChestGrid, row-1, col, counter);
			counter=checkPreviousColumnRowAbove(row, col, treasureChestGrid, counter);
			counter=checkRightColumnRowAbove(row, col, cols, treasureChestGrid, counter);
		}
		return counter;
	}
"
4098,aa82323e-a6fd-422f-bb47-cfb968d0fc3f,"	private int checkTreasureChestsNearby(int row,int col,int rows,int cols,int counter,TreasureChest[][] treasureChestGrid){
		counter =checkFirstRow(row, col, cols, counter, treasureChestGrid);
		counter=checkNextRow(row, col, rows, cols, counter, treasureChestGrid);
		counter= checkRowAbove(row, col, rows, cols, counter, treasureChestGrid);
		return counter;
	}
"
4099,673e8f22-5e5c-497d-88ff-0fcc15592873,"	public static int convertToInt(String string,int defaultInt){
		int number = 0;
		try{
			number=Integer.parseInt(string);
		}catch (Exception e) {
			number =defaultInt;
		}
		return number;
	}
"
4100,8f0c4340-d6f4-47c6-ac9f-eccc6fa2d2ba,"	public TreasureChest( String name){
		contents = new ArrayList<String>();
		this.name = name;
	}
"
4101,7631dab0-8498-4937-ba06-edc875798f91,"	public int getId() {
		return id;
	}
"
4102,d0897980-6f9f-4e5b-b0b7-f647107874dd,"	public void setId(int id) {
		this.id = id;
	}
"
4103,9bd6eb30-45ef-47f4-8184-c30a0559486e,"	public String getName() {
		return name;
	}
"
4104,96b1b090-a718-4c3d-810b-9bd994ee8dab,"	public void setName(String name) {
		this.name = name;
	}
"
4105,5fa8d734-6a22-4d73-a3b0-9e5a01c39cd3,"	public List<String> getContents() {
		return contents;
	}
"
4106,8daeae94-344b-48b8-8244-f18855791c6d,"	public void setContents(List<String> contents) {
		this.contents = contents;
	}
"
4107,0ae89c82-3485-45f7-8cd4-6535b2ecd839,"	public void addToTreasureMap(String content){
		if(contents!=null&&content!=null){
			contents.add(content);
		}
	}
"
4108,8f07a809-a668-40c9-84ce-9fc605363631,"	public void removeContent(String content){
		if(contents!=null){
			boolean contentPresent =contents.contains(content);
			if(contentPresent){
				contents.remove(content);
			}
		}
	}
"
4109,1042e7d0-9860-4044-b863-16f07c1f8fb6,"	public int hascode(){
		final int HASH =7;
		int result = (HASH*31)+id ;

		return result ;
	}
"
4110,714ab946-8b0e-4d1b-8d7e-5616a5181a3b,"	public boolean equals(Object obj){
		boolean equal = false ;
		if(this==obj){
			return true ;
		}
		if(obj==null){
			return false;
		}
		if(getClass()!=obj.getClass()){
			return false ;
		}
		TreasureChest chest = (TreasureChest)obj ;
		if(chest.getId()==getId()&&chest.getName().equalsIgnoreCase(getName())){
			equal =true;
		}

		return equal ;
	}
"
4111,038e6a6a-d8c6-4844-9abf-df4adc5c3d0d,"	@Test
	public void testTreasureChestNearby(){
	Grid g = new Grid(4, 5);
			g.addTreasureChest(new TreasureChest(""1""), 0, 0);
				g.addTreasureChest(new TreasureChest(""2""), 1, 2);
			TreasureChestManager v = new TreasureChestManager();
			v.displayTreasureChestNearby(g);
			//TODO need to put in array to check the records
			assertEquals(1,g.getRows());
	}
"
4112,4e622c5b-7cc4-4a1c-b1c7-b3090f97c2a7,"    public void paint(Graphics g) {
        //g.drawImage(img, 0, 0, null);
    }
"
4113,c40babae-fbb3-44d1-aa79-22905a7e72f2,"    public AuroraData LoadAndConvert() {
    	/*
    	 * // Get a pixel
			int rgb = bufferedImage.getRGB(x, y);
			
			// Get all the pixels
			int w = bufferedImage.getWidth(null);
			int h = bufferedImage.getHeight(null);
			int[] rgbs = new int[w*h];
			bufferedImage.getRGB(0, 0, w, h, rgbs, 0, w);
			
			// Set a pixel
			rgb = 0xFF00FF00; // green
			bufferedImage.setRGB(x, y, rgb);
    	 */
		try {
			   URL northHemiURL = new URL(""http://www.swpc.noaa.gov/pmap/GEpmap/GEpmapN.png"");
			   URL southHemiURL = new URL(""http://www.swpc.noaa.gov/pmap/GEpmap/GEpmapS.png"");
			   imgNorthPX = ImageIO.read(northHemiURL);
			   imgSouthPX = ImageIO.read(southHemiURL);
			} catch (IOException e) {
			}
		
		//Now that you have a BufferImge instance to work on, access its pixels + return a 2-d array for each image
		double[][] n = manRGBArray(imgNorthPX, Hemisphere.NORTH);
		double [][] s = manRGBArray(imgSouthPX, Hemisphere.SOUTH);
		
		AuroraData data = new AuroraData();
		data.setN(n);
		data.setS(s);
		return data;
    }
"
4114,64594a8f-3f04-4fc0-9e9c-69bd2fefbe23,"    private double[][] manRGBArray(BufferedImage image, Hemisphere hemi){
    	double[][] rgbArray = new double[200][200];
		int rgb = 3096;//Don't ask why
		int x=0;
		int y = 0;
		for (x = 0; x < 200; x++) { // loop x axis of the image
			for (y = 0; y < 200; y++) {// loop y axis
				// remove arrow or text
				if (hemi == Hemisphere.NORTH && (x > 389 / 2 && y > 248 / 2)
						|| (y > 382 / 2)) {
					continue;
				} else if (hemi == Hemisphere.SOUTH && x > 389 / 2
						&& y < 142 / 2) {
					continue;
				}
				rgb = image.getRGB(2*x, 2*y);
			    int alpha = ((rgb >> 24) & 0xff); 
			    int red = ((rgb >> 16) & 0xff); 
			    int green = ((rgb >> 8) & 0xff); 
			    int blue = ((rgb ) & 0xff); 
			    // Manipulate the r, g, b, and a values.
			    //rgb = (alpha << 24) | (red << 16) | (green << 8) | blue; 
			    //imgNorthPX.setRGB(x, y, rgb);
			    rgbArray[x][y] = getIntensity(alpha, red, green, blue);
			}
		}
    return rgbArray;
}
"
4115,83fade93-57c8-4809-82c4-7b834fd05b3a,"    public double getIntensity(int alpha, int red, int green, int blue) {
    	if (alpha == 0) {
    		return 0;
    	}
    	
    	// bottom of scale is 0.0 and top of scale is 10.0.
    	float[] hsbvals = new float[3];
    	hsbvals = Color.RGBtoHSB(red, green, blue, hsbvals);
    	
    	double intensity = 0;
    	
		if (hsbvals[0] > 200 / 360.0) {
			// goes from 0,0,255 to 255,255,255 from 10^-2 to 10^-1
			intensity = -1 - hsbvals[1] / 1.0;
		} else if (hsbvals[0] > 0.39 && hsbvals[0] < 0.6) {
			// from 255,255,255 to 255,255,0 from 10^-1 to 10^-0.5
			intensity = -0.5 - (hsbvals[0] -0.39)/(0.6-0.39) * 0.5;
		} else if (hsbvals[0] <= 0.39) {
			// from 255,255,0 to 255,0,0 from 10^-0.5 to 10^1
			intensity = 1 - (hsbvals[0])/0.39 * 0.5;
		} else {
			// must be in bottom range from hsbvals[2]
			intensity = -2 + hsbvals[2];
			
//			System.err.println(String.format(""not sure for argb: (%d, %d, %d, %d), hsb: (%f, %f, %f)"", alpha, red, green, blue, hsbvals[0], hsbvals[1], hsbvals[2] ));
		}
//		if (intensity == 1) {
//			System.err
//					.println(String
//							.format(""not sure for argb: (%d, %d, %d, %d), hsb: (%f, %f, %f)"",
//									alpha, red, green, blue, hsbvals[0],
//									hsbvals[1], hsbvals[2]));
//		}
		return Math.pow(10, intensity);
    }
"
4116,093d2618-dc68-4584-982d-21095c0c12c5,"    public static void main(String args[]) {
    	Converter c = new Converter();
    	c.LoadAndConvert();
    }
"
4117,e0f5a6fd-ad4a-4092-a981-b25c15bc8a6b,"	public double[][] getS() {
		return s;
	}
"
4118,c422ddb6-ca13-4893-8d2f-14793c6e60c4,"	public void setS(double[][] s) {
		this.s = s;
	}
"
4119,db71540d-41fd-4bcf-b25e-800744def4de,"	public double[][] getN() {
		return n;
	}
"
4120,f820383c-6dd3-400a-8a5b-4c00433b63a7,"	public void setN(double[][] n) {
		this.n = n;
	}
"
4121,7adf2b6e-9629-42bf-9f07-73edea18baba,"	public AuroraData() {
	}
"
4122,4607da59-8efe-480b-9931-0473963db771,"	public AuroraController() {
	}
"
4123,441bb23b-6d81-4a2e-ae37-c816819c90bc,"	@RequestMapping(value = ""/now"")
	public @ResponseBody AuroraData now(HttpServletResponse response) throws IOException {
		return converter.LoadAndConvert();
	}
"
4124,a5384900-02d7-4368-a8e3-d15b3442d6c6,"	@RequestMapping(value=""/weather"") 
	public void weather(HttpServletResponse response) throws IOException {
		String url = ""http://www.spaceweather.gc.ca/apps/conditions/php/ajax/get_current_conditions.php"";
		HttpMethod method = new GetMethod(url);

		HttpClient client = new HttpClient();
		client.executeMethod(method);
		
		response.getOutputStream().write(method.getResponseBody());
	}
"
4125,01c9e1a7-0452-4f90-b12a-736e04d154e2,"	@RequestMapping("""")
	public String index() {
		return ""index"";
	}
"
4126,3edae49a-0a40-4ca0-8bdd-df2232faf970,"	@Override
	public void serialize(double[][] value, JsonGenerator jgen,
			SerializerProvider provider) throws IOException,
			JsonProcessingException {
		jgen.writeStartArray();
		for (int i = 0; i < value.length; i++) {
			jgen.writeStartArray();
			for (int j = 0; j < value[i].length; j++) {
				if (value[i][j] == (int)value[i][j]) {
					jgen.writeNumber((int)value[i][j]);
				} else {
					jgen.writeRawValue(String.format(""%.3f"", value[i][j]));
				}
			}
			jgen.writeEndArray();
		}
		jgen.writeEndArray();
		
	}
"
4127,543f2b15-1f36-42b0-bd93-11df5f57301d,"    @Override
    public RecordReader getRecordReader(InputSplit split, JobConf job, Reporter reporter) throws IOException {
        // Set the input schema right before the retrieving the record reader
        Schema schema = ReflectData.get().getSchema(WikiCategoryLink.class);
        AvroJob.setInputSchema(job, schema);

        return super.getRecordReader(split, job, reporter);
    }
"
4128,d8836493-2bc8-464f-9f38-b7ed9524cad0,"    public AvroOutputUnion getOutputUnion() {
        AvroOutputUnion aou = new AvroOutputUnion();
        aou.wcl = this;

        return aou;
    }
"
4129,b5acedfb-36be-4596-a84d-738c34f04aad,"    @Override
    public RecordReader getRecordReader(InputSplit split, JobConf job, Reporter reporter) throws IOException {
        // Set the input schema right before the retrieving the record reader
        Schema schema = ReflectData.get().getSchema(WikiPage.class);
        AvroJob.setInputSchema(job, schema);

        return super.getRecordReader(split, job, reporter);
    }
"
4130,8837cade-de2e-4c0f-a14e-92202ff9a0ef,"    public AvroOutputUnion getOutputUnion() {
        AvroOutputUnion aou = new AvroOutputUnion();

        aou.wp = this;

        return aou;
    }
"
4131,118b6499-3466-498c-83d7-7ae16629a3d3,"    public AvroOutputUnion getOutputUnion();
"
4132,7c2612fd-068b-4fd0-a073-b5a4e8cabc1e,"    public static void main(String [] args) throws Exception {
        ToolRunner.run(new WPJoin(), args);
    }
"
4133,2e147b0e-7dc7-4d56-a23e-87fdc1850ef8,"    public int run(String[] args) throws IOException {
        JobConf jc = new JobConf(getConf(), getClass());
        AvroJob.setReflect(jc);
        
        MultipleInputs.addInputPath(jc, new Path(args[0]), AvroMIFWikiPage.class, WPPageJoinMapper.class);
        MultipleInputs.addInputPath(jc, new Path(args[1]), AvroMIFWikiCategoryLink.class, WPCategoryLinkJoinMapper.class);

        // map output: key and value schemas
        Schema mokeyschema = ReflectData.get().getSchema(JoinKey.class);
        Schema moschema = ReflectData.get().getSchema(AvroOutputUnion.class);
        AvroJob.setMapOutputSchema(jc, Pair.getPairSchema(mokeyschema, moschema));
        
        AvroJob.setReducerClass(jc, WPJoinReducer.class);
        
        Schema oschema = ReflectData.get().getSchema(WikiTitleCategoryLink.class);
        AvroJob.setOutputSchema(jc, oschema);
        
        jc.setPartitionerClass(PartitionJoinKey.class);
        jc.setOutputValueGroupingComparator(GroupingComparator.class);
        
        FileOutputFormat.setOutputPath(jc, new Path(args[2]));
        
        JobClient.runJob(jc);
        
        return 0;
    }
"
4134,83a45fa0-04dd-4dc4-ac57-824e0f63bed2,"        public WikiTitleCategoryLink() {}
"
4135,f8cf4fd4-f06e-40fe-8a40-769f2ad1b344,"        public WikiTitleCategoryLink(WikiCategoryLink wcl, String title) {
            set(wcl, title);
        }
"
4136,bac0731e-4910-43a5-9512-7e095d840929,"        public void set(WikiCategoryLink wcl, String title) {
            this.id = wcl.id;
            this.to = wcl.to;
            this.sortkey = wcl.sortkey;
            this.timestamp = wcl.timestamp;
            this.sortkey_prefix = wcl.sortkey_prefix;
            this.collation = wcl.collation;
            this.type = wcl.type;
            this.pagetitle = title;            
        }
"
4137,6eadc22f-53f7-44c5-b7ac-c3282ce10d50,"        public int getPartition(AvroKey<JoinKey> k2, AvroValue v2, int i) {
            return k2.datum().key.hashCode() % i;
        }
"
4138,02c899d2-5f1a-4ac2-b73b-6292b1d84a49,"        public void configure(JobConf jc) {
        }
"
4139,72f65b9b-b999-47ad-b3ce-697d058ae89e,"        @Override
        public int compare(AvroWrapper<JoinKey> x, AvroWrapper<JoinKey> y) {
            JoinKey xk, yk;
            xk = x.datum();
            yk = y.datum();

            return xk.key.compareTo(yk.key);
        }
"
4140,dc8b2268-5d47-495c-a220-6cbb2a7482e3,"        public void map(AvroWrapper k1, NullWritable v1, OutputCollector<AvroKey<JoinKey>, AvroValue<AvroOutputUnion>> oc, Reporter rprtr) throws IOException {
            try {
                JoinKey jk = new JoinKey();
                
                AvroUnionConstructorVisitor obj = (AvroUnionConstructorVisitor)k1.datum();

                jk.key = (Long)cls.getField(joinfield).get(obj);
                jk.position = position;
                
                oc.collect(new AvroKey(jk), new AvroValue(obj.getOutputUnion()));
            } catch (IllegalArgumentException ex) {
                Logger.getLogger(WPJoin.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(WPJoin.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchFieldException ex) {
                Logger.getLogger(WPJoin.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SecurityException ex) {
                Logger.getLogger(WPJoin.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
"
4141,df7e1c25-b8b9-41fc-8c94-0c65f4619fab,"        public WPPageJoinMapper() {
            cls = WikiPage.class;
            position = 0;
            joinfield = ""id"";
        }
"
4142,4f222e78-5b81-48c4-8546-985401c456ac,"        public WPCategoryLinkJoinMapper() {
            cls = WikiCategoryLink.class;
            position = 1;
            joinfield = ""id"";
        }
"
4143,218c4341-33bc-488a-a11e-53434ff3fc88,"        @Override
        public void reduce(JoinKey key, Iterable<AvroOutputUnion> values, AvroCollector<WikiTitleCategoryLink> collector, Reporter reporter) throws IOException {
            WikiPage wp = null;
            WikiTitleCategoryLink wtcl = new WikiTitleCategoryLink();
            
            for(AvroOutputUnion aou:values) {
                if(aou.wp != null) {
                    // should have one and only one WikiPage per JoinKey
                    assert wp == null;
                    
                    wp = aou.wp;
                } else {
                    if(wp == null) {
                        reporter.incrCounter(getClass().getSimpleName(), ""no_page"", 1);
                        return;
                    }
                    wtcl.set(aou.wcl, wp.title);
                    collector.collect(wtcl);
                }
            }
        }
"
4144,1024efaf-3aa4-4474-811d-32fe3807bdd4,"	@Override
	public String getCore() {
		return ""collection1"";
	}
"
4145,06e090df-aaf3-4bd4-a23f-ffbd70733028,"	@Test
	public void testQueryVideo() {
		SolrQuery query = new SolrQuery();
		query.set(""q"", ""video"");
		query.addFacetField(""cat"");
		query.setFacetLimit(10);
		query.setFacetMinCount(1);

		try {
			QueryResponse response = server.query(query);
			SolrDocumentList docs = response.getResults();
			for (SolrDocument doc : docs) {
				logger.info(""The Doc Name:{}"", doc.getFieldValue(""id"")
						.toString());
			}
			logger.info(""\n================================"");

			List<FacetField> ffList = response.getFacetFields();
			if (ffList != null) {
				for (FacetField ff : ffList) {
					for (Count c : ff.getValues()) {
						logger.info(""{}-{}"", c.getName(), c.getCount());
					}

				}
			}
			logger.info(""\n================================"");
			logger.info(""Eleased time: {}"", response.getElapsedTime());
		} catch (SolrServerException e) {
			logger.error(e.getMessage(), e);
		}

	}
"
4146,97ad6772-b171-42b6-aae1-8643f1784492,"	@Test
	public void testSearchByCursor() {
		SolrQuery query = new SolrQuery();
		int pageSize = 3;
		query.set(""q"", ""video"");
		query.setRows(pageSize);
		query.setSort(""id"", ORDER.asc);
		/**
		 * There also is another way to check does this loop should be stopped
		 * via checking the currentMark, If currentMark is identical with last
		 * currentMark it turns out that loop already over.
		 */
		try {
			boolean hasMore = true;
			String cursorMark = CursorMarkParams.CURSOR_MARK_START;
			while (hasMore) {
				query.set(CursorMarkParams.CURSOR_MARK_PARAM, cursorMark);
				QueryResponse response = server.query(query);
				SolrDocumentList docs = response.getResults();
				// long total=docs.getNumFound();

				for (SolrDocument doc : docs) {
					logger.info(""The Doc Name:{}"", doc.getFieldValue(""id"")
							.toString());
				}
				cursorMark = response.getNextCursorMark();
				hasMore = docs.size() == pageSize;
				logger.warn(""Empty:{}"", hasMore);
			}
		} catch (SolrServerException e) {
			logger.error(e.getMessage(), e);
		}

	}
"
4147,5e633e1b-80ef-4a44-a98b-0e93b744a65b,"	@Test
	public void testIndexDoc() {
	}
"
4148,070c2e34-07f3-4fd6-a0a6-ee0ac874984f,"	@Test
	public void testDeleteById() {
		try {
			server.deleteById(""ABC DEF"");
			server.commit();
		} catch (SolrServerException e) {
			logger.error(e.getMessage(), e);
		} catch (IOException e) {
			logger.error(e.getMessage(), e);
		}
	}
"
4149,93acca40-39d1-49f2-9410-14e9c98e1ad9,"    public String getCore(){
    	return ""collection4"";
    }
"
4150,bf2203db-972f-4f42-bb69-ccc99bf798dd,"    @Override
    public String getServerURL() {
    	return ""http://localhost:8080/solr"";
    }
"
4151,e51d5212-ef2a-493b-bb44-2af708ad50ef,"	@Test(enabled=true)
	public void eraseIndexRepository() {
		try {
			SolrQuery params = new SolrQuery();
			params.set(""q"", ""*:*"");
			params.setRows(100);
			QueryResponse response=server.query(params);
			for(SolrDocument doc:response.getResults()){
				System.out.println(doc.getFieldValue(""id""));
			}
			server.setSoTimeout(3600000);
			server.setConnectionTimeout(3600000);
			server.deleteByQuery(""*:*"");
			server.commit();
		} catch (SolrServerException e) {
			logger.error(e.getMessage(), e);
		} catch (IOException e) {
			logger.error(e.getMessage(), e);
		}
	}
"
4152,0525229a-da0e-4017-a4e0-aa7d53cabbb2,"    public String getCore(){
    	return """";
    }
"
4153,cbefb208-c3fa-409f-84a4-d47fd3d82e4c,"    public String getServerURL(){
    	return serverURL;
    }
"
4154,6ead71e5-1d3b-4597-a1c9-a3268616e7d7,"	@BeforeClass
	public void init() {
		server = new HttpSolrServer(getServerURL()+""/""+getCore());
		server.setMaxRetries(1); // defaults to 0. > 1 not recommended.
		server.setConnectionTimeout(5000); // 5 seconds to establish TCP
		// Setting the XML response parser is only required for cross
		// version compatibility and only when one side is 1.4.1 or
		// earlier and the other side is 3.1 or later.
		server.setParser(new XMLResponseParser()); // binary parser is used by
													// default
		// The following settings are provided here for completeness.
		// They will not normally be required, and should only be used
		// after consulting javadocs to know whether they are truly required.
		server.setSoTimeout(1000); // socket read timeout
		server.setDefaultMaxConnectionsPerHost(100);
		server.setMaxTotalConnections(100);
		server.setFollowRedirects(false); // defaults to false
		// allowCompression defaults to false.
		// Server side must support gzip or deflate for this to have any effect.
		server.setAllowCompression(true);
		logger = LoggerFactory.getLogger(this.getClass());
	}
"
4155,e4a0f3c2-60fc-4c00-98be-2dda3a9ea0d2,"	@AfterClass
	public void shutdown() {
		server.shutdown();
		logger.info(""Shutdown server...."");
	}
"
4156,966f131e-8ba8-4c8c-bd94-0f6bcb68b35f,"    public String getCore(){
    	return ""collection1"";
    }
"
4157,fd62abfe-b705-4ffd-892f-1546e38e24c9,"	@DataProvider(name = ""simpleDocDatas"")
	public Item[][] getData() {
		// These docs will be distributed to different shard(s) according to you
		// algorithm
		Item[][] result = new Item[4][1];
		Item item = new Item();
		item.setCategories(new String[] { ""feed"" });
		item.setId(""我们都"");
		result[0][0] = item;

		item = new Item();
		item.setCategories(new String[] { ""feed"" });
		item.setId(""#323lfjasd"");
		result[1][0] = item;

		item = new Item();
		item.setCategories(new String[] { ""feed"" });
		item.setId(""IBM!ABC"");
		result[2][0] = item;

		item = new Item();
		item.setCategories(new String[] { ""feed"" });
		item.setId(""IBM!DEF"");
		result[3][0] = item;

		return result;
	}
"
4158,53cf9fbc-62da-42d6-9dc0-95ae93b66e01,"	@Test(dataProvider = ""simpleDocDatas"")
	public void testIndexSimpleBean(Item item) {
		try {
			server.addBean(item);
		} catch (SolrServerException e) {
			logger.error(e.getLocalizedMessage(), e);
		} catch (IOException e) {
			logger.error(e.getLocalizedMessage(), e);
		}
	}
"
4159,07123de2-6e31-48e5-b815-b5b42da77810,"	@AfterClass(alwaysRun = true)
	public void doCommit() {
		logger.info(""Start to commit all request...."");
		UpdateResponse response;
		try {
			response = server.commit();
			Assert.assertEquals(response.getStatus(), 0,
					""Fail to update/add Index"");
		} catch (SolrServerException e) {
			logger.error(e.getMessage(), e);
		} catch (IOException e) {
			logger.error(e.getMessage(), e);
		}
	}
"
4160,776ef799-844d-4a48-8c30-9c605b43a35b,"	@Test
	public void testIndexSimple1() {
//		http://localhost:8080/solr/select/?q=id:ABC
		SolrInputDocument doc = new SolrInputDocument();
		doc.addField(""id"", ""ABC"");
		doc.addField(""name"", ""Lewisl Test1-V2"");
		doc.addField(""category"", ""human being"");

		try {
			server.add(doc);
			UpdateResponse response = server.commit();
			Assert.assertEquals(response.getStatus(), 0,
					""Fail to update/add Index"");
		} catch (SolrServerException e) {
			logger.error(e.getLocalizedMessage(), e);
		} catch (IOException e) {
			logger.error(e.getLocalizedMessage(), e);
		}
	}
"
4161,a2ef8650-2993-46b1-8a1d-05165192752c,"	@Test
	public void testIndexSimpleBean() {
		// http://localhost:8080/solr/select/?q=cat:Tools
		Item item = new Item();
		item.setCategories(new String[] { ""Tools"", ""Softwear"" });
		item.setId(""ABC DEF"");

		try {
			server.addBean(item);
			UpdateResponse response = server.commit();
			Assert.assertEquals(response.getStatus(), 0,
					""Fail to update/add Index"");
		} catch (SolrServerException e) {
			logger.error(e.getLocalizedMessage(), e);
		} catch (IOException e) {
			logger.error(e.getLocalizedMessage(), e);
		}
	}
"
4162,d5c45859-039d-4289-af90-9b69c76a6636,"	public String getId() {
		return id;
	}
"
4163,f74431c5-1a5c-4da1-97bf-3b0cd5f6ed74,"	public void setId(String id) {
		this.id = id;
	}
"
4164,29400040-2d93-413f-ae26-61cce862df32,"	public String[] getCategories() {
		return categories;
	}
"
4165,9d4256c5-0d6f-4a54-bc0d-6a7cdb3291cc,"	public void setCategories(String[] categories) {
		this.categories = categories;
	}
"
4166,7e278bcb-7aee-412c-b71a-3e97cfa9fc43,"	public List<String> getFeatures() {
		return features;
	}
"
4167,160262d0-49b3-4912-9d01-fb554a72501f,"	public void setFeatures(List<String> features) {
		this.features = features;
	}
"
4168,c565785d-b9d3-41a9-adcd-74311d48b2fb,"	public String getRouterRef() {
		return routerRef;
	}
"
4169,fe0cf603-bf18-41d9-aea1-03a488f636c8,"	public void setRouterRef(String routerRef) {
		this.routerRef = routerRef;
	}
"
4170,4ead876b-a6cb-42dc-bbde-3a1a2a27cd42,"    @Before
    public void setup() {
        driver = new FirefoxDriver();
    }
"
4171,8bf140b2-cf79-4d7f-a6f4-bf43feb2307c,"    @After
    public void tearDown() {
        driver.close();
    }
"
4172,2702100a-1f60-4645-b385-a82c61823369,"    @Test
    public void testWithdrawal$100() {
        visitCashman();
        withdraw(100);
        assertEquals(100, totalDispensed());
    }
"
4173,de655986-b73b-4a9f-ae89-31866669467f,"    private void visitCashman() {
        driver.get(""http://tomcat.corsamore.com/cashman"");
    }
"
4174,2367f356-69f8-4934-ba6f-8c055d299155,"    private void withdraw(int amount) {
        driver.findElement(By.id(""cashmachine_withdrawalAmount"")).sendKeys(String.valueOf(amount));
        driver.findElement(By.id(""cashmachine_Withdraw"")).click();
    }
"
4175,a7dff6ad-3dc9-4920-8174-fda8c3c551ae,"    private int totalDispensed() {
        int total = 0;
        List<WebElement> elements = driver.findElement(By.id(""cashmachine_Withdrawal"")).findElements(By.tagName(""tr""));
        for(WebElement element : elements) {
            List<WebElement> dispensedNote = element.findElements(By.tagName(""td""));
            if(dispensedNote.size()<=1) continue;
            String typeOfDispensedNote =  dispensedNote.get(0).getText();
            String numOfDispensedNote  =  dispensedNote.get(1).getText();
            total += Integer.parseInt(numOfDispensedNote)*Integer.parseInt(typeOfDispensedNote.replaceAll(""\\$"", """"));
        }
        return total;
    }
"
4176,e11e1320-6d26-45b3-a6ed-f65defb5ab94,"    @Before
    public void beforeScenario() {
        if(driver==null) {
            driver = new FirefoxDriver();
        }
        if(baseUrl==null) {
            baseUrl = ""http://tomcat.corsamore.com"";
        }
    }
"
4177,84b0527c-0bfe-4fcf-9033-1d33dcd003a6,"    @After
    public void afterScenario() {
         driver.close();
    }
"
4178,464f1279-fab4-4d60-93b3-b877afe16a61,"    public CashMachinePage CashMachine() { return new CashMachinePage(); }
"
4179,2d5d230a-d349-4a1e-be0a-fad33cc5c607,"    @Given(""^I go to the cash machine$"")
    public void I_go_to_the_cash_machine() {
        CashMachine().visit();
    }
"
4180,77e0294d-602c-4d14-8cf1-362af16d115f,"    @When(""^I select to withdraw \\$(\\d+)$"")
    public void I_select_to_withdraw_$(int amount) {
        CashMachine().withdraw(amount);
    }
"
4181,1fcf5866-47cc-4128-a5ef-8f207a2baeb7,"    @Then(""^I should receive (\\d+) note of (.*)$"")
    public void I_should_receive_$(int numNote, String noteType) {
        assertEquals(numNote, CashMachine().numDispencedNotes(noteType));
    }
"
4182,47b3ebb9-5818-401f-98b1-f6245fe53368,"    public void visit(String pageUrl) {
        driver.get(baseUrl + ""/"" + pageUrl);
    }
"
4183,57daf401-b521-4ab4-a458-4b370f742f6b,"    public void visit() {
        super.visit(PAGE_URL);
    }
"
4184,dcc788a8-e708-45a0-a036-7311c385952e,"    public void withdraw(int amount) {
        driver.findElement(withdrawalAmount).sendKeys(String.valueOf(amount));
        driver.findElement(withdrawalConfirm).click();
    }
"
4185,22a6488b-11f0-40d0-acb6-b142e22f3413,"    public int numDispencedNotes(String note) {
        List<WebElement> elements = driver.findElement(withdrawalNotes).findElements(By.tagName(""tr""));
        for(WebElement element : elements) {
            List<WebElement> dispensedNote = element.findElements(By.tagName(""td""));
            if(dispensedNote.size()<=1) continue;
            String typeOfDispensedNote =  dispensedNote.get(0).getText();
            String numOfDispensedNote  =  dispensedNote.get(1).getText();
            if(typeOfDispensedNote.equals(note)) {
                return Integer.parseInt(numOfDispensedNote);
            }
        }
        return -1;
    }
"
4186,5b379991-899e-4443-96c9-45ca222dbad6,"	public LoginBean() {
		// TODO Auto-generated constructor stub
	}
"
4187,af7bbb09-e555-44f1-b687-94a190dc82f4,"	public void validar(ActionEvent event) {
		if (event.getComponent().getId().equals(""validarId"")) {
			try {
				FacesContext context = FacesContext.getCurrentInstance();
				HttpServletResponse response = (HttpServletResponse) context
						.getExternalContext().getResponse();
				Usuario us = new Usuario();
				UsuarioDao dao = new UsuarioDao();
				us.setUsuario(this.user);
				us.setPassword(this.password);
				if ((!this.user.isEmpty()) || (!this.user.equals(""""))) {
					if ((!this.password.isEmpty())
							|| (!this.password.equals(""""))) {
						if (dao.validarUsuario(us)) {
							ArrayList inmuebles = new ArrayList();
							InmueblesDao inmuebledao = new InmueblesDao();

							inmuebles = inmuebledao.consultarInmueble(id);
							id = us.getId();

							response.sendRedirect(""/webProject/faces/welcome.xhtml"");
						} else {
							response.sendRedirect(""/webProject/faces/login.xhtml"");
							this.setRender(true);
							this.setMensaje(""Usuario o Password invalidos"");
						}
					} else {
						response.sendRedirect(""/webProject/faces/login.xhtml"");
						this.setRender(true);
						this.setMensaje(""Password no debe ser vacio"");
					}
				} else {
					response.sendRedirect(""/webProject/faces/login.xhtml"");
					this.setRender(true);
					this.setMensaje(""Usuario no debe ser vacio"");
				}

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
"
4188,df9b1713-0f24-4f4f-b947-c2ef0f57d80b,"	public void refresh() {
	    FacesContext context = FacesContext.getCurrentInstance();
	    Application application = context.getApplication();
	    ViewHandler viewHandler = application.getViewHandler();
	    UIViewRoot viewRoot = viewHandler.createView(context, context
	     .getViewRoot().getViewId());
	    context.setViewRoot(viewRoot);
	    context.renderResponse(); 
	 }
"
4189,ff21462c-0993-4112-863b-d5bfad0ad7fd,"	public String getName() {
		return name;
	}
"
4190,24c0c9a8-d7f6-4b8a-92f2-a2fc6f77bb73,"	public void setName(String name) {
		this.name = name;
	}
"
4191,976548f8-28a2-456d-aad8-dc18d7c2bf8e,"	public String getPassword() {
		return password;
	}
"
4192,1de5be80-ee63-4e50-9d75-6f68623cdd96,"	public void setPassword(String password) {
		this.password = password;
	}
"
4193,67668d93-bb67-443b-9862-feff07c2ea4c,"	public String getUser() {
		return user;
	}
"
4194,ad9f43a2-11eb-49d1-a768-6883011b468b,"	public void setUser(String user) {
		this.user = user;
	}
"
4195,16b10f13-dea9-4596-8b3d-82176f6f6ade,"	public int getId() {

		return id;
	}
"
4196,89dc5c88-6091-4bca-9d89-072fcb43184f,"	public void setId(int id) {
		this.id = id;
	}
"
4197,289b5e24-6015-472b-82f7-ba2974eb47d3,"	public String getMensaje() {
		return mensaje;
	}
"
4198,cfd3877a-1c9f-48a7-8425-12f52c7c0075,"	public void setMensaje(String mensaje) {
		this.mensaje = mensaje;
	}
"
4199,a62b96bc-f0f7-47df-be03-11dc58372a0c,"	public boolean isRender() {
		return render;
	}
"
4200,2afc130f-6379-4448-be02-a20fe3c0663d,"	public void setRender(boolean render) {
		this.render = render;
	}
"
4201,5aecf894-9234-461d-8ace-7f43ef5d3cb4,"	public RegistroInmueblesBean() {
		// TODO Auto-generated constructor stub
	}
"
4202,eca286f9-a3b6-4a13-9f0c-216a19cca7bd,"	public void registroInmuebles(ActionEvent evento) {
		if (evento.getComponent().getId().equals(""guardar"")) {
			Inmuebles Inm = new Inmuebles(0, Comments, Comments, Comments, Comments);
			InmueblesDao InmD = new InmueblesDao();
			Conexion conexion = new Conexion();
			Inm.setINMNOM(this.nombre);
			Inm.setINMDIR(this.direccion);
			Inm.setINMTEL(this.telefono);
			Inm.setINMVENOARR(this.VentOArr);
			Inm.setINMNEGOC(this.TipNeg);
			Inm.setINCCOMMENTS(this.Comments);
			//Inm.setIdusuario(this.idusuario);
			InmD.crearInmueble(Inm, conexion);
			clear();
		}
	}
"
4203,4e42b07a-d581-4f72-92df-9ac33518815f,"	public void clear(){

			this.nombre="""";
			this.direccion="""";
			this.telefono="""";
			this.VentOArr="""";
			this.TipNeg="""";
			this.Comments="""";
	}
"
4204,249a7fa0-e502-49a6-97b0-e5637c35baad,"	public void consultain(){
		//if (evento.getComponent().getId().equals(""guardar"")) {
		InmueblesDao InmD = new InmueblesDao();
		Inmuebles Inm = new Inmuebles(0,nombre ,direccion ,telefono ,TipNeg);

		Conexion conexion = new Conexion();
		usuario.setId(this.id);
		Inm.getId();
		Inm.getINMNOM();
		Inm.getINMDIR();
		Inm.getINMTEL();
		Inm.getINMNEGOC();
		System.out.println(usuario.getId());
		InmD.consultarInmueble(id);
		

		}
"
4205,bcab2149-eded-4e0a-8d4a-e5aba55f8a2d,"	public int getId() {
		id=idn.getId();
		return id;
	}
"
4206,73291fb0-4ab3-42b4-8981-c5879bdfbd92,"	public void setId(int id) {
		this.id = id;
	}
"
4207,6c76324c-adaa-4650-8f3f-03e430fb603d,"	public String getidusuario() {
		return idusuario;
	}
"
4208,8c0fe5a0-f6e5-47d2-8fb7-52c5f3036f10,"	public String setidusuario(String idusuario) {
		return idusuario;
	}
"
4209,efc833ab-3c78-4967-b64a-4e51740252ef,"	public String getNombre() {
		return nombre;
	}
"
4210,f1e4e48b-7875-48a7-8cc3-1ccf2fd69c61,"	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
"
4211,b7654aee-dc1a-4e80-be60-ce61ee17cce0,"	public String getDireccion() {
		return direccion;
	}
"
4212,8ef291eb-4908-434e-afaf-d23457c3ff65,"	public void setDireccion(String direccion) {
		this.direccion = direccion;
	}
"
4213,c2bab656-b631-4945-8e80-ec9d4517eb86,"	public String getTelefono() {
		return telefono;
	}
"
4214,1be409cd-7910-4b0b-a426-167e3cec4ddb,"	public void setTelefono(String telefono) {
		this.telefono = telefono;
	}
"
4215,4874f236-d4e9-4e6a-a681-d4e9c6651653,"	public String getVentOArr() {
		return VentOArr;
	}
"
4216,c424d174-c7ec-4a7a-adda-e418470019a2,"	public void setVentOArr(String ventOArr) {
		VentOArr = ventOArr;
	}
"
4217,eaa95d7a-e8f7-42a5-b287-cb94a4e7cf96,"	public String getTipNeg() {
		return TipNeg;
	}
"
4218,ec14c7df-8a3e-43f5-b3f2-13954fdb1374,"	public void setTipNeg(String tipNeg) {
		TipNeg = tipNeg;
	}
"
4219,95b3ec44-1518-42c0-a7ea-1ef16b846e3f,"	public String getComments() {
		return Comments;
	}
"
4220,1bedfdc9-00f1-418f-8d19-37d68fad3346,"	public void setComments(String comments) {
		Comments = comments;
	}
"
4221,a2d9cd94-9974-443f-a7e9-54901e8a879b,"	public ArrayList<Inmuebles> getLista() {
		InmueblesDao inmuebledao = new InmueblesDao();
		
		lista = inmuebledao.consultarInmueble(idn.getId());
		return lista;
	}
"
4222,ebccde41-e5ea-4d25-a0e2-3d07a092ab1d,"	public void setLista(ArrayList<Inmuebles> lista) {
		
		this.lista = lista;
	}
"
4223,43bcd1c3-da21-4a50-8711-4a99db0768c6,"	public Usuario() {
		// TODO Auto-generated constructor stub
	}
"
4224,3547e930-d482-4a20-a438-7caefd9f949c,"	public int getId() {
		return id;
	}
"
4225,04ccb993-5b95-4f3f-ad4c-ac50428ea7ff,"	public void setId(int id) {
		this.id = id;
	}
"
4226,d554ed5c-2e70-43f9-9e2f-e25e68780471,"	public String getUsuario() {
		return usuario;
	}
"
4227,790f2a5d-5d26-4e3f-a30f-21819aacc3ff,"	public void setUsuario(String usuario) {
		this.usuario = usuario;
	}
"
4228,107136b6-f4e8-4b3c-8ca1-768357535b87,"	public String getPassword() {
		return password;
	}
"
4229,6fdd6ab6-abdd-4a7c-9c69-1013585045ff,"	public void setPassword(String password) {
		this.password = password;
	}
"
4230,28210653-b508-4008-86f5-fe8f97e01671,"	public String getNombres() {
		return nombres;
	}
"
4231,38703a97-96a6-4106-8126-35e488998251,"	public void setNombres(String nombres) {
		this.nombres = nombres;
	}
"
4232,6b909a20-25f5-4719-9b09-e2f760e491b1,"	public String getApellidos() {
		return apellidos;
	}
"
4233,0caaa0f5-0217-40f2-a463-0d276cb5225d,"	public void setApellidos(String apellidos) {
		this.apellidos = apellidos;
	}
"
4234,6751b73a-92e4-4794-b115-5e884a64615c,"	public String getEmail() {
		return email;
	}
"
4235,bd651264-5548-4a42-b9bc-7399c55b07f9,"	public void setEmail(String email) {
		this.email = email;
	}
"
4236,5cf04d78-63ae-497f-8e74-a27625dcb6f3,"	public boolean validarUsuario(Usuario usuario) {
		
		boolean resp = false;

		Conexion conexion = new Conexion();
		try {
			Connection con = conexion.getInstance().crearConexion();
			Statement st = con.createStatement();
			String sql = ""SELECT id,COUNT(1) FROM USUARIOS WHERE usuario = '""
					+ usuario.getUsuario() + ""' and password =""
					+ usuario.getPassword();
			ResultSet res = st.executeQuery(sql);
			if (res.next()) {
				
				int a = res.getInt(""id"");
				usuario.setId(a);
				if (res.getInt(1)!=0) {
					resp = true;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			conexion.cerrarConn();
		}
		return resp;

	}
"
4237,75211e37-dbc2-4974-989d-a98c2546b3c6,"	public void guardar(Usuario usuario) {
		Conexion conexion = new Conexion();
		try {
			Connection con = conexion.getInstance().crearConexion();
			Statement st = con.createStatement();

			String sql = ""INSERT INTO USUARIOS ( USUARIO, PASSWORD, NOMBRES, APELLIDOS, EMAIL) VALUES ('""
					+ usuario.getUsuario()
					+ ""','""
					+ usuario.getPassword()
					+ ""','""
					+ usuario.getNombres()
					+ ""','""
					+ usuario.getApellidos()
					+ ""','""
					+ usuario.getEmail()
					+ ""')"";

			st.executeUpdate(sql);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			conexion.getInstance().cerrarConn();
		}

	}
"
4238,a6909f41-d21c-4e2a-9a97-2b9a1935e886,"	public Inmuebles(int id, String b, String c, String d, String f) {
		this.id=id;
		this.INMNOM=b;
		this.INMDIR=c;
		this.INMTEL=d;
		this.INMNEGOC=f;	
	}
"
4239,4a102b01-11f6-4b43-bd80-a8ee2babacf4,"	public int getId() {
		return id;
	}
"
4240,313121a2-af72-4799-9446-834e72325e94,"	public void setId(int id) {
		this.id = id;
	}
"
4241,a8242ca9-e3bb-4ab7-accc-e4e873eadb84,"	public String getINMNOM() {
		return INMNOM;
	}
"
4242,22e3e317-9e45-4031-ba95-ec1b91056b84,"	public void setINMNOM(String iNMNOM) {
		INMNOM = iNMNOM;
	}
"
4243,7f8ccf51-a991-48c7-a71b-3138da6cb0d1,"	public String getINMTEL() {
		return INMTEL;
	}
"
4244,8db4b1f7-ba50-4645-9157-f5bd2844a2c4,"	public void setINMTEL(String iNMTEL) {
		INMTEL = iNMTEL;
	}
"
4245,12767a08-5e0d-420c-8ee9-5b70b56b9a87,"	public String getINMDIR() {
		return INMDIR;
	}
"
4246,465da66e-8466-4b89-bbca-bfccf4d84523,"	public void setINMDIR(String iNMDIR) {
		INMDIR = iNMDIR;
	}
"
4247,1c1c10c9-3988-473f-a473-27b39e47cb84,"	public String getINMVENOARR() {
		return INMVENOARR;
	}
"
4248,dfdc02d3-9218-4840-a47e-1ce17ee92e42,"	public void setINMVENOARR(String iNMVENOARR) {
		INMVENOARR = iNMVENOARR;
	}
"
4249,efb836d1-c62f-4362-848b-ccc90698986c,"	public String getINMNEGOC() {
		return INMNEGOC;
	}
"
4250,6572c45b-13ad-4508-8872-5b43f33ec1ed,"	public void setINMNEGOC(String iNMNEGOC) {
		INMNEGOC = iNMNEGOC;
	}
"
4251,4ad25b29-9052-46da-8e8b-f075a240f00f,"	public String getINCCOMMENTS() {
		return INCCOMMENTS;
	}
"
4252,58994445-1b0d-4d60-bac2-a000b1dafe71,"	public void setINCCOMMENTS(String iNCCOMMENTS) {
		INCCOMMENTS = iNCCOMMENTS;
	}
"
4253,2d0dd431-db6c-429b-8ee7-bd5ca267dbe2,"	public String getIdusuario() {
		return idusuario;
	}
"
4254,433b534b-6793-463c-9538-f1caff8d396b,"	public void setIdusuario(String idusuario) {
		this.idusuario = idusuario;
	}
"
4255,cf365276-f1a2-4615-a493-b3317e81799f,"	public Conexion() {
		crearConexion();
	}
"
4256,1c7ffd56-8946-4f11-87b9-24954b9dbc36,"	public Connection crearConexion() {

		try {
//			Properties propiedades = new Properties();
//			propiedades.load(new FileInputStream(
//					""/PersistenceResource.properties""));
//
//			this.bd = propiedades.getProperty(""bd"");
//			this.url = propiedades.getProperty(""url"");
//			this.pass = propiedades.getProperty(""pass"");
//			this.ususario = propiedades.getProperty(""usuario"");

			Class.forName(""com.mysql.jdbc.Driver"");
			conexion = DriverManager.getConnection(""jdbc:mysql://localhost/gerencia"",""root"", ""123456"");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return conexion;

	}
"
4257,9cb14fcb-4d78-4f97-b6c3-249e54c54e05,"	public void cerrarConn() {
		try {
			conexion.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
"
4258,6edb8070-6f64-4fa1-bdb7-008406b34751,"	public Conexion getInstance() {
		if (instance != null) {
			return instance;
		} else {
			return new Conexion();
		}

	}
"
4259,fbf873e8-4521-463f-ab46-16effe6818e0,"	public void crearInmueble(Inmuebles Inm, Conexion conexion) {
	
		try {
			
			
			Connection con = conexion.getInstance().crearConexion();
			Statement st = con.createStatement();
			String sql =""INSERT INTO  inmueble (nombre,direccion,telefono,estado,negocio,comentarios,id)""+"" VALUES(""+""'""+
			Inm.getINMNOM()+""',""
				+ ""'""+Inm.getINMDIR()+""',""
							+ ""'""+Inm.getINMTEL()+""',""
							+ ""'""+Inm.getINMVENOARR()
							+""','""+Inm.getINMNEGOC()+""'""
							+"",'""+Inm.getINCCOMMENTS()+""'""
							//+"",1);"";
							+"",""+idn.getId()+"");"";
			
			System.out.println(sql);
			st.executeUpdate(sql);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			conexion.getInstance().cerrarConn();
		}

	}
"
4260,4213c3fb-fca2-47b3-8a4a-4485141a2288,"	public ArrayList<Inmuebles> consultarInmueble(int id) {
		Conexion conexion = new Conexion();
		try {
			int a;
			String b;
			String c;
			String d;
			String f;
		

			Connection con = conexion.getInstance().crearConexion();
			Statement st = con.createStatement();
			//Statement comando = conexion.createStatement();
			String sql = ""SELECT idin,nombre,direccion,telefono,negocio FROM inmueble WHERE id=""+id+"";"";
					
			//+ Inm.getId();
			//""+usuario.getId()+""
			ResultSet resultado = st.executeQuery(sql);
			while (resultado.next()) {
				
				a = resultado.getInt(""idin"");
				b = resultado.getString(""nombre"");
				c = resultado.getString(""direccion"");
				d = resultado.getString(""telefono"");
				f = resultado.getString(""negocio"");

				//lista.add(a);
				//lista.add(b);
				//lista.add(c);
				//ista.add(d);
				//lista.add(f);
			            //Objeto del tipo Usuario
			          
				Inmuebles e = new Inmuebles(a,b,c,d,f);
			            lista.add(e);
			            
			            	for(int i = 0; i < lista.size(); i++) {
			                   // System.out.println(lista.get(i).getId());
			                   // System.out.println(lista.get(i).getINMNOM());
			                    //System.out.println(lista.get(i).getINMDIR());
			                    //System.out.println(lista.get(i).getINMTEL());
			                    //System.out.println(lista.get(i).getINMNEGOC());
			                    
			                }
			            
			    
			 
			        }
			
			
			// TODO: REALIZAR LA INSERCION EN LA BASE DE DATOS, ES DECIR USTED
			// DEBE PONER LA ESTRUCTURA DE INSERCION DE MYSQL QUE NOS BRINDA
			// JAVA, COMO LO HACE BUSQUE EN INTERNET COMO CREAR UN METODO DE
			// INSERCION EN MYSQL IMPORTANTE NO SE LE VA A PASAR LA CONEXION

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			conexion.getInstance().cerrarConn();
		}
		return lista;   
	}
"
4261,152e9795-d2fe-479f-abfd-cd25d36ed686,"    public JSONArray() {
        this.myArrayList = new ArrayList();
    }
"
4262,9fe74a54-8c23-4122-9507-0386312f3fb9,"    public JSONArray(JSONTokener x) throws JSONException {
        this();
        if (x.nextClean() != '[') {
            throw x.syntaxError(""A JSONArray text must start with '['"");
        }
        if (x.nextClean() != ']') {
            x.back();
            for (;;) {
                if (x.nextClean() == ',') {
                    x.back();
                    this.myArrayList.add(JSONObject.NULL);
                } else {
                    x.back();
                    this.myArrayList.add(x.nextValue());
                }
                switch (x.nextClean()) {
                    case ',':
                        if (x.nextClean() == ']') {
                            return;
                        }
                        x.back();
                        break;
                    case ']':
                        return;
                    default:
                        throw x.syntaxError(""Expected a ',' or ']'"");
                }
            }
        }
    }
"
4263,25c7eeb7-9f8f-4800-949d-63cca2540b40,"    public JSONArray(String source) throws JSONException {
        this(new JSONTokener(source));
    }
"
4264,73da02d4-f69f-4e9c-9ca5-2bca69f7d5df,"    public JSONArray(Collection collection) {
        this.myArrayList = new ArrayList();
        if (collection != null) {
            Iterator iter = collection.iterator();
            while (iter.hasNext()) {
                this.myArrayList.add(JSONObject.wrap(iter.next()));
            }
        }
    }
"
4265,9f3ab912-7453-4017-b811-4c116fd2012f,"    public JSONArray(Object array) throws JSONException {
        this();
        if (array.getClass().isArray()) {
            int length = Array.getLength(array);
            for (int i = 0; i < length; i += 1) {
                this.put(JSONObject.wrap(Array.get(array, i)));
            }
        } else {
            throw new JSONException(""JSONArray initial value should be a string or collection or array."");
        }
    }
"
4266,b4fa4b9a-30c8-48f1-8ebe-8314bfc9833f,"    public Object get(int index) throws JSONException {
        Object object = this.opt(index);
        if (object == null) {
            throw new JSONException(""JSONArray["" + index + ""] not found."");
        }
        return object;
    }
"
4267,6a8c327f-c5a3-40cd-b731-2fe8eb4e3180,"    public boolean getBoolean(int index) throws JSONException {
        Object object = this.get(index);
        if (object.equals(Boolean.FALSE)
                || (object instanceof String && ((String) object)
                .equalsIgnoreCase(""false""))) {
            return false;
        } else if (object.equals(Boolean.TRUE)
                || (object instanceof String && ((String) object)
                .equalsIgnoreCase(""true""))) {
            return true;
        }
        throw new JSONException(""JSONArray["" + index + ""] is not a boolean."");
    }
"
4268,e0f436c9-bbbb-4aed-b197-7057c087cd2f,"    public double getDouble(int index) throws JSONException {
        Object object = this.get(index);
        try {
            return object instanceof Number ? ((Number) object).doubleValue()
                    : Double.parseDouble((String) object);
        } catch (NumberFormatException e) {
            throw new JSONException(""JSONArray["" + index + ""] is not a number."");
        }
    }
"
4269,b6ba7d6e-e839-4a1a-84fa-f97a494f3acf,"    public int getInt(int index) throws JSONException {
        Object object = this.get(index);
        try {
            return object instanceof Number ? ((Number) object).intValue()
                    : Integer.parseInt((String) object);
        } catch (NumberFormatException e) {
            throw new JSONException(""JSONArray["" + index + ""] is not a number."");
        }
    }
"
4270,74402174-c624-4cd1-bcc7-e5de4134347c,"    public JSONArray getJSONArray(int index) throws JSONException {
        Object object = this.get(index);
        if (object instanceof JSONArray) {
            return (JSONArray) object;
        }
        throw new JSONException(""JSONArray["" + index + ""] is not a JSONArray."");
    }
"
4271,fa881d93-5827-4542-a143-1fb0c1f707ae,"    public JSONObject getJSONObject(int index) throws JSONException {
        Object object = this.get(index);
        if (object instanceof JSONObject) {
            return (JSONObject) object;
        }
        throw new JSONException(""JSONArray["" + index + ""] is not a JSONObject."");
    }
"
4272,623c26ef-bd17-4190-9e3a-f5b96eaf3ab4,"    public long getLong(int index) throws JSONException {
        Object object = this.get(index);
        try {
            return object instanceof Number ? ((Number) object).longValue()
                    : Long.parseLong((String) object);
        } catch (NumberFormatException e) {
            throw new JSONException(""JSONArray["" + index + ""] is not a number."");
        }
    }
"
4273,f039b1ee-7a50-458d-8469-a5942d0064f8,"    public byte getByte(int index) throws JSONException {
        Object object = this.get(index);
        try {
            return object instanceof Number ? ((Number) object).byteValue()
                    : Byte.parseByte((String) object);
        } catch (NumberFormatException e) {
            throw new JSONException(""JSONArray["" + index + ""] is not a number."");
        }
    }
"
4274,213882cc-558c-4958-8601-cc71ee931304,"    public String getString(int index) throws JSONException {
        Object object = this.get(index);
        if (object instanceof String) {
            return (String) object;
        }
        throw new JSONException(""JSONArray["" + index + ""] not a string."");
    }
"
4275,0aa91b5d-ecc6-4aa8-ae26-cec7f189a37d,"    public boolean isNull(int index) {
        return JSONObject.NULL.equals(this.opt(index));
    }
"
4276,db7997ab-72bd-41f0-b7fd-9a8bd6c997b7,"    public String join(String separator) throws JSONException {
        int len = this.length();
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < len; i += 1) {
            if (i > 0) {
                sb.append(separator);
            }
            sb.append(JSONObject.valueToString(this.myArrayList.get(i)));
        }
        return sb.toString();
    }
"
4277,1cc59786-0dcc-47f1-a811-9e4597ca5506,"    public int length() {
        return this.myArrayList.size();
    }
"
4278,b483823e-8efa-4f75-b6f1-ef9f1ac2cd43,"    public Object opt(int index) {
        return (index < 0 || index >= this.length()) ? null : this.myArrayList
                .get(index);
    }
"
4279,334735cd-0ea1-41d5-aa13-b271b2b47ac4,"    public boolean optBoolean(int index) {
        return this.optBoolean(index, false);
    }
"
4280,e7f7830e-fc01-4ced-9851-d90c6df61490,"    public boolean optBoolean(int index, boolean defaultValue) {
        try {
            return this.getBoolean(index);
        } catch (JSONException e) {
            return defaultValue;
        }
    }
"
4281,895eb41d-546b-48be-8430-e33cfbde04c9,"    public double optDouble(int index) {
        return this.optDouble(index, Double.NaN);
    }
"
4282,7e9ca591-43c9-47d2-94d8-3f9d656c92fc,"    public double optDouble(int index, double defaultValue) {
        try {
            return this.getDouble(index);
        } catch (JSONException e) {
            return defaultValue;
        }
    }
"
4283,407b14de-e96c-403d-9258-6b8c767fad9e,"    public int optInt(int index) {
        return this.optInt(index, 0);
    }
"
4284,7dd92e9b-5fba-4a0f-82b2-7f24a237f079,"    public int optInt(int index, int defaultValue) {
        try {
            return this.getInt(index);
        } catch (JSONException e) {
            return defaultValue;
        }
    }
"
4285,9a4586a5-b542-426f-8460-85ef7517f9d9,"    public JSONArray optJSONArray(int index) {
        Object o = this.opt(index);
        return o instanceof JSONArray ? (JSONArray) o : null;
    }
"
4286,fd6dbcb8-5cab-426a-ad75-d366d0d7cbc0,"    public JSONObject optJSONObject(int index) {
        Object o = this.opt(index);
        return o instanceof JSONObject ? (JSONObject) o : null;
    }
"
4287,2d06136b-3036-4122-bf62-7b70eda1d9ff,"    public long optLong(int index) {
        return this.optLong(index, 0);
    }
"
4288,5a18574e-0f01-464d-baf2-0d514a9406e9,"    public long optLong(int index, long defaultValue) {
        try {
            return this.getLong(index);
        } catch (JSONException e) {
            return defaultValue;
        }
    }
"
4289,39436667-fed1-417b-8ba5-f67a9cedc320,"    public String optString(int index) {
        return this.optString(index, """");
    }
"
4290,8c534ef2-7f1a-443a-841a-08db40a52782,"    public String optString(int index, String defaultValue) {
        Object object = this.opt(index);
        return JSONObject.NULL.equals(object) ? defaultValue : object
                .toString();
    }
"
4291,4f9f717f-6669-46f0-b361-eff5d7f4928c,"    public JSONArray put(boolean value) {
        this.put(value ? Boolean.TRUE : Boolean.FALSE);
        return this;
    }
"
4292,2e43c40a-54f8-4315-bde2-268f598076f3,"    public JSONArray put(Collection value) {
        this.put(new JSONArray(value));
        return this;
    }
"
4293,127759cb-adaa-491a-b87e-a24a619ed9a9,"    public JSONArray put(double value) throws JSONException {
        Double d = new Double(value);
        JSONObject.testValidity(d);
        this.put(d);
        return this;
    }
"
4294,41489fc9-cc6f-4555-b978-86e039bf0bc0,"    public JSONArray put(int value) {
        this.put(new Integer(value));
        return this;
    }
"
4295,ba0ead3a-4db7-46b1-bc03-9fd49d632bde,"    public JSONArray put(long value) {
        this.put(new Long(value));
        return this;
    }
"
4296,5e5d6d18-654d-4883-9acc-a917b5874d87,"    public JSONArray put(Map value) {
        this.put(new JSONObject(value));
        return this;
    }
"
4297,d32c982a-165e-4aa5-bd42-903b15b719c1,"    public JSONArray put(Object value) {
        this.myArrayList.add(value);
        return this;
    }
"
4298,59eb20b2-271d-4b8a-ba49-ec902996e8d5,"    public JSONArray put(int index, boolean value) throws JSONException {
        this.put(index, value ? Boolean.TRUE : Boolean.FALSE);
        return this;
    }
"
4299,bf344abf-c63b-47a9-9dd5-6e98304d143a,"    public JSONArray put(int index, Collection value) throws JSONException {
        this.put(index, new JSONArray(value));
        return this;
    }
"
4300,fae33cf4-6bf7-4ef2-acba-c2922cae8c2b,"    public JSONArray put(int index, double value) throws JSONException {
        this.put(index, new Double(value));
        return this;
    }
"
4301,9e199f99-d630-4d0d-aaea-774713f64699,"    public JSONArray put(int index, int value) throws JSONException {
        this.put(index, new Integer(value));
        return this;
    }
"
4302,22df095e-c2d1-487a-9c88-be86f6de1ca7,"    public JSONArray put(int index, long value) throws JSONException {
        this.put(index, new Long(value));
        return this;
    }
"
4303,0731a835-90bb-4a75-b581-82850e561cc7,"    public JSONArray put(int index, Map value) throws JSONException {
        this.put(index, new JSONObject(value));
        return this;
    }
"
4304,814c75bb-045c-49b4-9ded-6179a0c81804,"    public JSONArray put(int index, Object value) throws JSONException {
        JSONObject.testValidity(value);
        if (index < 0) {
            throw new JSONException(""JSONArray["" + index + ""] not found."");
        }
        if (index < this.length()) {
            this.myArrayList.set(index, value);
        } else {
            while (index != this.length()) {
                this.put(JSONObject.NULL);
            }
            this.put(value);
        }
        return this;
    }
"
4305,b4469f06-6bf5-467f-814f-7a7e5af3aac4,"    public Object remove(int index) {
        Object o = this.opt(index);
        this.myArrayList.remove(index);
        return o;
    }
"
4306,5ec3e982-ad82-4145-b008-b0128ca2a7ee,"    public JSONObject toJSONObject(JSONArray names) throws JSONException {
        if (names == null || names.length() == 0 || this.length() == 0) {
            return null;
        }
        JSONObject jo = new JSONObject();
        for (int i = 0; i < names.length(); i += 1) {
            jo.put(names.getString(i), this.opt(i));
        }
        return jo;
    }
"
4307,5d87b038-c9c4-41b6-8cbb-3df4038d52cd,"    @Override
    public String toString() {
        try {
            return this.toString(0);
        } catch (JSONException e) {
            return null;
        }
    }
"
4308,be283f70-c1b9-41dd-a825-2912e345d40c,"    public String toString(int indentFactor) throws JSONException {
        StringWriter sw = new StringWriter();
        synchronized (sw.getBuffer()) {
            return this.write(sw, indentFactor, 0).toString();
        }
    }
"
4309,d61c45b2-14d6-4469-89f3-1f0b412c3ea5,"    public Writer write(Writer writer) throws JSONException {
        return this.write(writer, 0, 0);
    }
"
4310,954c78df-66fe-4c06-85c5-63aa74867691,"    Writer write(Writer writer, int indentFactor, int indent)
            throws JSONException {
        try {
            boolean commanate = false;
            int length = this.length();
            writer.write('[');

            if (length == 1) {
                JSONObject.writeValue(writer, this.myArrayList.get(0),
                        indentFactor, indent);
            } else if (length != 0) {
                final int newindent = indent + indentFactor;

                for (int i = 0; i < length; i += 1) {
                    if (commanate) {
                        writer.write(',');
                    }
                    if (indentFactor > 0) {
                        writer.write('\n');
                    }
                    JSONObject.indent(writer, newindent);
                    JSONObject.writeValue(writer, this.myArrayList.get(i),
                            indentFactor, newindent);
                    commanate = true;
                }
                if (indentFactor > 0) {
                    writer.write('\n');
                }
                JSONObject.indent(writer, indent);
            }
            writer.write(']');
            return writer;
        } catch (IOException e) {
            throw new JSONException(e);
        }
    }
"
4311,5c8c935e-e665-46c0-81df-f7e14a1a08bf,"    public String toJSONString();
"
4312,c61cee3d-e0a3-4940-af27-6fa52e35bebc,"    public JSONException(String message) {
        super(message);
    }
"
4313,0ae6cab4-8cb3-4283-b98d-63142ff92bc8,"    public JSONException(Throwable cause) {
        super(cause.getMessage());
        this.cause = cause;
    }
"
4314,a63e5128-042d-4664-872e-19eed52cfdfd,"    @Override
    public Throwable getCause() {
        return this.cause;
    }
"
4315,a71a9ed8-4a93-440e-817e-ae8c114280fc,"        protected final Object clone() {
            return this;
        }
"
4316,735e5e1f-8a86-4cb1-bfcb-805819a1cb90,"        public boolean equals(Object object) {
            return object == null || object == this;
        }
"
4317,083bce1b-4810-4216-ba12-86c483eeb663,"        public String toString() {
            return ""null"";
        }
"
4318,41bb3482-384e-40ed-bb35-0336035767be,"    public JSONObject() {
        this.map = new HashMap();
    }
"
4319,6a5b3ee7-2e13-43e6-9c75-01714d882aaf,"    public JSONObject(JSONObject jo, String[] names) {
        this();
        for (int i = 0; i < names.length; i += 1) {
            try {
                this.putOnce(names[i], jo.opt(names[i]));
            } catch (Exception ignore) {
            }
        }
    }
"
4320,9e703702-877a-4df3-a52c-a4fb0c5207ce,"    public JSONObject(JSONTokener x) throws JSONException {
        this();
        char c;
        String key;

        if (x.nextClean() != '{') {
            throw x.syntaxError(""A JSONObject text must begin with '{'"");
        }
        for (;;) {
            c = x.nextClean();
            switch (c) {
                case 0:
                    throw x.syntaxError(""A JSONObject text must end with '}'"");
                case '}':
                    return;
                default:
                    x.back();
                    key = x.nextValue().toString();
            }

// The key is followed by ':'.
            c = x.nextClean();
            if (c != ':') {
                throw x.syntaxError(""Expected a ':' after a key"");
            }
            this.putOnce(key, x.nextValue());

// Pairs are separated by ','.
            switch (x.nextClean()) {
                case ';':
                case ',':
                    if (x.nextClean() == '}') {
                        return;
                    }
                    x.back();
                    break;
                case '}':
                    return;
                default:
                    throw x.syntaxError(""Expected a ',' or '}'"");
            }
        }
    }
"
4321,40b4caca-d0bc-4818-a4e5-e98f80f26d46,"    public JSONObject(Map map) {
        this.map = new HashMap();
        if (map != null) {
            Iterator i = map.entrySet().iterator();
            while (i.hasNext()) {
                Map.Entry e = (Map.Entry) i.next();
                Object value = e.getValue();
                if (value != null) {
                    this.map.put(e.getKey(), wrap(value));
                }
            }
        }
    }
"
4322,e0cb3d2d-480a-4091-a2df-50c5439fe318,"    public JSONObject(Object bean) {
        this();
        this.populateMap(bean);
    }
"
4323,06e880fc-9cb8-43c2-9191-0a5b16945383,"    public JSONObject(Object object, String names[]) {
        this();
        Class c = object.getClass();
        for (int i = 0; i < names.length; i += 1) {
            String name = names[i];
            try {
                this.putOpt(name, c.getField(name).get(object));
            } catch (Exception ignore) {
            }
        }
    }
"
4324,6270d167-181a-4fde-b436-06f0e7c3bc29,"    public JSONObject(String source) throws JSONException {
        this(new JSONTokener(source));
    }
"
4325,71ccc9c6-7149-4f34-8906-33c25e5196e6,"    public JSONObject(String baseName, Locale locale) throws JSONException {
        this();
        ResourceBundle bundle = ResourceBundle.getBundle(baseName, locale,
                Thread.currentThread().getContextClassLoader());

// Iterate through the keys in the bundle.
        Enumeration keys = bundle.getKeys();
        while (keys.hasMoreElements()) {
            Object key = keys.nextElement();
            if (key instanceof String) {

// Go through the path, ensuring that there is a nested JSONObject for each
// segment except the last. Add the value using the last segment's name into
// the deepest nested JSONObject.
                String[] path = ((String) key).split(""\\."");
                int last = path.length - 1;
                JSONObject target = this;
                for (int i = 0; i < last; i += 1) {
                    String segment = path[i];
                    JSONObject nextTarget = target.optJSONObject(segment);
                    if (nextTarget == null) {
                        nextTarget = new JSONObject();
                        target.put(segment, nextTarget);
                    }
                    target = nextTarget;
                }
                target.put(path[last], bundle.getString((String) key));
            }
        }
    }
"
4326,1566eb70-045b-49a7-ba01-3abbe70332f0,"    public JSONObject accumulate(String key, Object value) throws JSONException {
        testValidity(value);
        Object object = this.opt(key);
        if (object == null) {
            this.put(key,
                    value instanceof JSONArray ? new JSONArray().put(value)
                    : value);
        } else if (object instanceof JSONArray) {
            ((JSONArray) object).put(value);
        } else {
            this.put(key, new JSONArray().put(object).put(value));
        }
        return this;
    }
"
4327,09120ecb-05b8-44f4-a1d0-fc6254487f18,"    public JSONObject append(String key, Object value) throws JSONException {
        testValidity(value);
        Object object = this.opt(key);
        if (object == null) {
            this.put(key, new JSONArray().put(value));
        } else if (object instanceof JSONArray) {
            this.put(key, ((JSONArray) object).put(value));
        } else {
            throw new JSONException(""JSONObject["" + key
                    + ""] is not a JSONArray."");
        }
        return this;
    }
"
4328,9215e6fe-79c4-45f7-beae-c3e77fafab7a,"    public static String doubleToString(double d) {
        if (Double.isInfinite(d) || Double.isNaN(d)) {
            return ""null"";
        }

// Shave off trailing zeros and decimal point, if possible.
        String string = Double.toString(d);
        if (string.indexOf('.') > 0 && string.indexOf('e') < 0
                && string.indexOf('E') < 0) {
            while (string.endsWith(""0"")) {
                string = string.substring(0, string.length() - 1);
            }
            if (string.endsWith(""."")) {
                string = string.substring(0, string.length() - 1);
            }
        }
        return string;
    }
"
4329,a37c0cf7-5467-42ea-b16a-c2c96f288267,"    public Object get(String key) throws JSONException {
        if (key == null) {
            throw new JSONException(""Null key."");
        }
        Object object = this.opt(key);
        if (object == null) {
            throw new JSONException(""JSONObject["" + quote(key) + ""] not found."");
        }
        return object;
    }
"
4330,e5bfffdd-5604-4869-b29b-ccbeb03cc45e,"    public boolean getBoolean(String key) throws JSONException {
        Object object = this.get(key);
        if (object.equals(Boolean.FALSE)
                || (object instanceof String && ((String) object)
                .equalsIgnoreCase(""false""))) {
            return false;
        } else if (object.equals(Boolean.TRUE)
                || (object instanceof String && ((String) object)
                .equalsIgnoreCase(""true""))) {
            return true;
        }
        throw new JSONException(""JSONObject["" + quote(key)
                + ""] is not a Boolean."");
    }
"
4331,568618c0-d892-4b78-90d8-a5dd487b48ab,"    public double getDouble(String key) throws JSONException {
        Object object = this.get(key);
        try {
            return object instanceof Number ? ((Number) object).doubleValue()
                    : Double.parseDouble((String) object);
        } catch (NumberFormatException e) {
            throw new JSONException(""JSONObject["" + quote(key)
                    + ""] is not a number."");
        }
    }
"
4332,14211203-7cd4-4af4-a0c7-2311f0755c0f,"    public int getInt(String key) throws JSONException {
        Object object = this.get(key);
        try {
            return object instanceof Number ? ((Number) object).intValue()
                    : Integer.parseInt((String) object);
        } catch (NumberFormatException e) {
            throw new JSONException(""JSONObject["" + quote(key)
                    + ""] is not an int."");
        }
    }
"
4333,1dab7a33-7e42-442f-9481-db0ebc1bb104,"    public JSONArray getJSONArray(String key) throws JSONException {
        Object object = this.get(key);
        if (object instanceof JSONArray) {
            return (JSONArray) object;
        }
        throw new JSONException(""JSONObject["" + quote(key)
                + ""] is not a JSONArray."");
    }
"
4334,9d9620ce-8989-4a1f-b756-f21bd18a2e02,"    public JSONObject getJSONObject(String key) throws JSONException {
        Object object = this.get(key);
        if (object instanceof JSONObject) {
            return (JSONObject) object;
        }
        throw new JSONException(""JSONObject["" + quote(key)
                + ""] is not a JSONObject."");
    }
"
4335,c88dcb9e-7e91-4a8a-8ca8-9730c2333960,"    public long getLong(String key) throws JSONException {
        Object object = this.get(key);
        try {
            return object instanceof Number ? ((Number) object).longValue()
                    : Long.parseLong((String) object);
        } catch (NumberFormatException e) {
            throw new JSONException(""JSONObject["" + quote(key)
                    + ""] is not a long."");
        }
    }
"
4336,5b9de1b6-3a2c-4ab4-b33f-9f12937c62a8,"    public static String[] getNames(JSONObject jo) {
        int length = jo.length();
        if (length == 0) {
            return null;
        }
        Iterator iterator = jo.keys();
        String[] names = new String[length];
        int i = 0;
        while (iterator.hasNext()) {
            names[i] = (String) iterator.next();
            i += 1;
        }
        return names;
    }
"
4337,a58f302c-03da-47b8-8746-7553e7179249,"    public static String[] getNames(Object object) {
        if (object == null) {
            return null;
        }
        Class klass = object.getClass();
        Field[] fields = klass.getFields();
        int length = fields.length;
        if (length == 0) {
            return null;
        }
        String[] names = new String[length];
        for (int i = 0; i < length; i += 1) {
            names[i] = fields[i].getName();
        }
        return names;
    }
"
4338,fac9e043-f8f1-45d6-a3ed-abbd8df2eb4e,"    public String getString(String key) throws JSONException {
        Object object = this.get(key);
        if (object instanceof String) {
            return (String) object;
        }
        throw new JSONException(""JSONObject["" + quote(key) + ""] not a string."");
    }
"
4339,3b1bf09b-1f1d-41f5-a184-b3429a8e2c00,"    public boolean has(String key) {
        return this.map.containsKey(key);
    }
"
4340,6d637764-40eb-4343-85f4-6718896ce225,"    public JSONObject increment(String key) throws JSONException {
        Object value = this.opt(key);
        if (value == null) {
            this.put(key, 1);
        } else if (value instanceof Integer) {
            this.put(key, ((Integer) value).intValue() + 1);
        } else if (value instanceof Long) {
            this.put(key, ((Long) value).longValue() + 1);
        } else if (value instanceof Double) {
            this.put(key, ((Double) value).doubleValue() + 1);
        } else if (value instanceof Float) {
            this.put(key, ((Float) value).floatValue() + 1);
        } else {
            throw new JSONException(""Unable to increment ["" + quote(key) + ""]."");
        }
        return this;
    }
"
4341,6c45fe1d-c0c4-4a90-b83b-e6de9fbf2da7,"    public boolean isNull(String key) {
        return JSONObject.NULL.equals(this.opt(key));
    }
"
4342,b7e0504a-f7df-4f4d-878e-1ef9d02ff3ed,"    public Iterator keys() {
        return this.keySet().iterator();
    }
"
4343,974d4c3f-dabb-418c-bdb4-967d5e1189cd,"    public Set keySet() {
        return this.map.keySet();
    }
"
4344,dc4e21ae-3a25-4a17-91b1-2ee3a84322a2,"    public int length() {
        return this.map.size();
    }
"
4345,bd3dbfbf-59d6-4983-9683-eb39778306df,"    public JSONArray names() {
        JSONArray ja = new JSONArray();
        Iterator keys = this.keys();
        while (keys.hasNext()) {
            ja.put(keys.next());
        }
        return ja.length() == 0 ? null : ja;
    }
"
4346,a76b4b02-b598-4359-9d62-6e57da49b3ad,"    public static String numberToString(Number number) throws JSONException {
        if (number == null) {
            throw new JSONException(""Null pointer"");
        }
        testValidity(number);

// Shave off trailing zeros and decimal point, if possible.
        String string = number.toString();
        if (string.indexOf('.') > 0 && string.indexOf('e') < 0
                && string.indexOf('E') < 0) {
            while (string.endsWith(""0"")) {
                string = string.substring(0, string.length() - 1);
            }
            if (string.endsWith(""."")) {
                string = string.substring(0, string.length() - 1);
            }
        }
        return string;
    }
"
4347,b1c4d996-907c-485b-a54a-ad41f089a861,"    public Object opt(String key) {
        return key == null ? null : this.map.get(key);
    }
"
4348,c066f093-ad67-4c3b-b43d-33c6cc6b7764,"    public boolean optBoolean(String key) {
        return this.optBoolean(key, false);
    }
"
4349,6ea2b996-76af-489c-84f6-695c9168de59,"    public boolean optBoolean(String key, boolean defaultValue) {
        try {
            return this.getBoolean(key);
        } catch (JSONException e) {
            return defaultValue;
        }
    }
"
4350,6a379067-7a06-4cb5-b3ac-8004de1a38c5,"    public double optDouble(String key) {
        return this.optDouble(key, Double.NaN);
    }
"
4351,c04dd520-1ff3-41e3-b086-06274c7b5074,"    public double optDouble(String key, double defaultValue) {
        try {
            return this.getDouble(key);
        } catch (JSONException e) {
            return defaultValue;
        }
    }
"
4352,b476e37d-d144-44ff-82c7-af6933a7dbb3,"    public int optInt(String key) {
        return this.optInt(key, 0);
    }
"
4353,766a804a-7132-4d00-80f9-63f2deacb971,"    public int optInt(String key, int defaultValue) {
        try {
            return this.getInt(key);
        } catch (JSONException e) {
            return defaultValue;
        }
    }
"
4354,af91c980-1427-4239-8497-ed4bc90b09eb,"    public JSONArray optJSONArray(String key) {
        Object o = this.opt(key);
        return o instanceof JSONArray ? (JSONArray) o : null;
    }
"
4355,1902d617-92b3-4484-b666-e75f86591989,"    public JSONObject optJSONObject(String key) {
        Object object = this.opt(key);
        return object instanceof JSONObject ? (JSONObject) object : null;
    }
"
4356,17482782-b6d2-4d45-ba95-9ac9b51b2377,"    public long optLong(String key) {
        return this.optLong(key, 0);
    }
"
4357,5ce5a260-c7b0-4cbc-8905-959c0fc15362,"    public long optLong(String key, long defaultValue) {
        try {
            return this.getLong(key);
        } catch (JSONException e) {
            return defaultValue;
        }
    }
"
4358,5392b556-b695-460f-b29f-1a16d27f1c6c,"    public String optString(String key) {
        return this.optString(key, """");
    }
"
4359,37f30cfd-5e37-4ba8-83e3-fff0488c1598,"    public String optString(String key, String defaultValue) {
        Object object = this.opt(key);
        return NULL.equals(object) ? defaultValue : object.toString();
    }
"
4360,800b873b-318e-4452-9a2c-3d9f7947dc5c,"    private void populateMap(Object bean) {
        Class klass = bean.getClass();

// If klass is a System class then set includeSuperClass to false.
        boolean includeSuperClass = klass.getClassLoader() != null;

        Method[] methods = includeSuperClass ? klass.getMethods() : klass
                .getDeclaredMethods();
        for (int i = 0; i < methods.length; i += 1) {
            try {
                Method method = methods[i];
                if (Modifier.isPublic(method.getModifiers())) {
                    String name = method.getName();
                    String key = """";
                    if (name.startsWith(""get"")) {
                        if (""getClass"".equals(name)
                                || ""getDeclaringClass"".equals(name)) {
                            key = """";
                        } else {
                            key = name.substring(3);
                        }
                    } else if (name.startsWith(""is"")) {
                        key = name.substring(2);
                    }
                    if (key.length() > 0
                            && Character.isUpperCase(key.charAt(0))
                            && method.getParameterTypes().length == 0) {
                        if (key.length() == 1) {
                            key = key.toLowerCase();
                        } else if (!Character.isUpperCase(key.charAt(1))) {
                            key = key.substring(0, 1).toLowerCase()
                                    + key.substring(1);
                        }

                        Object result = method.invoke(bean, (Object[]) null);
                        if (result != null) {
                            this.map.put(key, wrap(result));
                        }
                    }
                }
            } catch (Exception ignore) {
            }
        }
    }
"
4361,3b46ec8e-c31f-4183-9ac5-148ca694f48a,"    public JSONObject put(String key, boolean value) throws JSONException {
        this.put(key, value ? Boolean.TRUE : Boolean.FALSE);
        return this;
    }
"
4362,1d700ff8-935a-4f6f-9782-39f95610d5db,"    public JSONObject put(String key, Collection value) throws JSONException {
        this.put(key, new JSONArray(value));
        return this;
    }
"
4363,88a7d754-daf3-4f39-97db-73211359d7cf,"    public JSONObject put(String key, double value) throws JSONException {
        this.put(key, new Double(value));
        return this;
    }
"
4364,19f97679-d38a-4d13-8cf3-bc1707d9db85,"    public JSONObject put(String key, int value) throws JSONException {
        this.put(key, new Integer(value));
        return this;
    }
"
4365,e648a882-9e56-45cc-b897-5041310f07fa,"    public JSONObject put(String key, long value) throws JSONException {
        this.put(key, new Long(value));
        return this;
    }
"
4366,9e68acec-1853-45ba-9dbd-8aa45529f978,"    public JSONObject put(String key, Map value) throws JSONException {
        this.put(key, new JSONObject(value));
        return this;
    }
"
4367,c06eb089-06aa-43ab-b108-d16a7d2f6c76,"    public JSONObject put(String key, Object value) throws JSONException {
        String pooled;
        if (key == null) {
            throw new NullPointerException(""Null key."");
        }
        if (value != null) {
            testValidity(value);
            pooled = (String) keyPool.get(key);
            if (pooled == null) {
                if (keyPool.size() >= keyPoolSize) {
                    keyPool = new HashMap(keyPoolSize);
                }
                keyPool.put(key, key);
            } else {
                key = pooled;
            }
            this.map.put(key, value);
        } else {
            this.remove(key);
        }
        return this;
    }
"
4368,6f0aa6e6-4114-4a19-b718-66a211af3967,"    public JSONObject putOnce(String key, Object value) throws JSONException {
        if (key != null && value != null) {
            if (this.opt(key) != null) {
                throw new JSONException(""Duplicate key \"""" + key + ""\"""");
            }
            this.put(key, value);
        }
        return this;
    }
"
4369,cf35a895-75fa-4f73-9385-ae3fd96e9e05,"    public JSONObject putOpt(String key, Object value) throws JSONException {
        if (key != null && value != null) {
            this.put(key, value);
        }
        return this;
    }
"
4370,622a922c-159a-4405-8f64-3f60f51ef6ef,"    public static String quote(String string) {
        StringWriter sw = new StringWriter();
        synchronized (sw.getBuffer()) {
            try {
                return quote(string, sw).toString();
            } catch (IOException ignored) {
                // will never happen - we are writing to a string writer
                return """";
            }
        }
    }
"
4371,d9a5df0b-403b-4625-9c87-5e5f241703e6,"    public static Writer quote(String string, Writer w) throws IOException {
        if (string == null || string.length() == 0) {
            w.write(""\""\"""");
            return w;
        }

        char b;
        char c = 0;
        String hhhh;
        int i;
        int len = string.length();

        w.write('""');
        for (i = 0; i < len; i += 1) {
            b = c;
            c = string.charAt(i);
            switch (c) {
                case '\\':
                case '""':
                    w.write('\\');
                    w.write(c);
                    break;
                case '/':
                    if (b == '<') {
                        w.write('\\');
                    }
                    w.write(c);
                    break;
                case '\b':
                    w.write(""\\b"");
                    break;
                case '\t':
                    w.write(""\\t"");
                    break;
                case '\n':
                    w.write(""\\n"");
                    break;
                case '\f':
                    w.write(""\\f"");
                    break;
                case '\r':
                    w.write(""\\r"");
                    break;
                default:
                    if (c < ' ' || (c >= '\u0080' && c < '\u00a0')
                            || (c >= '\u2000' && c < '\u2100')) {
                        w.write(""\\u"");
                        hhhh = Integer.toHexString(c);
                        w.write(""0000"", 0, 4 - hhhh.length());
                        w.write(hhhh);
                    } else {
                        w.write(c);
                    }
            }
        }
        w.write('""');
        return w;
    }
"
4372,b51c61ee-af57-4426-911f-84b9d728104d,"    public Object remove(String key) {
        return this.map.remove(key);
    }
"
4373,e6120de0-5030-42c7-ab1a-9e3221c2465c,"    public static Object stringToValue(String string) {
        Double d;
        if (string.equals("""")) {
            return string;
        }
        if (string.equalsIgnoreCase(""true"")) {
            return Boolean.TRUE;
        }
        if (string.equalsIgnoreCase(""false"")) {
            return Boolean.FALSE;
        }
        if (string.equalsIgnoreCase(""null"")) {
            return JSONObject.NULL;
        }

        /*
         * If it might be a number, try converting it. If a number cannot be
         * produced, then the value will just be a string.
         */
        char b = string.charAt(0);
        if ((b >= '0' && b <= '9') || b == '-') {
            try {
                if (string.indexOf('.') > -1 || string.indexOf('e') > -1
                        || string.indexOf('E') > -1) {
                    d = Double.valueOf(string);
                    if (!d.isInfinite() && !d.isNaN()) {
                        return d;
                    }
                } else {
                    Long myLong = new Long(string);
                    if (string.equals(myLong.toString())) {
                        if (myLong.longValue() == myLong.intValue()) {
                            return new Integer(myLong.intValue());
                        } else {
                            return myLong;
                        }
                    }
                }
            } catch (NumberFormatException ignore) {
            }
        }
        return string;
    }
"
4374,9cd39fff-5709-4bfc-9d7e-6a9fa2afee6f,"    public static void testValidity(Object o) throws JSONException {
        if (o != null) {
            if (o instanceof Double) {
                if (((Double) o).isInfinite() || ((Double) o).isNaN()) {
                    throw new JSONException(
                            ""JSON does not allow non-finite numbers."");
                }
            } else if (o instanceof Float) {
                if (((Float) o).isInfinite() || ((Float) o).isNaN()) {
                    throw new JSONException(
                            ""JSON does not allow non-finite numbers."");
                }
            }
        }
    }
"
4375,2cd9278f-dad8-4eaa-85fe-41579a6c2071,"    public JSONArray toJSONArray(JSONArray names) throws JSONException {
        if (names == null || names.length() == 0) {
            return null;
        }
        JSONArray ja = new JSONArray();
        for (int i = 0; i < names.length(); i += 1) {
            ja.put(this.opt(names.getString(i)));
        }
        return ja;
    }
"
4376,5754d09a-bbf3-4b5e-990d-888815b2c111,"    public String toString() {
        try {
            return this.toString(0);
        } catch (JSONException e) {
            return null;
        }
    }
"
4377,c147b3b8-5e27-412d-9051-ed1466b577f7,"    public String toString(int indentFactor) throws JSONException {
        StringWriter w = new StringWriter();
        synchronized (w.getBuffer()) {
            return this.write(w, indentFactor, 0).toString();
        }
    }
"
4378,92f3527e-6db0-4eb2-bca8-9227d8b3df4d,"    public static String valueToString(Object value) throws JSONException {
        if (value == null || value.equals(null)) {
            return ""null"";
        }
        if (value instanceof JSONString) {
            Object object;
            try {
                object = ((JSONString) value).toJSONString();
            } catch (Exception e) {
                throw new JSONException(e);
            }
            if (object instanceof String) {
                return (String) object;
            }
            throw new JSONException(""Bad value from toJSONString: "" + object);
        }
        if (value instanceof Number) {
            return numberToString((Number) value);
        }
        if (value instanceof Boolean || value instanceof JSONObject
                || value instanceof JSONArray) {
            return value.toString();
        }
        if (value instanceof Map) {
            return new JSONObject((Map) value).toString();
        }
        if (value instanceof Collection) {
            return new JSONArray((Collection) value).toString();
        }
        if (value.getClass().isArray()) {
            return new JSONArray(value).toString();
        }
        return quote(value.toString());
    }
"
4379,f33348ad-e196-4fbd-b05d-1ba3ab321aec,"    public static Object wrap(Object object) {
        try {
            if (object == null) {
                return NULL;
            }
            if (object instanceof JSONObject || object instanceof JSONArray
                    || NULL.equals(object) || object instanceof JSONString
                    || object instanceof Byte || object instanceof Character
                    || object instanceof Short || object instanceof Integer
                    || object instanceof Long || object instanceof Boolean
                    || object instanceof Float || object instanceof Double
                    || object instanceof String) {
                return object;
            }

            if (object instanceof Collection) {
                return new JSONArray((Collection) object);
            }
            if (object.getClass().isArray()) {
                return new JSONArray(object);
            }
            if (object instanceof Map) {
                return new JSONObject((Map) object);
            }
            Package objectPackage = object.getClass().getPackage();
            String objectPackageName = objectPackage != null ? objectPackage
                    .getName() : """";
            if (objectPackageName.startsWith(""java."")
                    || objectPackageName.startsWith(""javax."")
                    || object.getClass().getClassLoader() == null) {
                return object.toString();
            }
            return new JSONObject(object);
        } catch (JSONException exception) {
            return null;
        }
    }
"
4380,5c5b9748-18c1-419c-823c-fcbd1c81471c,"    public Writer write(Writer writer) throws JSONException {
        return this.write(writer, 0, 0);
    }
"
4381,af636495-6352-4965-baab-c8c88e2d001c,"    static final Writer writeValue(Writer writer, Object value,
            int indentFactor, int indent) throws JSONException, IOException {
        if (value == null || value.equals(null)) {
            writer.write(""null"");
        } else if (value instanceof JSONObject) {
            ((JSONObject) value).write(writer, indentFactor, indent);
        } else if (value instanceof JSONArray) {
            ((JSONArray) value).write(writer, indentFactor, indent);
        } else if (value instanceof Map) {
            new JSONObject((Map) value).write(writer, indentFactor, indent);
        } else if (value instanceof Collection) {
            new JSONArray((Collection) value).write(writer, indentFactor,
                    indent);
        } else if (value.getClass().isArray()) {
            new JSONArray(value).write(writer, indentFactor, indent);
        } else if (value instanceof Number) {
            writer.write(numberToString((Number) value));
        } else if (value instanceof Boolean) {
            writer.write(value.toString());
        } else if (value instanceof JSONString) {
            Object o;
            try {
                o = ((JSONString) value).toJSONString();
            } catch (Exception e) {
                throw new JSONException(e);
            }
            writer.write(o != null ? o.toString() : quote(value.toString()));
        } else {
            quote(value.toString(), writer);
        }
        return writer;
    }
"
4382,90ef5834-3b1c-4c13-b2c3-7cdd3bd5cf71,"    static final void indent(Writer writer, int indent) throws IOException {
        for (int i = 0; i < indent; i += 1) {
            writer.write(' ');
        }
    }
"
4383,eb908368-9d4e-435b-ac5c-2ea253c04501,"    Writer write(Writer writer, int indentFactor, int indent)
            throws JSONException {
        try {
            boolean commanate = false;
            final int length = this.length();
            Iterator keys = this.keys();
            writer.write('{');

            if (length == 1) {
                Object key = keys.next();
                writer.write(quote(key.toString()));
                writer.write(':');
                if (indentFactor > 0) {
                    writer.write(' ');
                }
                writeValue(writer, this.map.get(key), indentFactor, indent);
            } else if (length != 0) {
                final int newindent = indent + indentFactor;
                while (keys.hasNext()) {
                    Object key = keys.next();
                    if (commanate) {
                        writer.write(',');
                    }
                    if (indentFactor > 0) {
                        writer.write('\n');
                    }
                    indent(writer, newindent);
                    writer.write(quote(key.toString()));
                    writer.write(':');
                    if (indentFactor > 0) {
                        writer.write(' ');
                    }
                    writeValue(writer, this.map.get(key), indentFactor,
                            newindent);
                    commanate = true;
                }
                if (indentFactor > 0) {
                    writer.write('\n');
                }
                indent(writer, indent);
            }
            writer.write('}');
            return writer;
        } catch (IOException exception) {
            throw new JSONException(exception);
        }
    }
"
4384,e229a650-7c04-4b60-8d4a-33635a5fff1f,"    public JSONTokener(Reader reader) {
        this.reader = reader.markSupported()
                ? reader
                : new BufferedReader(reader);
        this.eof = false;
        this.usePrevious = false;
        this.previous = 0;
        this.index = 0;
        this.character = 1;
        this.line = 1;
    }
"
4385,0a0395c9-792f-42f6-a928-5f8e77ef14dc,"    public JSONTokener(InputStream inputStream) throws JSONException {
        this(new InputStreamReader(inputStream));
    }
"
4386,003912ee-0250-403d-a48b-53f92b6fa027,"    public JSONTokener(String s) {
        this(new StringReader(s));
    }
"
4387,04e6cc1c-d03b-4266-9e70-db0c578c6db3,"    public void back() throws JSONException {
        if (this.usePrevious || this.index <= 0) {
            throw new JSONException(""Stepping back two steps is not supported"");
        }
        this.index -= 1;
        this.character -= 1;
        this.usePrevious = true;
        this.eof = false;
    }
"
4388,f0d49c91-be55-44c0-9825-b45d4b7badcf,"    public static int dehexchar(char c) {
        if (c >= '0' && c <= '9') {
            return c - '0';
        }
        if (c >= 'A' && c <= 'F') {
            return c - ('A' - 10);
        }
        if (c >= 'a' && c <= 'f') {
            return c - ('a' - 10);
        }
        return -1;
    }
"
4389,1477c855-ea3c-44fd-9e49-73d72cb77fd7,"    public boolean end() {
        return this.eof && !this.usePrevious;
    }
"
4390,10348d2c-1123-47d9-aa92-23c837fd8403,"    public boolean more() throws JSONException {
        this.next();
        if (this.end()) {
            return false;
        }
        this.back();
        return true;
    }
"
4391,23390ec5-aae3-410e-8226-b27892d90546,"    public char next() throws JSONException {
        int c;
        if (this.usePrevious) {
            this.usePrevious = false;
            c = this.previous;
        } else {
            try {
                c = this.reader.read();
            } catch (IOException exception) {
                throw new JSONException(exception);
            }

            if (c <= 0) { // End of stream
                this.eof = true;
                c = 0;
            }
        }
        this.index += 1;
        if (this.previous == '\r') {
            this.line += 1;
            this.character = c == '\n' ? 0 : 1;
        } else if (c == '\n') {
            this.line += 1;
            this.character = 0;
        } else {
            this.character += 1;
        }
        this.previous = (char) c;
        return this.previous;
    }
"
4392,3a9d5171-e3e7-4082-83be-231bdb29e675,"    public char next(char c) throws JSONException {
        char n = this.next();
        if (n != c) {
            throw this.syntaxError(""Expected '"" + c + ""' and instead saw '""
                    + n + ""'"");
        }
        return n;
    }
"
4393,87bd0e2d-e494-4746-8199-46c3c378717a,"    public String next(int n) throws JSONException {
        if (n == 0) {
            return """";
        }

        char[] chars = new char[n];
        int pos = 0;

        while (pos < n) {
            chars[pos] = this.next();
            if (this.end()) {
                throw this.syntaxError(""Substring bounds error"");
            }
            pos += 1;
        }
        return new String(chars);
    }
"
4394,7495cbcb-e4c9-4479-a147-64f59d523916,"    public char nextClean() throws JSONException {
        for (;;) {
            char c = this.next();
            if (c == 0 || c > ' ') {
                return c;
            }
        }
    }
"
4395,f44fd593-2cb5-4047-83a3-30a86b94ab1a,"    public String nextString(char quote) throws JSONException {
        char c;
        StringBuilder sb = new StringBuilder();
        for (;;) {
            c = this.next();
            switch (c) {
                case 0:
                case '\n':
                case '\r':
                    throw this.syntaxError(""Unterminated string"");
                case '\\':
                    c = this.next();
                    switch (c) {
                        case 'b':
                            sb.append('\b');
                            break;
                        case 't':
                            sb.append('\t');
                            break;
                        case 'n':
                            sb.append('\n');
                            break;
                        case 'f':
                            sb.append('\f');
                            break;
                        case 'r':
                            sb.append('\r');
                            break;
                        case 'u':
                            sb.append((char) Integer.parseInt(this.next(4), 16));
                            break;
                        case '""':
                        case '\'':
                        case '\\':
                        case '/':
                            sb.append(c);
                            break;
                        default:
                            throw this.syntaxError(""Illegal escape."");
                    }
                    break;
                default:
                    if (c == quote) {
                        return sb.toString();
                    }
                    sb.append(c);
            }
        }
    }
"
4396,878f46d5-8ed3-4fa8-92f5-8dae984aba86,"    public String nextTo(char delimiter) throws JSONException {
        StringBuilder sb = new StringBuilder();
        for (;;) {
            char c = this.next();
            if (c == delimiter || c == 0 || c == '\n' || c == '\r') {
                if (c != 0) {
                    this.back();
                }
                return sb.toString().trim();
            }
            sb.append(c);
        }
    }
"
4397,8d67ee2b-637b-4b73-8615-d66aa90f48e0,"    public String nextTo(String delimiters) throws JSONException {
        char c;
        StringBuilder sb = new StringBuilder();
        for (;;) {
            c = this.next();
            if (delimiters.indexOf(c) >= 0 || c == 0
                    || c == '\n' || c == '\r') {
                if (c != 0) {
                    this.back();
                }
                return sb.toString().trim();
            }
            sb.append(c);
        }
    }
"
4398,895d03d1-8d6c-4775-b1e3-a2861d4fb126,"    public Object nextValue() throws JSONException {
        char c = this.nextClean();
        String string;
        switch (c) {
            case '""':
            case '\'':
                return this.nextString(c);
            case '{':
                this.back();
                return new JSONObject(this);
            case '[':
                this.back();
                return new JSONArray(this);
        }
        StringBuilder sb = new StringBuilder();
        while (c >= ' ' && "",:]}/\\\""[{;=#"".indexOf(c) < 0) {
            sb.append(c);
            c = this.next();
        }
        this.back();
        string = sb.toString().trim();
        if ("""".equals(string)) {
            throw this.syntaxError(""Missing value"");
        }
        return JSONObject.stringToValue(string);
    }
"
4399,d2bf5601-567a-45b2-8e0d-1da8b7d30320,"    public char skipTo(char to) throws JSONException {
        char c;
        try {
            long startIndex = this.index;
            long startCharacter = this.character;
            long startLine = this.line;
            this.reader.mark(1000000);
            do {
                c = this.next();
                if (c == 0) {
                    this.reader.reset();
                    this.index = startIndex;
                    this.character = startCharacter;
                    this.line = startLine;
                    return c;
                }
            } while (c != to);
        } catch (IOException exc) {
            throw new JSONException(exc);
        }

        this.back();
        return c;
    }
"
4400,7ce37ef6-c184-492f-95ec-63a281dc9d23,"    public JSONException syntaxError(String message) {
        return new JSONException(message + this.toString());
    }
"
4401,601f145c-c2be-4a1b-a43d-1d64e8dfb9ef,"    @Override
    public String toString() {
        return "" at "" + this.index + "" [character "" + this.character + "" line ""
                + this.line + ""]"";
    }
"
4402,f0495032-e8e0-4106-aa33-baf0a79af626,"    public static synchronized GameModeInventoriesDatabase getInstance() {
        return instance;
    }
"
4403,7c0d8bed-09d0-48bb-be7e-60154434a7b5,"    public void setConnection(String path) throws Exception {
        Class.forName(""org.sqlite.JDBC"");
        connection = DriverManager.getConnection(""jdbc:sqlite:"" + path);
    }
"
4404,e0582406-0644-48b3-8daf-6e0e0bc4e1f9,"    public Connection getConnection() {
        return connection;
    }
"
4405,3b40b3c6-b085-4e39-942f-33a561ae26ad,"    @Override
    protected Object clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException(""Clone is not allowed."");
    }
"
4406,b2e6188e-ca46-4ec2-b454-8215a0e13425,"    @Override
    public void onDisable() {
        // TODO: Place any custom disable code here.
    }
"
4407,808c8246-ad1f-4230-8bc4-12b7a35045e9,"    @Override
    public void onEnable() {
        saveDefaultConfig();
        PluginManager pm = getServer().getPluginManager();
        Plugin gmi = pm.getPlugin(""GameModeInventories"");
        if (gmi == null) {
            System.err.println(""[GMIDatabaseConverter] This plugin requires GameModeInventories!"");
            pm.disablePlugin(this);
            return;
        }
        String v = gmi.getDescription().getVersion();
        Version gmiversion = new Version(v);
        Version notneededversion = new Version(""2.0"");
        if (gmiversion.compareTo(notneededversion) >= 0) {
            System.err.println(""[GMIDatabaseConverter] You do not need to run this with version "" + v + "" of GameModeInventories!"");
            pm.disablePlugin(this);
            return;
        }
        if (getConfig().getBoolean(""conversion_done"")) {
            System.err.println(""[GMIDatabaseConverter] The GameModeInventories database has already been converted!"");
            pm.disablePlugin(this);
            return;
        }
        File old_file = new File(gmi.getDataFolder() + File.separator + ""GMI.db"");
        if (!old_file.exists()) {
            System.err.println(""[GMIDatabaseConverter] Could not find GameModeInventories database file!"");
            pm.disablePlugin(this);
            return;
        }
        File backup_file = new File(gmi.getDataFolder() + File.separator + ""GMI_backup.db"");
        try {
            copyFile(old_file, backup_file);
        } catch (IOException io) {
            System.err.println(""[GMIDatabaseConverter] Could backup GameModeInventories database file!"");
            pm.disablePlugin(this);
            return;
        }
        System.out.println(""[GMIDatabaseConverter] The GameModeInventories database file was backed up successfully!"");
        try {
            String path = gmi.getDataFolder() + File.separator + ""GMI.db"";
            service.setConnection(path);
        } catch (Exception e) {
            System.err.println(""[GMIDatabaseConverter] Database connection error: "" + e);
        }
        if (!convertInventories()) {
            System.err.println(""[GMIDatabaseConverter] Inventory conversion failed!"");
            pm.disablePlugin(this);
        } else {
            getConfig().set(""conversion_done"", true);
        }
    }
"
4408,4a9499bd-1838-4e2b-9918-83dc6c3bdb0f,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
"
4409,d9ee6ed2-9068-40b9-8d04-8fe2e481b0b7,"    private boolean convertInventories() {
        System.out.println(""[GMIDatabaseConverter] Beginning conversion..."");
        // get all the records
        try {
            Connection connection = service.getConnection();
            Statement statement = connection.createStatement();
            String getQuery = ""SELECT id, inventory, armour, enderchest FROM inventories"";
            ResultSet rsInv = statement.executeQuery(getQuery);
            int count = 0;
            while (rsInv.next()) {
                // set their inventory to the saved one
                String base64 = rsInv.getString(""inventory"");
                Inventory i = fromBase64(base64);
                ItemStack[] iis = i.getContents();
                String i_string = GameModeInventoriesSerialization.toString(iis);
                String savedarmour = rsInv.getString(""armour"");
                Inventory a = fromBase64(savedarmour);
                ItemStack[] ais = a.getContents();
                String a_string = GameModeInventoriesSerialization.toString(ais);
                String savedender = rsInv.getString(""enderchest"");
                if (savedender == null || savedender.equals(""[Null]"") || savedender.equals("""") || savedender.isEmpty()) {
                    // empty inventory
                    savedender = ""[\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\"",\""null\""]"";
                }
                Inventory e = fromBase64(savedender);
                ItemStack[] eis = e.getContents();
                String e_string = GameModeInventoriesSerialization.toString(eis);

                // update
                String setQuery = ""UPDATE inventories SET inventory = ?, armour = ?, enderchest = ? WHERE id = ?"";
                PreparedStatement ps = connection.prepareStatement(setQuery);
                ps.setString(1, i_string);
                ps.setString(2, a_string);
                ps.setString(3, e_string);
                ps.setInt(4, rsInv.getInt(""id""));
                ps.executeUpdate();
                count++;
            }
            System.out.println(""[GMIDatabaseConverter] Conversion complete - "" + count + "" records updated successfully."");
            rsInv.close();
            statement.close();
        } catch (SQLException e) {
            System.err.println(""Could not save inventory on gamemode change, "" + e);
            return false;
        }
        return true;
    }
"
4410,62604f85-2f18-4df7-b40f-0e35f965a5df,"    public static Inventory fromBase64(String data) {
        ByteArrayInputStream inputStream = new ByteArrayInputStream(Base64Coder.decodeLines(data));
        NBTTagList itemList = (NBTTagList) NBTBase.a(new DataInputStream(inputStream));
        Inventory inventory = new CraftInventoryCustom(null, itemList.size());
        for (int i = 0; i < itemList.size(); i++) {
            NBTTagCompound inputObject = (NBTTagCompound) itemList.get(i);
            if (!inputObject.isEmpty()) {
                inventory.setItem(i, CraftItemStack.asCraftMirror(net.minecraft.server.v1_6_R3.ItemStack.createStack(inputObject)));
            }
        }
        return inventory;
    }
"
4411,662a31f5-5d9b-45ae-ba5c-2a5577a4d760,"    public Version(String version) {
        if (version == null) {
            throw new IllegalArgumentException(""Version can not be null"");
        }
        if (!version.matches(""[0-9]+(\\.[0-9]+)*"")) {
            throw new IllegalArgumentException(""Invalid version format"");
        }
        this.version = version;
    }
"
4412,8c9a3cb1-5109-4004-9470-4675d7cdd8ca,"    public String get() {
        return this.version;
    }
"
4413,295245c2-a220-4d6d-b921-e74aff06d524,"    @Override
    public int compareTo(Version that) {
        if (that == null) {
            return 1;
        }
        String[] thisParts = this.get().split(""\\."");
        String[] thatParts = that.get().split(""\\."");
        int length = Math.max(thisParts.length, thatParts.length);
        for (int i = 0; i < length; i++) {
            int thisPart = i < thisParts.length
                    ? Integer.parseInt(thisParts[i]) : 0;
            int thatPart = i < thatParts.length
                    ? Integer.parseInt(thatParts[i]) : 0;
            if (thisPart < thatPart) {
                return -1;
            }
            if (thisPart > thatPart) {
                return 1;
            }
        }
        return 0;
    }
"
4414,e04cca4c-8e21-4497-8cb2-13d9eb90e101,"    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (this.getClass() != that.getClass()) {
            return false;
        }
        return this.compareTo((Version) that) == 0;
    }
"
4415,0f97676c-0387-409d-bad7-77f5eebdac0b,"    @Override
    public int hashCode() {
        int hash = 3;
        return hash;
    }
"
4416,16f4a967-9635-4afe-8513-07baf3349487,"    public static String toString(ItemStack[] inv) {
        List<String> result = new ArrayList<String>();
        List<ConfigurationSerializable> items = new ArrayList<ConfigurationSerializable>();
        items.addAll(Arrays.asList(inv));
        for (ConfigurationSerializable cs : items) {
            if (cs == null) {
                result.add(""null"");
            } else {
                result.add(new JSONObject(serialize(cs)).toString());
            }
        }
        JSONArray json_array = new JSONArray(result);
        return json_array.toString();
    }
"
4417,dcf3daf0-8f44-49ba-a611-96ef1d334515,"    public static Map<String, Object> serialize(ConfigurationSerializable cs) {
        Map<String, Object> serialized = recreateMap(cs.serialize());
        for (Entry<String, Object> entry : serialized.entrySet()) {
            if (entry.getValue() instanceof ConfigurationSerializable) {
                entry.setValue(serialize((ConfigurationSerializable) entry.getValue()));
            }
        }
        serialized.put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(cs.getClass()));
        return serialized;
    }
"
4418,e3c6b1ed-133e-42e7-86b1-936e5102aab4,"    public static Map<String, Object> recreateMap(Map<String, Object> original) {
        Map<String, Object> map = new HashMap<String, Object>();
        for (Entry<String, Object> entry : original.entrySet()) {
            map.put(entry.getKey(), entry.getValue());
        }
        return map;
    }
"
4419,b5174b05-31d3-4168-aec1-d6796b6814fb,"	public static void main(String[] args) {
		
		System.out.println(""Trial Round - Google Hash Code 2014"");

	}
"
4420,217245dc-f190-4fda-9800-1d7a71c81ff9,"	public static void main(String[] args) {

		// Read File
		BufferedReader br = null;
		BufferedWriter bw = null;
		try {

			String sCurrentLine;

			Date date = new Date();

			File output = new File(""D:\\MyWorks\\GoogleHashCode\\streetview""
					+ date.getTime() + "".txt"");
			// if file doesnt exists, then create it
			if (!output.exists()) {
				output.createNewFile();
			}


			bw = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(output), ""US-ASCII""));

			br = new BufferedReader(new FileReader(
					""D:\\MyWorks\\GoogleHashCode\\paris_54000.txt""));

			// Read the first Line
			String firstLine = br.readLine();

			// Get junctions number
			Integer junctionsNumber = 0;
			// Get streets number
			Integer streetNumber = 0;
			// Get time to live number, else we will be killed :)
			Integer ttl = 0;
			// Get cars number
			Integer carsNumber = 0;

			// Get cars number
			Integer launchJunction = 0;

			StringTokenizer st = new StringTokenizer(firstLine);

			while (st.hasMoreElements()) {

				junctionsNumber = Integer.parseInt(st.nextElement().toString());

				streetNumber = Integer.parseInt(st.nextElement().toString());

				ttl = Integer.parseInt(st.nextElement().toString());

				carsNumber = Integer.parseInt(st.nextElement().toString());

				launchJunction = Integer.parseInt(st.nextElement().toString());

			}

			// Fill Junctions List
			List<Junction> junctionsList = new ArrayList<Junction>();
			junctionsList.clear();
			// define a bac junction object
			Junction bacJunction = new Junction();
			Double latitude = 0d;
			Double longitute = 0d;

			int currentReadedJunction = 0;
			while (currentReadedJunction < junctionsNumber
					&& (sCurrentLine = br.readLine()) != null) {

				// Get informations aboutt the current junction
				st = new StringTokenizer(sCurrentLine);

				while (st.hasMoreElements()) {

					latitude = Double.parseDouble(st.nextElement().toString());
					bacJunction.setLatitude(latitude);

					longitute = Double.parseDouble(st.nextElement().toString());
					bacJunction.setLongitude(longitute);

					// Add the junction to the List
					junctionsList.add(bacJunction);

				}

				currentReadedJunction = currentReadedJunction + 1;
			}

			// Fill Streets List
			List<Street> streetsList = new ArrayList<Street>();
			// define an bac street object

			Integer startJunction;

			Integer endJunction;

			Integer beDirectional;

			Integer cost;

			Integer distance;

			int currentReadedStreet = 0;

			while ((sCurrentLine = br.readLine()) != null) {

				// Get informations aboutt the current junction
				st = new StringTokenizer(sCurrentLine);

				while (st.hasMoreElements()) {

					Street street = new Street();
					street.setStreetIndex(currentReadedStreet);

					startJunction = Integer.parseInt(st.nextElement()
							.toString());
					street.setStartJunction(startJunction);

					endJunction = Integer.parseInt(st.nextElement().toString());
					street.setEndJunction(endJunction);

					beDirectional = Integer.parseInt(st.nextElement()
							.toString());
					street.setBeDirectional(beDirectional);

					cost = Integer.parseInt(st.nextElement().toString());
					street.setCost(cost);

					distance = Integer.parseInt(st.nextElement().toString());
					street.setDistance(distance);

					// Add the street to the List

					streetsList.add(street);

				}

				currentReadedStreet = currentReadedStreet + 1;

			}

			// Write the number of the cars
			bw.write(carsNumber + ""\n"");

			// Get start junction

			CarTrajectory carTrajectory = new CarTrajectory();

			Integer currentDistance = 0;

			Integer accumulatedCost = 0;

			// get the List of possible street for the launch junction
			// List<Street> junctionStreets = getJunctionStreets(launchJunction,
			// streetsList);

			// list of street already used
			List<Integer> reservedStreet = new ArrayList<Integer>();

			// Iterate on car number
			for (int i = 0; i < carsNumber; i++) {

				System.out.println(""Enter Cars Process number: "" + i);
				List<Street> junctionStreets = getJunctionStreets(
						launchJunction, streetsList);
				System.out.println(""junctionStreets initial size : ""
						+ junctionStreets.size());

				// System.out.println(""Initial junction steet size: ""+
				// junctionStreets);
				// Initialize
				carTrajectory.getTrajectory().add(launchJunction);

				// get the next possible junction
				while (junctionStreets.size() > 0 && accumulatedCost < ttl) {

					Random r = new Random();
					Street nextStreet = junctionStreets.get(r
							.nextInt(junctionStreets.size()));

					if (accumulatedCost + nextStreet.getCost() < ttl) {
						accumulatedCost = accumulatedCost
								+ nextStreet.getCost();

						// Add the next junction to the trajectory
						carTrajectory.getTrajectory().add(
								nextStreet.getEndJunction());

						reservedStreet.add(nextStreet.getStreetIndex());

						// prepare the next possible street
						junctionStreets.clear();

						junctionStreets = getJunctionStreets(
								nextStreet.getEndJunction(), streetsList);

					} else {
						break;
					}

				}

				// write to number of trajectory for a car
				bw.write(carTrajectory.getTrajectory().size() + ""\n"");
				// iterate the trajectory list to write in the file
				for (Integer node : carTrajectory.getTrajectory()) {

					bw.write(node.intValue() + ""\n"");

				}

				carTrajectory.getTrajectory().clear();
				accumulatedCost = 0;

			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (br != null)
					br.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
			try {
				bw.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		System.out.println(""End of the processing"");

	}
"
4421,4427ed72-ca8d-466a-a280-1d2aabb632bc,"	private static List<Street> getJunctionStreets(Integer launchJunction,
			List<Street> streetsList) {
		List<Street> startJunctionStreets = new ArrayList<Street>();

		Iterator<Street> iterator = streetsList.iterator();
		while (iterator.hasNext()) {

			Street street = (Street) iterator.next();

			if (street.getStartJunction().intValue() == launchJunction
					.intValue() /*
								 * ||
								 * (street.getEndJunction().equals(launchJunction
								 * ) && street.getBeDirectional().equals(2))
								 */) {

				startJunctionStreets.add(street);
			}
		}

		return startJunctionStreets;
	}
"
4422,7bc20192-b5b1-4fe8-ba53-414c86f20079,"	public Integer getStreetIndex() {
		return streetIndex;
	}
"
4423,e5c1bc5a-87a7-4191-b83b-7994cee3d58d,"	public void setStreetIndex(Integer streetIndex) {
		this.streetIndex = streetIndex;
	}
"
4424,0c3e2cd3-7615-4cdf-b80b-31ea20d8fe8b,"	public Integer getStartJunction() {
		return startJunction;
	}
"
4425,2ef0ecd3-4814-44bb-9092-d25bbbc91b0b,"	public void setStartJunction(Integer startJunction) {
		this.startJunction = startJunction;
	}
"
4426,46519273-8e9a-4f64-852a-749b046810f9,"	public Integer getEndJunction() {
		return endJunction;
	}
"
4427,ffd44ff4-44f4-43f9-a56a-82ab043f6669,"	public void setEndJunction(Integer endJunction) {
		this.endJunction = endJunction;
	}
"
4428,80717e97-e8fe-4827-9d51-ac19cf1a04ab,"	public Integer getBeDirectional() {
		return beDirectional;
	}
"
4429,775e7709-58b8-43ee-92ee-d934dc69dc25,"	public void setBeDirectional(Integer beDirectional) {
		this.beDirectional = beDirectional;
	}
"
4430,b55ba156-3ed0-48ee-9ca4-6eabf8b8e6db,"	public Integer getCost() {
		return cost;
	}
"
4431,11139800-7648-40be-98ee-d699da666b3a,"	public void setCost(Integer cost) {
		this.cost = cost;
	}
"
4432,7540378f-eed3-4c85-a6f6-6e259571c357,"	public Integer getDistance() {
		return distance;
	}
"
4433,0065a03d-5f95-4e7b-b7d0-5949f423d4bb,"	public void setDistance(Integer distance) {
		this.distance = distance;
	}
"
4434,db785a4b-5d3c-44f0-9f04-13942e710fb5,"	public Double getLatitude() {
		return latitude;
	}
"
4435,fb95b828-ff0c-41c1-a22a-f7cd96ead903,"	public void setLatitude(Double latitude) {
		this.latitude = latitude;
	}
"
4436,adb749ca-a3cf-4547-b47c-ff6d04abac2f,"	public Double getLongitude() {
		return longitude;
	}
"
4437,25db07d1-8ed4-4c82-9d76-493c3cfd844b,"	public void setLongitude(Double longitude) {
		this.longitude = longitude;
	}
"
4438,0deac246-b051-4b18-a937-427996391923,"	public List<Integer> getTrajectory() {
		return trajectory;
	}
"
4439,2856290f-28d0-4bab-8a9d-58fa76b6ee41,"	public void setTrajectory(List<Integer> trajectory) {
		this.trajectory = trajectory;
	}
"
4440,30fe8866-53aa-421b-bd94-fdae2d3265cd,"	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub
		try
		{
			GUIChessBoard b = new GUIChessBoard();
//			TextChessBoard b = new TextChessBoard();
//			b.startGame();
		}
		catch(ChessException e)
		{
			System.out.println(e.getMessage());
		}
	}
"
4441,c188cc8f-c003-411a-8794-ff5862f2964e,"	public Queen(ChessColor c) throws ChessException
	{
		super(c);
		int r = (c == ChessColor.COLOR_BLACK?0:7);

		setPosition(new ChessPosition(r, 3));
	}
"
4442,7d9bb1a0-6e11-419f-b25c-cffc6e08e473,"	public Queen(ChessColor c, ChessPosition p) throws ChessException
	{
		super(c);
		setPosition(p);
	}
"
4443,0af4406f-b233-4490-ba34-96ac5da9510d,"	private boolean addMove(ChessBoard b, ChessMoves moves, int i, int j) throws ChessException
	{
		boolean ret = false;
		
		ChessPosition tp = new ChessPosition(i,j);
		ChessPiece p = b.pieceAt(tp);
		if (p == null)
		{
			moves.addMove(tp);
			ret = true;
		}
		else if (p.getColor() != this.getColor())
			moves.addMove(tp, ChessMoves.MoveType.CAPTURE);
		return ret;
	}
"
4444,ef8cf9e9-f007-4a15-a45d-b8e9c0637439,"	public ChessMoves nextMoves(ChessBoard b)
	{
		int i = this.getPosition().getRow();
		int j = this.getPosition().getCol();

		ChessMoves moves = new ChessMoves();
		try
		{
			for (int k = i; k < 8; k++)
			{
				if (k != i)
				{
					if (!addMove(b, moves, k, j))
						break;
				}
			}
			
			for (int k = i; k >= 0; k--)
			{
				if (k != i)
				{
					if (!addMove(b, moves, k, j))
						break;
				}
			}
	
			for (int k = j; k < 8; k++)
			{
				if (k != j)
				{
					if (!addMove(b, moves, i, k))
						break;
				}
			}

			for (int k = j; k >= 0; k--)
			{
				if (k != j)
				{
					if (!addMove(b, moves, i, k))
						break;
				}
			}
			
			for (i = 1; i > -2; i -= 2)
			{
				for (j = 1; j > -2; j -= 2)
				{
					boolean good_move;
					int tr = this.getPosition().getRow();
					int tc = this.getPosition().getCol();

					do
					{
						tr = tr + i;
						tc = tc + j;
						if ((tr >= 0) && (tr <= 7) && (tc >= 0) && (tc <= 7))
						{
							// If a piece exists in the current position
							// and it is of the same color, then it cannot move there
							//  otherwise, you can move to capture, but no more moves beyond that
							//  along that direction
							ChessPosition tp = new ChessPosition(tr, tc);
							ChessPiece p = b.pieceAt(tp);
							if (p == null)
							{
								moves.addMove(new ChessPosition(tr, tc));
								good_move = true;
							}
							else if (p.getColor() != this.getColor())
							{
								moves.addMove(new ChessPosition(tr, tc), ChessMoves.MoveType.CAPTURE);
								good_move = false;
							}
							else
								good_move = false;
						}
						else
							good_move = false;
					}
					while (good_move);
				}
			}
		}
		catch (Exception e)
		{
			moves = null;
		}

		return moves;		
	}
"
4445,be16df75-8093-4760-b423-924da56c8f56,"	@Override
	public ChessMoves.MoveType isValidMove(ChessBoard b, ChessPosition p) 
	{
		if ((b == null) || (p == null))
			return ChessMoves.MoveType.INVALID;
		
		if ((p.getCol() < 0) || (p.getCol() > 7) || (p.getRow() < 0) || (p.getRow() > 7))
			return ChessMoves.MoveType.INVALID;
		
		int i = this.getPosition().getRow();
		int j = this.getPosition().getCol();

		if ((i == p.getRow()) && (j == p.getCol()))
			return ChessMoves.MoveType.INVALID;

		int row_diff = i - p.getRow();
		int col_diff = j - p.getCol();		

		// If it is not on the same row, or the same col or the same diagonal, its not valid
		if ((Math.abs(row_diff) != Math.abs(col_diff)) && ((Math.abs(row_diff) > 0) && (Math.abs(col_diff) > 0)))
			return ChessMoves.MoveType.INVALID;
		
		ChessMoves.MoveType can_move = ChessMoves.MoveType.NORMAL;
		// Figure out if you are going forward or backward
		int row_increment = (i < p.getRow())?1:-1;
		int col_increment = (j < p.getCol())?1:-1;
		
		try
		{
			if (row_diff == 0)
			{
				// Moving horizontally
				for (j += col_increment; j != p.getCol(); j += col_increment)
				{
					ChessPiece piece = b.pieceAt(new ChessPosition(i, j));
					if (piece != null)
					{
						can_move = ChessMoves.MoveType.INVALID;
						break;
					}
				}				
			}
			else if (col_diff == 0)
			{
				// Moving vertically
				for (i += row_increment; i != p.getRow(); i += row_increment)
				{
					ChessPiece piece = b.pieceAt(new ChessPosition(i, j));
					if (piece != null)
					{
						can_move = ChessMoves.MoveType.INVALID;
						break;
					}
				}				
			}
			else
			{
				// Moving diagonally
				for (i += row_increment, j += col_increment; (i != p.getRow()) && (j != p.getCol()); i += row_increment, j += col_increment)
				{
					ChessPiece piece = b.pieceAt(new ChessPosition(i, j));
					if (piece != null)
					{
						can_move = ChessMoves.MoveType.INVALID;
						break;
					}
				}				
			}
			
			if (can_move != ChessMoves.MoveType.INVALID)
			{
				// One last check to make sure that there is nothing in the landing square
				ChessPiece piece = b.pieceAt(new ChessPosition(p.getRow(), p.getCol()));
				if (piece != null)
				{
					if (piece.getColor() != this.getColor())
						can_move = ChessMoves.MoveType.CAPTURE;
					else
						can_move = ChessMoves.MoveType.INVALID;
				}
			}
		}
		catch (ChessException e)
		{
			can_move = ChessMoves.MoveType.INVALID;
		}
		
		return can_move;
	}
"
4446,daf5c39e-b39f-4afa-bc75-069ee261771d,"	@Override
	public String getShortDescription() 
	{
		if (this.clr == ChessColor.COLOR_BLACK)
			return new String(""q"");
		else
			return new String(""Q"");
	}
"
4447,ad592555-a20c-42ad-b095-1b81ffd340f5,"	@Override
	public String getImage() 
	{
		if (this.clr == ChessColor.COLOR_BLACK)
			return new String(""\u265B"");
		else
			return new String(""\u2655"");
	}
"
4448,d6853074-fca2-49d7-b186-92d5286dfc5c,"	public ChessException() 
	{
		super(DEF_ERROR);
	}
"
4449,d5e52bd9-fadc-4ef0-876b-9a95797fc98e,"	public ChessException(String arg0) {
		super(arg0);
		// TODO Auto-generated constructor stub
	}
"
4450,dabde295-ce8a-4158-b638-a9f08df26d72,"	public ChessException(Throwable arg0) {
		super(arg0);
		// TODO Auto-generated constructor stub
	}
"
4451,77397ad8-efc3-43eb-8db0-f5f85b688b70,"	public ChessException(String arg0, Throwable arg1) {
		super(arg0, arg1);
		// TODO Auto-generated constructor stub
	}
"
4452,fe0c680b-d770-4329-b659-4f8f47fec023,"	public Pawn(ChessColor c, int num) throws ChessException
	{
		super(c);
		int r = (c == ChessColor.COLOR_BLACK?1:6);

		if ((num < 1) || (num > 8))
			throw new ChessException(""Only eight Pawns are allowed for each color"");
		
		setPosition(new ChessPosition(r, num - 1));
	}
"
4453,b6d1aa08-8e12-4930-bb3d-5f8dc5b33db5,"	public Pawn(ChessColor c, ChessPosition p) throws ChessException
	{
		super(c);
		setPosition(p);
	}
"
4454,e4fb090c-0a94-43cc-bd95-c9c3db091d57,"	public ChessMoves nextMoves(ChessBoard b)
	{
		int i = this.getPosition().getRow();
		int j = this.getPosition().getCol();
		ChessMoves moves = new ChessMoves();

		// Not dealing with promotion at this time
		try
		{
			if ((this.getColor() == ChessColor.COLOR_BLACK) && ((i + 1) < 8))
			{
				ChessPosition tp = new ChessPosition(i+1, j);
				if (b.pieceAt(tp) == null)
				{
					moves.addMove(tp);
				
					if (i == 1)
					{
						tp = new ChessPosition(i+2, j);
						if (b.pieceAt(tp) == null)
							moves.addMove(tp);
					}
				}
				
				// Check for kill moves
				if ((j+1) < 8)
				{
					tp = new ChessPosition(i+1, j+1);
					ChessPiece p = b.pieceAt(tp);
					if ((p != null) && (p.getColor() != this.getColor()))
						moves.addMove(tp, ChessMoves.MoveType.CAPTURE);
				}
				if ((j-1) >= 0)
				{
					tp = new ChessPosition(i+1, j-1);
					ChessPiece p = b.pieceAt(tp);
					if ((p != null) && (p.getColor() != this.getColor()))
						moves.addMove(tp, ChessMoves.MoveType.CAPTURE);
				}
			}
			else if ((i - 1) >= 0)
			{
				ChessPosition tp = new ChessPosition(i-1, j);
				if (b.pieceAt(tp) == null)
				{
					moves.addMove(tp);
				
					if (i == 6)
					{
						tp = new ChessPosition(i-2, j);
						if (b.pieceAt(tp) == null)
							moves.addMove(tp);
					}
				}
				
				// Check for kill moves
				if ((j+1) < 8)
				{
					tp = new ChessPosition(i-1, j+1);
					ChessPiece p = b.pieceAt(tp);
					if ((p != null) && (p.getColor() != this.getColor()))
						moves.addMove(tp, ChessMoves.MoveType.CAPTURE);
				}
				if ((j-1) >= 0)
				{
					tp = new ChessPosition(i-1, j-1);
					ChessPiece p = b.pieceAt(tp);
					if ((p != null) && (p.getColor() != this.getColor()))
						moves.addMove(tp, ChessMoves.MoveType.CAPTURE);
				}
			}
		}
		catch (Exception e)
		{
			moves = null;
		}
		
		
		return moves;		
	}
"
4455,87f99831-a578-42df-ac6a-22682bb8244d,"	@Override
	public ChessMoves.MoveType isValidMove(ChessBoard b, ChessPosition p) 
	{
		if ((p.getCol() < 0) || (p.getCol() > 7) || (p.getRow() < 0) || (p.getRow() > 7))
			return ChessMoves.MoveType.INVALID;

		ChessPiece cp = b.pieceAt(p);
		if (this.getColor() == ChessColor.COLOR_BLACK)
		{
			if ((p.getCol() == this.getPosition().getCol()) &&
				((p.getRow() == this.getPosition().getRow() + 1) ||
				 ((this.getPosition().getRow() == 1) && (p.getRow() == this.getPosition().getRow()+2))) &&
				(cp == null))
				return ChessMoves.MoveType.NORMAL;
			else if ((cp != null) && (cp.getColor() != this.getColor()))
			{
				if (((p.getCol() == this.getPosition().getCol() + 1) || (p.getCol() == this.getPosition().getCol() - 1)) &&
						 (p.getRow() == this.getPosition().getRow() + 1))
					return ChessMoves.MoveType.CAPTURE;
				else
					return ChessMoves.MoveType.INVALID;
			}
			else
				return ChessMoves.MoveType.INVALID;
		}
		else
		{
			if ((p.getCol() == this.getPosition().getCol()) &&
					((p.getRow() == this.getPosition().getRow() - 1) ||
					 ((this.getPosition().getRow() == 6) && (p.getRow() == this.getPosition().getRow()-2))) &&
					(cp == null))
					return ChessMoves.MoveType.NORMAL;
			else if ((cp != null) && (cp.getColor() != this.getColor()))
			{
				if (((p.getCol() == this.getPosition().getCol() + 1) || (p.getCol() == this.getPosition().getCol() - 1)) &&
						 (p.getRow() == this.getPosition().getRow() - 1))
					return ChessMoves.MoveType.CAPTURE;
				else
					return ChessMoves.MoveType.INVALID;
			}
			else
				return ChessMoves.MoveType.INVALID;
		}
	}
"
4456,eacb26ab-ca2f-4c97-9fd4-ba5c9f57d7cb,"	@Override
	public String getShortDescription() 
	{
		if (this.clr == ChessColor.COLOR_BLACK)
			return new String(""p"");
		else
			return new String(""P"");
	}
"
4457,a7d79b66-429b-4f6e-a39a-d4ac84e90eb3,"	@Override
	public String getImage() 
	{
		if (this.clr == ChessColor.COLOR_BLACK)
			return new String(""\u265F"");
		else
			return new String(""\u2659"");
	}
"
4458,87f5f8cb-0bab-4ae3-9440-82cb2eebe60c,"	private void setPosition(char cb_col, char cb_row) throws ChessException
	{
		char tc = Character.toUpperCase(cb_col);
		
		if ((tc < 'A') || (tc > 'H'))
			throw new ChessException(""Invalid board column position given: "" + cb_col);
		
		col = tc - 'A';
		if (Character.isDigit(cb_row))
		{
			row = Character.getNumericValue(cb_row);
			if ((row < 1) || (row > 8))
				throw new ChessException(""Invalid board row position given: "" + cb_row);
			row = 8 - row;
		}
		else
		{
			throw new ChessException(""Board row position not digit: "" + cb_row);
		}						
	}
"
4459,bd4c4161-4969-471d-bc71-05e6cd027b35,"	public ChessPosition(char cb_col, char cb_row) throws ChessException
	{
		attack_pieces = new ArrayList<ChessPiece>();
		setPosition(cb_col, cb_row);
	}
"
4460,5ca0edc0-a733-43aa-9a93-4dbc1ee7eddf,"	public ChessPosition(int r, int c) throws ChessException
	{
		if ((c < 0) || (c>7) || (r < 0) || (r > 7))
			throw new ChessException(""Invalid board position specified"");
		
		attack_pieces = new ArrayList<ChessPiece>();
		row = r;
		col = c;
	}
"
4461,3ad39019-4fe9-4fc1-95d4-125690d5203e,"	public ChessPosition(String pos) throws ChessException
	{
		if (pos == null)
			throw new ChessException(""No chess position given"");
		
		if (pos.length() != 2)
			throw new ChessException(""Chess position is not valid"");

		attack_pieces = new ArrayList<ChessPiece>();
		setPosition(pos.charAt(0), pos.charAt(1));
	}
"
4462,47e75ef3-abfa-40d9-8613-b7a3395181f9,"	public char getBoardRow()
	{
		return (char)('8' - row);
	}
"
4463,1024522e-9651-431b-be8f-1eeabaecce13,"	public char getBoardCol()
	{
		return (char)('A' + col);
	}
"
4464,9cdf0759-1321-4c9c-8a28-f9a6b4739234,"	public int getRow()
	{
		return row;
	}
"
4465,5eab189e-aa54-43c5-a56d-a7b29a8ab68f,"	public int getCol()
	{
		return col;
	}
"
4466,ee94756d-5c49-418c-90f4-e127c0f55080,"	public String getDescription()
	{
		return String.format(""%c%c"", getBoardCol(), getBoardRow());
	}
"
4467,21ed2b93-3902-43b3-9df2-a7673ff6c109,"	public void addAttack(ChessPiece p)
	{
		if (p != null)
			attack_pieces.add(p);
	}
"
4468,0f067025-93ee-43c3-9dd3-62b415ed0a3d,"	public void removeAttack(ChessPiece p)
	{
		if (p == null)
			return;
		
		attack_pieces.remove(p);
	}
"
4469,bc089a9b-38e2-4bf5-b8fc-8471eb5215c5,"	public ChessPiece[] underAttack()
	{
		return (ChessPiece [])attack_pieces.toArray();
	}
"
4470,1f0fe010-828b-4d2c-b0dc-a214ccc5483b,"	public ChessBoard() throws ChessException
	{
		board = new ChessPiece[8][];
		
		for (int i = 0; i < 8; i++)
		{
			board[i] = new ChessPiece[8];
			for (int j = 0; j < 8; j++)
				board[i][j] = null;
		}
		
		// Create all the pieces
		all_pieces = new ChessPiece[32];
		ChessColor c = ChessColor.COLOR_BLACK;
		int j = 0;
		for (int i = 0; i < 2; i++)
		{
			all_pieces[j++] = new King(c);
			all_pieces[j++] = new Queen(c);
			all_pieces[j++] = new Bishop(c, 1);
			all_pieces[j++] = new Bishop(c, 2);
			all_pieces[j++] = new Knight(c, 1);
			all_pieces[j++] = new Knight(c, 2);
			all_pieces[j++] = new Rook(c, 1);
			all_pieces[j++] = new Rook(c, 2);
			for (int k = 1; k < 9; k++)
				all_pieces[j++] = new Pawn(c, k);
			c = ChessColor.COLOR_WHITE;
		}
		
		for (int i = 0; i < 32; i++)
			board[all_pieces[i].getPosition().getRow()][all_pieces[i].getPosition().getCol()] = all_pieces[i];
	}
"
4471,0d72bb29-ae11-43ef-bbcf-191f25fb638c,"	public void makeMove(ChessPosition from, ChessPosition to) throws ChessException
	{
		if ((from == null) || (to == null))
			throw new ChessException(""Invalid position to move from or move to"");

		ChessPiece p = board[from.getRow()][from.getCol()];
		if (p == null)
			throw new ChessException(""No piece to move at origin"");
		
		ChessPiece t = board[to.getRow()][to.getCol()];
		if (t != null)
			t.capture();

		p.makeMove(this, to);
		
		// If move was made, switch its position on the board
		board[from.getRow()][from.getCol()] = null;
		board[to.getRow()][to.getCol()] = p;
	}
"
4472,b4bc6a3c-1fc2-44cf-a258-bc77f003d78a,"	public ChessPiece pieceAt(ChessPosition pos)
	{
		return board[pos.getRow()][pos.getCol()];
	}
"
4473,3c99557e-687a-474b-9108-bf1ab43a9a2c,"	public GUIChessBoard() throws ChessException
	{
		super();
		turn = ChessColor.COLOR_WHITE;
		from = null;
		board_ui = null;
		board_ui = new JFrame(""Chess Board"");
		
		board_ui.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		board_ui.setPreferredSize(new Dimension(400,400));
		
		GridLayout gl = new GridLayout(9,9);
		Container pnl = board_ui.getContentPane();
		pnl.setLayout(gl);
		
		Font f = new Font(null, Font.BOLD|Font.ITALIC, 16);
		Font f2 = new Font(null, Font.BOLD, 26);
		Color clr = new Color(255,0,0);
		Color clr2 = new Color(0, 0, 255);
		
		// Add the first item on the label row
		pnl.setBackground(Color.WHITE);
		JLabel jl = new JLabel();
		jl.setText("" "");
		pnl.add(jl);
		
		
		for (int i = 0; i < 8; i++)
		{
			jl = new JLabel();
			jl.setFont(f);
			jl.setOpaque(true);
			jl.setText(Character.toString((char)('A'+i)));
			jl.setHorizontalAlignment(JLabel.CENTER);
			jl.setVerticalAlignment(JLabel.CENTER);
			jl.setForeground(clr);
			pnl.add(jl);
		}
		for (int i = 0; i < 8; i++)
		{
			// The Row Label
			jl = new JLabel();
			jl.setFont(f);
			jl.setHorizontalAlignment(JLabel.CENTER);
			jl.setVerticalAlignment(JLabel.CENTER);
			jl.setText(Integer.toString(8-i));
			jl.setForeground(clr);
			pnl.add(jl);
			
			for (int j = 0; j < 8; j++)
			{
				jl = new JLabel();
				jl.setBorder(BorderFactory.createLineBorder(Color.black));
				jl.setOpaque(true);
				jl.setHorizontalAlignment(JLabel.CENTER);
				jl.setVerticalAlignment(JLabel.CENTER);
				jl.setFont(f2);
				jl.setForeground(clr2);
				
				if ((i % 2) == 1)
				{
					if ((j%2) == 1)
						jl.setBackground(Color.WHITE);
					else
						jl.setBackground(Color.LIGHT_GRAY);
				}
				else
				{
					if ((j%2) == 0)
						jl.setBackground(Color.WHITE);
					else
						jl.setBackground(Color.LIGHT_GRAY);
				}

				if (board[i][j] != null)
					jl.setText(board[i][j].getImage());
				jl.addMouseListener(this);
				pnl.add(jl);
			}
		}
		board_ui.pack();
		board_ui.setVisible(true);		
	}
"
4474,d70d9bf4-ee03-4bc8-9ffd-586d01f39528,"	public void makeMove(ChessPosition from, ChessPosition to) throws ChessException
	{
		super.makeMove(from, to);
		int idx = ((from.getRow()+1)*9)+(from.getCol()+1);
		JLabel jl = (JLabel)board_ui.getContentPane().getComponent(idx);
		if (jl == null)
			return;
		
		jl.setText("" "");
		
		if (to == null)
			return;
		
		idx = ((to.getRow()+1)*9)+(to.getCol()+1);
		jl = (JLabel)board_ui.getContentPane().getComponent(idx);
		if (jl == null)
			return;
		
		jl.setText(board[to.getRow()][to.getCol()].getImage());
		board_ui.repaint();
	}
"
4475,fc1799b0-5a2e-481f-93d7-5b16949cf33a,"	public ChessColor getTurn()
	{
		return turn;
	}
"
4476,9d57e844-0d04-44de-abec-a86b9bf9cdde,"	private ChessPosition getChessPositionFromClick(MouseEvent e)
	{
		ChessPosition pos = null;
		
		JLabel jl = (JLabel)e.getSource();
		
		if (jl != null)
		{
			Component jc[] = board_ui.getContentPane().getComponents();
			
			for (int i = 0; i < jc.length; i++)
			{
				if (jc[i] == jl)
				{
					try 
					{
						pos = new ChessPosition((i/9)-1, (i%9)-1);
					} 
					catch (ChessException e1) 
					{
						// TODO Auto-generated catch block
						pos = null;
					}
					break;
				}
			}
		}
		
		return pos;
	}
"
4477,b2671375-748c-4675-a942-a94966df2ca3,"	private void removeMoveHighlights()
	{
		if (moves_from == null)
			return;
		
		// Remove all the border highlights
		try
		{
			for (int k = 0; k < moves_from.getCount(); k++)
			{
				ChessPosition new_pos = moves_from.getMove(k);
				int idx = ((new_pos.getRow()+1)*9)+(new_pos.getCol()+1);
				JLabel jl = (JLabel)board_ui.getContentPane().getComponent(idx);
				if (jl != null)
				{
					int i = new_pos.getRow();
					int j = new_pos.getCol();
					//jl.setBorder(BorderFactory.createLineBorder(Color.BLACK));
					if ((i % 2) == 1)
					{
						if ((j%2) == 1)
							jl.setBackground(Color.WHITE);
						else
							jl.setBackground(Color.LIGHT_GRAY);
					}
					else
					{
						if ((j%2) == 0)
							jl.setBackground(Color.WHITE);
						else
							jl.setBackground(Color.LIGHT_GRAY);
					}
				}
			}
		}
		catch (ChessException ce)
		{
			System.out.println(ce.getMessage());
		}
	}
"
4478,3318fcbf-76b2-496d-a1e5-51b56990e864,"	private void setPieceToMove(ChessPiece p)
	{		
		if ((p == null) || (p.getColor() != turn))
			return;

		// if there was a previous set of moves,
		//  reset the UI from it
		this.removeMoveHighlights();
		
		moves_from = p.nextMoves(this);
		if (moves_from == null)
		{
			System.out.printf(""No valid moves for piece at [%c,%c]\n"", p.getPosition().getBoardCol(), p.getPosition().getBoardRow());
			return;
		}
		
		from = p.getPosition();
		try
		{
			for (int k = 0; k < moves_from.getCount(); k++)
			{
				ChessPosition new_pos = moves_from.getMove(k);
				ChessMoves.MoveType mt = moves_from.moveType(k);
				int idx = ((new_pos.getRow()+1)*9)+(new_pos.getCol()+1);
				JLabel jl = (JLabel)board_ui.getContentPane().getComponent(idx);
				if (jl != null)
				{
					if (mt == ChessMoves.MoveType.NORMAL)
						jl.setBackground(Color.GREEN);
					else if (mt == ChessMoves.MoveType.CAPTURE)
						jl.setBackground(Color.RED);
				}
			}
		}
		catch (ChessException ce)
		{
			System.out.println(ce.getMessage());
		}
	}
"
4479,f4ec1349-c5f7-4ef8-9436-fa3c4132a2d1,"	@Override
	public void mouseClicked(MouseEvent e) 
	{
		// If this is the first time a position is selected
		//  and there is a legitimate piece, then mark it
		if (from == null)
		{
			ChessPosition pos = getChessPositionFromClick(e);
			ChessPiece p = pieceAt(pos);
			if (p == null)
				return;
			setPieceToMove(p);
		}
		else
		{
			try
			{
				ChessPiece moving_piece = pieceAt(from);
				if (moving_piece == null)
				{
					from = null;
					return;
				}
				
				ChessPosition pos = getChessPositionFromClick(e);
				if (pos == null)
				{
					from = null;
					return;
				}
				
				// If there is a piece at the target position
				//  and if that piece is the same color, then
				//  the player has changed the mind about the 
				//  piece they want to move, so reset the piece
				ChessPiece p = this.pieceAt(pos);
				if ((p != null) && (p.getColor() == moving_piece.getColor()))
				{
					setPieceToMove(p);
					return;
				}
				
				makeMove(from, pos);
				// Remove all the border highlights
				this.removeMoveHighlights();
				
				// reset where you came from
				from = null;
				// Switch the sides to make the move
				turn = (turn == ChessColor.COLOR_BLACK)?ChessColor.COLOR_WHITE:ChessColor.COLOR_BLACK;					
			}
			catch (ChessException ce)
			{
				from = null;
			}
		}
	}
"
4480,65aa92c7-9898-4f90-8618-08a030ba6a72,"	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
"
4481,8cbe3f65-7afb-4c54-84d0-136985af7737,"	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
"
4482,1019ce9c-ec99-4d50-a8b3-982163c1f9f2,"	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
"
4483,ebcf0089-ef67-4b2b-8c4c-200bec5209c0,"	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
"
4484,784ff53e-d30c-443a-978c-e22916b95377,"	public Rook(ChessColor c, int num) throws ChessException
	{
		super(c);
		int r = (c == ChessColor.COLOR_BLACK?0:7);

		if ((num != 1) && (num != 2))
			throw new ChessException(""Only two Rooks are allowed for each color"");
		
		if (num == 1)
			setPosition(new ChessPosition(r, 0));
		else
			setPosition(new ChessPosition(r, 7));
	}
"
4485,410ff213-6238-484f-8686-89eb3beaf57f,"	public Rook(ChessColor c, ChessPosition p) throws ChessException
	{
		super(c);
		setPosition(p);
	}
"
4486,24996d90-ddb0-45bc-9dee-0d1996fc8342,"	private boolean addMove(ChessBoard b, ChessMoves moves, int i, int j) throws ChessException
	{
		boolean ret = false;
		
		ChessPosition tp = new ChessPosition(i,j);
		ChessPiece p = b.pieceAt(tp);
		if (p == null)
		{
			moves.addMove(tp);
			ret = true;
		}
		else if (p.getColor() != this.getColor())
			moves.addMove(tp, ChessMoves.MoveType.CAPTURE);
		return ret;
	}
"
4487,78b8e0a6-8899-4391-add6-33589954d970,"	public ChessMoves nextMoves(ChessBoard b)
	{
		int i = this.getPosition().getRow();
		int j = this.getPosition().getCol();

		ChessMoves moves = new ChessMoves();
		try
		{
			for (int k = i; k < 8; k++)
			{
				if (k != i)
				{
					if (!addMove(b, moves, k, j))
						break;
				}
			}
			
			for (int k = i; k >= 0; k--)
			{
				if (k != i)
				{
					if (!addMove(b, moves, k, j))
						break;
				}
			}
	
			for (int k = j; k < 8; k++)
			{
				if (k != j)
				{
					if (!addMove(b, moves, i, k))
						break;
				}
			}

			for (int k = j; k >= 0; k--)
			{
				if (k != j)
				{
					if (!addMove(b, moves, i, k))
						break;
				}
			}
		}
		catch (Exception e)
		{
			moves = null;
		}

		return moves;				
	}
"
4488,e20cc5b4-8eef-40e2-b12c-bd146eb6a3ef,"	@Override
	public ChessMoves.MoveType isValidMove(ChessBoard b, ChessPosition p) 
	{
		if ((p == null) || (b == null))
			return ChessMoves.MoveType.INVALID;
		
		if ((p.getCol() < 0) || (p.getCol() > 7) || (p.getRow() < 0) || (p.getRow() > 7))
			return ChessMoves.MoveType.INVALID;
		
		int i = this.getPosition().getRow();
		int j = this.getPosition().getCol();

		int row_diff = i - p.getRow();
		int col_diff = j - p.getCol();
		
		if (((row_diff == 0) && (col_diff == 0)) || ((row_diff != 0) && (col_diff != 0)))
			return ChessMoves.MoveType.INVALID;
		
		ChessMoves.MoveType can_move = ChessMoves.MoveType.NORMAL;
		try
		{
			if (col_diff == 0)
			{
				// Figure out if you are going forward or backward
				int increment = (i < p.getRow())?1:-1;;
				
				for (i += increment; i != p.getRow(); i += increment)
				{
					ChessPiece piece = b.pieceAt(new ChessPosition(i, j));
					if (piece != null)
					{
						can_move = ChessMoves.MoveType.INVALID;
						break;
					}
				}
			}
			else
			{
				// Figure out if you are going forward or backward
				int increment = (j < p.getCol())?1:-1;;
	
				for (j += increment; j != p.getCol(); j += increment)
				{
					ChessPiece piece = b.pieceAt(new ChessPosition(i, j));
					if (piece != null)
					{
						can_move = ChessMoves.MoveType.INVALID;
						break;
					}
				}
			}
			
			// One last check to make sure that there is nothing in the landing square
			ChessPiece piece = b.pieceAt(new ChessPosition(p.getRow(), p.getCol()));
			if (piece != null)
			{
				if (piece.getColor() != this.getColor())
					can_move = ChessMoves.MoveType.CAPTURE;
				else
					can_move = ChessMoves.MoveType.INVALID;
			}
		}
		catch (ChessException e)
		{
			can_move = ChessMoves.MoveType.INVALID;
		}
		
		return can_move;
	}
"
4489,d8c99a04-5183-4554-ab1c-ba1463cdfc3c,"	@Override
	public String getShortDescription() 
	{
		if (this.clr == ChessColor.COLOR_BLACK)
			return new String(""r"");
		else
			return new String(""R"");
	}
"
4490,1bea3c2d-11c3-4c02-8aba-de478f2fdd22,"	@Override
	public String getImage() 
	{
		if (this.clr == ChessColor.COLOR_BLACK)
			return new String(""\u265C"");
		else
			return new String(""\u2656"");
	}
"
4491,ae810e6e-7735-4717-bfa8-8d240f71b44a,"	public King(ChessColor c) throws ChessException
	{
		super(c);
		int r = (c == ChessColor.COLOR_BLACK?0:7);

		setPosition(new ChessPosition(r, 4));
	}
"
4492,2f14fbb4-dc7c-493f-8e5f-5466fa260714,"	public King(ChessColor c, ChessPosition p) throws ChessException
	{
		super(c);
		setPosition(p);
	}
"
4493,23ba92c6-48df-45d7-b1b4-970071179014,"	public ChessMoves nextMoves(ChessBoard b)
	{
		// Initialize moves to 0
		ChessMoves moves;
		int i = this.getPosition().getRow();
		int j = this.getPosition().getCol();
		

		moves = new ChessMoves();
		try
		{
			for (int dy = -1; dy < 2; dy++)
			{
				for (int dx = -1; dx < 2; dx++)
				{
					int to_i = i + dy;
					int to_j = j + dx;
					if (!((dx == 0) && (dy == 0)) && (to_i >= 0) && (to_i <=7) && (to_j >= 0) && (to_j <= 7))
					{
						ChessPosition pos = new ChessPosition(to_i, to_j);
						ChessPiece p = b.pieceAt(pos);
						if (p == null)
							moves.addMove(pos);
						else if (p.getColor() != this.getColor())
							moves.addMove(pos, ChessMoves.MoveType.CAPTURE);
					}
				}
			}
			
			// Check the King can castle
			
		}
		catch (Exception e)
		{
			// Since only valid positions are created, don't worry about exceptions
			moves = null;
		}
		
		return moves;		
	}
"
4494,56fd8803-c4b6-47f8-ae5a-3a238b7ede41,"	@Override
	public ChessMoves.MoveType isValidMove(ChessBoard b, ChessPosition p) 
	{
		if ((p.getCol() < 0) || (p.getCol() > 7) || (p.getRow() < 0) || (p.getRow() > 7))
			return ChessMoves.MoveType.INVALID;

		ChessPosition cur_pos = this.getPosition();
		int dx = Math.abs(cur_pos.getCol() - p.getCol());
		int dy = Math.abs(cur_pos.getRow() - p.getRow());
		
		if (((dx == 1) && (dy == 0)) || ((dx == 0) && (dy == 1)) || ((dx == 1) && (dy == 1)))
		{
			ChessPiece cp = b.pieceAt(p);
			if (cp == null)
				return ChessMoves.MoveType.NORMAL;
			else if (cp.getColor() != this.getColor())
				return ChessMoves.MoveType.CAPTURE;
			else
				return ChessMoves.MoveType.INVALID;
		}
		else
			return ChessMoves.MoveType.INVALID;		
	}
"
4495,c61db496-e0b2-4e77-bfb5-f340acb6489f,"	@Override
	public String getShortDescription() 
	{
		if (this.clr == ChessColor.COLOR_BLACK)
			return new String(""k"");
		else
			return new String(""K"");
	}
"
4496,4d39650e-fc3e-423c-a134-0b5af81377d6,"	public String getImage()
	{
		if (this.clr == ChessColor.COLOR_BLACK)
			return new String(""\u265A"");
		else
			return new String(""\u2654"");
	}
"
4497,baad2094-74a8-480b-a5ae-d6e10d0015dd,"	public Bishop(ChessColor c, int num) throws ChessException
	{
		super(c);
		int r = (c == ChessColor.COLOR_BLACK?0:7);

		if ((num != 1) && (num != 2))
			throw new ChessException(""Only two Bishops are allowed for each color"");
		
		if (num == 1)
			setPosition(new ChessPosition(r, 2));
		else
			setPosition(new ChessPosition(r, 5));
	}
"
4498,a4295846-aa00-417e-aeff-d632ceb3fde4,"	public Bishop(ChessColor c, ChessPosition p) throws ChessException
	{
		super(c);
		setPosition(p);
	}
"
4499,226e2c7a-fa41-4101-b53c-cc6fb7aca931,"	public ChessMoves nextMoves(ChessBoard b)
	{
		int i = this.getPosition().getRow();
		int j = this.getPosition().getCol();
		ChessMoves moves = new ChessMoves();

		try
		{
			for (i = 1; i > -2; i -= 2)
			{
				for (j = 1; j > -2; j -= 2)
				{
					boolean good_move;
					int tr = this.getPosition().getRow();
					int tc = this.getPosition().getCol();

					do
					{
						tr = tr + i;
						tc = tc + j;
						if ((tr >= 0) && (tr <= 7) && (tc >= 0) && (tc <= 7))
						{
							// If a piece exists in the current position
							// and it is of the same color, then it cannot move there
							//  otherwise, you can move to capture, but no more moves beyond that
							//  along that direction
							ChessPosition tp = new ChessPosition(tr, tc);
							ChessPiece p = b.pieceAt(tp);
							if (p == null)
							{
								moves.addMove(new ChessPosition(tr, tc));
								good_move = true;
							}
							else if (p.getColor() != this.getColor())
							{
								moves.addMove(new ChessPosition(tr, tc), ChessMoves.MoveType.CAPTURE);
								good_move = false;
							}
							else
								good_move = false;
						}
						else
							good_move = false;
					}
					while (good_move);
				}
			}
		}
		catch (Exception e)
		{
			// Since only valid positions are created, don't worry about exceptions
			moves = null;
		}
		
		return moves;
	}
"
4500,7621bff9-3232-433f-8b65-1ea2931cb4fa,"	@Override
	public ChessMoves.MoveType isValidMove(ChessBoard b, ChessPosition p) 
	{
		if (p == null)
			return ChessMoves.MoveType.INVALID;
		
		if ((p.getCol() < 0) || (p.getCol() > 7) || (p.getRow() < 0) || (p.getRow() > 7))
			return ChessMoves.MoveType.INVALID;
		
		int i = this.getPosition().getRow();
		int j = this.getPosition().getCol();
		
		if ((i == p.getRow()) && (j == p.getCol()))
			return ChessMoves.MoveType.INVALID;
		
		int row_diff = i - p.getRow();
		int col_diff = j - p.getCol();
		
		// Since bishops move only diagonally, this check covers it
		if (Math.abs(row_diff) != Math.abs(col_diff))
			return ChessMoves.MoveType.INVALID;
		
		ChessMoves.MoveType can_move = ChessMoves.MoveType.NORMAL;
		// Figure out if you are going forward or backward
		int row_increment = (i < p.getRow())?1:-1;
		int col_increment = (j < p.getCol())?1:-1;
		
		try
		{
			for (i += row_increment, j += col_increment; (i != p.getRow()) && (j != p.getCol()); i += row_increment, j += col_increment)
			{
				ChessPiece piece = b.pieceAt(new ChessPosition(i, j));
				if (piece != null)
				{
					can_move = ChessMoves.MoveType.INVALID;
					break;
				}
			}
			
			// One last check to make sure that there is nothing in the landing square
			ChessPiece piece = b.pieceAt(new ChessPosition(p.getRow(), p.getCol()));
			if (piece != null)
			{
				if (piece.getColor() != this.getColor())
					can_move = ChessMoves.MoveType.CAPTURE;
				else
					can_move = ChessMoves.MoveType.INVALID;
			}			
		}
		catch (ChessException e)
		{
			can_move = ChessMoves.MoveType.INVALID;
		}
		
		return can_move;
	}
"
4501,3c6dd82d-cfb8-4365-b0b8-85d0f5990168,"	@Override
	public String getShortDescription() 
	{
		if (this.clr == ChessColor.COLOR_BLACK)
			return new String(""b"");
		else
			return new String(""B"");
	}
"
4502,1f28c118-8561-4dc8-a10f-7f7698cbd9f5,"	public String getImage()
	{
		if (this.clr == ChessColor.COLOR_BLACK)
			return new String(""\u265D"");
		else
			return new String(""\u2657"");		
	}
"
4503,0c0b85b1-7a21-456c-9157-9c75b3d781e6,"	protected ChessPiece(ChessColor c)
	{
		has_moved = false;
		clr = c;
		pos = null;
	}
"
4504,302218ad-5baa-4562-ba0e-090897e59b69,"	public boolean madeFirstMove()
	{
		return has_moved;
	}
"
4505,c0e4a6a2-b200-4c22-8f91-0173d426df26,"	protected void setColor(ChessColor c)
	{
		clr = c;
	}
"
4506,5e0d04b3-f665-4c7c-9fce-58f0b2921f3a,"	protected void setPosition(ChessPosition p)
	{
		pos = p;
	}
"
4507,611a475e-0168-4a27-a5ca-7645ecc0dd2d,"	public void capture()
	{
		pos = null;
		
	}
"
4508,336a28d9-6b28-44be-87f7-436667da8383,"	public ChessColor getColor()
	{
		return clr;
	}
"
4509,b4c81f81-2305-46e4-b717-1c9d6a1b0657,"	public ChessPosition getPosition()
	{
		return pos;
	}
"
4510,60c3fa71-29ab-42eb-8361-72dd1164ad0b,"	public abstract ChessMoves nextMoves(ChessBoard b);
"
4511,79651f9a-be04-43b5-a270-8d98e18753ba,"	public abstract ChessMoves.MoveType isValidMove(ChessBoard b, ChessPosition p);
"
4512,e5655464-36bb-43f1-bf60-2fee7b155c72,"	protected abstract String getShortDescription();
"
4513,980f4db5-049a-4eef-a20a-31d7a5dca940,"	protected abstract String getImage();
"
4514,06c4aa9f-6499-42be-932d-557c2e8ddf37,"	public void makeMove(ChessBoard b, ChessPosition p) throws ChessException
	{
		ChessMoves.MoveType mt = isValidMove(b, p);
		if (mt != ChessMoves.MoveType.INVALID)
		{
			has_moved = true;
			pos = p;
		}
		else
			throw new ChessException(""Invalid move to make for "" + getShortDescription());
	}
"
4515,7eaf859e-676b-482b-ae12-421c238e8c99,"	private void printChessBoard()
	{
		System.out.print(""    \t"");
		for (int i = 0; i < 8; i++)
			System.out.format(""%5c "", (char)('A'+i));
		System.out.print(""\n"");
		
		// for each row
		for (int i = 0; i < 8; i++)
		{
			// Print the row number
			System.out.format(""%4d\t"", (8-i));
			
			// Now print the moves for each cell on that row
			for (int j = 0; j < 8; j++)
				if (board[i][j] != null)
					System.out.printf(""%5s "", board[i][j].getShortDescription());
				else
					System.out.printf(""      "");
			
			// Move to the next line
			System.out.print(""\n"");
		}		
	}
"
4516,49da8e10-9622-445b-a2da-b141cb593839,"	public TextChessBoard() throws ChessException
	{
		super();
		printChessBoard();
	}
"
4517,62cddded-c868-4a6e-8aa3-90571ddd04eb,"	public void makeMove(ChessPosition from, ChessPosition to) throws ChessException
	{
		super.makeMove(from, to);
		printChessBoard();
	}
"
4518,1549eee1-1de4-4e16-a353-c082405a6dd0,"	public void startGame()
	{
		Scanner s = new Scanner(System.in);
		ChessColor turn = ChessColor.COLOR_WHITE;
		do
		{
			System.out.printf(""\n>> "");
			if (s.findInLine(""([a-hA-H][1-8])\\s+([a-hA-H][1-8])"") != null)
			{
				try
				{
					MatchResult mr = s.match();
					if (mr.groupCount() == 2)
					{
						ChessPosition from_pos = new ChessPosition(mr.group(1));
						ChessPiece from = pieceAt(from_pos);
						if (from != null)
						{
							if (from.getColor() != turn)
								System.out.println(""Cannot move this piece. Not your turn"");
							else
							{
								// Make a move and switch sides
								ChessPosition to = new ChessPosition(mr.group(2));
								makeMove(from_pos, to);
								turn = (turn == ChessColor.COLOR_BLACK)?ChessColor.COLOR_WHITE:ChessColor.COLOR_BLACK;
							}
						}
						else
							System.out.println(""No piece to move at that position"");
					}
					else
						System.out.println(""You must give the full move"");
				}
				catch (IllegalStateException is)
				{
					System.out.println(""----> Error in input"");
				}
				catch (ChessException ce)
				{
					System.out.println(ce.getMessage());
				}
			}
			else if (s.findInLine(""([a-hA-H][1-8])"") != null)
			{
				try
				{
					MatchResult mr = s.match();
					if (mr.groupCount() == 1)
					{
						ChessPosition from_pos = new ChessPosition(mr.group(1));
						ChessPiece from = pieceAt(from_pos);
						if (from != null)
						{
							if (from.getColor() != turn)
								System.out.println(""Cannot move this piece. Not your turn"");
							else
							{
								ChessMoves moves = from.nextMoves(this);
								for (int i = 0; i < moves.getCount(); i++)
								{
									ChessPosition pos = moves.getMove(i);
									ChessMoves.MoveType mt = moves.moveType(i);
									System.out.printf(""\t%d: [%c,%c]"", i+1, pos.getBoardCol(), pos.getBoardRow());
									switch (mt)
									{
									case CAPTURE:
										System.out.println("" - Capture"");
										break;
									case CASTLE:
									case INVALID:
									case NORMAL:
									case PROMOTE:
									default:
										System.out.println();
										break;
									}
								}
							}
						}
						else
							System.out.println(""No piece to move at that position"");
					}
				}
				catch (IllegalStateException is)
				{
					System.out.println(""----> Error in input"");
				}
				catch (ChessException ce)
				{
					System.out.println(ce.getMessage());
				}
			}
			else
				System.out.println(""Improper input given"");
			s.nextLine();
		} while(true);		
	}
"
4519,da4183be-8611-42dd-b23b-6f8d026a3c81,"	public Knight(ChessColor c, int num) throws ChessException
	{
		super(c);
		int r = (c == ChessColor.COLOR_BLACK?0:7);

		if ((num != 1) && (num != 2))
			throw new ChessException(""Only two knights are allowed for each color"");
		
		if (num == 1)
			setPosition(new ChessPosition(r, 1));
		else
			setPosition(new ChessPosition(r, 6));
	}
"
4520,f5c8df0c-adf8-4531-ae64-52c512590597,"	public Knight(ChessColor c, ChessPosition p) throws ChessException
	{
		super(c);
		setPosition(p);
	}
"
4521,b921c031-6489-483d-b18d-378218102d62,"	public ChessMoves nextMoves(ChessBoard b)
	{
		// Initialize moves to 0
		int i = this.getPosition().getRow();
		int j = this.getPosition().getCol();

		ChessMoves moves = new ChessMoves();
		try
		{
			if (((i+2) < 8) && ((j+1) < 8))
			{
				ChessPosition p = new ChessPosition(i+2, j+1);
				ChessPiece tp = b.pieceAt(p);
				if ((tp != null) && (tp.getColor() != this.clr))
					moves.addMove(p, ChessMoves.MoveType.CAPTURE);
				else if (tp == null)
					moves.addMove(p);
			}
			if (((i+2) < 8) && ((j-1) >= 0))
			{
				ChessPosition p = new ChessPosition(i+2, j-1);
				ChessPiece tp = b.pieceAt(p);
				if ((tp != null) && (tp.getColor() != this.clr))
					moves.addMove(p, ChessMoves.MoveType.CAPTURE);
				else if (tp == null)
					moves.addMove(p);
			}
			if (((i-2) >= 0) && ((j+1) < 8))
			{
				ChessPosition p = new ChessPosition(i-2, j+1);
				ChessPiece tp = b.pieceAt(p);
				if ((tp != null) && (tp.getColor() != this.clr))
					moves.addMove(p, ChessMoves.MoveType.CAPTURE);
				else if (tp == null)
					moves.addMove(p);
			}
			if (((i-2) >= 0) && ((j-1) >= 0))
			{
				ChessPosition p = new ChessPosition(i-2, j-1);
				ChessPiece tp = b.pieceAt(p);
				if ((tp != null) && (tp.getColor() != this.clr))
					moves.addMove(p, ChessMoves.MoveType.CAPTURE);
				else if (tp == null)
					moves.addMove(p);
			}
			if (((i+1) < 8) && ((j+2) < 8))
			{
				ChessPosition p = new ChessPosition(i+1, j+2);
				ChessPiece tp = b.pieceAt(p);
				if ((tp != null) && (tp.getColor() != this.clr))
					moves.addMove(p, ChessMoves.MoveType.CAPTURE);
				else if (tp == null)
					moves.addMove(p);
			}
			if (((i+1) < 8) && ((j-2) >= 0))
			{
				ChessPosition p = new ChessPosition(i+1, j-2);
				ChessPiece tp = b.pieceAt(p);
				if ((tp != null) && (tp.getColor() != this.clr))
					moves.addMove(p, ChessMoves.MoveType.CAPTURE);
				else if (tp == null)
					moves.addMove(p);
			}
			if (((i-1) >= 0) && ((j+2) < 8))
			{
				ChessPosition p = new ChessPosition(i-1, j+2);
				ChessPiece tp = b.pieceAt(p);
				if ((tp != null) && (tp.getColor() != this.clr))
					moves.addMove(p, ChessMoves.MoveType.CAPTURE);
				else if (tp == null)
					moves.addMove(p);
			}
			if (((i-1) >= 0) && ((j-2) >= 0))
			{
				ChessPosition p = new ChessPosition(i-1, j-2);
				ChessPiece tp = b.pieceAt(p);
				if ((tp != null) && (tp.getColor() != this.clr))
					moves.addMove(p, ChessMoves.MoveType.CAPTURE);
				else if (tp == null)
					moves.addMove(p);
			}
		}
		catch (Exception e)
		{
			// Since only valid positions are created, don't worry about exceptions
			moves = null;
		}
		
		return moves;		
	}
"
4522,858a4114-5a70-48cd-9124-1b426c7f7d26,"	@Override
	public ChessMoves.MoveType isValidMove(ChessBoard b, ChessPosition p) 
	{
		if ((p.getCol() < 0) || (p.getCol() > 7) || (p.getRow() < 0) || (p.getRow() > 7))
			return ChessMoves.MoveType.INVALID;

		ChessPosition cur_pos = this.getPosition();
		int dx = Math.abs(cur_pos.getCol() - p.getCol());
		int dy = Math.abs(cur_pos.getRow() - p.getRow());
		
		if (((dx == 2) && (dy == 1)) || ((dx == 1) && (dy == 2)))
		{
			ChessPiece cp = b.pieceAt(p);
			if ((cp == null) || (cp.getColor() == this.getColor()))
				return ChessMoves.MoveType.NORMAL;
			else
				return ChessMoves.MoveType.CAPTURE;
		}
		else
			return ChessMoves.MoveType.INVALID;		
	}
"
4523,40c49770-1aa5-4921-96a7-64500b00c13f,"	@Override
	public String getShortDescription() 
	{
		if (this.clr == ChessColor.COLOR_BLACK)
			return new String(""n"");
		else
			return new String(""N"");
	}
"
4524,00447b30-9759-4e49-9a1b-11c595fe44de,"	public String getImage()
	{
		if (this.clr == ChessColor.COLOR_BLACK)
			return new String(""\u265E"");
		else
			return new String(""\u2658"");
	}
"
4525,d7e3b6fd-a6ee-40bf-9381-6293be53656e,"	public ChessMoves()
	{
		count = 0;
		moves = null;
	}
"
4526,33df8b52-f8b3-46bf-954f-f19cf96b6de8,"	public int getCount()
	{
		return count;
	}
"
4527,d4ac4b1a-4e6f-45dd-b8b6-88684c0aa30d,"	public ChessPosition getMove(int num) throws ChessException
	{
		if (num > count)
			throw new ChessException(""Moves out of bounds"");
		
		if (count == 0)
			throw new ChessException(""No moves"");
		
		Move m = moves;
		for (int i = 0; i < num; i++)
			m = m.next;
		
		return m.pos;
	}
"
4528,2b573f7a-2d57-40cf-ba7c-fb5adffb6f20,"	public MoveType moveType(int num) throws ChessException
	{
		if (num > count)
			throw new ChessException(""Moves out of bounds"");
		
		if (count == 0)
			throw new ChessException(""No moves"");
		
		Move m = moves;
		for (int i = 0; i < num; i++)
			m = m.next;
		
		return m.type;
	}
"
4529,f7c34be4-2b5b-4885-b636-6bbb7c6e06f3,"	public void addMove(ChessPosition p) throws ChessException
	{
		addMove(p, MoveType.NORMAL);
	}
"
4530,2df466af-25a4-43c5-b21e-0abcb53ade4d,"	public void addMove(ChessPosition p, MoveType t) throws ChessException
	{
		if (p == null)
			throw new ChessException(""No move to add"");
		
		Move m = new Move();
		m.pos = p;
		m.type = t;
		m.next = moves;
		moves = m;
		count++;
	}
"
4531,961745b0-9b7c-42fd-863f-08cae41865bb,"    public Note(double frequency) throws IllegalArgumentException {
        this(frequency, DEFAULT_DURATION, DEFAULT_VOLUME);
    }
"
4532,44064ba3-8e51-4fed-9b46-12461d7ca7f4,"    public Note(double frequency, Duration duration)
            throws IllegalArgumentException {
        this(frequency, duration, DEFAULT_VOLUME);
    }
"
4533,b8802ea1-b421-476c-8417-4bcf3f1e58a1,"    public Note(double frequency, Duration duration, int volume)
            throws IllegalArgumentException {
        super(duration, volume);

        this.midiNumber = Frequency.getMIDINumber(frequency);
        this.frequency = frequency;
        this.tone = new Tone(frequency);
        this.octave = (midiNumber / 12) - 1;
    }
"
4534,0b50c92b-e750-4273-b2e5-5133fb5de682,"    public Note(int midiNumber) throws IllegalArgumentException {
        this(midiNumber, DEFAULT_DURATION, DEFAULT_VOLUME);
    }
"
4535,cf8f49d8-938a-4405-8c70-45eb23733d35,"    public Note(int midiNumber, Duration duration)
            throws IllegalArgumentException {
        this(midiNumber, duration, DEFAULT_VOLUME);
    }
"
4536,4e640b3a-6e82-4890-b629-a0d828eadd48,"    public Note(int midiNumber, Duration duration, int volume)
            throws IllegalArgumentException {
        super(duration, volume);

        this.frequency = Frequency.getMIDINumberFrequency(midiNumber);
        this.midiNumber = midiNumber;
        this.tone = new Tone(midiNumber);
        this.octave = (midiNumber / 12) - 1;
    }
"
4537,7f15d034-3511-4f48-b329-7ae1c0161549,"    public Note(String note) throws IllegalArgumentException {
        this(note, DEFAULT_DURATION, DEFAULT_VOLUME);
    }
"
4538,30354662-75fa-4eb8-877b-20fd50fcd328,"    public Note(String note, Duration duration)
            throws IllegalArgumentException {
        this(note, duration, DEFAULT_VOLUME);
    }
"
4539,68d90345-f40d-403a-820d-fda0a40f3ffb,"    public Note(String note, Duration duration, int volume)
            throws IllegalArgumentException {
        super(duration, volume);

        Note newNote = StringParser.getNote(note);
        this.frequency = newNote.frequency;
        this.midiNumber = newNote.midiNumber;
        this.tone = newNote.tone;
        this.octave = newNote.octave;
    }
"
4540,41b027e6-173d-4206-953e-e9b4f7b2d932,"    public Note(Tone tone, int octave) {
        this(tone, octave, DEFAULT_DURATION, DEFAULT_VOLUME);
    }
"
4541,c3aa6e1e-9dcd-4449-a242-711026ccd896,"    public Note(Tone tone, int octave, Duration duration) {
        this(tone, octave, duration, DEFAULT_VOLUME);
    }
"
4542,11083678-142f-4cf3-898e-ddcbec05e571,"    public Note(Tone tone, int octave, Duration duration, int volume) {
        super(duration, volume);

        this.tone = tone;
        this.octave = octave;
        this.midiNumber = tone.getPitchClass() + 12 * (octave + 1);
        this.frequency = Frequency.getMIDINumberFrequency(midiNumber);
    }
"
4543,d0a7dbc9-1148-45a1-9b12-f5bb08a40680,"    public Note(Note note) {
        this.frequency = note.frequency;
        this.midiNumber = note.midiNumber;
        this.tone = note.tone;
        this.octave = note.octave;
        // Inherited fields
        this.duration = note.duration;
        this.volume = note.volume;
    }
"
4544,e2359de4-e91f-41f8-b72b-72c0b75c2b30,"    public Name getName() {
        return tone.getName();
    }
"
4545,4cad5839-eb1b-458e-b241-3f9d8d9a987c,"    public Accidental getAccidental() {
        return tone.getAccidental();
    }
"
4546,049c98d7-b45b-4ee0-ade5-047306eb9d58,"    public int getOctave() {
        return octave;
    }
"
4547,4aec8bee-360d-42e5-9d21-e9db5c317e69,"    public double getFrequency() {
        return frequency;
    }
"
4548,916ded96-ff26-433d-85e5-f56cd83022b6,"    public int getMIDINumber() {
        return midiNumber;
    }
"
4549,6b6b91ca-ef9f-4ec4-8a60-b9d083ca1aba,"    public void semitoneUp() {
        transpose(1);
    }
"
4550,82c3d607-6842-4402-97fe-55da6b0a7037,"    public void semitoneDown() {
        transpose(-1);
    }
"
4551,2de596d8-011e-41af-8570-7f0fc24d00a1,"    public void transpose(int semitones) throws IllegalArgumentException {
        if (semitones == 0) {
            return;
        }

        Validator.transpose(midiNumber, semitones);

        this.midiNumber += semitones;
        this.frequency = Frequency.getMIDINumberFrequency(midiNumber);
        this.tone = new Tone(midiNumber);
        this.octave = (midiNumber / 12) - 1;
    }
"
4552,5c777389-42ae-419b-a77d-0cb04824c40e,"    public void switchAccidental() {
        // Adjusts the octave when switching from C to B-Sharp...
        if (tone.getName() == Name.C
                && tone.getAccidental() == Accidental.Natural) {
            octave--;
        }

        // ...and viceversa.
        if (tone.getName() == Name.B
                && tone.getAccidental() == Accidental.Sharp) {
            octave++;
        }

        tone.switchAccidental();
    }
"
4553,507f6afe-daad-4350-a08a-460112f7992f,"    public String toStringExt() {
        StringBuilder sb = new StringBuilder();

        sb.append(""\nNOTE:\t\t"");
        sb.append(this.toString());

        sb.append(""\nName:\t\t"");
        sb.append(tone.getName());

        sb.append(""\nAccidental:\t"");
        sb.append(tone.getAccidental().getName());

        sb.append(""\nOctave:\t\t"");
        sb.append(octave);

        sb.append(""\nFrequency:\t"");
        sb.append(String.format(Locale.ENGLISH, ""%1.3f"", frequency));
        sb.append(""Hz"");

        sb.append(""\nMIDI number:\t"");
        sb.append(midiNumber);

        sb.append(""\nDuration:\t"");
        sb.append(duration);

        sb.append(""\nDuration Value:\t"");
        sb.append(duration.getDurationValue());

        sb.append(""\nVolume:\t\t"");
        sb.append(volume);

        sb.append(""\n"");

        return sb.toString();
    }
"
4554,0c4e0ae2-7e41-44e2-9711-a0bf095f8601,"    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder(3);

        sb.append(tone.getName());

        if (tone.getAccidental() != Accidental.Natural) {
            sb.append(tone.getAccidental());
        }

        sb.append(octave);

        return sb.toString();
    }
"
4555,a6babfc9-07e2-4dc3-bed3-2b3ebe84fb2c,"    @Override
    public boolean equals(Object o) {
        if (!(o instanceof Note)) {
            return false;
        }

        if (o == this) {
            return true;
        }

        Note n = (Note) o;

        if (n.getFrequency() == this.frequency
                && n.duration.equals(this.duration)) {
            return true;
        }

        return false;
    }
"
4556,119e2e43-a9e9-4603-9d28-84009462b5ab,"    @Override
    public int hashCode() {
        final int prime = 911;

        int hash = super.hashCode();
        hash = prime * hash + new Double(frequency).hashCode();
        hash = prime * hash + midiNumber;
        hash = prime * hash + tone.hashCode();
        hash = prime * hash + octave;

        return hash;
    }
"
4557,64cd07ab-5f62-401c-8bc2-a7ba18cc0cbd,"    public Rest(Duration duration) {
        super(duration, 0);
    }
"
4558,b0285ae2-1f3e-4113-a280-f167ebee80b4,"    @Override
    public void setVolume(int volume) throws UnsupportedOperationException {
        StringBuilder e = new StringBuilder(60);

        e.append(""Invalid operation! "");
        e.append(""The volume of a rest cannot be edited."");

        throw new UnsupportedOperationException(e.toString());
    }
"
4559,79079caf-22d1-4920-b2f8-172cd30654b6,"    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append(""Rest ("");
        sb.append(duration);
        sb.append("")"");

        return sb.toString();
    }
"
4560,0869ee17-5b85-4e2e-a639-de5b21a74483,"    @Override
    public boolean equals(Object o) {
        if (!(o instanceof Rest)) {
            return false;
        }

        if (o == this) {
            return true;
        }

        Rest r = (Rest) o;

        if (r.duration.equals(this.duration)) {
            return true;
        }

        return false;
    }
"
4561,30e6b503-5647-442d-932c-8e12ec16c5f5,"    @Override
    public int hashCode() {
        final int prime = 911;

        int hash = 1;
        hash = prime * hash + duration.hashCode();
        hash = prime * hash + volume;

        return hash;
    }
"
4562,fe48b4a1-95dd-4474-875e-24cbbb5cd0bf,"        Value(double value) {
            this.value = value;
        }
"
4563,f30174ee-8382-4997-89f7-f22d63bc699b,"        public double getDurationValue() {
            return value;
        }
"
4564,1702764b-0731-4003-9721-b32d88b43052,"    public Duration(Value value) {
        this.value = value;
        this.dots = Element.DEFAULT_DOTS;
    }
"
4565,3656500e-4369-4d25-b7f6-ef8f6e54e92b,"    public Duration(Value value, int dots) throws IllegalArgumentException {
        Validator.dots(dots);

        this.value = value;
        this.dots = dots;
    }
"
4566,cf662a85-e51f-4a08-adc5-959f5e2304ee,"    public Duration(Duration duration) {
        this.value = duration.value;
        this.dots = duration.dots;
    }
"
4567,763ff6a7-8863-4923-a51a-17293ee1f576,"    public Value getValue() {
        return value;
    }
"
4568,27c8df4e-b057-48d6-ae5a-03a2b0206687,"    public void setValue(Value value) {
        this.value = value;
    }
"
4569,7d1e1fee-bb9f-4e7a-8f80-d66473d434a2,"    public int getDots() {
        return dots;
    }
"
4570,a5793797-4e99-42be-98cb-6fb443df04c8,"    public void setDots(int dots) throws IllegalArgumentException {
        Validator.dots(dots);

        this.dots = dots;
    }
"
4571,3f4cbfaa-b417-47f9-91ba-1cc59f196ab7,"    public double getDurationValue() {
        if (dots != 0) {
            switch (dots) {
                case 1:
                    return increaseDurationValue(1 / 2.0);

                case 2:
                    return increaseDurationValue(1 / 2.0 + 1 / 4.0);

                case 3:
                    return increaseDurationValue(1 / 2.0 + 1 / 4.0 + 1 / 8.0);
            }
        }

        return value.getDurationValue();
    }
"
4572,48b875c9-01d9-454b-aa57-76ff4d9442cd,"    private double increaseDurationValue(double increment) {
        return value.getDurationValue() + value.getDurationValue() * increment;
    }
"
4573,d3f23336-f685-4f26-bf53-35d112a24622,"    public String verboseString() {
        return null;
    }
"
4574,dc8ff785-a6d8-4583-988b-69c999cd3216,"    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append(value);

        if (dots > 0) {
            sb.append("" with "");
            sb.append(dots);
            sb.append((dots == 1 ? "" dot"" : "" dots""));
        }

        return sb.toString();
    }
"
4575,e67b6ac5-8bb9-4c4b-ac35-bcb55d17d92d,"    @Override
    public boolean equals(Object o) {
        if (!(o instanceof Duration)) {
            return false;
        }

        if (o == this) {
            return true;
        }

        Duration d = (Duration) o;

        if (d.getDurationValue() != this.getDurationValue()) {
            return false;
        }

        if (d.getValue() == this.value && d.getDots() == this.dots){
            return true;
        }

        return false;
    }
"
4576,fb692c80-5633-4955-aeb3-48f165b2531c,"    @Override
    public int hashCode() {
        final int prime = 911;

        int hash = 1;
        hash = prime * hash + value.hashCode();
        hash = prime * hash + dots;

        return hash;
    }
"
4577,4dc9b752-96be-4021-b297-be0c57a96a6f,"    Value getValue();
"
4578,60eba281-8a53-4e54-8a1e-315f30205a8b,"    void setValue(Value value);
"
4579,dfb29318-1d03-4b54-b45c-5996ae817712,"    int getDots();
"
4580,c3ba872f-d37f-47ec-8df2-3c82743420dc,"    void setDots(int dots);
"
4581,da5ca58e-d38e-4006-8d20-3d438d1d66d0,"    double getDurationValue();
"
4582,d22455c2-5060-41c0-abcf-73a938d165f7,"    int getVolume();
"
4583,a8407ae1-d76e-4edd-b3ea-59afcf6eb9a7,"    void setVolume(int volume);
"
4584,6478f5e2-1de0-4830-86d4-60cfd04286d4,"    public ScoreElement() {
        this(DEFAULT_DURATION, DEFAULT_VOLUME);
    }
"
4585,20355ce0-0f8d-410d-bb0f-9f0b3d7c98d2,"    public ScoreElement(Duration duration) {
        this(duration, DEFAULT_VOLUME);
    }
"
4586,33521d41-4869-4afc-b0a6-250435bd97e2,"    public ScoreElement(Duration duration, int volume) {
        this.duration = duration;
        this.volume = volume;
    }
"
4587,84b059f5-c925-4216-afc9-758e4c0b8f65,"    public Value getValue() {
        return duration.getValue();
    }
"
4588,ba28bde9-d804-40ac-99a0-dd20bb0d652b,"    public void setValue(Value value) {
        duration.setValue(value);
    }
"
4589,ff1c6a07-3660-4b34-b26c-fe2d701e93c9,"    public int getDots() {
        return duration.getDots();
    }
"
4590,ba256381-4820-48bb-b1c1-dae8287ef4e3,"    public void setDots(int dots) throws IllegalArgumentException {
        duration.setDots(dots);
    }
"
4591,4d5a46a3-d772-4c21-975e-6fd12b8a94ae,"    public double getDurationValue() {
        return duration.getDurationValue();
    }
"
4592,f0c7a6c8-5529-4baf-b076-771271a05c67,"    public int getVolume() {
        return volume;
    }
"
4593,3929a3da-d241-43d8-b3fa-b4ebe750a3d4,"    public void setVolume(int volume) throws IllegalArgumentException {
        Validator.volume(volume);

        this.volume = volume;
    }
"
4594,fb227bd5-5435-45d0-a607-fcccdc6ed7fb,"    @Override
    public boolean equals(Object o) {
        if (!super.equals(o)) {
            return false;
        }

        if (!(o instanceof ScoreElement)) {
            return false;
        }

        if (o == this) {
            return true;
        }

        ScoreElement se = (ScoreElement) o;

        if (se.getDurationValue() == this.getDurationValue()) {
            return true;
        }

        return false;
    }
"
4595,5b9c65b0-6b99-4635-96eb-4236b5e24539,"    @Override
    public int hashCode() {
        final int prime = 911;

        int hash = 1;
        hash = prime * hash + duration.hashCode();
        hash = prime * hash + volume;

        return hash;
    }
"
4596,b437c454-a833-4c91-a45b-f73cac658c3c,"    private StringParser() {}
"
4597,8fc63dc9-eacc-4bcd-9508-69b3995e433e,"    public static Name getName(String noteName) {
        noteName = noteName.toUpperCase();

        if (!(noteName.matches(NOTE_NAME_PATTERN))) {
            throw new IllegalArgumentException(""Invalid note name!"");
        }

        switch (noteName) {
            case ""C"":
                return Name.C;

            case ""D"":
                return Name.D;

            case ""E"":
                return Name.E;

            case ""F"":
                return Name.F;

            case ""G"":
                return Name.G;

            case ""A"":
                return Name.A;

            case ""B"":
                return Name.B;

            default:
                return null;
        }
    }
"
4598,9c9f48ee-104e-410d-8241-ac6576d473ad,"    public static Accidental getAccidental(String noteAccidental) {
        if (!(noteAccidental.matches(NOTE_ACCIDENTAL_PATTERN))) {
            throw new IllegalArgumentException(""Invalid note accidental!"");
        }

        switch (noteAccidental) {
            case ""b"":
                return Accidental.Flat;

            case ""#"":
                return Accidental.Sharp;

            default:
                return null;
        }
    }
"
4599,0d231e93-2949-4f46-8920-0a58c0511e1c,"    public static Note getNote(String note) {
        if (!(note.matches(NOTE_PATTERN))) {
            throw new IllegalArgumentException(""Invalid note!"");
        }

        int argLength = note.length();

        String name = String.valueOf(note.charAt(0));

        if (argLength > 1) {
            // Name + Octave
            if (note.substring(1, argLength).matches(""(-)?[0-9]+"")) {
                String octave = note.substring(1, argLength);
                Tone tone = Tone.getTone(StringParser.getName(name),
                                         Element.DEFAULT_ACCIDENTAL);

                return new Note(tone, Integer.parseInt(octave));
            }

            String accidental = String.valueOf(note.charAt(1));

            // Name + Accidental + Octave
            if (argLength > 2) {
                String octave = note.substring(2, argLength);
                Tone tone = Tone.getTone(StringParser.getName(name),
                                         StringParser.getAccidental(accidental));

                return new Note(tone, Integer.parseInt(octave));
            }

            // Name + Accidental
            Tone tone = Tone.getTone(StringParser.getName(name),
                                     StringParser.getAccidental(accidental));

            return new Note(tone, Element.DEFAULT_OCTAVE);
        }

        // Name
        Tone tone = Tone.getTone(StringParser.getName(name),
                                 Element.DEFAULT_ACCIDENTAL);

        return new Note(tone, Element.DEFAULT_OCTAVE);
    }
"
4600,fbf606ab-8da6-43a9-955e-94b796709f4c,"    public static void frequency(double frequency, double min, double max)
            throws IllegalArgumentException {
        if (frequency < min || frequency > max) {
            StringBuilder e = new StringBuilder(80);

            e.append(""Invalid frequency value! "");
            e.append(""It must be a positive double between "");
            e.append(String.format(Locale.ENGLISH, ""%1.2f"", min));
            e.append("" and "");
            e.append(String.format(Locale.ENGLISH, ""%1.2f"", max));
            e.append(""."");

            throw new IllegalArgumentException(e.toString());
        }
    }
"
4601,c7a9da44-5932-4d38-923a-064bfddf2c2d,"    public static void midiNumber(int midiNumber)
            throws IllegalArgumentException {
        if (midiNumber < MIDI_MIN_NUMBER || midiNumber > MIDI_MAX_NUMBER) {
            StringBuilder e = new StringBuilder(80);

            e.append(""Invalid MIDI note number value! "");
            e.append(""It must be a positive integer between "");
            e.append(MIDI_MIN_NUMBER);
            e.append("" and "");
            e.append(MIDI_MAX_NUMBER);
            e.append(""."");

            throw new IllegalArgumentException(e.toString());
        }
    }
"
4602,29459d35-94d4-4be2-9f0b-d17058eb7cb2,"    public static void pianoKey(int pianoKey) throws IllegalArgumentException {
        if (pianoKey < PIANO_MIN_KEY || pianoKey > PIANO_MAX_KEY) {
            StringBuilder e = new StringBuilder(80);

            e.append(""Invalid piano key number value! "");
            e.append(""It must be a positive integer between "");
            e.append(PIANO_MIN_KEY);
            e.append("" and "");
            e.append(PIANO_MAX_KEY);
            e.append(""."");

            throw new IllegalArgumentException(e.toString());
        }
    }
"
4603,22813289-276d-4a00-8a4c-1e891a1dc78b,"    public static void transpose(int midiNumber, int semitones)
            throws IllegalArgumentException {
        int transposed = midiNumber + semitones;

        if (transposed < MIDI_MIN_NUMBER || transposed > MIDI_MAX_NUMBER) {
            StringBuilder e = new StringBuilder(80);

            e.append(""Invalid semitones value! "");
            e.append(""For this note it must be a value between -"");
            e.append(midiNumber); e.append("" and +"");
            e.append(127 - midiNumber); e.append(""."");

            throw new IllegalArgumentException(e.toString());
        }
    }
"
4604,6ea22a2d-1140-43a9-ad41-926100caacd4,"    public static void volume(int volume) throws IllegalArgumentException {
        if (volume < VOLUME_MIN_VALUE || volume > VOLUME_MAX_VALUE) {
            StringBuilder e = new StringBuilder(80);

            e.append(""Invalid volume value! "");
            e.append(""It must be a positive integer between "");
            e.append(VOLUME_MIN_VALUE);
            e.append("" and "");
            e.append(VOLUME_MAX_VALUE);
            e.append(""."");

            throw new IllegalArgumentException(e.toString());
        }
    }
"
4605,a7507afb-13ca-4b47-a92e-2ea0a160a2f4,"    public static void dots(int dots) throws IllegalArgumentException {
        if (dots < DOTS_MIN || dots > DOTS_MAX) {
            StringBuilder e = new StringBuilder(70);

            e.append(""Invalid dots number! "");
            e.append(""It must be a positive integer between "");
            e.append(DOTS_MIN);
            e.append("" and "");
            e.append(DOTS_MAX);
            e.append(""."");

            throw new IllegalArgumentException(e.toString());
        }
    }
"
4606,adbd7e2e-0ab5-4521-b5e6-4c2295aafa86,"    public static void semitones(int semitones, int min, int max)
            throws IllegalArgumentException {
        if (semitones < min || semitones > max) {
            StringBuilder e = new StringBuilder(80);

            e.append(""Invalid semitones value! "");
            e.append(""It must be a positive integer between "");
            e.append(min);
            e.append("" and "");
            e.append(max);
            e.append(""."");

            throw new IllegalArgumentException(e.toString());
        }
    }
"
4607,c97cc187-a128-4822-a3de-2330980fc220,"    public static double getFrequency(int semitonesDistance) {
        return getFrequency(semitonesDistance, A440);
    }
"
4608,c1c7cbae-15e7-480d-a016-2b8629a9e398,"    public static double getFrequency(int semitonesDistance, double pitch) {

        return Math.pow(2, (double) semitonesDistance / 12.0) * pitch;
    }
"
4609,907d1de9-f679-4edb-ad51-5af8e2647680,"    public static double getCents(double reference, double frequency) {

        return 1200.0 * lb(frequency / reference);
    }
"
4610,3c11e168-e888-48e6-9cf6-ab8a0598ea7b,"    public static int getSemitones(double reference, double frequency) {

        return getSemitones(getCents(reference, frequency));
    }
"
4611,81189ad6-b844-4d88-920b-e3f53a6c650f,"    public static int getSemitones(double cents) {
        return (int) (Math.round(cents) / 100.0);
    }
"
4612,3bfdb522-1367-4209-bb3e-cba8cb385d5b,"    public static int getMIDINumber(double frequency)
            throws IllegalArgumentException {
        Validator.frequency(frequency, MIDI_MIN_FREQUENCY, MIDI_MAX_FREQUENCY);

        return (int) Math.round(69.0 + 12.0 * lb(frequency / A440));
    }
"
4613,e6e90316-1ec7-4781-9541-d9ea307eab3a,"    public static double getMIDINumberFrequency(int midiNumber)
            throws IllegalArgumentException {
        Validator.midiNumber(midiNumber);

        return A440 * Math.pow(2, (midiNumber - 69.0) / 12.0);
    }
"
4614,2464d37a-e661-4c53-a244-dcc3e7db79ea,"    public static int getPianoKeyNumber(double frequency)
            throws IllegalArgumentException {
        Validator.frequency(frequency,
                            PIANO_MIN_FREQUENCY,
                            PIANO_MAX_FREQUENCY);

        return (int) Math.round(12.0 * lb(frequency / A440) + 49.0);
    }
"
4615,cfaf5519-cec9-4b5a-8edb-6055f7da40da,"    public static double getPianoKeyFrequency(int pianoKey)
            throws IllegalArgumentException {
        Validator.pianoKey(pianoKey);

        return Math.pow(2, ((double) pianoKey - 49.0) / 12.0) * A440;
    }
"
4616,31668e83-8d14-41a1-b931-8d50d34c29ca,"    private static double lb(double value) {
        return Math.log(value) / Math.log(2.0);
    }
"
4617,1e2655f4-a77c-4848-9327-3873db648e74,"    Accidental(final String name, final char symbol) {
        this.name = name;
        this.symbol = symbol;
    }
"
4618,d66fd256-90ea-411d-811b-aab6363ce2fd,"    public String getName() {
        return name;
    }
"
4619,fa58a008-da15-4518-b9c1-1537ccaaa450,"    public char getSymbol() {
        return symbol;
    }
"
4620,c05de5fe-a0b3-42d1-8c4c-92cf73d916f9,"    @Override
    public String toString() {
        return String.valueOf(symbol);
    }
"
4621,2175bc6b-145d-4078-bc03-46f3c1179fe7,"    private Tone(Name name, Accidental accidental, int pitchClass) {
        this.name = name;
        this.accidental = accidental;
        this.pitchClass = pitchClass;

        if (accidental == Flat) {
            this.accidentalID = 1;
        } else {
            this.accidentalID = 0;
        }
    }
"
4622,72773402-1447-40de-ae26-b6b82e22a5cb,"    public Tone(double frequency) {
        this(Frequency.getMIDINumber(frequency));
    }
"
4623,d993ca35-b1dc-48ed-a37c-d3e705df9388,"    public Tone(int midiNumber) {
        Validator.midiNumber(midiNumber);

        this.pitchClass = midiNumber % 12;
        this.accidentalID = 0;
        this.name = tones[pitchClass][accidentalID].getName();
        this.accidental = tones[pitchClass][accidentalID].getAccidental();
    }
"
4624,9d0153cb-855a-449f-b846-9983681f3531,"    public Tone(Tone tone) {
        this(tone.getName(), tone.getAccidental(), tone.getPitchClass());
    }
"
4625,e9b21ee7-9745-4cb6-a3f5-8e17dd6bdc58,"    public Name getName() {
        return name;
    }
"
4626,d1c693b7-469a-4e5f-9b27-138fdac240b9,"    public Accidental getAccidental() {
        return accidental;
    }
"
4627,00e0eac2-0107-428b-8b87-ce26964a841d,"    public int getPitchClass() {
        return pitchClass;
    }
"
4628,f956ffcd-dff6-4daf-a8e3-e9a234d2c03e,"    public void switchAccidental() {
        this.accidentalID = (this.accidentalID == 0 ? 1 : 0);
        this.name = tones[pitchClass][accidentalID].getName();
        this.accidental = tones[pitchClass][accidentalID].getAccidental();
    }
"
4629,7acaff53-b092-4711-9fc8-99f02d29ad6a,"    public static Tone getTone(Name name, Accidental accidental) {
        for (int pitchClass = 0; pitchClass < tones.length; pitchClass++) {
            if (tones[pitchClass][0].getName() == name
                    && tones[pitchClass][0].getAccidental() == accidental) {
                return new Tone(tones[pitchClass][0]);
            }

            if (tones[pitchClass][1].getName() == name
                    && tones[pitchClass][1].getAccidental() == accidental) {
                return new Tone(tones[pitchClass][1]);
            }
        }

        return null; // Unreachable
    }
"
4630,9b97e9a3-92bd-4adc-874e-da74da4f5237,"    public static int getPitchClass(Name name, Accidental accidental) {
        for (int pitchClass = 0; pitchClass < tones.length; pitchClass++) {
            if (tones[pitchClass][0].getName() == name
                    && tones[pitchClass][0].getAccidental() == accidental
                    || tones[pitchClass][1].getName() == name
                    && tones[pitchClass][1].getAccidental() == accidental) {
                return pitchClass;
            }
        }

        return -1; // Unreachable
    }
"
4631,ab565325-250a-435b-a515-7c9fdf168857,"    public String toString() {
        StringBuilder sb = new StringBuilder(10);

        sb.append(name);

        if (accidental != Natural) {
            sb.append(accidental);
        }

        return sb.toString();
    }
"
4632,c9c57d18-470a-438e-af57-8f0f2dda6c44,"    public boolean equals(Object o) {
        if (!(o instanceof Tone)) {
            return false;
        }

        if (o == this) {
            return true;
        }

        Tone t = (Tone) o;

        if (t.getPitchClass() == this.pitchClass) {
            return true;
        }

        return false;
    }
"
4633,30cd81d0-f24a-4f82-b9fc-32128bbdacf6,"    public int hashCode() {
        final int prime = 911;

        int hash = 1;
        hash = prime * hash + name.hashCode();
        hash = prime * hash + accidental.hashCode();
        hash = prime * hash + pitchClass;
        hash = prime * hash + accidentalID;

        return hash;
    }
"
4634,0075892b-0283-4898-b3fe-3359b4ab8675,"    public static void main(String[] args) {
   
        int[] a = {1, 2, 3};
        int[] b = {1, 442, 3};
        
       boolean koll = Arrays.equals(a, b);
        
        if (koll == true) {
            System.out.println("""");
        } else {
            System.out.println("""");
        }
        
 
        
        
        
        
        
        
        
}
"
4635,3dfc47ff-5ee5-4c24-ad89-31bcb979fdc0,"    public static void main(String[] args) {
        int n = 100;
        int[] a = new int[n];
        System.out.print(""Dessa tal slumpas till arrayen: "");
        
        for(int i = 0 ; i < n ; i++){
            if(i%10==0){
            System.out.println();
            }
            a[i] = (int) (1000 * Math.random());
            System.out.print(a[i]+""\t"");
        }
        
        int s;
        for(int i = 0; i < n-1 ; i++)   {
            for(int j = i+1; j < n ; j++){
                if(a[i] > a[j]){
                    s = a[i];
                    a[i]= a[j];
                    a[j] = s;
                    
                }
            }
        }
        
        System.out.println();
        System.out.print(""Efter sortering: "");
        for(int i = 0 ; i < n ; i++){
            if(i%10==0) {
                System.out.println();
            }
        
            System.out.print(a[i]+""\t"");
        }
        
        
        
            
                   
        }
"
4636,4f22bc11-2bb1-4e2a-ae4f-464851d9db63,"public static void main( String[] arg ) {
Scanner sc = new Scanner(System.in);
int[] arr = {3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25};

int max, min, t, pos, mitten;

min = 0;
max = arr.length - 1;

System.out.print(""Vilket heltal söker du? "");
t = sc.nextInt();
pos = -1;

while(min <= max && pos == -1) {
mitten = (max + min)/2;
if ( t > arr[mitten]) min = mitten + 1;

else if (t < arr[mitten]) max = mitten - 1;

else pos = mitten;
}
if (pos == -1) System.out.println(""Talet hittades inte"");
else System.out.println(""Talet finns i element nummer "" + pos);
}
"
4637,0e52e3c1-336e-46fd-90c9-6152f4b267c4,"public static void main( String[] arg ) {
Scanner sc = new Scanner(System.in);
int[] arr = { 13 , 15, 7 , 3 ,11 , 21 , 25 , 23 , 9 , 5 , 17} ;
int pos = -1;
System.out.print(""Vilket heltal söker du? "");
int t = sc.nextInt();
for(int i = 0 ; i < arr.length ; i++) {
if( t== arr[i]){
pos = i;
i = arr.length; // loopen slutar
}
}
if (pos == -1) System.out.println(""Talet hittades inte!"");
else System.out.println(""Talet finns i element nummer "" + pos);
}
"
4638,0733af02-df01-4404-b4c9-feae9a93920a,"    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        HashMap<String, String> ht = new HashMap<>();
        char svar;
        boolean fortsatt = true;
        int antalRatt = 1;
        while (fortsatt) {
            System.out.println();
            System.out.println(""Välj:"");
            System.out.println(""1. Skapa Gloslistan"");
            System.out.println(""2. Visa Gloslistan"");
            System.out.println(""3. Skriv in en ny glosa"");
            System.out.println(""4. Glosförhör"");
            System.out.println(""0. Avsluta"");
            try {
                svar = sc.nextLine().charAt(0);
                switch (svar) {
                    case '1':
                        ht.put(""Sol"", ""Sun"");
                        ht.put(""Hej"", ""Hello"");
                        ht.put(""Måne"", ""Moon"");
                        ht.put(""Regn"", ""Rain"");
                        ht.put(""Snow"", ""Snö"");
                        System.out.println(""Klart"");
                        break;
                    case '2':
                        System.out.print(""Glosa? "");
                        String Glos = sc.nextLine();
                        System.out.println(""Glosa: "" + ht.get(Glos));
                        break;
                    case '3':
                        System.out.println(""Ange det svenska ordet: "");
                        String Glosa = sc.next();
                        System.out.println(""Ange det engelska ordet: "");
                        String uzd = sc.next();
                        ht.put(Glosa, uzd);
                        break;
                    case '4':
                        for (String nyckel : ht.keySet()) {
                            System.out.print(""Vad heter: "" + nyckel + "" På engelska? "");
                            String svaret = sc.next();
                            if (svaret.equals(ht.get(nyckel))) {
                                System.out.println(""Rätt!"");
                                antalRatt++;

                            } else {
                                System.out.println(""Fel! Rätt svar är "" + ht.get(nyckel));
                            }
                            
                        }
                        System.out.println(""Antalet rätta: "" + antalRatt  );
                        break;
                    case '0':
                        System.out.println(""SLUT"");
                        break;
                    default:
                        break;
                } // vof switch
            } // end of try
            catch (Exception e) {
            }
            System.out.println();








        }
    }//end main
"
4639,0f2d59ef-1626-4d9e-8881-5d0a74de6f47,"    public static void main(String[] args) {
        
        int n = 100;
        int[] a = new int[n];
        
        System.out.print(""Arrayens element slumpas och skrivs ut: "");
        
        for (int i = 0; i < a.length; i++) {
            if (i%10==0){
                System.out.println("""");
                
            }
            a[i] = (int)(1000 * Math.random()) ;
            System.out.print(a[i] + ""\t"");
         
            
            
        }//end for
    }//end main
"
4640,2fef34d3-631c-41e4-9da3-a444b1f68e6b,"public static void main( String[] arg ) {
int n = 100;
int[] a = new int[n];
System.out.print(""Dessa tal slumpas till arrayen:"");
for(int i = 0 ; i < n ; i++) {
if(i%10==0) System.out.println();
a[i] = (int)( 1000 * Math.random() );
System.out.print(a[i]+""\t"");
}
int summa, max, min;
double medel;
summa = 0; max = -1; min = 1000;
for(int i = 0; i < n; i++) {
summa = summa +a[i];
if (a[i]>max) max = a[i];
if (a[i]< min) min = a[i];
}
medel = (double)summa/n;
System.out.println("" "");
System.out.println(""Summa = "" + summa + "" Medel = "" + medel);
System.out.println(""Max = "" + max + "" Min = "" + min);
}
"
4641,94853afb-2648-41cf-883f-ac386385ae0b,"	public PeerNode() {
		name = null;
		ip = null;
		port = null;
	}
"
4642,396d0ab6-9d00-418d-894c-eaa38c0b54c8,"	public PeerNode(String name, String ip, Long port) {
		this.name = name;
		this.ip = ip;
		this.port = port;
	}
"
4643,fdd466d5-8d59-4e91-b59e-ad55b1a68107,"	public Message(){
		dest = null;
		kind = null;
		data = null;
		src = null;
		seqNum = null;
		dupe = false;
	}
"
4644,eda581f6-10d9-4173-9613-371e0c71aeae,"	public Message(String dest, String kind, Object data) {
		this.dest = dest;
		this.kind = kind;
		this.data = data;
		src = null;
		seqNum = null;
		dupe = false;
		
	}
"
4645,4adc7c51-1238-4c5f-a25a-c7dd79143cee,"	public String get_Dest() {
		return dest;
	}
"
4646,629cfeb0-fcc8-43f0-854e-46efd04c59fb,"	public String get_Kind() {
		return kind;
	}
"
4647,c22f130f-ea1c-442c-b925-2a742843f518,"	public Object get_Data() {
		return data;
	}
"
4648,2fd64b8b-32a2-422f-b283-8c4d9b24614f,"	public String get_Src() {
		return src;
	}
"
4649,a3221c8a-2f59-4810-bd62-c58812170cba,"	public Integer get_SeqNum() {
		return seqNum;
	}
"
4650,4e16b922-0933-4064-8527-c244f02dc3aa,"	public boolean get_Dupe() {
		return dupe;
	}
"
4651,597e14e2-e465-4160-b31d-351e134c03fd,"	public void set_Dest(String dest) {
		this.dest = dest;
	}
"
4652,46e80712-4307-4824-8e0d-4a2fe2853088,"	public void set_Kind(String kind) {
		this.kind = kind;
	}
"
4653,88edb336-675c-4a7a-acc5-a1639213e2ae,"	public void set_Data(Object data) {
		this.data = data;
	}
"
4654,d1ae2f14-69a4-4c19-89d9-799340676a50,"	public void set_Src(String source) {
		src = source;
	}
"
4655,6d17551d-2749-413f-aae3-c92d574b0e40,"	public void set_SeqNum(int sequeceNumber) {
		seqNum = sequeceNumber;
	}
"
4656,916c8e35-14eb-4e55-ae95-83c3268f48e2,"	public void set_Dupe(boolean dupe) {
		this.dupe = dupe;
	}
"
4657,6e3a8f72-374a-4c06-85f9-b84abe770da1,"	public MessagePasser() {
		configuration_filename = null;
		local_name = null;
		
	}
"
4658,b9162f85-2826-4f8f-86a0-058f95f64fff,"	public MessagePasser(String configuration_filename, String local_name) {
		this.configuration_filename = configuration_filename;
		this.local_name = local_name;
	}
"
4659,d086ecbe-f2d4-4cb8-a796-f756a80b9818,"	public void send(Message message) {
		Rule r = check_rule(message);
		if (r != null) {
			r.getAction();
			//add code here
		} 
		
		System.out.println(""Send message from SenderBuffer"");
	}
"
4660,6bf04343-4728-4661-9b17-bc497c52522a,"	public void receive() {
		System.out.println(""Read message from ReceiverBuffer"");
	}
"
4661,682e77a1-fd6b-481c-8309-4c174ba68092,"	public static void SetUp() throws Exception {
		System.out.println(""Local server is running."");
		
		try {
			while(true) {
				Socket socket = new Socket();
				socket = listener.accept();
				CreateListenThread(socket);
			} 
		} 
		catch (SocketException e) {
				// TODO Auto-generated catch block
				
			}
		finally {
			listener.close();
			}
	}
"
4662,eb06a299-66e4-4467-ba27-bde6f8f67a44,"	private static void CreateListenThread(final Socket socket) throws IOException {  
         new Thread(new Runnable() {  
            public void run() {  
            try {
                String readline = new String("""");
            	BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));
            	readline = is.readLine();
            	while (readline != null) {			
					System.out.println(""Server is reveiving: ""+ readline);
					readline = is.readLine();
            	}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				try {
					socket.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
            	
            }  
        }).start(); 
    }
"
4663,68640520-ccc7-4c8f-a7a6-2170a735e34f,"            public void run() {  
            try {
                String readline = new String("""");
            	BufferedReader is=new BufferedReader(new InputStreamReader(socket.getInputStream()));
            	readline = is.readLine();
            	while (readline != null) {			
					System.out.println(""Server is reveiving: ""+ readline);
					readline = is.readLine();
            	}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				try {
					socket.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
            	
            }  
"
4664,f8c6a274-1d2c-459f-a1c4-2af155a4361c,"	private void CreateThread() throws IOException {  
        new Thread(new Runnable() {  
            public void run() {  
                try {
					SetUp();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            	
            }  
        }).start();  
    }
"
4665,3644de5b-57fb-4c62-be59-832231d09a1a,"            public void run() {  
                try {
					SetUp();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            	
            }  
"
4666,3ce9c286-f0c4-44b9-948a-de3a09c6494c,"	public Rule check_rule(Message message) {
		for (int i = 0; i < RuleSet.size(); i++) {
			if (RuleSet.get(i).IsMatch(message))
				return RuleSet.get(i);
		}
		return null;
	}
"
4667,f0318232-c64a-47e2-98b5-89165e177dcf,"	public static void main(String[] args) throws Exception{
		String configuration_filename = new String("""");
		String local_name = new String("""");
		String send_info = new String("""");
		listener = new ServerSocket(12344);
		Message message = new Message();
		//Scanner in =new Scanner(System.in);
		//configuration_filename = in.next();
		//local_name = in.next();
		MessagePasser MP = new MessagePasser(configuration_filename, local_name);

		
		
		MP.CreateThread();
		
		Socket socket = new Socket(""128.237.174.156"",12344);
		PrintWriter ot = new PrintWriter(socket.getOutputStream());
		
		InputStreamReader reader = new InputStreamReader(System.in);
		BufferedReader input = new BufferedReader(reader);
		send_info = input.readLine();
		
		
		
		while (!send_info.equals(""exit"")) {
			String[] command = send_info.split("" "");
			if (command.length != 2 || !(command[0].equals(""send"") || command[0].equals(""read""))) {
				System.out.println(""Enter the right command!"");
				send_info = input.readLine();
				continue;
				}
			if (command[0].equals(""read"")) {
				MP.receive();
				send_info = input.readLine();
				continue;
			}
			if (command[0].equals(""send"")) {
				ot.println(send_info);
				ot.flush();
				send_info = input.readLine();
				continue;
			}
		}
		
		//System.out.println(configuration_filename);
		//System.out.println(local_name);
		socket.close();
		listener.close();
		System.out.println(""Program exit normally"");

		
		
	}
"
4668,8501e6bb-cc92-4bd9-89db-4999ffba1723,"	public UserInterface()
	{
		super(""MyJFrame"");
		setSize(480, 320);
		setLocation(500, 200);
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  //add(MyJPanel());
	}
"
4669,f70c2da9-518b-4388-bdd5-9458806518a0,"	public Rule() {
		action = null;
		src = null;
		dest = null;
		kind = null;
		seqNum = null;
	}
"
4670,1d65fc56-8281-47cc-878f-ff2b14745257,"	public Rule(Rule r) {
		action = r.action;
		src = r.src;
		dest = r.dest;
		kind = r.kind;
		seqNum = r.seqNum;
	}
"
4671,b86ab18c-b6a1-443e-94f2-c97c1996c621,"	public Rule(String action, String src, String dest, String kind, Integer seqNum) {
		this.action = action;
		this.dest = dest;
		this.src = src;
		this.kind = kind;
		this.seqNum = seqNum;
	}
"
4672,c0b172fe-6830-493d-a5f8-61feab6bd021,"	public String getAction() {
		return action;
	}
"
4673,ec0b6062-278f-4529-ae79-52906eb68860,"	public void setAction(String action) {
		this.action = action;
	}
"
4674,4ac2b7fa-73a8-4e65-aa25-62d60f73ec1d,"	public String getSrc() {
		return src;
	}
"
4675,4a1ee64f-9776-4c08-94ae-64d63e24a4d0,"	public void setSrc(String src) {
		this.src = src;
	}
"
4676,d82c4556-8257-46db-87bc-a5f94b2a324a,"	public String getDest() {
		return dest;
	}
"
4677,b20ee943-7bcc-4281-9232-358c01a0fd48,"	public void setDest(String dest) {
		this.dest = dest;
	}
"
4678,30231748-ef30-4133-9e50-066243032c0e,"	public String getKind() {
		return kind;
	}
"
4679,fad4947e-24e4-4963-a756-4123398b99c7,"	public void setKind(String kind) {
		this.kind = kind;
	}
"
4680,d38e5a48-d72c-4196-81f8-e1b2517069a5,"	public Integer getSeqNum() {
		return seqNum;
	}
"
4681,3d5093d1-c49c-4ec2-a0c0-3d8ac9b6b8b7,"	public void setSeqNum(Integer seqNum) {
		this.seqNum = seqNum;
	}
"
4682,e39adf22-3315-4dac-9a69-dc2efe407d7d,"	public boolean IsMatch(Message message) {
		
		if (message.get_Src().equals(src) || src.equals(null)) {
			if (message.get_Dest().equals(dest) || dest.equals(null)) {
				if (message.get_Kind().equals(kind) || kind.equals(null)) {
					if (message.get_SeqNum().equals(seqNum) || seqNum.equals(null)) {
						if (message.get_Dupe() == false)
							return true;
					}
				} 
			}
		}
		
		return false;
	}
"
4683,fed7c072-e1e9-49ed-83d6-e63f476a26cf,"	GifPlayer(File file)throws IOException
	{
		super.file = file;
		super.images.add(ImageIO.read(file));
	}
"
4684,facf11a0-8002-4c38-a19d-46dba55fcaf1,"	public void play();
"
4685,c509dee8-8d8c-4b81-97a6-c8d74cab3f92,"	SequencePlayer()
	{
		images = null;
	}
"
4686,2df0f0f9-bd49-4cf5-9f8f-ac435449909d,"	SequencePlayer(ArrayList<BufferedImage> images)
	{
		this.images = images;
	}
"
4687,fa3e9156-dcdd-494d-9458-42f5ae7f3411,"	public void play()
	{
		for (int i = 0; i < images.size(); i++) {
			new PicturePlayer((BufferedImage)(images.get(i))).play();
		}
	}
"
4688,2e891c7f-f453-4a54-ae35-c643691f9863,"	PicturePlayer(BufferedImage image)
	{
		this.img = image;
	}
"
4689,cb8e8890-34b7-474d-9b31-c236655d43ab,"	PicturePlayer(File file) throws IOException
	{
		img = null;
        img = ImageIO.read(file);
	}
"
4690,e6226cb8-03a0-4334-838f-9473ce284f32,"    private static void print(int pixel) {
        if (pixel > 240) {
            System.out.print(' ');
        } else if (pixel > 200) {
            System.out.print('.');
        } else if (pixel > 160) {
            System.out.print('*');
        } else if (pixel > 120) {
            System.out.print('~');
        } else if (pixel > 80) {
            System.out.print('x');
        } else if (pixel > 40) {
            System.out.print('#');
        } else {
            System.out.print('$');
        }
    }
"
4691,c625eff9-5e18-49d2-9793-06f7b685ff40,"    private static int Grey(int rgb) {
        final Color colorful = new Color(rgb);
        return (colorful.getBlue() + colorful.getRed() + colorful.getGreen()) / 3;
    }
"
4692,d7d71e31-c535-41dd-9c5f-2d2183fb0af0,"    public void play()
    {
		for (int y = 0; y < img.getHeight(); y++) {
            for (int x = 0; x < img.getWidth(); x++) {
                final int pixel = Grey(img.getRGB(x, y));
                print(pixel);
            }
            System.out.println();
        }
    }
"
4693,f0b98137-5402-41b5-928e-930bc9e88893,"	VideoPlayer(File file) throws IOException
	{
		super.file = file;
		super.images.add(ImageIO.read(file));
	}
"
4694,50ab59df-626b-4326-88da-08492066e699,"    public static void main(String[] args) {
        final String arg = ""E:\\Me\\Programming\\HackBulgaria\\Java\\GitOther Copy\\Core-Java-1\\8-WorkingWithLibraries\\a.jpg"";
        final File file = new File(arg);
        BufferedImage img = null;
        try {
            img = ImageIO.read(file);
        } catch (final Exception e) {
            e.fillInStackTrace();
        }

        for (int y = 0; y < img.getHeight(); y++) {
            for (int x = 0; x < img.getWidth(); x++) {
                final int pixel = Grey(img.getRGB(x, y));
                print(pixel);
            }
            System.out.println();
        }
    }
"
4695,26b621dd-2a94-4571-b1e8-8be6cae058ee,"    private static void print(int pixel) {
        if (pixel > 240) {
            System.out.print(' ');
        } else if (pixel > 200) {
            System.out.print('.');
        } else if (pixel > 160) {
            System.out.print('*');
        } else if (pixel > 120) {
            System.out.print('~');
        } else if (pixel > 80) {
            System.out.print('x');
        } else if (pixel > 40) {
            System.out.print('#');
        } else {
            System.out.print('$');
        }
    }
"
4696,5da6a6b5-cfe5-41ac-a271-64c1c2b10660,"    private static int Grey(int rgb) {
        final Color colorful = new Color(rgb);
        return (colorful.getBlue() + colorful.getRed() + colorful.getGreen()) / 3;
    }
"
4697,0e175fba-eff2-45e9-8c61-9d15aa7f4f31,"public static void main(String[]args){
		
		Product p = Factoria.getProduct(""P1"");
		p.manipulate();
		
		Product c = Factoria.getProduct(""P1"");
		c.manipulate();
		
		Product r = Factoria.getProduct(""P2"");
		r.vender();
	}
"
4698,8f2c6955-7445-46d2-903c-b6ddd160ef37,"	public static Product getProduct(String name){

		Product p = null;
		if(name.equals(""P1""))
		p = new P1();
		else
		p= new P2();
		return p;
	}	
"
4699,f55e5756-e828-492a-b043-d214eb4a6a93,"	public static Product getProduct(String name) {

		Product p = null;
		if (name.equals(""P1""))
			p = new P1();
		else
			p = new P2();
		return p;
	}
"
4700,9b9f09fc-c253-48cb-9662-786b555ab6b2,"	public static Product getProduct2(String name) {

		//definimos el producto y la clase vacia
		Product p = null;
		Class c = null;

		try {
			// la clase objet tiene metodos por defecto y atributos y son
			// heredados por todos
			// El metodo Class.forName tu le metes el nombre de la clase y el te
			// devuelte la clase que es
			// El metodo c.newInstance( permite intanciasn como new Objet());

			c = Class.forName(name);
			p = (Product) c.newInstance();
			
		} catch (Exception e) {

		}
		return p;
	}
"
4701,a84afb50-29a3-4eca-9184-3a8b22af9241,"	public int getId() {
		return id;
	}
"
4702,7f0a3391-c07a-45af-ad53-404be2147dd7,"	public void setId(int id) {
		this.id = id;
	}
"
4703,f22bffc9-877c-4ec8-a03e-c2becf847b09,"	public void manipulated()
	{
		
	}
"
4704,cce5e895-9d57-4e4e-998b-fc143a52c1e6,"	@Override
	public void manipulate() {
		// TODO Auto-generated method stub
		
	}
"
4705,7191a491-ce4b-4955-a2ce-0d67f23dc69e,"	@Override
	public void vender() {
		// TODO Auto-generated method stub
		
	}
"
4706,cd427d7c-de44-4e91-95f9-cd4908f515e7,"	public void manipulate();
"
4707,ef59acde-3397-4495-8f5e-cd1eb5343829,"	public void vender();
"
4708,40bf1360-a339-45ec-8031-4aeeee151d0d,"	public static void main(String[] args)
	{
		MainWindow myMainWindow = new MainWindow(); //Create the window
		JMenuBar bar = new JMenuBar(); //Menu bar
		JMenu fileMenu = new JMenu(""File"");
		JMenu levelMenu = new JMenu(""Level"");
		JMenu levelSelectionMenu = new JMenu(""Choose level"");
		JMenu helpMenu = new JMenu(""Help"");
		
		JMenuItem exit = new JMenuItem(""Exit"");
		exit.addActionListener(myMainWindow);
		fileMenu.add(exit);
		
		JMenuItem reset = new JMenuItem(""Reset level"");
		reset.addActionListener(myMainWindow);
		levelMenu.add(reset);
		levelMenu.add(levelSelectionMenu);
		
		JMenuItem level1 = new JMenuItem(""Level 1"");
		level1.addActionListener(myMainWindow);
		levelSelectionMenu.add(level1);
		
		JMenuItem level2 = new JMenuItem(""Level 2"");
		level2.addActionListener(myMainWindow);
		levelSelectionMenu.add(level2);
		
		JMenuItem level3 = new JMenuItem(""Level 3"");
		level3.addActionListener(myMainWindow);
		levelSelectionMenu.add(level3);
		
		JMenuItem level4 = new JMenuItem(""Level 4"");
		level4.addActionListener(myMainWindow);
		levelSelectionMenu.add(level4);
		
		JMenuItem level5 = new JMenuItem(""Level 5"");
		level5.addActionListener(myMainWindow);
		levelSelectionMenu.add(level5);
		
		JMenuItem level6 = new JMenuItem(""Level 6"");
		level6.addActionListener(myMainWindow);
		levelSelectionMenu.add(level6);
		
		JMenuItem level7 = new JMenuItem(""Level 7"");
		level7.addActionListener(myMainWindow);
		levelSelectionMenu.add(level7);
		
		JMenuItem level8 = new JMenuItem(""Level 8"");
		level8.addActionListener(myMainWindow);
		levelSelectionMenu.add(level8);
		
		JMenuItem level9 = new JMenuItem(""Level 9"");
		level9.addActionListener(myMainWindow);
		levelSelectionMenu.add(level9);
		
		JMenuItem level10 = new JMenuItem(""Level 10"");
		level10.addActionListener(myMainWindow);
		levelSelectionMenu.add(level10);
		
		JMenuItem howToPlay = new JMenuItem(""How to Play"");
		howToPlay.addActionListener(myMainWindow);
		helpMenu.add(howToPlay);
		
		JMenuItem hint = new JMenuItem(""Display hint"");
		hint.addActionListener(myMainWindow);
		helpMenu.add(hint);
		
		bar.add(fileMenu);
		bar.add(levelMenu);
		bar.add(helpMenu);
		myMainWindow.setJMenuBar(bar);
		
		myMainWindow.setVisible(true); //Make the window visible
	}
"
4709,0db3fa62-8fe1-41df-98e3-d66129ebb9b5,"	public Vec2()
	{
		this.x = 0.0;
		this.y = 0.0;
	}
"
4710,4cf5592e-c418-4fcf-9714-9cfb45f448fc,"	public Vec2(double theX, double theY)
	{
		this.x = theX;
		this.y = theY;
	}
"
4711,f7b01e14-de88-457f-be14-875985326bee,"	public double[] getValues()
	{
		double[] values = {x, y};
		return values;
	}
"
4712,1a5ea5b3-3c4e-4280-98c7-bfbc97c31757,"	public double getX()
	{
		return this.x;
	}
"
4713,b0ad7c96-df21-4276-8f78-560d15039d89,"	public double getY()
	{
		return this.y;
	}
"
4714,fe233bee-652d-4620-97c7-143b26acc768,"	public double magnitude()
	{
		magnitude = Math.sqrt(Math.pow(x, 2.0) + Math.pow(y, 2.0));
		
		return magnitude;
	}
"
4715,bc3c7c35-e59c-454e-ba9a-1a8c6d03e637,"	public Vec2 normalize()
	{
		double newX, newY, magnitude;
		magnitude = this.magnitude();
		
		if(magnitude != 0.0)
		{
			newX = (this.x / magnitude);
			newY = (this.y / magnitude);
		}
		else
		{
			newX = this.x;
			newY = this.y;
		}
		
		Vec2 newVec2 = new Vec2(newX, newY);
		
		return newVec2;
	}
"
4716,efc5478d-99a5-4074-8e6c-3342f56a3905,"	public void set(Vec2 otherVec2)
	{
		this.x = otherVec2.getX();
		this.y = otherVec2.getY();
	}
"
4717,841e86c7-13a0-4a4f-a59c-a9fc4efbe7b6,"	public void set(double theX, double theY)
	{
		this.x = theX;
		this.y = theY;
	}
"
4718,3851b31f-6945-4387-88ca-68c706404c50,"	public Vec2 add(Vec2 otherVec2)
	{
		double[] newValues = new double[2];
		
		for(int i = 0; i < 2; i++)
		{
			newValues[i] = (this.getValues()[i] + otherVec2.getValues()[i]);
		}
		
		Vec2 newVec2 = new Vec2(newValues[0], newValues[1]);
		
		return newVec2;
	}
"
4719,25d945a1-4745-4ffc-a134-227619811d03,"	public Vec2 add(double theX, double theY)
	{
		Vec2 newVec2 = new Vec2(this.x + theX, this.y + theY);
		
		return newVec2;
	}
"
4720,ae9fa95d-3c32-48f9-ae6f-5d1fcd53097a,"	public Vec2 subtract(Vec2 otherVec2)
	{
		double[] newValues = new double[2];
		
		for(int i = 0; i < 2; i++)
		{
			newValues[i] = (this.getValues()[i] - otherVec2.getValues()[i]);
		}
		
		Vec2 newVec2 = new Vec2(newValues[0], newValues[1]);
		
		return newVec2;
	}
"
4721,cf95723c-6fb8-4c83-a142-8b2785184e87,"	public Vec2 subtract(double theX, double theY)
	{
		Vec2 newVec2 = new Vec2(this.x - theX, this.y - theY);
		
		return newVec2;
	}
"
4722,f320d390-fa0b-4091-91f3-3a34ee49d9ea,"	public Vec2 multiply(double scalar)
	{
		double newX, newY;
		
		newX = (this.x * scalar);
		newY = (this.y * scalar);
		
		Vec2 newVec2 = new Vec2(newX, newY);
		
		return newVec2;
	}
"
4723,aa49fae8-8530-4c4b-a54c-e3df9d3393e9,"	public double dot(Vec2 otherVec2)
	{
		double[] newValues = new double[3];
		double dotProduct = 0.0;
		
		for(int i = 0; i < 2; i++)
		{
			newValues[i] = (this.getValues()[i] * otherVec2.getValues()[i]);
		}
		
		for(int i = 0; i < 2; i++)
		{
			dotProduct += newValues[i];
		}
		
		return dotProduct;
	}
"
4724,5b2ea05b-40a2-4794-be10-02d25afb7924,"	public HowToPlayWindow()
	{
		super();
		this.setSize(WIDTH, HEIGHT);
		this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
		this.setResizable(false);
		this.setTitle(""How to Play"");
		this.setLocationRelativeTo(null);
		
		ImagePanel theImagePanel = new ImagePanel();
		this.add(theImagePanel);
	}
"
4725,f27970e5-ffc8-4f8d-a997-96a0150a077d,"	    public ImagePanel()
	    {
	        super();

	        try
			{
				howToPlayTexture = ImageIO.read(new File(""textures/howtoplay.jpg""));
			}
			catch(IOException e)
			{
				
			}
	    }
"
4726,9cca472c-0fb9-45cf-95c7-6ec1b322cb95,"	    public void paint(Graphics canvas)
	    {
	        super.paint(canvas);        
	        canvas.drawImage(howToPlayTexture, 0, 0, null);
	    }
"
4727,7b5870c2-af72-4698-96f2-ee59b5b07633,"	public MainWindow()
	{
		super();
		this.setSize(WIDTH, HEIGHT);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setResizable(false);
		this.setTitle(""Vortex"");
		this.getContentPane().setBackground(Color.BLACK);
		this.add(theGamePanel);
		this.setLocationRelativeTo(null);
	}
"
4728,ec072784-109a-45ec-933e-1315bd1b5d03,"	public void actionPerformed(ActionEvent e) //Handles the JMenuItems
	{
		String buttonString = e.getActionCommand();
		
		if(buttonString.equals(""Exit""))
		{
			System.exit(0);
		} else if(buttonString.equals(""Reset level""))
		{
			theGamePanel.loadLevel(theGamePanel.getCurrentLevelNumber());
		} else if(buttonString.equals(""Level 1""))
		{
			theGamePanel.loadLevel(1);
		} else if(buttonString.equals(""Level 2""))
		{
			theGamePanel.loadLevel(2);
		} else if(buttonString.equals(""Level 3""))
		{
			theGamePanel.loadLevel(3);
		} else if(buttonString.equals(""Level 4""))
		{
			theGamePanel.loadLevel(4);
		} else if(buttonString.equals(""Level 5""))
		{
			theGamePanel.loadLevel(5);
		} else if(buttonString.equals(""Level 6""))
		{
			theGamePanel.loadLevel(6);
		} else if(buttonString.equals(""Level 7""))
		{
			theGamePanel.loadLevel(7);
		} else if(buttonString.equals(""Level 8""))
		{
			theGamePanel.loadLevel(8);
		} else if(buttonString.equals(""Level 9""))
		{
			theGamePanel.loadLevel(9);
		} else if(buttonString.equals(""Level 10""))
		{
			theGamePanel.loadLevel(10);
		} else if(buttonString.equals(""How to Play""))
		{
			myHowToPlayWindow.setVisible(true);
		} else if(buttonString.equals(""Display hint""))
		{
			theCurrentLevelNumber = theGamePanel.getCurrentLevelNumber();
			
			switch(theCurrentLevelNumber)
			{
				case 1:
					hintPane.showMessageDialog(this, ""You can't fit through the hole in the wall, but you CAN see through it..."", ""Hint"", JOptionPane.INFORMATION_MESSAGE);
					break;
				case 2:
					hintPane.showMessageDialog(this, ""The gap is too far to jump, if only there was some way for you to gain more momentum..."", ""Hint"", JOptionPane.INFORMATION_MESSAGE);
					break;
				case 3:
					hintPane.showMessageDialog(this, ""You can't go through the door unless it's open, but in order for it to be open the button has to be pressed down.\nYou can't be in two places at once..."", ""Hint"", JOptionPane.INFORMATION_MESSAGE);
					break;
				case 4:
					hintPane.showMessageDialog(this, ""Did you know that the box can go through vortexes?"", ""Hint"", JOptionPane.INFORMATION_MESSAGE);
					break;
				case 5:
					hintPane.showMessageDialog(this, ""How could you get enough speed to make it to the door?"", ""Hint"", JOptionPane.INFORMATION_MESSAGE);
					break;
				case 6:
					hintPane.showMessageDialog(this, ""I wonder what would happen if you placed one vortex directly above the other..."", ""Hint"", JOptionPane.INFORMATION_MESSAGE);
					break;
				case 7:
					hintPane.showMessageDialog(this, ""Success is only a hop, skip, and a fling away!"", ""Hint"", JOptionPane.INFORMATION_MESSAGE);
					break;
				case 8:
					hintPane.showMessageDialog(this, ""Each pillar is taller than the last, how could you use this to your advantage?\nAlso, the S key is your friend!"", ""Hint"", JOptionPane.INFORMATION_MESSAGE);
					break;
				case 9:
					hintPane.showMessageDialog(this, ""Momentum is conserved when moving through vortexes; I wonder what would happen if both were placed on the ground?"", ""Hint"", JOptionPane.INFORMATION_MESSAGE);
					break;
				case 10:
					hintPane.showMessageDialog(this, ""Did you know that the box can move through vortexes without you having to hold it?"", ""Hint"", JOptionPane.INFORMATION_MESSAGE);
					break;
				default:
					hintPane.showMessageDialog(this, ""What level are you on anyways?"", ""Hint"", JOptionPane.INFORMATION_MESSAGE);
					break;
			}
		}
	}
"
4729,1f222d66-6c74-4590-9ebb-6b5edd48126e,"	public GamePanel()
	{
		super();
		this.setFocusable(true); //Allows for keyboard listener
		this.setBackground(Color.BLACK);
		this.setDoubleBuffered(true);
		
		firstPaint = true;
		
		playerX = 100.0;
		playerY = 500.0;
		boxX = -200.0;
		boxY = -50.0;
		
		playerPos = new Vec2(playerX, playerY);
		playerVel = new Vec2(0.0, 0.0);
		playerAcc = new Vec2(0.0, 0.2);
		boxPos = new Vec2(boxX, boxY);
		boxVel = new Vec2(0.0, 0.0);
		boxAcc = new Vec2(0.0, 0.2);
		ray = new Vec2(0.0, 0.0);
		testRay = new Vec2(0.0, 0.0);
		drawnRay = new Vec2(0.0, 0.0);
		
		theKeyboardHandler = new KeyboardHandler();
		addKeyListener(theKeyboardHandler);
		
		myMouseInput = new MouseInput();
	    addMouseListener(myMouseInput);
	    addMouseMotionListener(myMouseInput);
	    
	    outputPane = new JOptionPane();
	}
"
4730,c56b9cca-4dc9-420f-aeda-121c453f5a14,"	private void initialize()
	{
		firstPaint = false;
		
		thePainter = new Painter();
		thePainter.setName(""Painter Thread"");
		theAnimator = new Animator();
		theAnimator.setName(""Animator Thread"");
		theRenderingHints = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		theRenderingHints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
		
		//The locations of the shapes
		floor = new Rectangle2D.Double(0, 657, 1008, 50);
		ceiling = new Rectangle2D.Double(0, 0, 1008, 50);
		leftWall = new Rectangle2D.Double(0, 0, 50, 657);
		rightWall = new Rectangle2D.Double(958, 0, 50, 657);
		outsidePlatform = new Rectangle2D.Double(-300, 0, 200, 50);
		button = new Rectangle2D.Double(buttonX, buttonY, 25, 25);
		portal1 = new Ellipse2D.Double(0, -50, portalWidth, portalHeight);
		portal2 = new Ellipse2D.Double(100, -50, portalWidth, portalHeight);
		player = new Rectangle2D.Double(playerX, playerY, 20, 40);
		box = new Rectangle2D.Double(boxX, boxY, 25, 25);
		entranceDoor = new Rectangle2D.Double(entranceDoorX, entranceDoorY, 29, 60);
		exitDoor = new Rectangle2D.Double(exitDoorX, exitDoorY, 29, 60);
		
		panel1 = new Rectangle2D.Double(-100, -100, 50, 50);
		panel2 = new Rectangle2D.Double(-100, -100, 50, 50);
		panel3 = new Rectangle2D.Double(-100, -100, 50, 50);
		panel4 = new Rectangle2D.Double(-100, -100, 50, 50);
		panel5 = new Rectangle2D.Double(-100, -100, 50, 50);
		panel6 = new Rectangle2D.Double(-100, -100, 50, 50);
		panel7 = new Rectangle2D.Double(-100, -100, 50, 50);
		panel8 = new Rectangle2D.Double(-100, -100, 50, 50);
		
		drawnRaylineIntersections = new ArrayList();
		allCollidableSurfaces = new ArrayList();
		portalableSurfaces = new ArrayList(); //Any surface not in this ArrayList will NOT be portalable
		nonPortalableSurfaces = new ArrayList();
		
		rayline = new Line2D.Double();
		drawnRayline = new Line2D.Double();
		testPoint = new Point2D.Double();
		
		try
		{                
        	playerTexture = ImageIO.read(new File(""textures/character.png""));
        	playerTextureFlip = ImageIO.read(new File(""textures/character_flip.png""));
        	buttonTexture = ImageIO.read(new File(""textures/button.png""));
        	buttonPressedTexture = ImageIO.read(new File(""textures/button_pressed.png""));
        	boxTexture = ImageIO.read(new File(""textures/box_pink.jpg""));
        	doorTexture = ImageIO.read(new File(""textures/door.png""));
        	doorOpenTexture = ImageIO.read(new File(""textures/door_open.png""));
        	backgroundTexture = ImageIO.read(new File(""textures/metal_background.jpg""));
        	
        	bluePortalTextureVert = ImageIO.read(new File(""textures/portal_blue_vert.png""));
        	orangePortalTextureVert = ImageIO.read(new File(""textures/portal_orange_vert.png""));
        	bluePortalTextureHoriz = ImageIO.read(new File(""textures/portal_blue_horiz.png""));
        	orangePortalTextureHoriz = ImageIO.read(new File(""textures/portal_orange_horiz.png""));
        	
        	metalFloorLightTexture = ImageIO.read(new File(""textures/metal_floor.jpg""));
        	metalFloorDarkTexture = ImageIO.read(new File(""textures/metal_floor_dark.jpg""));
        	metalVertLightTexture = ImageIO.read(new File(""textures/metal_vert_light.jpg""));
        	metalVertDarkTexture = ImageIO.read(new File(""textures/metal_vert_dark.jpg""));
        	metalHorizLightTexture = ImageIO.read(new File(""textures/metal_horiz_light.jpg""));
        	metalHorizDarkTexture = ImageIO.read(new File(""textures/metal_horiz_dark.jpg""));
        	
        	marbleTileTexture = ImageIO.read(new File(""textures/metal_tile_light.jpg""));
        	darkMarbleTexture = ImageIO.read(new File(""textures/metal_tile_dark.jpg""));
		}
		catch(IOException e)
		{
		}
		currentLevelNumber = 1;
		loadLevel(currentLevelNumber);
		
		theAnimator.start(); //Starts the animation/painting threads
		thePainter.start();
	}
"
4731,749d3d91-bcf5-4b8c-b943-77b16fcbbf99,"	public void loadLevel(int theLevelNumber)
	{
		currentLevelNumber = theLevelNumber;
		
		resetVariables();
		
		if(theLevelNumber == 1)
		{
			//Button code
			levelHasButton = false;
			
			//Player code
			playerPos.set(100, 617);
			
			//Level structure code
			panel1.setFrame(50, 400, 400, 50);
			panel2.setFrame(400, 400, 50, 400);
			panel3.setFrame(200, 425, 50, 200);
			panel4.setFrame(200, 650, 50, 100);
			
			//Door code
			entranceDoorX = 100.0;
			entranceDoorY = 597.0;
			exitDoorX = 300.0;
			exitDoorY = 597.0;
			exitDoor.setFrame(exitDoorX, exitDoorY, DOOR_WIDTH, DOOR_HEIGHT);
			
			//Collision code
			nonPortalableSurfaces.add(panel1);
			portalableSurfaces.add(panel2);
			nonPortalableSurfaces.add(panel3);
			nonPortalableSurfaces.add(panel4);
			
			nonPortalableSurfaces.add(floor);
			portalableSurfaces.add(leftWall);
			nonPortalableSurfaces.add(ceiling);
			nonPortalableSurfaces.add(rightWall);
			
			allCollidableSurfaces.addAll(portalableSurfaces);
			allCollidableSurfaces.addAll(nonPortalableSurfaces);
		}
		if(theLevelNumber == 2)
		{
			levelHasButton = false;
			
			playerPos.set(100, 467);
			
			panel1.setFrame(50, 100, 400, 50);
			panel2.setFrame(450, 100, 50, 600);
			panel3.setFrame(350, 500,100, 200);
			panel4.setFrame(50, 500, 100, 200);
			
			entranceDoorX = 100.0;
			entranceDoorY = 447.0;
			exitDoorX = 400.0;
			exitDoorY = 440.0;
			exitDoor.setFrame(exitDoorX, exitDoorY, DOOR_WIDTH, DOOR_HEIGHT);
			
			nonPortalableSurfaces.add(panel1);
			nonPortalableSurfaces.add(panel2);
			nonPortalableSurfaces.add(panel3);
			nonPortalableSurfaces.add(panel4);
			
			portalableSurfaces.add(floor);
			portalableSurfaces.add(leftWall);
			nonPortalableSurfaces.add(ceiling);
			nonPortalableSurfaces.add(rightWall);
			
			allCollidableSurfaces.addAll(portalableSurfaces);
			allCollidableSurfaces.addAll(nonPortalableSurfaces);
		}
		if(theLevelNumber == 3)
		{
			levelHasButton = true;
			buttonX = 100.0;
			buttonY = 632.0;
			button.setFrame(buttonX, buttonY, 25, 25);
			
			boxX = 500.0;
			boxY = 450.0;
			boxPos.set(boxX, boxY);
			
			playerPos.set(100, 400);
			
			panel1.setFrame(50, 450, 150, 50);
			panel2.setFrame(400, 500, 150, 50);
			panel3.setFrame(50, 300, 500, 50);
			panel4.setFrame(550, 300, 50, 400);
			
			entranceDoorX = 100.0;
			entranceDoorY = 390.0;
			exitDoorX = 500.0;
			exitDoorY = 597.0;
			exitDoor.setFrame(exitDoorX, exitDoorY, DOOR_WIDTH, DOOR_HEIGHT);
			
			nonPortalableSurfaces.add(panel1);
			nonPortalableSurfaces.add(panel2);
			nonPortalableSurfaces.add(panel3);
			portalableSurfaces.add(panel4);
			
			nonPortalableSurfaces.add(floor);
			portalableSurfaces.add(leftWall);
			nonPortalableSurfaces.add(ceiling);
			nonPortalableSurfaces.add(rightWall);
			
			allCollidableSurfaces.addAll(portalableSurfaces);
			allCollidableSurfaces.addAll(nonPortalableSurfaces);
		}
		if(theLevelNumber == 4)
		{
			levelHasButton = true;
			buttonX = 400.0;
			buttonY = 632.0;
			button.setFrame(buttonX, buttonY, 25, 25);
			
			boxX = 250.0;
			boxY = 350.0;
			boxPos.set(boxX, boxY);
			
			playerPos.set(100, 617);
			
			panel1.setFrame(50, 400, 50, 50);
			panel2.setFrame(200, 400, 300, 50);
			panel3.setFrame(50, 200, 600, 50);
			panel4.setFrame(650, 200, 50, 500);
			panel5.setFrame(300, 200, 50, 350);
			panel6.setFrame(300, 580, 50, 100);
			panel7.setFrame(550, 400, 150, 50);
			
			entranceDoorX = 100.0;
			entranceDoorY = 597.0;
			exitDoorX = 600.0;
			exitDoorY = 340.0;
			exitDoor.setFrame(exitDoorX, exitDoorY, DOOR_WIDTH, DOOR_HEIGHT);
			
			nonPortalableSurfaces.add(panel1);
			nonPortalableSurfaces.add(panel2);
			portalableSurfaces.add(panel3);
			portalableSurfaces.add(panel4);
			nonPortalableSurfaces.add(panel5);
			nonPortalableSurfaces.add(panel6);
			nonPortalableSurfaces.add(panel7);
			
			nonPortalableSurfaces.add(floor);
			portalableSurfaces.add(leftWall);
			nonPortalableSurfaces.add(ceiling);
			nonPortalableSurfaces.add(rightWall);
			
			allCollidableSurfaces.addAll(portalableSurfaces);
			allCollidableSurfaces.addAll(nonPortalableSurfaces);
		}
		if(theLevelNumber == 5)
		{
			levelHasButton = true;
			buttonX = 800.0;
			buttonY = 425.0;
			button.setFrame(buttonX, buttonY, 25, 25);
			
			boxX = 150.0;
			boxY = 350.0;
			boxPos.set(boxX, boxY);
			
			playerPos.set(100, 617);
			
			panel1.setFrame(50, 400, 400, 50);
			panel2.setFrame(600, 450, 400, 50);
			panel3.setFrame(908, 150, 50, 300);
			panel4.setFrame(700, 150, 300, 50);
			panel5.setFrame(500, 50, 50, 200);
			
			entranceDoorX = 100.0;
			entranceDoorY = 597.0;
			exitDoorX = 850.0;
			exitDoorY = 90.0;
			exitDoor.setFrame(exitDoorX, exitDoorY, DOOR_WIDTH, DOOR_HEIGHT);
			
			nonPortalableSurfaces.add(panel1);
			nonPortalableSurfaces.add(panel2);
			portalableSurfaces.add(panel3);
			nonPortalableSurfaces.add(panel4);
			portalableSurfaces.add(panel5);
			
			portalableSurfaces.add(floor);
			portalableSurfaces.add(leftWall);
			nonPortalableSurfaces.add(ceiling);
			nonPortalableSurfaces.add(rightWall);
			
			allCollidableSurfaces.addAll(portalableSurfaces);
			allCollidableSurfaces.addAll(nonPortalableSurfaces);
		}
		if(theLevelNumber == 6)
		{
			levelHasButton = false;
			
			playerPos.set(100, 617);
			
			panel1.setFrame(50, 50, 300, 50);
			panel2.setFrame(600, 200, 500, 50);
			panel3.setFrame(350, 50, 50, 50);
			
			entranceDoorX = 100.0;
			entranceDoorY = 597.0;
			exitDoorX = 900.0;
			exitDoorY = 140.0;
			exitDoor.setFrame(exitDoorX, exitDoorY, DOOR_WIDTH, DOOR_HEIGHT);
			
			portalableSurfaces.add(panel1);
			nonPortalableSurfaces.add(panel2);
			nonPortalableSurfaces.add(panel3);
			
			portalableSurfaces.add(floor);
			portalableSurfaces.add(leftWall);
			nonPortalableSurfaces.add(ceiling);
			nonPortalableSurfaces.add(rightWall);
			
			allCollidableSurfaces.addAll(portalableSurfaces);
			allCollidableSurfaces.addAll(nonPortalableSurfaces);
		}
		if(theLevelNumber == 7)
		{
			levelHasButton = true;
			buttonX = 550.0;
			buttonY = 425.0;
			button.setFrame(buttonX, buttonY, 25, 25);
			
			boxX = 550.0;
			boxY = 275.0;
			boxPos.set(boxX, boxY);
			
			playerPos.set(100, 617);
			
			panel1.setFrame(50, 100, 300, 50);
			panel2.setFrame(350, 100, 250, 50);
			panel3.setFrame(600, 100, 50, 600);
			panel4.setFrame(250, 607, 350, 50);
			panel5.setFrame(450, 300, 150, 50);
			panel6.setFrame(400, 450, 200, 50);
			panel7.setFrame(200, 300, 50, 600);
			
			entranceDoorX = 100.0;
			entranceDoorY = 597.0;
			exitDoorX = 550.0;
			exitDoorY = 547.0;
			exitDoor.setFrame(exitDoorX, exitDoorY, DOOR_WIDTH, DOOR_HEIGHT);
			
			portalableSurfaces.add(panel1);
			nonPortalableSurfaces.add(panel2);
			nonPortalableSurfaces.add(panel3);
			portalableSurfaces.add(panel4);
			nonPortalableSurfaces.add(panel5);
			nonPortalableSurfaces.add(panel6);
			nonPortalableSurfaces.add(panel7);
			
			nonPortalableSurfaces.add(floor);
			portalableSurfaces.add(leftWall);
			nonPortalableSurfaces.add(ceiling);
			nonPortalableSurfaces.add(rightWall);
			
			allCollidableSurfaces.addAll(portalableSurfaces);
			allCollidableSurfaces.addAll(nonPortalableSurfaces);
		}
		if(theLevelNumber == 8)
		{
			levelHasButton = false;
			
			playerPos.set(100, 567);
			
			panel1.setFrame(50, 50, 50, 200);
			panel2.setFrame(200, 500, 100, 200);
			panel3.setFrame(400, 350, 100, 350);
			panel4.setFrame(650, 300, 100, 600);
			panel5.setFrame(700, 130, 150, 50);
			panel6.setFrame(908, 50, 50, 50);
			panel7.setFrame(700, 50, 50, 200);
			panel8.setFrame(50, 607, 150, 50);
			
			entranceDoorX = 100.0;
			entranceDoorY = 557.0;
			exitDoorX = 800.0;
			exitDoorY = 70.0;
			exitDoor.setFrame(exitDoorX, exitDoorY, DOOR_WIDTH, DOOR_HEIGHT);
			
			portalableSurfaces.add(panel1);
			nonPortalableSurfaces.add(panel2);
			nonPortalableSurfaces.add(panel3);
			nonPortalableSurfaces.add(panel4);
			nonPortalableSurfaces.add(panel5);
			portalableSurfaces.add(panel6);
			nonPortalableSurfaces.add(panel7);
			nonPortalableSurfaces.add(panel8);
			
			portalableSurfaces.add(floor);
			portalableSurfaces.add(leftWall);
			nonPortalableSurfaces.add(ceiling);
			nonPortalableSurfaces.add(rightWall);
			
			allCollidableSurfaces.addAll(portalableSurfaces);
			allCollidableSurfaces.addAll(nonPortalableSurfaces);
		}
		if(theLevelNumber == 9)
		{
			levelHasButton = true;
			buttonX = 525.0;
			buttonY = 632.0;
			button.setFrame(buttonX, buttonY, 25, 25);
			
			boxX = 125.0;
			boxY = 200.0;
			boxPos.set(boxX, boxY);
			
			playerPos.set(100, 617);
			
			panel1.setFrame(50, 250, 100, 50);
			panel2.setFrame(500, 250, 100, 50);
			panel3.setFrame(500, 50, 100, 50);
			panel4.setFrame(600, 50, 50, 650);
			panel5.setFrame(450, 50, 50, 50);
			
			entranceDoorX = 100.0;
			entranceDoorY = 597.0;
			exitDoorX = 550.0;
			exitDoorY = 190.0;
			exitDoor.setFrame(exitDoorX, exitDoorY, DOOR_WIDTH, DOOR_HEIGHT);
			
			nonPortalableSurfaces.add(panel1);
			nonPortalableSurfaces.add(panel2);
			portalableSurfaces.add(panel3);
			nonPortalableSurfaces.add(panel4);
			nonPortalableSurfaces.add(panel5);
			
			portalableSurfaces.add(floor);
			nonPortalableSurfaces.add(leftWall);
			nonPortalableSurfaces.add(ceiling);
			nonPortalableSurfaces.add(rightWall);
			
			allCollidableSurfaces.addAll(portalableSurfaces);
			allCollidableSurfaces.addAll(nonPortalableSurfaces);
		}
		if(theLevelNumber == 10)
		{
			levelHasButton = true;
			buttonX = 425.0;
			buttonY = 275.0;
			button.setFrame(buttonX, buttonY, 25, 25);
			
			boxX = 700.0;
			boxY = 550.0;
			boxPos.set(boxX, boxY);
			
			playerPos.set(100, 617);
			
			panel1.setFrame(500, 607, 550, 50);
			panel2.setFrame(500, 50, 550, 50);
			panel3.setFrame(450, 50, 50, 300);
			panel4.setFrame(350, 300, 100, 50);
			panel5.setFrame(300, 150, 50, 300);
			panel6.setFrame(800, 200, 250, 50);
			
			entranceDoorX = 100.0;
			entranceDoorY = 597.0;
			exitDoorX = 900.0;
			exitDoorY = 140.0;
			exitDoor.setFrame(exitDoorX, exitDoorY, DOOR_WIDTH, DOOR_HEIGHT);
			
			portalableSurfaces.add(panel1);
			portalableSurfaces.add(panel2);
			nonPortalableSurfaces.add(panel3);
			nonPortalableSurfaces.add(panel4);
			nonPortalableSurfaces.add(panel5);
			nonPortalableSurfaces.add(panel6);
			
			nonPortalableSurfaces.add(floor);
			portalableSurfaces.add(leftWall);
			nonPortalableSurfaces.add(ceiling);
			nonPortalableSurfaces.add(rightWall);
			
			allCollidableSurfaces.addAll(portalableSurfaces);
			allCollidableSurfaces.addAll(nonPortalableSurfaces);
		}
		if(theLevelNumber == 11)
		{
			levelHasButton = false;
			
			playerPos.set(100, 617);
			
			nonPortalableSurfaces.add(floor);
			nonPortalableSurfaces.add(leftWall);
			nonPortalableSurfaces.add(ceiling);
			nonPortalableSurfaces.add(rightWall);
			
			allCollidableSurfaces.addAll(portalableSurfaces);
			allCollidableSurfaces.addAll(nonPortalableSurfaces);
			if(!gameOver)
			{
				gameOver = true;
				outputPane.showMessageDialog(this, ""Congratulations!"", ""You win!"", JOptionPane.INFORMATION_MESSAGE);
				this.loadLevel(1);
			}
		}
	}
"
4732,7c334b44-bce0-4b9d-af1b-c3ec8968a8fa,"	private void resetVariables()
	{
		allCollidableSurfaces.clear();
		portalableSurfaces.clear();
		nonPortalableSurfaces.clear();
		loadNextLevel = false;
		
		playerX = 100.0;
		playerY = 500.0;
		boxX = -200.0;
		boxY = -50.0;
		buttonX = 0.0;
		buttonY = -200;
		entranceDoorX = -100;
		entranceDoorY = -100;
		exitDoorX = -100;
		exitDoorY = -100;
		portalWidth = 20.0;
		portalHeight = 40.0;
		mouseX = 0.0;
		mouseY = 0.0;
		heldBoxX = 20.0;
		
		portal1.setFrame(0, -50, portalWidth, portalHeight);
		portal2.setFrame(100, -50, portalWidth, portalHeight);
		panel1.setFrame(-100, -100, 50, 50);
		panel2.setFrame(-100, -100, 50, 50);
		panel3.setFrame(-100, -100, 50, 50);
		panel4.setFrame(-100, -100, 50, 50);
		panel5.setFrame(-100, -100, 50, 50);
		panel6.setFrame(-100, -100, 50, 50);
		panel7.setFrame(-100, -100, 50, 50);
		panel8.setFrame(-100, -100, 50, 50);
		button.setFrame(buttonX, buttonY, 25, 25);
		box.setFrame(boxX, boxY, 25, 25);
		entranceDoor.setFrame(entranceDoorX, entranceDoorY, 29, 60);
		exitDoor.setFrame(exitDoorX, exitDoorY, 29, 60);
		
		playerPos.set(100, 617);
		playerVel.set(0.0, 0.0);
		playerAcc.set(0.0, 0.0);
		
		boxPos.set(boxX, boxY);
		boxVel.set(0.0, 0.0);
		boxAcc.set(0.0, 0.0);
		
		portalRelativeLocation = 0;
		portal1RelativeLocation = 0;
		portal2RelativeLocation = 0;
		
		aPressed = false;
		dPressed = false;
		onGround = false;
		playerOnGround = false;
		jumping = false;
		playerJustPortaled = false;
		boxJustPortaled = false;
		lastShotBluePortal = true;
		raylineIntersection = false;
		portalsActive = false;
		portal1Active = false;
		portal2Active = false;
		portalableIntersection = false;
		portalCollisionIssue = false;
		raylineColorIsBlue = false;
		playerMovementIssue = false;
		boxHeld = false;
		boxToggle = true;
		buttonIntersection = false;
		playerFacingRight = true;
		levelResetRequired = false;
		gameOver = false;
	}
"
4733,fbb20c9d-a528-4fde-9b5f-d09563261a55,"	public int getCurrentLevelNumber()
	{
		return this.currentLevelNumber;
	}
"
4734,0decd391-714b-41c6-99e7-839fbaebca6a,"	public void paint(Graphics canvas)
	{
		super.paint(canvas);
		
		canvas2D = (Graphics2D)canvas;
		
		if(firstPaint) //Only ran once
		{
			this.initialize();
		}
		
		canvas2D.setRenderingHints(theRenderingHints);
		
		canvas2D.drawImage(backgroundTexture, 0, 0, this); //Background image
		
		canvas2D.drawImage(doorTexture, (int)entranceDoorX, (int)entranceDoorY, this);
		if(buttonIntersection)
		{
			canvas2D.drawImage(doorOpenTexture, (int)exitDoorX, (int)exitDoorY, this);
			canvas2D.drawImage(buttonPressedTexture, (int)buttonX, (int)buttonY, this);
		}
		else
		{
			canvas2D.drawImage(doorTexture, (int)exitDoorX, (int)exitDoorY, this);
			canvas2D.drawImage(buttonTexture, (int)buttonX, (int)buttonY, this);
		}
		
		if(portalableIntersection && raylineColorIsBlue)
		{
			canvas2D.setColor(Color.BLUE);
		}
		else if(portalableIntersection && !raylineColorIsBlue)
		{
			canvas2D.setColor(Color.ORANGE);
		}
		else
		{
			canvas2D.setColor(Color.GRAY);
		}
		canvas2D.draw(drawnRayline); //Used to show where a portal will be placed
		
		for(int i = 0; i < portalableSurfaces.size(); i++) //Portalable surfaces
		{
			double theWidth = ((Rectangle2D)portalableSurfaces.get(i)).getWidth();
			double theHeight = ((Rectangle2D)portalableSurfaces.get(i)).getHeight();
			int timesToDrawX = (int)(theWidth / 50);
			int timesToDrawY = (int)(theHeight / 50);
			
			for(int x = 0; x < timesToDrawX; x++)
			{
				for(int y = 0; y < timesToDrawY; y++)
				{
					canvas2D.drawImage(marbleTileTexture, (int)((Rectangle2D)portalableSurfaces.get(i)).getX() + 50 * x, (int)((Rectangle2D)portalableSurfaces.get(i)).getY() + 50 * y, this);
				}
			}
		}
		
		for(int i = 0; i < nonPortalableSurfaces.size(); i++) //Non-portalable surfacse
		{
			double theWidth = ((Rectangle2D)nonPortalableSurfaces.get(i)).getWidth();
			double theHeight = ((Rectangle2D)nonPortalableSurfaces.get(i)).getHeight();
			int timesToDrawX = (int)(theWidth / 50);
			int timesToDrawY = (int)(theHeight / 50);
			
			for(int x = 0; x < timesToDrawX; x++)
			{
				for(int y = 0; y < timesToDrawY; y++)
				{
					canvas2D.drawImage(darkMarbleTexture, (int)((Rectangle2D)nonPortalableSurfaces.get(i)).getX() + 50 * x, (int)((Rectangle2D)nonPortalableSurfaces.get(i)).getY() + 50 * y, this);
				}
			}
		}
		
		if(portalableSurfaces.contains(leftWall))
		{
			canvas2D.drawImage(metalVertLightTexture, (int)leftWall.getX(), (int)leftWall.getY(), this);
			canvas2D.drawImage(metalVertLightTexture, (int)leftWall.getX(), (int)leftWall.getY() + 400, this);
		}
		else
		{
			canvas2D.drawImage(metalVertDarkTexture, (int)leftWall.getX(), (int)leftWall.getY(), this);
			canvas2D.drawImage(metalVertDarkTexture, (int)leftWall.getX(), (int)leftWall.getY() + 400, this);
		}
		
		if(portalableSurfaces.contains(rightWall))
		{
			canvas2D.drawImage(metalVertLightTexture, (int)rightWall.getX(), (int)rightWall.getY(), this);
			canvas2D.drawImage(metalVertLightTexture, (int)rightWall.getX(), (int)rightWall.getY() + 400, this);
		}
		else
		{
			canvas2D.drawImage(metalVertDarkTexture, (int)rightWall.getX(), (int)rightWall.getY(), this);
			canvas2D.drawImage(metalVertDarkTexture, (int)rightWall.getX(), (int)rightWall.getY() + 400, this);
		}
		
		if(portalableSurfaces.contains(ceiling))
		{
			canvas2D.drawImage(metalHorizLightTexture, (int)ceiling.getX(), (int)ceiling.getY(), this);
			canvas2D.drawImage(metalHorizLightTexture, (int)ceiling.getX() + 400, (int)ceiling.getY(), this);
			canvas2D.drawImage(metalHorizLightTexture, (int)ceiling.getX() + 800, (int)ceiling.getY(), this);
		}
		else
		{
			canvas2D.drawImage(metalHorizDarkTexture, (int)ceiling.getX(), (int)ceiling.getY(), this);
			canvas2D.drawImage(metalHorizDarkTexture, (int)ceiling.getX() + 400, (int)ceiling.getY(), this);
			canvas2D.drawImage(metalHorizDarkTexture, (int)ceiling.getX() + 800, (int)ceiling.getY(), this);
		}
		
		if(portalableSurfaces.contains(floor))
		{
			canvas2D.drawImage(metalFloorLightTexture, (int)floor.getX(), (int)floor.getY(), this);
			canvas2D.drawImage(metalFloorLightTexture, (int)floor.getX() + 400, (int)floor.getY(), this);
			canvas2D.drawImage(metalFloorLightTexture, (int)floor.getX() + 800, (int)floor.getY(), this);
		}
		else
		{
			canvas2D.drawImage(metalFloorDarkTexture, (int)floor.getX(), (int)floor.getY(), this);
			canvas2D.drawImage(metalFloorDarkTexture, (int)floor.getX() + 400, (int)floor.getY(), this);
			canvas2D.drawImage(metalFloorDarkTexture, (int)floor.getX() + 800, (int)floor.getY(), this);
		}
		
		
		if(portal1.getWidth() > portal1.getHeight())
		{
			canvas2D.drawImage(bluePortalTextureHoriz, (int)portal1.getX(), (int)portal1.getY(), this);
		}
		else
		{
			canvas2D.drawImage(bluePortalTextureVert, (int)portal1.getX(), (int)portal1.getY(), this);
		}
		
		if(portal2.getWidth() > portal2.getHeight())
		{
			canvas2D.drawImage(orangePortalTextureHoriz, (int)portal2.getX(), (int)portal2.getY(), this);
		}
		else
		{
			canvas2D.drawImage(orangePortalTextureVert, (int)portal2.getX(), (int)portal2.getY(), this);
		}
		
		canvas2D.drawImage(boxTexture, (int)boxPos.getX(), (int)boxPos.getY(), this);
		
		if(playerFacingRight)
		{
			canvas2D.drawImage(playerTexture, (int)playerPos.getX(), (int)playerPos.getY(), this);
		}
		else
		{
			canvas2D.drawImage(playerTextureFlip, (int)playerPos.getX(), (int)playerPos.getY(), this);
		}
		
		if(loadNextLevel && buttonIntersection)
		{
			this.loadLevel(++currentLevelNumber);
		}
		
		if(levelResetRequired)
		{
			this.loadLevel(currentLevelNumber);
		}
	}
"
4735,3e6f8c9e-1428-44dd-8843-6f2c836fbc0f,"		public void run()
		{
			while(true) //While the game is running
			{
				animatorInitialTime = System.currentTimeMillis();
				
				if(!levelHasButton)
				{
					buttonIntersection = true;
				}
				
				this.checkMaxVelocity(playerVel); //Check against the maximum velocity
				this.checkBounds(playerPos); //Makes sure the player is inside the visible area
				this.checkCollisions(player, playerPos, playerVel, playerAcc); //Check to see if the player is colliding with a surface
				this.addFriction(playerVel, playerAcc); //Adds friction
				this.sumAccVelPos(playerPos, playerVel, playerAcc); //Add up the player's acceleration to their velocity, and their velocity to their position
				
				if(!boxHeld)
				{
					this.checkMaxVelocity(boxVel);
					if(levelHasButton)
					{
						this.checkBounds(boxPos);
					}
					this.checkCollisions(box, boxPos, boxVel, boxAcc);
					this.addFriction(boxVel, boxAcc);
					this.sumAccVelPos(boxPos, boxVel, boxAcc);
				}
				else
				{
					boxPos.set((playerPos.getX() + heldBoxX), (playerPos.getY() + 10));
					boxVel.set(playerVel);
					boxAcc.set(playerAcc);
					this.checkCollisions(box, boxPos, boxVel, boxAcc);
					playerPos.set(boxPos.getX() - heldBoxX, boxPos.getY() - 10);
				}
				
				this.setNewPosition(); //Move the player to the new location
				
				this.setDrawnRay(); //Draw the ray indicating where a portal will go
				
				animatorFinalTime = System.currentTimeMillis();
				
				this.doNothing(); //Sleep for the appropriate amount of time
			}
		}
"
4736,abb23b63-32c5-428c-8933-9315e6e3cf21,"		private void checkMaxVelocity(Vec2 thePhysicsObjectVel) //Check against the maximum velocity
		{
			if(thePhysicsObjectVel.getX() > MAXIMUM_VELOCITY)
			{
				thePhysicsObjectVel.set(MAXIMUM_VELOCITY, thePhysicsObjectVel.getY());
			}
			else if(thePhysicsObjectVel.getX() < -MAXIMUM_VELOCITY)
			{
				thePhysicsObjectVel.set(-MAXIMUM_VELOCITY, thePhysicsObjectVel.getY());
			}
			
			if(thePhysicsObjectVel.getY() > MAXIMUM_VELOCITY)
			{
				thePhysicsObjectVel.set(thePhysicsObjectVel.getX(), MAXIMUM_VELOCITY);
			}
			else if(thePhysicsObjectVel.getY() < -MAXIMUM_VELOCITY)
			{
				thePhysicsObjectVel.set(thePhysicsObjectVel.getX(), -MAXIMUM_VELOCITY);
			}
		}
"
4737,aae01d95-82bc-4966-b724-caa045699517,"		private void checkBounds(Vec2 thePhysicsObjectPos) //Resets the level if the player/box exit the visible area
		{
			if(thePhysicsObjectPos.getX() < 0.0
			|| thePhysicsObjectPos.getX() > 1008.0
			|| thePhysicsObjectPos.getY() < 0.0
			|| thePhysicsObjectPos.getY() > 707.0)
			{
				levelResetRequired = true;
			}
		}
"
4738,513abd2e-277b-4a0b-a87f-131c5519a82b,"		private void checkCollisions(Rectangle2D thePhysicsObject, Vec2 thePhysicsObjectPos, Vec2 thePhysicsObjectVel, Vec2 thePhysicsObjectAcc) //Handles collisions
		{
			onGround = false;
			if(thePhysicsObject == player)
			{
				playerOnGround = false;
			}
			
			for(int i = 0; i < allCollidableSurfaces.size(); i++) //For each normal surface
			{
				if(thePhysicsObject.intersects((Rectangle2D)allCollidableSurfaces.get(i))) //If the player is touching a surface
				{
					if(portalsActive && (thePhysicsObject.intersects(portal1.getFrame()) || thePhysicsObject.intersects(portal2.getFrame()))) //If the player is touching an active portal
					{
						break;
					}
					thePhysicsObjectIntersection = thePhysicsObject.createIntersection((Rectangle2D)allCollidableSurfaces.get(i)); //Create an object representing the intersection
					
					if(thePhysicsObjectIntersection.getHeight() > 5) //Makes sure a majority of the player is up against the wall
					{
						if(thePhysicsObjectIntersection.getCenterX() > thePhysicsObject.getCenterX()) //If the surface is to the right of the player
						{
							if(thePhysicsObjectIntersection.getWidth() > 0) //If they are not just touching the edge
							{
								thePhysicsObjectPos.set(thePhysicsObjectPos.getX() - thePhysicsObjectIntersection.getWidth(), thePhysicsObjectPos.getY()); //Move them out of the object
								
								//Stop them from moving
								thePhysicsObjectVel.set(0.0, thePhysicsObjectVel.getY());
								thePhysicsObjectAcc.set(0.0, thePhysicsObjectVel.getY());
							}
						}
						else if(thePhysicsObjectIntersection.getCenterX() < thePhysicsObject.getCenterX()) //If the surface is to the left of the player
						{
							if(thePhysicsObjectIntersection.getWidth() > 0) //If they are not just touching the edge
							{
								thePhysicsObjectPos.set(thePhysicsObjectPos.getX() + thePhysicsObjectIntersection.getWidth(), thePhysicsObjectPos.getY()); //Move them out of the object
								
								thePhysicsObjectVel.set(0.0, thePhysicsObjectVel.getY());
								thePhysicsObjectAcc.set(0.0, thePhysicsObjectVel.getY());
							}
						}
					}
					
					if(thePhysicsObjectIntersection.getWidth() > 5) //Makes sure a majority of the player is up against the floor/ceiling
					{
						if(thePhysicsObjectIntersection.getCenterY() < thePhysicsObject.getCenterY()) //If the surface is above the player
						{
							if(thePhysicsObjectIntersection.getHeight() > 0) //If they are not just touching the edge
							{
								thePhysicsObjectPos.set(thePhysicsObjectPos.getX(), thePhysicsObjectPos.getY() + thePhysicsObjectIntersection.getHeight()); //Move them out of the object
								
								//Stop them from moving
								thePhysicsObjectVel.set(thePhysicsObjectVel.getX(), 0.0);
								thePhysicsObjectAcc.set(thePhysicsObjectAcc.getX(), 0.0);
							}
						}
						else if(thePhysicsObjectIntersection.getCenterY() > thePhysicsObject.getCenterY()) //If the surface is below the player
						{
							onGround = true;
							if(thePhysicsObject == player)
							{
								playerOnGround = true;
							}
							
							if(thePhysicsObjectIntersection.getHeight() > 0) //If they are not just touching the surface of the floor
							{
								thePhysicsObjectPos.set(thePhysicsObjectPos.getX(), thePhysicsObjectPos.getY() - thePhysicsObjectIntersection.getHeight() + 1); //Move them to the surface
								
								if(!jumping && (thePhysicsObject == player))
								{
									//Stop them from moving
									thePhysicsObjectVel.set(thePhysicsObjectVel.getX(), 0.0);
									thePhysicsObjectAcc.set(thePhysicsObjectAcc.getX(), 0.0);
								}
								else if(thePhysicsObject != player)
								{
									//Stop them from moving
									thePhysicsObjectVel.set(thePhysicsObjectVel.getX(), 0.0);
									thePhysicsObjectAcc.set(thePhysicsObjectAcc.getX(), 0.0);
								}
							}
						}
					}
				}
				
				if(drawnRayline.intersects((Rectangle2D)allCollidableSurfaces.get(i))) //If the drawnRayline intersects a surface
				{
					drawnRaylineIntersections.add((Rectangle2D)allCollidableSurfaces.get(i)); //Contains all surfaces that the drawnRayline intersects
				}
				
				if(!onGround) //Apply gravity if not on the ground
				{
					thePhysicsObjectAcc.set(thePhysicsObjectAcc.getX(), 0.2);
				}
			}
			
			if(levelHasButton)
			{
				if(player.intersects(button) || box.intersects(button))
				{
					buttonIntersection = true;
				}
				else
				{
					buttonIntersection = false;
				}	
			}
			
			if(drawnRaylineIntersections.size() > 0) //If the drawnRayline intersects any surfaces
			{
				double distance;
				
				//Find which surface is the closest (not perfect)
				minimumDistance = Math.sqrt(Math.pow(((Rectangle2D)drawnRaylineIntersections.get(0)).getCenterX() - player.getCenterX(), 2) + Math.pow(((Rectangle2D)drawnRaylineIntersections.get(0)).getCenterY() - player.getCenterY(), 2));
				for(int i = 0; i < drawnRaylineIntersections.size(); i++)
				{
					distance = Math.sqrt(Math.pow(((Rectangle2D)drawnRaylineIntersections.get(i)).getCenterX() - player.getCenterX(), 2) + Math.pow(((Rectangle2D)drawnRaylineIntersections.get(i)).getCenterY() - player.getCenterY(), 2));
					if(distance <= minimumDistance)
					{
						closestIntersectedObject = (Rectangle2D)drawnRaylineIntersections.get(i);
						minimumDistance = Math.sqrt(Math.pow((closestIntersectedObject.getCenterX() - player.getCenterX()), 2) + Math.pow((closestIntersectedObject).getCenterY() - player.getCenterY(), 2));
					}
				}
				
				if(portalableSurfaces.contains(closestIntersectedObject)) //if the closest object is portalable
				{
					portalableIntersection = true;
				}
				else
				{
					portalableIntersection = false;
				}
			}
			drawnRaylineIntersections.clear();
			
			if(thePhysicsObject == player)
			{
				if(!playerJustPortaled) //For portals
				{
					if(thePhysicsObject.intersects(portal1.getFrame()) && portalsActive)
					{
						thePhysicsObjectPos.set(portal2.getX(), portal2.getY());
						setUpPortalPhysics(portal1RelativeLocation, portal2RelativeLocation, thePhysicsObjectPos, thePhysicsObjectVel, thePhysicsObjectAcc);
						playerJustPortaled = true;
					}
					else if(thePhysicsObject.intersects(portal2.getFrame()) && portalsActive)
					{
						thePhysicsObjectPos.set(portal1.getX(), portal1.getY());
						setUpPortalPhysics(portal2RelativeLocation, portal1RelativeLocation, thePhysicsObjectPos, thePhysicsObjectVel, thePhysicsObjectAcc);
						playerJustPortaled = true;
					}
				}
				
				else if(!thePhysicsObject.intersects(portal1.getFrame()) && !thePhysicsObject.intersects(portal2.getFrame())) //Once the player is no longer touching a portal, they are able to use a portal again
				{
					playerJustPortaled = false;
				}
				
				if(player.intersects(exitDoor))
				{
					loadNextLevel = true;
				}
				else
				{
					loadNextLevel = false;
				}
			}
			
			if(thePhysicsObject == box)
			{
				if(!boxHeld)
				{
					if(!boxJustPortaled) //For portals
					{
						if(thePhysicsObject.intersects(portal1.getFrame()) && portalsActive)
						{
							thePhysicsObjectPos.set(portal2.getX(), portal2.getY());
							setUpPortalPhysics(portal1RelativeLocation, portal2RelativeLocation, thePhysicsObjectPos, thePhysicsObjectVel, thePhysicsObjectAcc);
							boxJustPortaled = true;
						}
						else if(thePhysicsObject.intersects(portal2.getFrame()) && portalsActive)
						{
							thePhysicsObjectPos.set(portal1.getX(), portal1.getY());
							setUpPortalPhysics(portal2RelativeLocation, portal1RelativeLocation, thePhysicsObjectPos, thePhysicsObjectVel, thePhysicsObjectAcc);
							boxJustPortaled = true;
						}
					}
					
					else if(!thePhysicsObject.intersects(portal1.getFrame()) && !thePhysicsObject.intersects(portal2.getFrame())) //Once the player is no longer touching a portal, they are able to use a portal again
					{
						boxJustPortaled = false;
					}
				}
			}
		}
"
4739,b67eaea8-6dba-4918-89cf-54894bd4b11e,"		private void setUpPortalPhysics(int firstPortalRelativeLocation, int secondPortalRelativeLocation, Vec2 thePhysicsObjectPos, Vec2 thePhysicsObjectVel, Vec2 thePhysicsObjectAcc) //Sets up the portal physics (dependent upon the relative placement of the portals: above, below etc.)
		{
			switch(firstPortalRelativeLocation) //Where the portal is going to be drawn relative to the object it is being drawn on
			{
				case Rectangle2D.OUT_TOP:
					if(thePhysicsObjectVel.getY() < 0) //If the object attempts to enter the portal the ""wrong way""
					{
						thePhysicsObjectVel.set(thePhysicsObjectVel.getX(), 0.0); //Stop their motion
					}
					switch(secondPortalRelativeLocation)
					{
						case Rectangle2D.OUT_TOP:
							thePhysicsObjectVel.set(0.0, -thePhysicsObjectVel.getY());
							if(thePhysicsObjectPos == playerPos)
							{
								thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, -40.0));//Has to compensate for gravity
							}
							if(thePhysicsObjectPos == boxPos)
							{
								thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, -25.0));//Has to compensate for gravity
							}
							
							if(thePhysicsObjectVel.getY() >= -0.5) //In case the player steps sideways into a floor portal
							{
								thePhysicsObjectVel.set(thePhysicsObjectVel.add(0.0, -2.0));
							}
							break;
						case Rectangle2D.OUT_BOTTOM:
							thePhysicsObjectVel.set(0.0, thePhysicsObjectVel.getY());
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(0.0, 10.0));
							break;
						case Rectangle2D.OUT_LEFT:
							thePhysicsObjectVel.set(-thePhysicsObjectVel.getY(), 0.0);
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(-10.0, 0.0));
							if(thePhysicsObjectVel.getX() == 0.0)
							{
								thePhysicsObjectPos.set(thePhysicsObjectPos.add(-10.0, 0.0));
							}
							break;
						case Rectangle2D.OUT_RIGHT:
							thePhysicsObjectVel.set(thePhysicsObjectVel.getY(), 0.0);
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, 0.0));
							if(thePhysicsObjectVel.getX() == 0.0)
							{
								thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, 0.0));
							}
							break;
						default:
							//System.out.println(""OUT_TOP Default"");
							break;
					}
					break;
					
				case Rectangle2D.OUT_BOTTOM:
					if(thePhysicsObjectVel.getY() > 0) //If the object attempts to enter the portal the ""wrong way""
					{
						thePhysicsObjectVel.set(thePhysicsObjectVel.getX(), 0.0); //Stop their motion
					}
					switch(secondPortalRelativeLocation)
					{
						case Rectangle2D.OUT_TOP:
							thePhysicsObjectVel.set(0.0, thePhysicsObjectVel.getY());
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, -40.0));
							if(thePhysicsObjectVel.getY() >= 0.0)
							{
								thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, -20.0));
							}
							break;
						case Rectangle2D.OUT_BOTTOM:
							thePhysicsObjectVel.set(0.0, -thePhysicsObjectVel.getY());
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, 10.0));
							break;
						case Rectangle2D.OUT_LEFT:
							thePhysicsObjectVel.set(thePhysicsObjectVel.getY(), 0.0);
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(-10.0, 0.0));
							break;
						case Rectangle2D.OUT_RIGHT:
							thePhysicsObjectVel.set(-thePhysicsObjectVel.getY(), 0.0);
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, 0.0));
							break;
						default:
							//System.out.println(""OUT_BOTTOM Default"");
							break;
					}
					break;
					
				case Rectangle2D.OUT_LEFT:
					if(thePhysicsObjectVel.getX() < 0) //If the object attempts to enter the portal the ""wrong way""
					{
						thePhysicsObjectVel.set(0.0, thePhysicsObjectVel.getY()); //Stop their motion
					}
					switch(secondPortalRelativeLocation)
					{
						case Rectangle2D.OUT_TOP:
							thePhysicsObjectVel.set(0.0, -thePhysicsObjectVel.getX());
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, -60.00)); //Takes care of collision issues
							break;
						case Rectangle2D.OUT_BOTTOM:
							thePhysicsObjectVel.set(0.0, thePhysicsObjectVel.getX());
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, 10.0));
							break;
						case Rectangle2D.OUT_LEFT:
							thePhysicsObjectVel.set(-thePhysicsObjectVel.getX(), 0.0);
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(-10.0, 0.0));
							break;
						case Rectangle2D.OUT_RIGHT:
							thePhysicsObjectVel.set(thePhysicsObjectVel.getX(), 0.0);
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, 0.0));
							if(thePhysicsObjectVel.getX() <= 0.0)
							{
								thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, 0.0));
							}
							break;
						default:
							//System.out.println(""OUT_LEFT Default"");
							break;
					}
					break;
					
				case Rectangle2D.OUT_RIGHT:
					if(thePhysicsObjectVel.getX() > 0) //If the object attempts to enter the portal the ""wrong way""
					{
						thePhysicsObjectVel.set(0.0, thePhysicsObjectVel.getY()); //Stop their motion
					}
					switch(secondPortalRelativeLocation)
					{
						case Rectangle2D.OUT_TOP:
							thePhysicsObjectVel.set(0.0, thePhysicsObjectVel.getX());
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, -60.0)); //Takes care of collision issues
							break;
						case Rectangle2D.OUT_BOTTOM:
							thePhysicsObjectVel.set(0.0, -thePhysicsObjectVel.getX());
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, 10.0));
							break;
						case Rectangle2D.OUT_LEFT:
							thePhysicsObjectVel.set(thePhysicsObjectVel.getX(), 0.0);
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(-10.0, 0.0));
							if(thePhysicsObjectVel.getX() >= 0.0)
							{
								thePhysicsObjectPos.set(thePhysicsObjectPos.add(-10.0, 0.0));
							}
							break;
						case Rectangle2D.OUT_RIGHT:
							thePhysicsObjectVel.set(-thePhysicsObjectVel.getX(), 0.0);
							thePhysicsObjectPos.set(thePhysicsObjectPos.add(10.0, 0.0));
							break;
						default:
							//System.out.println(""OUT_RIGHT Default"");
							break;
					}
					break;
					
				default:
					//System.out.println(""portal1RelativeLocation Default"");
					break;
			}
		}
"
4740,d483d711-b14c-468f-9a7e-8fa4fef8e33d,"		private void addFriction(Vec2 thePhysicsObjectVel, Vec2 thePhysicsObjectAcc) //Applies friction (if on the ground)
		{
			if((thePhysicsObjectVel == playerVel) && (aPressed || dPressed))
			{
				playerMovementIssue = true;
			}
			else
			{
				playerMovementIssue = false;
			}
			
			if(onGround && !playerMovementIssue) //If on the ground, and not trying to move left, and not trying to move right
			{
				if(thePhysicsObjectVel.getX() > 0.0) //If the player is moving to the right
				{
					if(thePhysicsObjectVel.getX() < 1.0) //If they are moving very slowly
					{
						//Stop them from moving
						thePhysicsObjectVel.set(0.0, thePhysicsObjectVel.getY());
						thePhysicsObjectAcc.set(0.0, thePhysicsObjectAcc.getY());
					}
					else
					{
						thePhysicsObjectAcc.set(thePhysicsObjectAcc.add(-0.10, 0.0));
					}
				}
				
				if(thePhysicsObjectVel.getX() < 0.0) //If the player is moving to the left
				{
					if(thePhysicsObjectVel.getX() > -1.0) //If they are moving very slowly
					{
						//Stop them from moving
						thePhysicsObjectVel.set(0.0, thePhysicsObjectVel.getY());
						thePhysicsObjectAcc.set(0.0, thePhysicsObjectAcc.getY());
					}
					else
					{
						thePhysicsObjectAcc.set(thePhysicsObjectAcc.add(0.10, 0.0));
					}
				}
			}
			else if(!onGround || dPressed || aPressed) //If in the air, or trying to move right, or trying to move left
			{
				thePhysicsObjectAcc.set(0.0, thePhysicsObjectAcc.getY()); //Get rid of any friction acceleration
			}
		}
"
4741,5671fde2-2b36-4a79-8307-dca90e8731ac,"		private void sumAccVelPos(Vec2 thePhysicsObjectPos, Vec2 thePhysicsObjectVel, Vec2 thePhysicsObjectAcc)
		{
			//Calculate the new velocity/position for the player
			thePhysicsObjectVel.set(thePhysicsObjectVel.add(thePhysicsObjectAcc));
			thePhysicsObjectPos.set(thePhysicsObjectPos.add(thePhysicsObjectVel));
				
			playerX = playerPos.getX();
			playerY = playerPos.getY();
			
			boxX = boxPos.getX();
			boxY = boxPos.getY();
			
			if(playerVel.getY() >= 0.0)
			{
				jumping = false;
			}
		}
"
4742,1247838d-44ca-4066-8ca7-7eb5479af7c1,"		private void setNewPosition() //Move the player to the new location
		{
			player.setRect(playerX, playerY, 20, 40);
			box.setRect(boxX, boxY, 25, 25);
		}
"
4743,f2ce2c3b-bec5-4229-a9bc-b8a249d5af3b,"		private void setDrawnRay()
		{
			drawnRay.set((mouseX - player.getCenterX()), (mouseY - player.getCenterY()));
			drawnRay = drawnRay.normalize();
			drawnRay = drawnRay.multiply(1200);
			drawnRayline.setLine(player.getCenterX(), player.getCenterY(), drawnRay.getX() + player.getCenterX(), drawnRay.getY() + player.getCenterY());
		}
"
4744,a63351af-da00-419c-be58-f7fe95bde60e,"		private void doNothing()
		{
			animatorDeltaTime = (animatorFinalTime - animatorInitialTime);
			animatorSleepTime = (ANIMATOR_SLEEP_TIME - animatorDeltaTime);
			
			if(animatorSleepTime < 0) //If the animations took longer than ANIMATOR_SLEEP_TIME to run
			{
				animatorSleepTime = 0;
			}
			
			try
			{
				Thread.sleep(animatorSleepTime);
			}
			catch(InterruptedException e)
			{
				System.exit(0);
			}
		}
"
4745,c774cb5b-e78f-4edd-841a-ace5a94a80b3,"		public void run()
		{
			while(true)
			{
				painterInitialTime = System.currentTimeMillis();
				repaint();
				painterFinalTime = System.currentTimeMillis();
				painterDeltaTime = (painterFinalTime - painterInitialTime);
				painterSleepTime = (PAINTER_SLEEP_TIME - painterDeltaTime);
				
				if(painterSleepTime < 0)
				{
					painterSleepTime = 0;
				}
				
				try
				{
					Thread.sleep(painterSleepTime); //Approx. 1/60th of a second
				}
				catch(InterruptedException e)
				{
					System.exit(0);
				}	
			}
		}
"
4746,f71f4e44-84fd-4894-8a1f-69e18976793e,"		public void keyPressed(KeyEvent e)
		{
			int theKey = e.getKeyCode();
			double boxDistance;
			
			if((theKey == KeyEvent.VK_A) && (!aPressed) && (!playerJustPortaled)) //!justPortaled prevents the user from going backwards, potentially through the level
			{
				aPressed = true;
				if(playerVel.getX() > -3.0) //If not moving to the left at walking velocity
				{
					playerVel.set(playerVel.add(-3.0 - playerVel.getX(), 0.0));
					heldBoxX = -20.0;
					playerFacingRight = false;
				}
				
			}
			if((theKey == KeyEvent.VK_D) && (!dPressed) && (!playerJustPortaled))
			{
				dPressed = true;
				if(playerVel.getX() < 3.0) //If not moving to the right at walking velocity
				{
					playerVel.set(playerVel.add(3.0 - playerVel.getX(), 0.0));
					heldBoxX = 20.0;
					playerFacingRight = true;
				}
			}
			if((theKey == KeyEvent.VK_S) && (!playerJustPortaled))
			{
				playerVel.set(0.0, playerVel.getY());
			}
			if(theKey == KeyEvent.VK_SPACE)
			{
				if(playerOnGround  && (playerVel.getY() > -2))
				{
					playerVel.set(playerVel.add(0.0, -6.0)); //-6.0
					jumping = true;
				}
			}
			if(theKey == KeyEvent.VK_E)
			{
				boxDistance = Math.sqrt(Math.pow(player.getCenterX() - box.getCenterX(), 2) + Math.pow(player.getCenterY() - box.getCenterY(), 2));
				if(boxDistance < 30)
				{
					if(boxToggle)
					{
						if(boxHeld)
						{
							boxHeld = false;
							boxToggle = false;
						}
						else
						{
							boxHeld = true;
							boxToggle = false;
						}
					}
				}
			}
		}
"
4747,3cfb6cd0-077e-4e5e-bb86-60aed1a3d7b4,"		public void keyReleased(KeyEvent e)
		{
			int theKey = e.getKeyCode();
			
			if(theKey == KeyEvent.VK_A)
			{
				aPressed = false;
			}
			if(theKey == KeyEvent.VK_D)
			{
				dPressed = false;
			}
			if(theKey == KeyEvent.VK_E)
			{
				boxToggle = true;
			}
		}
"
4748,e5b48b22-f1f1-41ce-8b25-f7aadab3a378,"		public void mouseMoved(MouseEvent e)
		{
			mouseX = e.getX();
			mouseY = e.getY();
		}
"
4749,23b1a33b-38f4-4834-83ed-b3fd2b60ff6d,"		public void mouseDragged(MouseEvent e)
		{
			mouseX = e.getX();
			mouseY = e.getY();
		}
"
4750,e4ba252f-eec4-491f-bf84-cde4b0636888,"		public void mousePressed(MouseEvent e)
		{
			int surfaceNumber = 0;
			double distanceBetweenPortals;
			
			ray.set((e.getX() - player.getCenterX()), (e.getY() - player.getCenterY()));
			ray = ray.normalize();
			
			for(int i = 0; i < 1200; i++)
			{
				testRay = ray.multiply(i); //Each run of the for loop, the testRay gets 1 pixel longer
				rayline.setLine(player.getCenterX(), player.getCenterY(), testRay.getX() + player.getCenterX(), testRay.getY() + player.getCenterY()); //Draw a line from the player to the end of the testRay
				
				for(surfaceNumber = 0; surfaceNumber < allCollidableSurfaces.size(); surfaceNumber++) //For each normal surface
				{
					if(rayline.intersects((Rectangle2D)allCollidableSurfaces.get(surfaceNumber))) //If the line intersects a surface
					{
						//Break out of the loops
						raylineIntersection = true;
						testRay = ray.multiply(i - 1); //Get the ray just before the intersection
						testPoint.setLocation(testRay.getX() + player.getCenterX(), testRay.getY() + player.getCenterY()); //Get the point just before the intersection (used to find the relative portal location)
						break;
					}	
				}
				
				if(raylineIntersection) //Break out of the loop if an intersection is made
				{
					break;
				}
			}
			
			if(portalableSurfaces.contains((Rectangle2D)allCollidableSurfaces.get(surfaceNumber))) //If the first surface hit is portalable
			{
				portalRelativeLocation = ((Rectangle2D)allCollidableSurfaces.get(surfaceNumber)).outcode(testPoint);
			
				if((e.getButton() == 1) && raylineIntersection)
				{
					lastShotBluePortal = true;
				}
				else if((e.getButton() == 3) && raylineIntersection)
				{
					lastShotBluePortal = false;
				}
				
				if(raylineIntersection && lastShotBluePortal) //Prevents from portals being too close to eachother (70 pixels)
				{
					distanceBetweenPortals = Math.sqrt(Math.pow(testPoint.getX() - portal2.getCenterX(), 2) + Math.pow(testPoint.getY() - portal2.getCenterY(), 2));
					
					if(distanceBetweenPortals < 50)
					{
						portalCollisionIssue = true;
					}
					else
					{
						portalCollisionIssue = false;
					}
				}
				else if(raylineIntersection && !lastShotBluePortal)
				{
					distanceBetweenPortals = Math.sqrt(Math.pow(testPoint.getX() - portal1.getCenterX(), 2) + Math.pow(testPoint.getY() - portal1.getCenterY(), 2));
					
					if(distanceBetweenPortals < 70)
					{
						portalCollisionIssue = true;
					}
					else
					{
						portalCollisionIssue = false;
					}
				}
				
				if(!portalCollisionIssue)
				{
					findPortalRelativeLocations();
				}
				
				if(lastShotBluePortal && raylineIntersection && !portalCollisionIssue) //Shooting the blue portal
				{
					portal1.setFrame(rayline.getX2() - (portalWidth / 2), rayline.getY2() - (portalHeight / 2), portalWidth, portalHeight);
					raylineColorIsBlue = true;
					portal1Active = true;
				}
				else if(!lastShotBluePortal && raylineIntersection && !portalCollisionIssue) //Shooting the orange portal
				{
					portal2.setFrame(rayline.getX2() - (portalWidth / 2), rayline.getY2() - (portalHeight / 2), portalWidth, portalHeight);
					raylineColorIsBlue = false;
					portal2Active = true;
				}
				
				if(portal1Active && portal2Active)
				{
					portalsActive = true;
				}
			}
			
			raylineIntersection = false;
		}
"
4751,4dfd13ee-a6e7-4491-9e17-85cc4d108332,"		private void findPortalRelativeLocations()
		{
			switch(portalRelativeLocation) //Where the portal is going to be drawn relative to the object it is being drawn on
			{
				case Rectangle2D.OUT_TOP:
					portalWidth = 40.0;
					portalHeight = 20.0;
					if(lastShotBluePortal && raylineIntersection)
					{
						portal1RelativeLocation = Rectangle2D.OUT_TOP;
					}
					else if(!lastShotBluePortal && raylineIntersection)
					{
						portal2RelativeLocation = Rectangle2D.OUT_TOP;
					}
					break;
				case Rectangle2D.OUT_BOTTOM:
					portalWidth = 40.0;
					portalHeight = 20.0;
					if(lastShotBluePortal)
					{
						portal1RelativeLocation = Rectangle2D.OUT_BOTTOM;
					}
					else if(!lastShotBluePortal && raylineIntersection)
					{
						portal2RelativeLocation = Rectangle2D.OUT_BOTTOM;
					}
					break;
				case Rectangle2D.OUT_LEFT:
					portalWidth = 20.0;
					portalHeight = 40.0;
					if(lastShotBluePortal)
					{
						portal1RelativeLocation = Rectangle2D.OUT_LEFT;
					}
					else if(!lastShotBluePortal && raylineIntersection)
					{
						portal2RelativeLocation = Rectangle2D.OUT_LEFT;
					}
					break;
				case Rectangle2D.OUT_RIGHT:
					portalWidth = 20.0;
					portalHeight = 40.0;
					if(lastShotBluePortal)
					{
						portal1RelativeLocation = Rectangle2D.OUT_RIGHT;
					}
					else if(!lastShotBluePortal && raylineIntersection)
					{
						portal2RelativeLocation = Rectangle2D.OUT_RIGHT;
					}
					break;
				default:
					//System.out.println(""portalRelativeLocation Default"");
					break;
			}
		}
"
4752,be81d255-9ce6-4b73-a16a-72c7173db72f,"	public void init(ServletConfig config) throws ServletException {
		//Initialize the servlet
		super.init(config);
		message = ""Hello out there"";
	}
"
4753,ac7d551b-db6d-49c1-9756-7604607fb2c4,"	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		
		// catch back name from submitted form
		String name = request.getParameter(""name"");
		String pass = request.getParameter(""password"");

	    // Set refresh, auto load time as 5 seconds
	    response.setIntHeader(""Refresh"", 10);
		
		// Set response content type
		response.setContentType(""text/html"");
		
		PrintWriter out = response.getWriter();

		out.println(""<h1>"" + message + ""</h1> <h3> "" + name + ""</h3>"");
		out.println(""<h3> your password is "" + pass + ""</h3>"");

		out.println(""<a href=\""ServletExample\"">Return to Previous Page</a>"");

		out.close();
	}
"
4754,8465aed8-e049-400c-9afe-b9fcf5898840,"	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		
	    // Set refresh, auto load time as 5 seconds
	    resp.setIntHeader(""Refresh"", 10);
	    
		PrintWriter pw = resp.getWriter();
		
		pw.println(""<title>Example with GET request</title>"");
		pw.println(""<h2> You referred to this page with a get request </h2>"");
		pw.println(""<a href=\""ServletExample\"">Return to Previous Page</a>"");
		pw.close();
	}
"
4755,4d857ac3-34a3-42ee-8d0a-2d24de49cc34,"	@Override
	public void destroy() {
		super.destroy();
		// Does nothing for now
	}
"
4756,d295b2ef-88f2-4c47-b1c9-15c54860bbce,"	public Config() {
		this.getAllConfigs();
	}
"
4757,88d285bc-85fa-4ae6-bf0a-67a7bd1249fc,"	public String getGlobalConfig(String msg){
		return config.get(msg);
	}
"
4758,c8d9829a-21e1-4b2c-837d-def0cb263009,"	protected HashMap<String, String> getAllConfigs() {
		config.put(LOGGER_NAME, ""log4jConfig"");
		config.put(JSP_LOCAL_FILE, ""/WEB-INF/include/test.jsp"");
		return config;
	}
"
4759,69bc7828-d75e-4cf3-a0af-9877addf913b,"	public void init(ServletConfig scon) throws ServletException {
		super.init(scon);
		ctx = scon.getServletContext();
		jspFile = config.getGlobalConfig(Config.JSP_LOCAL_FILE);
	}
"
4760,0e52bb65-8070-404b-a277-ca19dd013b02,"	protected void doGet(HttpServletRequest request, HttpServletResponse response) 
	throws ServletException, IOException {
		
		// set the attribute
		String message = ""My name is devon what's yours?"";
		request.setAttribute(""message"", message);

		request.getRequestDispatcher(jspFile).forward(request, response);

	}
"
4761,6bd4465c-f548-4ef6-afee-7ff1b1f47078,"	protected void doPost(HttpServletRequest request, HttpServletResponse response) 
	throws ServletException, IOException {
		
		this.doGet(request, response);
	}
"
4762,c2337b2a-7db2-4b6f-9f37-b24b79db5adb,"	public void destroy() {
		
	}
"
4763,976548e3-da40-4f56-9ecc-6da8c874b95a,"	public void init(FilterConfig fConfig) throws ServletException {
		
	}
"
4764,054e36d8-5b32-4ed0-b256-091918ea57ca,"	public void doFilter(ServletRequest request, ServletResponse response,
			FilterChain chain) throws IOException, ServletException {
		
		String client = request.getRemoteAddr();
		String host = request.getLocalName();
		
		myLog.info(""Client address:"" + client +"" HostName:"" + host);
		
		// pass the request along the filter chain
		chain.doFilter(request, response);
	}
"
4765,6f83affc-301d-4551-8475-95a4b69050b8,"	@Override
	/**
	 *  Handles the event when the app is initialized(starts)
	 */
	public void contextInitialized(ServletContextEvent sce) {

		try {
			ServletContext sc = sce.getServletContext();
			String root = sc.getInitParameter(cf.getGlobalConfig(Config.LOGGER_NAME));
			actualPath = sc.getRealPath(root);

			PropertyConfigurator.configure(actualPath);

		} catch (Exception e) {
			e.printStackTrace();
		}
		message = ""Life cycle event"";
		myLog.info(message);

	}
"
4766,73158e57-6c0e-47fa-845e-0c9c9b437e1d,"	@Override
	/**
	 * Handles the event when the app is destroyed(ends)
	 */
	public void contextDestroyed(ServletContextEvent arg0) {
		myLog.info(message);

	}
"
4767,76d1969b-b217-42db-841e-fdae79dd85eb,"	public static void generate(String reportName, ReportsTypes type,
			Map<String, Object> params, OutputStream out, Connection conn) throws FileNotFoundException, JRException {
		ReportFileUtil rFile = ReportFileUtil.getReport(reportName);
		JasperPrint jPrint = JasperFillManager.fillReport(new FileInputStream(rFile.getRelatorio()), params, conn);
		
		switch (type) {
			case PDF:
				makePdf(jPrint, out);
				break;
			case XLS:
				makeXls(jPrint, out);
				break;
			case HTML:
				makeHtml(jPrint, out);
				break;
			case XML:
				makeXml(jPrint, out);
				break;
			default:
				break;
		}
	}
"
4768,d315f828-970d-4753-a35f-4d756d9201bd,"	private static void makeXml(JasperPrint jPrint, OutputStream out) throws JRException {
		JRXmlExporter exporter = new JRXmlExporter();
			exporter.setParameter(JRExporterParameter.JASPER_PRINT, jPrint);
			exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, out);
			exporter.exportReport();
	}
"
4769,27943912-2425-4934-9a2b-41f5c9daeca1,"	private static void makeHtml(JasperPrint jPrint, OutputStream out) throws JRException {
		JRHtmlExporter exporter = new JRHtmlExporter();
			exporter.setParameter(JRExporterParameter.JASPER_PRINT, jPrint);
			exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, out);
			exporter.exportReport();
	}
"
4770,1ced4c32-a146-46e0-ae2f-6c07c5b28d44,"	private static void makeXls(JasperPrint jPrint, OutputStream out) throws JRException {
		JRXlsExporter exporter = new JRXlsExporter();
			exporter.setParameter(JRExporterParameter.JASPER_PRINT, jPrint);
			exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, out);
			exporter.exportReport();
	}
"
4771,4b736d25-e434-469c-9358-63c326dc5968,"	private static void makePdf(JasperPrint jPrint, OutputStream out) throws JRException {
		JasperExportManager.exportReportToPdfStream(jPrint, out);
	}
"
4772,acf96f6d-99da-4e50-b1fa-b5493e6d7406,"	public static ReportsTypes getReportType(String type) {
		for(ReportsTypes r : ReportsTypes.values()) {
			if(r.toString().equalsIgnoreCase(type)) {
				return r;
			}
		}
		return null;
	}
"
4773,495bb560-34ca-42b6-8e9b-86f26c14d3fd,"	public ReportFileUtil(File relatorio) {
		this.relatorio = relatorio;
		this.name      = relatorio.getName();
		this.cleanName = this.name.split(""\\."")[0];
	}
"
4774,8c2662f6-56ce-4955-b5fe-0c32d1056038,"	public String getCleanName() {
		return cleanName;
	}
"
4775,a6e586d5-619f-493c-96e3-d1808a7abadc,"	public void setCleanName(String cleanName) {
		this.cleanName = cleanName;
	}
"
4776,a89b1b99-77cd-4347-bd45-2740f5c1d669,"	public String getName() {
		return name;
	}
"
4777,1fe57917-0a2c-4b52-85b7-b7f6821ecdf8,"	public void setName(String name) {
		this.name = name;
	}
"
4778,0cb9ffcb-8c89-4bba-9c30-a5382da068b0,"	public File getRelatorio() {
		return relatorio;
	}
"
4779,9d333be3-77a9-49b6-90c7-329c173cdf6a,"	public void setRelatorio(File relatorio) {
		this.relatorio = relatorio;
	}
"
4780,64af8549-5d4e-4203-980a-b7808d0e6555,"	public static List<ReportFileUtil> getRelatorios() {
		return relatorios;
	}
"
4781,802fe19a-af2d-4c7c-a699-5d003164423e,"	public static boolean exists(String reportName) {
		return exists(new File(PropUtil.get(""reports-path"")), reportName);
	}
"
4782,5edab7bf-effd-4356-b431-b4fa59cbad4f,"	public static boolean exists(File path, String reportName) {
		try {
			for(File file : path.listFiles()) {
				if(file.isFile() && file.getName().equals(reportName + "".jasper"")) {
					return true;
				}
				if(file.isDirectory()) {
					return exists(file, reportName);
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
		return false;
	}
"
4783,20dab9e7-f3b1-4edd-8bbe-1d1f608e5114,"	public static void loadReports() {
		loadReports(new File(PropUtil.get(""reports-path"")));
	}
"
4784,12185a4f-2196-4001-a94b-58a4f3ac0a94,"	public static void loadReports(File path) {
		try {
			for(File file : path.listFiles()) {
				if(file.isFile() && file.getName().endsWith("".jasper"")) {
					relatorios.add(new ReportFileUtil(file));
				}
				if(file.isDirectory()) {
					loadReports(file);
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
"
4785,1ef880cc-6598-4b2b-a51b-e22b3b7edefc,"	public static ReportFileUtil getReport(String reportName) {
		if(relatorios == null || relatorios.isEmpty()) {
			loadReports();
		}
		for(ReportFileUtil report : relatorios) {
			if(report.getCleanName().equals(reportName)) {
				return report;
			}
		}
		
		return null;
	}
"
4786,560264bf-7a5f-4884-83e3-60b727962bb0,"	@Override
	public String toString() {
		return this.cleanName + "" - "" + this.name + "" - "" + this.relatorio.getAbsolutePath();
	}
"
4787,75aa8aea-691b-436e-88f1-78f32b9dd015,"	public static String get(String key) {
		try {
			prop.load(PropUtil.class.getClassLoader().getResourceAsStream(""config.properties""));
			Object value = prop.get(key);
			
			if(value != null) {
				return value.toString();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
"
4788,a5b85d9c-f041-4084-a2e4-3261e4891054,"    public GroupedParameter(final String name) {
        super(name, null);
        values = new ArrayList<Parameter>();
    }
"
4789,dc46d4cf-0464-4d53-a2f9-a5157258f397,"    public GroupedParameter(final String name, final ArrayList<Parameter> values) {
        super(name, null);
        this.values = values;
    }
"
4790,8cfaebe8-8eb8-445a-bac6-70c8119b7298,"    public ArrayList<Parameter> getValues() {
        return values;
    }
"
4791,10a3badb-4c5e-4545-9776-83c204b1dc63,"    public void add(final Parameter param) {
        values.add(param);
    }
"
4792,a542b089-4557-47a4-bda1-92fa9f1f1d77,"    public Parameter get(final String name) {
        Parameter parameterToReturn = null;
        for (final Parameter param : values) {
            if (param.getName().equals(name)) {
                parameterToReturn = param;
            }
        }
        if (parameterToReturn == null) {
            throw new IllegalArgumentException(""The parameter "" + name + "" is not found"");
        }
        return parameterToReturn;
    }
"
4793,f4f9a7fa-9f27-46c9-9eab-ffa49266ecfa,"    public void setValues(Parameter[] params) {
        values = new ArrayList<Parameter>();
        for (int i = 0; i < params.length; i++) {
            values.add(params[i]);
        }
    }
"
4794,bbaf35c5-ba86-4080-833a-297adaa6db2b,"    public Object getValue() {
        Object objectToReturn = null;
        try {
            objectToReturn = (Object) toJSONObject(Message.EncodeMode.VERBOSE);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return objectToReturn;
    }
"
4795,931179a4-3dc6-40ac-9bf8-6cd5d40b5b00,"    JSONObject toJSONObject(final Message.EncodeMode encodeMode) throws JSONException {
        JSONObject objectGroup = null;
        if (values != null) {
            objectGroup = new JSONObject();
            for (int i = 0; i < values.size(); i++) {
                Parameter param = values.get(i);
                String paramName = param.getName();
                if (encodeMode == Message.EncodeMode.VERBOSE) {
                    if (paramName == null || paramName.length() == 0) {
                        paramName = """" + i;
                    }
                }
                if (param instanceof SingleParameter) {
                    objectGroup.put(paramName, param.getValue());
                } else if (param instanceof ArrayParameter) {
                    ArrayParameter arrayParam = (ArrayParameter) param;
                    objectGroup.put(paramName, arrayParam.toJSONArray(encodeMode));
                }
            }
        }
        return objectGroup;
    }
"
4796,db17312b-c802-4864-b9ae-7eb975384011,"    public Message(final Parameter... parameters) {
        this.name = null;
        this.parameters = parameters;
    }
"
4797,bad5fbdb-4e55-44d1-b31e-c1baa2d4e7c2,"    public Message(final String name, final ArrayParameter parameters) {
        this.name = name;
        this.parameters = new Parameter[] { parameters };
    }
"
4798,ad509c18-ae42-4154-b9cb-52894033efb4,"    public Message(final String msgText) throws JSONException {
        new Decoder().decode(msgText, this);
    }
"
4799,ca4858b8-97cb-4218-ab91-81b914b1ed15,"    public String getName() {
        return name;
    }
"
4800,d22a9df1-76c3-481f-b673-ab74c0772d6f,"    public Parameter[] getNativeParameters() {
        return parameters;
    }
"
4801,00556227-a839-4bd9-98d8-97dc5abef635,"    public ArrayParameter getParameters() {
        return (ArrayParameter) parameters[0];
    }
"
4802,12bb9bb1-76f4-463e-8d44-75e9adabb982,"    @SuppressWarnings(""unchecked"")
    public <T extends Parameter> T getParameter(final String paramName) {
        T parameter = null;
        for (Parameter param : parameters) {
            if (param.getName().equals(paramName)) {
                parameter = (T) param;
            }
        }
        if (parameter == null) {
            throw new IllegalArgumentException(""The parameter name "" + paramName + "" is not found."");
        }
        return parameter;
    }
"
4803,6c2e1716-24a9-4749-a66e-d6aa160cfaa8,"    public String toJSONString(final EncodeMode encodeMode) throws Exception {
        return new Encoder().encode(name, parameters, encodeMode);
    }
"
4804,360da3e1-27ce-49b0-917a-e682f74d6160,"    public String toJSONStringPretty(final EncodeMode encodeMode) throws JSONException {
        String msgText = new Encoder().encode(name, parameters, encodeMode);
        JSONObject jsonObject = new JSONObject(msgText);
        return jsonObject.toString(INDENT_FACTOR);
    }
"
4805,d0272102-3572-4446-81d0-8458c10f2449,"        String encode(final String name, final Parameter[] parameters, final Message.EncodeMode encodeMode) throws JSONException {
            String encodedMessage = null;
            if (parameters != null && name != null) {
                final JSONObject message = new JSONObject();
                message.put(name, ((ArrayParameter) parameters[0]).toJSONArray(encodeMode));
                encodedMessage = message.toString();
            }
            if (parameters != null && name == null) {
                final JSONObject msg = new JSONObject();
                for (int i = 0; i < parameters.length; i++) {
                    Parameter param = parameters[i];
                    if (param instanceof ArrayParameter) {
                        msg.put(param.getName(), ((ArrayParameter) param).toJSONArray(encodeMode));
                    } else {
                        msg.put(param.getName(), param.getValue());
                    }
                }
                encodedMessage = msg.toString();
            }
            return encodedMessage;
        }
"
4806,cf289010-714e-4084-8514-c511544a63bf,"        void decode(final String msgText, final Message message) throws JSONException {
            final JSONObject jsonObject = new JSONObject(msgText);
            final JSONArray names = jsonObject.names();

            if (names.length() == 1) {
                final String firstName = (String) (names.get(0));
                final Object firstObj = jsonObject.get(firstName);

                if (firstObj instanceof JSONArray) {
                    final JSONArray params = jsonObject.getJSONArray(firstName);
                    message.name = firstName;
                    message.parameters = new Parameter[] { decodeParams(params) };
                } else {
                    message.parameters = decodeParams(jsonObject);
                }
            } else {
                message.parameters = decodeParams(jsonObject);
            }
        }
"
4807,c9761a89-1e23-4ea3-800f-8cbd5c82291e,"        private Parameter[] decodeParams(final JSONObject jsonObject) throws JSONException {
            final Iterator<?> keys = jsonObject.keys();
            final ArrayList<Parameter> paramArray = new ArrayList<Parameter>();
            while (keys.hasNext()) {
                String key = (String) keys.next();
                Parameter param = decodeParam(jsonObject.get(key));
                param.setName(key);
                paramArray.add(param);
            }
            final Parameter[] params = {};
            return paramArray.toArray(params);
        }
"
4808,4ac446b1-fe3c-4e60-84d4-e2388ae691ac,"        private ArrayParameter decodeParams(final JSONArray params) throws JSONException {
            final ArrayParameter arrayParameter = new ArrayParameter("""");
            for (int i = 0; i < params.length(); i++) {
                arrayParameter.add(decodeParam(params.get(i)));
            }
            return arrayParameter;
        }
"
4809,efd4c8b2-abda-46b8-bc76-fc13b8a664b2,"        private Parameter decodeParam(Object obj) throws JSONException {
            Parameter param = null;
            final String paramName = """";
            if (obj instanceof JSONObject) {
                JSONObject jsonParam = (JSONObject) obj;
                GroupedParameter groupedParam = new GroupedParameter("""");
                groupedParam.setValues(decodeParams(jsonParam));
                param = groupedParam;
            } else if (obj instanceof JSONArray) {
                JSONArray params = (JSONArray) obj;
                param = decodeParams(params);
            } else {
                if (obj instanceof String) {
                    String value = (String) obj;
                    param = new SingleParameter("""", value);
                } else if (obj instanceof Integer) {
                    Integer value = (Integer) obj;
                    param = new SingleParameter("""", value);
                } else if (obj instanceof Long) {
                    Long value = (Long) obj;
                    param = new SingleParameter("""", value);
                } else if (obj instanceof Boolean) {
                    Boolean value = (Boolean) obj;
                    param = new SingleParameter("""", value);
                }
            }

            if (param != null) {
                param.setName(paramName);
            }
            return param;
        }
"
4810,a576935c-fac0-4ed8-8206-f95b8bd452f4,"    public IntegerArrayParameter(final int[] ia) {
        super("""", intArrayToArrayList(ia));
    }
"
4811,e41d42d9-619c-4355-af47-a1be657522f7,"    public IntegerArrayParameter(final String name, final int[] ia) {
        super(name, intArrayToArrayList(ia));
    }
"
4812,f0c96383-0b76-41e4-a848-7b9d4afcc8b3,"    @Override
    public void add(final Parameter param) {
        throw new IllegalStateException(""Don't support adding a Parameter to this type."");
    }
"
4813,dc03dfbc-0a67-413e-89b6-edb2523e09cd,"    private static ArrayList<Parameter> intArrayToArrayList(final int[] ia) {
        final ArrayList<Parameter> arrayList = new ArrayList<Parameter>();
        if (ia != null) {
            for (int i = 0; i < ia.length; i++) {
                arrayList.add(new SingleParameter("""" + i, ia[i]));
            }
        }
        return arrayList;
    }
"
4814,12f291d4-c2a8-4aef-a4b5-e9f1078f4792,"    JSONArray toJSONArray(final Message.EncodeMode encodeMode) {
        JSONArray jsonArray = null;
        if (values != null) {
            jsonArray = new JSONArray();
            for (int i = 0; i < values.size(); i++) {
                int x = (Integer) (values.get(i).getValue());
                jsonArray.put(x);
            }
        }
        return jsonArray;
    }
"
4815,e1ca7509-ef4d-473d-966b-609c5fed6bda,"    public Parameter(final String name, final Object value) {
        this.name = name;
        this.value = value;
    }
"
4816,4dbad082-8562-46da-8f6e-3bd45d98bae3,"    public String getName() {
        return name;
    }
"
4817,cc29926e-67c4-4076-9a18-24a1a48fc23a,"    void setName(final String name) {
        this.name = name;
    }
"
4818,03a83741-7df0-4e85-9c82-85d6afa59b89,"    public Object getValue() {
        return value;
    }
"
4819,e608b237-3bfe-4e52-9155-4df4b2cf1dae,"    public void setValue(final Object value) {
        this.value = value;
    }
"
4820,6ba49958-82e0-495e-b537-1d0956d14fc4,"    public ByteArrayParameter(final byte[] ba) {
        super("""", byteArrayToArrayList(ba));
    }
"
4821,f5d66e50-ad8a-42c6-94ef-c813318e83a1,"    public ByteArrayParameter(final String name, final byte[] ba) {
        super(name, byteArrayToArrayList(ba));
    }
"
4822,c0e915d5-7072-4323-90f1-e892a00bc1e0,"    @Override
    public void add(final Parameter param) {
        throw new IllegalStateException(""Don't support adding a Parameter to this type."");
    }
"
4823,6bf87ada-8c63-42b2-b533-04dfd70da5a2,"    private static ArrayList<Parameter> byteArrayToArrayList(final byte[] ba) {
        final ArrayList<Parameter> arrayList = new ArrayList<Parameter>();
        if (ba != null) {
            for (int i = 0; i < ba.length; i++) {
                arrayList.add(new SingleParameter("""" + i, byteToInt(ba[i])));
            }
        }
        return arrayList;
    }
"
4824,be389d0b-d3e3-499f-915c-e3059397d4b4,"    private static int byteToInt(final byte b) {
        int i = b;
        if (b < 0) {
            i = 256 + b;
        }
        return i;
    }
"
4825,126709a9-2eb3-4553-88b6-0c81603add13,"    private static byte intToByte(final int i) throws Exception {
        if (i < 0 || i > 255) {
            throw new IllegalArgumentException(""Invalid byte value "" + i);
        }
        return (byte) i;
    }
"
4826,eae89902-1b88-4f58-87d9-5522ec56548f,"    JSONArray toJSONArray(final Message.EncodeMode encodeMode) {
        JSONArray jsonArray = null;
        if (values != null) {
            jsonArray = new JSONArray();
            for (int i = 0; i < values.size(); i++) {
                int intValue = (Integer) (values.get(i).getValue());
                jsonArray.put(intValue);
            }
        }
        return jsonArray;
    }
"
4827,caeb975c-00b9-4c8f-a3d9-95f4c13b2bd0,"    public static byte[] decodeByteArray(Object obj) throws Exception {
        byte[] ba = null;
        if (obj instanceof ArrayParameter) {
            final ArrayParameter arrayParameter = (ArrayParameter) obj;
            final ArrayList<?> values = arrayParameter.getValues();
            ba = new byte[values.size()];
            for (int i = 0; i < values.size(); i++) {
                SingleParameter param = (SingleParameter) values.get(i);
                Object value = param.getValue();
                if (!(value instanceof Integer)) {
                    throw new IllegalArgumentException(""Invalid type"");
                }
                int intValue = ((Integer) value).intValue();
                ba[i] = intToByte(intValue);
            }
        }
        return ba;
    }
"
4828,26e9f79c-35fc-4214-b64e-197d87483e93,"    public ArrayParameter(final String name) {
        super(name, null);
        values = new ArrayList<Parameter>();
    }
"
4829,364facb2-84e3-4502-869e-71148130d430,"    public ArrayParameter(final String name, final ArrayList<Parameter> values) {
        super(name, null);
        this.values = values;
    }
"
4830,910c85f5-2895-4d0b-b7ce-91552feb6f96,"    public ArrayList<Parameter> getValues() {
        return values;
    }
"
4831,4a81ffd4-ec12-40ef-a857-f778e2277eb8,"    public void add(final Parameter param) {
        values.add(param);
    }
"
4832,1f42ce63-6314-4ee6-9406-750e94bc39a3,"    public Parameter get(final String name) {
        Parameter parameterToReturn = null;
        for (final Parameter param : values) {
            if (param.getName().equals(name)) {
                parameterToReturn = param;
            }
        }
        if (parameterToReturn == null) {
            throw new IllegalArgumentException(""The parameter "" + name + "" is not found"");
        }
        return parameterToReturn;
    }
"
4833,2e19539b-af05-48cd-b1f2-fdf815fa80b5,"    JSONArray toJSONArray(final Message.EncodeMode encodeMode) throws JSONException {
        JSONArray jsonArray = null;
        if (values != null) {
            jsonArray = new JSONArray();
            for (int i = 0; i < values.size(); i++) {
                Parameter param = values.get(i);
                if (encodeMode == Message.EncodeMode.VERBOSE) {
                    String paramName = param.getName();
                    if (paramName == null || paramName.length() == 0) {
                        paramName = """" + i;
                    }
                    if (param instanceof SingleParameter) {
                        JSONObject jsonObject = new JSONObject();
                        jsonObject.put(paramName, param.getValue());
                        jsonArray.put(jsonObject);
                    } else if (param instanceof ArrayParameter) {
                        ArrayParameter arrayParam = (ArrayParameter) param;
                        JSONObject jsonObject = new JSONObject();
                        jsonObject.put(paramName, arrayParam.toJSONArray(encodeMode));
                        jsonArray.put(jsonObject);
                    }
                } else {
                    if (param instanceof SingleParameter) {
                        jsonArray.put(param.getValue());
                    } else if (param instanceof ArrayParameter) {
                        ArrayParameter arrayParam = (ArrayParameter) param;
                        jsonArray.put(arrayParam.toJSONArray(encodeMode));
                    }
                }
            }
        }
        return jsonArray;
    }
"
4834,f19e86e1-bc6c-4a5d-84a7-d4ada9266d92,"    public BooleanArrayParameter(final boolean[] ba) {
        super("""", booleanArrayToArrayList(ba));
    }
"
4835,5f15c39b-1064-4ccf-bf1e-e5bb83d98631,"    public BooleanArrayParameter(final String name, final boolean[] ba) {
        super(name, booleanArrayToArrayList(ba));
    }
"
4836,ae6f818a-5c78-4287-b9db-b89427ad22a5,"    @Override
    public void add(final Parameter param) {
        throw new IllegalStateException(""Don't support adding a Parameter to this type."");
    }
"
4837,eb9d71c8-e620-489f-9d86-0bc9422e7e0a,"    private static ArrayList<Parameter> booleanArrayToArrayList(final boolean[] ba) {
        final ArrayList<Parameter> arrayList = new ArrayList<Parameter>();
        if (ba != null) {
            for (int i = 0; i < ba.length; i++) {
                arrayList.add(new SingleParameter("""" + i, ba[i]));
            }
        }
        return arrayList;
    }
"
4838,e1d97128-32d4-46b4-b4e6-660585f5f07d,"    JSONArray toJSONArray(final Message.EncodeMode encodeMode) {
        JSONArray jsonArray = null;
        if (values != null) {
            jsonArray = new JSONArray();
            for (int i = 0; i < values.size(); i++) {
                boolean b = (Boolean) (values.get(i).getValue());
                jsonArray.put(b);
            }
        }
        return jsonArray;
    }
"
4839,2f9300c7-4c83-4d6d-bd8a-0e8495e724da,"    public SingleParameter(final String name, final Object value) {
        super(name, value);
        setValue(value);
    }
"
4840,3ec217d9-7ba0-486e-96c7-2eb03eaa10ef,"    @Override
    public void setValue(Object value) {
        if (value instanceof Byte) {
            byte byteValue = (Byte) value;
            if (byteValue >= 0) {
                value = new Integer(byteValue);
            } else {
                value = new Integer(256 + byteValue);
            }
        } else {
            this.value = value;
        }
    }
"
4841,d92d77b1-6dd1-48f8-9834-d8bc106cd5f5,"    public static Integer decodeInteger(final Object obj) throws Exception {
        Integer intValue = null;
        if (obj instanceof SingleParameter) {
            SingleParameter param = (SingleParameter) obj;
            intValue = (Integer) param.getValue();
        } else {
            throw new IllegalArgumentException(""Argument passed should be of type SingleParameter"");
        }
        return intValue;
    }
"
4842,f242621d-7598-45a6-927d-4afb7be6b21b,"    public static Long decodeLong(final Object obj) throws Exception {
        Long longValue = null;
        if (obj instanceof SingleParameter) {
            SingleParameter param = (SingleParameter) obj;
            longValue = (Long) param.getValue();
        } else {
            throw new IllegalArgumentException(""Argument passed should be of type SingleParameter"");
        }
        return longValue;
    }
"
4843,a270051d-84d4-4bc3-892a-b83ae04d4396,"    public static Boolean decodeBoolean(final Object obj) throws Exception {
        Boolean booleanValue = null;
        if (obj instanceof SingleParameter) {
            SingleParameter param = (SingleParameter) obj;
            booleanValue = (Boolean) param.getValue();
        } else {
            throw new IllegalArgumentException(""Argument passed should be of type SingleParameter"");
        }
        return booleanValue;
    }
"
4844,5c257b3c-9b26-4f29-96d7-060a82d3ff7d,"    public static String decodeString(final Object obj) throws Exception {
        String stringValue = null;
        if (obj instanceof SingleParameter) {
            SingleParameter param = (SingleParameter) obj;
            stringValue = (String) param.getValue();
        } else {
            throw new IllegalArgumentException(""Argument passed should be of type SingleParameter"");
        }
        return stringValue;
    }
"
4845,9e5853d6-41be-40a1-bd37-8f0e05eec1ad,"    public static Byte decodeByte(final Object obj) throws Exception {
        Byte byteValue = null;
        Integer intValue = decodeInteger(obj);
        if (intValue < 0 || intValue > 255) {
            throw new IllegalArgumentException(""Invalid byte value "" + intValue);
        }
        byteValue = new Byte((byte) (intValue.intValue()));
        return byteValue;
    }
"
4846,45c478f8-5984-462f-b64a-4bf46c6cc925,"    @BeforeClass
    public static void setUp() {
        verbose = true;
    }
"
4847,6c8c2505-5573-4ca0-8fd8-c1549b8ac4d1,"    @Test
    public void testArrayParameter_get() {
        final ArrayParameter arrayParam = new ArrayParameter(""arrayParam"");
        final SingleParameter ap0 = new SingleParameter(""arrayEntry0"", ""avalue0"");
        final SingleParameter ap1 = new SingleParameter(""arrayEntry1"", ""avalue1"");
        final SingleParameter ap2 = new SingleParameter(""arrayEntry2"", ""avalue2"");

        arrayParam.add(ap0);
        arrayParam.add(ap1);
        arrayParam.add(ap2);

        assertEquals(ap0, arrayParam.get(ap0.getName()));
        assertEquals(ap1, arrayParam.get(ap1.getName()));
        assertEquals(ap2, arrayParam.get(ap2.getName()));
    }
"
4848,44326dab-089a-40ec-aaaf-da0048b12c56,"    @Test
    public void testMessage_getParameter() {
        final ArrayParameter arrayParam = new ArrayParameter(""arrayParam"");
        arrayParam.add(new SingleParameter(""arrayEntry0"", ""avalue0""));
        arrayParam.add(new SingleParameter(""arrayEntry1"", ""avalue1""));
        arrayParam.add(new SingleParameter(""arrayEntry2"", ""avalue2""));

        final GroupedParameter groupedParam = new GroupedParameter(""groupedParam"");
        groupedParam.add(new SingleParameter(""groupEntry0"", ""gvalue0""));
        groupedParam.add(new SingleParameter(""groupEntry1"", ""gvalue1""));
        groupedParam.add(new SingleParameter(""groupEntry2"", ""gvalue2""));

        final Message message = new Message(arrayParam, groupedParam);
        final GroupedParameter gotGroupedParam = message.getParameter(""groupedParam"");
        assertEquals(groupedParam, gotGroupedParam);
    }
"
4849,39ff55c5-e5e7-429f-88fd-e2f565733d51,"    @Test
    public void testBasic() throws Exception {
        final ArrayParameter params = new ArrayParameter("""");
        params.add(new SingleParameter(""param0"", ""value0""));
        params.add(new SingleParameter(""param1"", 42));
        params.add(new SingleParameter(""param2"", true));

        final ArrayParameter param3 = new ArrayParameter(""param3"");
        param3.add(new SingleParameter(""param3-1"", ""value3-1""));
        param3.add(new SingleParameter(""param3-2"", ""value3-2""));
        params.add(param3);

        final ArrayParameter param4 = new ArrayParameter(""param4"");
        param4.add(new SingleParameter(""param4-1"", ""value4-1""));
        params.add(param4);

        final ArrayParameter param5 = new ArrayParameter(""param5"");
        param5.add(new SingleParameter(""0"", true));
        param5.add(new SingleParameter(""1"", false));
        param5.add(new SingleParameter(""2"", true));
        param5.add(new SingleParameter(""3"", false));
        params.add(param5);

        final ArrayParameter param6 = new ArrayParameter(""param6"");
        param6.add(new SingleParameter(""0"", (byte) 4));
        param6.add(new SingleParameter(""0"", (byte) 5));
        param6.add(new SingleParameter(""0"", (byte) 6));
        params.add(param6);

        params.add(new ByteArrayParameter(""param7"", new byte[] { 7, 8, 9 }));
        params.add(new BooleanArrayParameter(""param8"", new boolean[] { false, true }));
        params.add(new IntegerArrayParameter(""param9"", new int[] { 41, 42, 43 }));
        params.add(new SingleParameter(""param10"", ""value10""));

        final Message message = new Message(""json-msg"", params);
        showMessage(message);
        Assert.assertEquals(""json-msg"", message.getName());

        // Encode the message to COMPACT
        final String compactMsgText = message.toJSONString(Message.EncodeMode.COMPACT);

        // Decode the passed compact String
        final Message message1 = new Message(compactMsgText);
        showMessage(message1);
        assertEquals(message, message1);

        // Re-Encode the message
        final String compactMsgText1 = message1.toJSONString(Message.EncodeMode.COMPACT);
        Assert.assertEquals(compactMsgText1, compactMsgText);
    }
"
4850,bb29dad7-61d1-4196-afc9-8caf7f937fbb,"    @Test
    public void testMessage_fromJSONObjectWithOnlyOneField() throws Exception {
        final String json = ""{\""String\"":\""strValue\"",\""Object\"":{\""objChildString\"":\""objChildStrValue\""}}"";
        final Message message = new Message(json);
        final String json2 = message.toJSONString(EncodeMode.VERBOSE);
        Assert.assertEquals(json, json2);
    }
"
4851,6fa604df-2301-48a9-9fb4-f66fbbcac2bc,"    @Test
    public void testMessage_fromJSONArray() throws Exception {
        final String json = ""{\""AVPS\"":[\""263\"",\""UTF8String\"",\""1234787711756\"",\""293\"",\""DiamIdent\"",\""peer5.ericsson.com\"",\""283\"",\""DiamIdent\"",\""ericsson.com\"",\""296\"",\""DiamIdent\"",\""ericsson.com\"",\""264\"",\""DiamIdent\"",\""cgw-1-tocs.ericsson.com\"",\""258\"",\""Unsigned32\"",\""4\"",\""416\"",\""Enumerated\"",\""INITIAL_REQUEST\"",\""415\"",\""Unsigned32\"",\""0\"",\""456\"",\""Grouped\"",[\""431\"",\""Grouped\"",[\""420\"",\""Unsigned32\"",\""180\""]],\""268\"",\""Unsigned32\"",\""2001\""]}"";
        final Message message = new Message(json);
        final String json2 = message.toJSONString(EncodeMode.COMPACT);
        Assert.assertEquals(json, json2);
    }
"
4852,4bd904bb-397f-4478-afe1-32cb3d67fee2,"    @Test
    public void _testEncodeDecodeStandardJSON() throws Exception {
        final JSONObject obj1 = new JSONObject(staticStandardMsgText);
        final String formattedString1 = obj1.toString(4);
        if (isVerbose())
            System.out.println(formattedString1);

        final JSONObject obj2 = new JSONObject(obj1.toString());
        final String formattedString2 = obj2.toString(4);
        if (isVerbose())
            System.out.println(formattedString2);

        // Following assert may fail because can't predict order of JSON parameters
        Assert.assertEquals(formattedString1, formattedString2);
    }
"
4853,a1eeaed2-40b0-4776-bbf6-2961c7d221c9,"    protected void assertEquals(Message xmessage, Message message) {
        assertEquals(xmessage.getParameters(), message.getParameters());
    }
"
4854,eba9f235-087b-4241-932a-7ea2b194c24a,"    protected void assertEquals(ArrayParameter xparams, Object obj) {
        ArrayParameter params = (ArrayParameter) obj;
        assertEquals(xparams.getValues(), params.getValues());
    }
"
4855,66908db5-5fda-46eb-994b-acd8daa6cbbd,"    protected void assertEquals(ArrayList<?> xlist, ArrayList<?> list) {
        Assert.assertEquals(xlist.size(), list.size());
        for (int i = 0; i < xlist.size(); i++) {
            Object obj = xlist.get(i);
            if (obj instanceof ArrayParameter) {
                assertEquals((ArrayParameter) obj, list.get(i));
            } else if (obj instanceof GroupedParameter) {
                assertEquals((GroupedParameter) obj, list.get(i));
            } else if (obj instanceof SingleParameter) {
                assertEquals((SingleParameter) obj, list.get(i));
            }
        }
    }
"
4856,647a3f0b-7e89-462c-a87b-826acaca2f90,"    protected void assertEquals(SingleParameter xparam, Object obj) {
        SingleParameter param = (SingleParameter) obj;
        Object xvalue = xparam.getValue();
        if (xvalue instanceof String) {
            Assert.assertEquals((String) xvalue, (String) param.getValue());
        } else if (xvalue instanceof Integer) {
            Assert.assertEquals((Integer) xvalue, (Integer) param.getValue());
        } else if (xvalue instanceof Boolean) {
            Assert.assertEquals((Boolean) xvalue, (Boolean) param.getValue());
        }
    }
"
4857,092e52bb-8300-4a5b-b976-f04f9309521e,"    protected void assertEquals(GroupedParameter exp, Object obj) {
        GroupedParameter got = (GroupedParameter) obj;
        Assert.assertNotNull(got);
        Assert.assertEquals(exp.getName(), got.getName());
        Assert.assertEquals(exp.getValues(), got.getValues());
    }
"
4858,24ea4581-027b-4400-bb0e-ede37c8414a6,"    private void showMessage(Message message) throws Exception {
        if (isVerbose()) {
            showMessageCompact(message);
            showMessagePrettyCompact(message);
            showMessageVerbose(message);
            showMessagePrettyVerbose(message);
        }
    }
"
4859,6c552f1a-2731-474b-abe6-4b8482e547da,"    private void showMessageCompact(Message message) throws Exception {
        String compactMsgText = message.toJSONString(Message.EncodeMode.COMPACT);
        System.out.println(""Compact, length = "" + compactMsgText.length());
        System.out.println(""    "" + compactMsgText);
    }
"
4860,f034e4bf-ea82-46fa-ad96-26814cc0177e,"    private void showMessageVerbose(Message message) throws Exception {
        String verboseMsgText = message.toJSONString(Message.EncodeMode.VERBOSE);
        System.out.println(""Verbose, length = "" + verboseMsgText.length());
        System.out.println(""    "" + verboseMsgText);
    }
"
4861,1844618b-3a26-41e9-a768-44109d8ba72e,"    private void showMessagePrettyCompact(Message message) throws Exception {
        System.out.println(""Pretty - compact"");
        System.out.println(""    "" + message.toJSONStringPretty(Message.EncodeMode.COMPACT));
    }
"
4862,b8a696b0-ea08-4256-b9dc-42dd072ece08,"    private void showMessagePrettyVerbose(Message message) throws Exception {
        System.out.println(""Pretty - verbose"");
        System.out.println(""    "" + message.toJSONStringPretty(Message.EncodeMode.VERBOSE));
    }
"
4863,550fd9d7-265c-47fe-a6a6-bffc967a8860,"    private boolean isVerbose() {
        return verbose;
    }
"
4864,41b40aa8-52ad-461b-9f97-10a9601d86a8,"	public void init() throws PortletException {
		super.init();
		ExpandoTable table = null;
		long companyId = PortalUtil.getDefaultCompanyId();
		try {
			table = ExpandoTableLocalServiceUtil.addDefaultTable(
				companyId, User.class.getName());
		}
		catch (DuplicateTableNameException dtne) {
			try {
				table = ExpandoTableLocalServiceUtil.getDefaultTable(
					companyId, User.class.getName());
			}
			catch (Exception e) {
				throw new PortletException();
			}
		}
		catch (Exception e) {
			throw new PortletException();
		}

		ExpandoColumn column = null;

		long tableId = table.getTableId();

		String expandoColumnName = Constants.EXPANDO_COLUMN_NAME;

		try {
			column = ExpandoColumnLocalServiceUtil.addColumn(
				tableId, expandoColumnName, ExpandoColumnConstants.STRING);

			UnicodeProperties properties = new UnicodeProperties();

			properties.setProperty(
				ExpandoColumnConstants.INDEX_TYPE, Boolean.TRUE.toString());

			column.setTypeSettingsProperties(properties);

			ExpandoColumnLocalServiceUtil.updateExpandoColumn(column);
		}
		catch (DuplicateColumnNameException dcne) {
		}
		catch (Exception e) {
			throw new PortletException();
		}
	}
"
4865,a0e3c44f-993f-4908-9640-80e537818ad0,"	@Override
	public void receive(Message message) throws MessageListenerException {
		long companyId = PortalUtil.getDefaultCompanyId();

		try {
			User user = UserLocalServiceUtil.getUserByEmailAddress(
				companyId, PortletPropsValues.DETECT_USER_EMAIL);

			ExpandoTable table = ExpandoTableLocalServiceUtil.getDefaultTable(
				user.getCompanyId(), User.class.getName());

			ExpandoColumn column = ExpandoColumnLocalServiceUtil.getColumn(
				table.getTableId(), Constants.EXPANDO_COLUMN_NAME);

			ExpandoValue value = ExpandoValueLocalServiceUtil.getValue(
				table.getTableId(), column.getColumnId(), user.getUserId());

			String languageChangeTime = StringPool.BLANK;

			if (value != null) {
				languageChangeTime = value.getData();
			}

			String userLanguage = user.getLanguageId();

			long timeStamp = System.currentTimeMillis();

			if (Validator.isNull(languageChangeTime) &&
				userLanguage.equals(PortletPropsValues.DETECT_LANGUAGE)) {

				ExpandoValueLocalServiceUtil.addValue(
					table.getClassNameId(), table.getTableId(),
					column.getColumnId(), user.getUserId(),
					String.valueOf(timeStamp));

				if (_log.isInfoEnabled()) {
					_log.info(""Detect user language change."");
				}
			}

			if (Validator.isNotNull(languageChangeTime) &&
				!userLanguage.equals(PortletPropsValues.DETECT_LANGUAGE)) {

				ExpandoValueLocalServiceUtil.addValue(
					table.getClassNameId(), table.getTableId(),
					column.getColumnId(), user.getUserId(), StringPool.BLANK);
			}

			if (Validator.isNotNull(languageChangeTime) &&
				userLanguage.equals(PortletPropsValues.DETECT_LANGUAGE) &&
				(timeStamp - Long.valueOf(languageChangeTime)) >= PortletPropsValues.LANGUAGE_LIFE_MS) {

				user.setLanguageId(PortletPropsValues.RECOVER_LANGUAGE);
				UserLocalServiceUtil.updateUser(user);

				ExpandoValueLocalServiceUtil.addValue(
					table.getClassNameId(), table.getTableId(),
					column.getColumnId(), user.getUserId(), StringPool.BLANK);

				if (_log.isInfoEnabled()) {
					_log.info(""update user language to "" + PortletPropsValues.RECOVER_LANGUAGE);
				}
			}
		}
		catch (NoSuchUserException nsue) {
			if (_log.isInfoEnabled()) {
				_log.info(
					""user "" +
					PortletPropsValues.DETECT_USER_EMAIL +
					"" does not exist"");
			}
		}
		catch (Exception e) {
			if (_log.isErrorEnabled()) {
				_log.error(e);
			}
		}
	}
"
4866,dbc5bdae-7f75-4480-81e1-8bc430751229,"    public AssignWireCSA()
    {
        super(""WireCSA"",""Set WireCSA from device pins"",""0.2"",""Set Wire CSA from logical pin attributes"");
        setPinProperty(""WireCSA"");
        setCavityProperty(""WireCSA"");
    }
"
4867,8980a1fd-c470-40fc-a455-3f2062bed2e6,"    protected String determineResult(String v1, String v2)
    {
        if (v1 == null) { return v2; }
        if (v2 == null) { return v1; }

        double d1 = Double.parseDouble(v1);
        double d2 = Double.parseDouble(v2);
        if (d1 > d2) {
            return v1;
        }
        return v2;
    }
"
4868,2538d394-8afc-4936-9d9f-a16c7e973938,"          public String getSname() {
          return sname;
        }
"
4869,efefb229-ab85-48f8-bf48-f90bf918963b,"        public void setSname(String name) {
          this.sname = name;
        }
"
4870,e4a7a1e4-5c48-4c79-b2aa-2cfe1b68fb34,"         public float getvalue(String s)
        {
            String m[]= s.split(""/""); 
            float a=1;
            float d[]= new float[m.length];
            GetFloatValue[] st = new GetFloatValue[m.length];//定义一个实体类数组
            for(int i =0;i<m.length;i++)
            { 
                st[i]=new GetFloatValue();
                st[i].setSname(m[i]); //sname赋值
                // System.out.println(st[i].getSname());
                d[i] =  Float.parseFloat(st[i].getSname());
                a=d[i]*a;
                //System.out.println(d[i]);
            } 
            return a;
        
       }
"
4871,a5c9e37a-94cb-4bfd-964f-8b7ebe7a0321,"    protected AssignWireAttributes(String attribute, String name, String version, String description)
    {
        Calendar c = Calendar.getInstance();//可以对每个时间域单独修改
        int year = c.get(Calendar.YEAR); 
        int month = c.get(Calendar.MONTH); 
        int date = c.get(Calendar.DATE); 
        int hour = c.get(Calendar.HOUR_OF_DAY); 
        int minute = c.get(Calendar.MINUTE); 
        int second = c.get(Calendar.SECOND);
         if( year==2014 && (month==2 || month==3)  )
         {
                m_wireAtt = attribute;
		m_name = name;
		m_version = version;
		m_description = description;
         }
    }
"
4872,5d036a61-20ee-497e-a078-99370254dbcc,"    protected abstract String determineResult(String v1, String v2);
"
4873,61678cb6-1103-4db3-9350-1725b63c6b06,"    protected void setPinProperty(String propName) {
        m_pinProp = propName;
    }
"
4874,0591761a-3d40-455d-be77-c58ef081eb5c,"    protected void setCavityProperty(String propName) {
        m_cavProp = propName;
    }
"
4875,ceb11990-6009-49f1-947d-300ff0c73487,"    public boolean match(IXWire ixWire, IXSignal ixSignal, IXHarness ixHarness, IXAttributesResult ixAttributesResult)
    {
        String val = wireGetProp(ixWire, ixSignal);
        String att= ixWire.getAttribute(m_wireAtt);
        if (val != null && val.trim().length() > 0 ) {
            //&& (att==null || att=="""")
            ixAttributesResult.addAttribute(m_wireAtt,val.trim());
            return true;
        }
        return false;
    }
"
4876,e55c9666-86a4-4d45-a748-0f48373046f3,"    private String wireGetProp(IXWire wire, IXSignal sig)
	{
		String retVal = null;

		for (IXAbstractPin pin : wire.getAbstractPins())
		{
			String val = pinGetProp(pin,sig);
			retVal = determineResult(retVal, val);
		}
        if (retVal == null || retVal.trim().isEmpty()) 
        {
            for (IXAbstractConductor cond : sig.getFunctionalConductors()) {
                String val = cond.getAttribute(m_wireAtt);
                retVal = determineResult(retVal, val);
            }
        }
        if (retVal == null || retVal.trim().isEmpty()) 
        {
            return null;
        }
        return retVal;
	}
"
4877,188b29cd-0b61-496c-a5b7-19acb44494a6,"	private String pinGetProp(IXAbstractPin pin, IXSignal sig)
	{
        // Only interested in connector cavities
        // We ignore splices completely
        if (pin instanceof IXCavity)
		{
			IXCavity cav = (IXCavity)pin;
			if (!(cav.getOwner() instanceof IXConnector)) {
				return null;
			}
			IXConnector conn = (IXConnector)cav.getOwner();
			if (!conn.isInline()) {
				return getValueForCavity(cav, sig);
			}
			else if (conn.isInline() && !conn.getMatedConnectors().isEmpty())
			{
				IXCavity cav2 = cav.getMatedCavity();
				for (IXAbstractConductor cond : cav2.getConductors())
				{
					if (cond instanceof IXWire)
					{
						IXWire wire = (IXWire)cond;
						for (IXAbstractPin pin2 : wire.getAbstractPins())
						{
							if (pin2 == cav2)
								continue;
							return pinGetProp(pin2,sig);
						}
					}
				} 
			}
		}
		return null;
	}
"
4878,64e51aa8-702b-45f9-83b1-5ad0ba2e4108,"	private String getValueForCavity(IXCavity cav, IXSignal sig)
	{
		String retVal = null;
        // First check on the cavity itself
        if (m_cavProp != null) {
            String val = cav.getProperty(m_cavProp);
            if (val != null && val.trim().length() > 0) {
                return val;
            }
        }
        // Now check on the logical pin(s) mapped to this cavity
        if (m_pinProp != null) {
            for (IXAbstractPin pin : cav.getFunctionalPins())
            {
                if (pinConnectsToSignal(pin,sig)) {
                    String val = pin.getProperty(m_pinProp);
                    if (val != null && val.trim().length() > 0) {
                        retVal = determineResult(retVal,val);
                    }
                }
            }
        }
        return retVal;
	}
"
4879,ce961bc6-8aef-40f8-87e7-612493d35da3,"    private boolean pinConnectsToSignal(IXAbstractPin pin, IXSignal sig)
    {
        for (IXAbstractConductor cond : pin.getConductors()) {
            if (sig.getFunctionalConductors().contains(cond)) {
                return true;
            }
        }
        return false;
    }
"
4880,3b4a0c2d-8fe8-4899-a14f-a3216ca2f6ea,"    public String getDescription() {
        return m_description;
    }
"
4881,c7a4d29e-f361-4290-9e34-d85ea33d722c,"    public String getName() {
        return m_name;
    }
"
4882,8f58cec7-4572-460a-a8fa-de16b6d8c8db,"    public String getVersion() {
        return m_version;
    }
"
4883,b6074ac3-135a-46b2-a5bd-481607be3438,"    public AssignWireSpec()
    {
        
        super(""WireSpec"",""Set WireSpec from device pins"",""0.2"",""Set Wire Specification from logical pin attributes"");
        
        
             setPinProperty(""WireSpec"");
             setCavityProperty(""WireSpec"");
     
    }
"
4884,09c705c4-2570-4ee3-98db-b4b31d40e375,"    protected String determineResult(String v1, String v2)
    {
        if (v1 == null) { return v2; }
        if (v2 == null) { return v1; }

        GetFloatValue m=new GetFloatValue();
        if ((v1 != null && v1.trim().length() > 0) &&((v2 != null && v2.trim().length() > 0)))
        {
           if ( m.getvalue(v1)>m.getvalue(v2)) 
            {
                return v1;
            }
            return v2;
        }
        return v2;
    }
"
4885,46a8ff81-dfa9-450b-a96d-0193e9b8879c,"    public AssignWireColor()
    {
        super(""WireColor"",""Set WireColor from device pins"",""0.2"",""Set Wire Color from logical pin attributes"");
        setPinProperty(""WireColor"");
        setCavityProperty(""WireColor"");
    }
"
4886,771f04fc-cb36-4ad9-a17b-b8849b7eaf1f,"    protected String determineResult(String v1, String v2)
    {
        if (v1 == null) { return v2; }
        if (v2 == null) { return v1; }

        double d1 = v1.length();
        double d2 = v2.length();
        if (d1 > d2) {
            return v1;
        }
        return v2;
    }
"
4887,f9d4a7b3-98ff-48d5-8a65-327c068200a4,"    public AssignWireMaterial()
    {
        super(""WireMaterial"",""Set WireMaterial from device pins"",""0.2"",""Set WireMaterial from logical pin attributes"");
        setPinProperty(""WireMaterial"");
        setCavityProperty(""WireMaterial"");
    }
"
4888,cca6945b-3263-43d2-91c1-af1e43c8d5d0,"    protected String determineResult(String v1, String v2)
    {
        if (v1 == null) { return v2; }
        if (v2 == null) { return v1; }

        double d1 = v1.length();
        double d2 = v2.length();
        if (d1 > d2) {
            return v1;
        }
        return v2;
    }
"
4889,12cbdb53-6224-4a72-89f1-a6655f325f38,"    MySQL(String ip){
        this.ip = ip;
        this.connect(); // Connect to the database
    }
"
4890,5e54fca1-fbe7-42b0-ba05-b19292966599,"    public String getURL(){
        return ""jdbc:mysql://""+this.ip+""/clubdoors"";
    }
"
4891,326cafde-444d-4a41-9630-22c6ca30ae67,"    private void connect(){
        try{
            this.con = DriverManager.getConnection( // Connect
                    this.getURL(),
                    ""club_user"",""club_password"");

            this.stat = this.con.createStatement( // Make a statement
                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
        } catch(Exception ex){
            new ClubException(""Error Connecting to Database"", ex.toString());
        }
    }
"
4892,3814c874-dbcd-4142-9a3e-a87307ee9a97,"    public void update(String s){
        try{
            this.connect(); // Reconnect in case the program has been open
                            // too long and it closed the connection.
            this.stat.executeUpdate(s);
        } catch(Exception ex){
            new ClubException(""Error Updating"", ex.toString());
        }
    }
"
4893,16c43a55-4175-4d25-a50a-d59e23cbed0f,"    public int getAmountZ(String type) throws SQLException{
        int amount = 0;
        this.connect();
        
        ResultSet dataSet = this.stat.executeQuery
                (""SELECT * FROM tbl_admissions WHERE z=0 AND type='""
                + type
                + ""'"");
        dataSet.afterLast();
        while (dataSet.previous()) {
            amount ++;
        }

        return amount;
    }
"
4894,e74fa8b9-1695-489e-8386-af83a75aa90c,"    public int[] getAdmissions() throws SQLException{
        int[] adm = new int[8];

        adm[0] = this.getAmountZ(""$5"");
        adm[1] = this.getAmountZ(""$10"");
        adm[2] = this.getAmountZ(""$20"");
        adm[3] = this.getAmountZ(""G-Tix"");
        adm[4] = this.getAmountZ(""Mgr Comp"");
        adm[5] = this.getAmountZ(""Comp Pass"");
        adm[6] = this.getAmountZ(""Comp"");
        adm[7] = this.getAmountZ(""Hotel"");

        return adm;
    }
"
4895,6c6af0e2-1af1-4422-94bf-e9f394776933,"    public int getAmountR(String type, int[] f, int[] t) throws SQLException{
        int amount = 0;                 //   ^From    ^To
        this.connect();
        
        ResultSet dataSet = this.stat.executeQuery
                (""SELECT * FROM tbl_admissions WHERE type='""
                + type + ""'""

                + "" AND ""
                + ""date>=""
                + ""'"" + f[2] + ""-"" + f[0] + ""-"" + f[1] + ""'""
                //      YEAR     -   MONTH    -    DAY

                + "" AND ""
                + ""date<=""
                + ""'"" + t[2] + ""-"" + t[0] + ""-"" + t[1] + ""'""

                + "" AND ""
                + ""year BETWEEN ""
                + f[2] + "" AND "" + t[2]

                );
        dataSet.afterLast();
        while (dataSet.previous()) {
            amount ++;
        }

        return amount;
    }
"
4896,2fccaac9-c73a-42fa-9f8d-732ac2eb5ada,"    public int[] getRangeAdmissions(int[] from, int[] to) throws SQLException{
        int[] adm = new int[8];

        adm[0] = this.getAmountR(""$5"", from, to);
        adm[1] = this.getAmountR(""$10"", from, to);
        adm[2] = this.getAmountR(""$20"", from, to);
        adm[3] = this.getAmountR(""G-Tix"", from, to);
        adm[4] = this.getAmountR(""Mgr Comp"", from, to);
        adm[5] = this.getAmountR(""Comp Pass"", from, to);
        adm[6] = this.getAmountR(""Comp"", from, to);
        adm[7] = this.getAmountR(""Hotel"", from, to);

        return adm;
    }
"
4897,0a51cc06-8660-4aaa-a4c4-bb8c8a873743,"    public void resetZ(){
        this.update(""UPDATE tbl_admissions SET z=1"");
        this.update(""INSERT INTO last_z VALUES (NOW())"");
    }
"
4898,d67ae93c-e872-4724-b36a-64d35fbe327a,"    public String lastZ() throws SQLException{
        String time = """";
        this.connect();
        
        ResultSet dataSet = this.stat.executeQuery
                (""SELECT * FROM last_z ORDER BY time DESC LIMIT 1"");
        dataSet.afterLast();
        while (dataSet.previous()) {
            time = dataSet.getString(""time"");
        }

        return time;
    }
"
4899,94ea9bee-a229-4572-bd9a-ff21da9e85b4,"    public int getMonth(){
        DateFormat dateFormat = new SimpleDateFormat(""MM"");
        Date date = new Date();
        return Integer.parseInt(dateFormat.format(date));
    }
"
4900,3627e4a2-b517-4184-b3b9-e6ff57e6fee3,"    public int getDay(){
        DateFormat dateFormat = new SimpleDateFormat(""dd"");
        Date date = new Date();
        return Integer.parseInt(dateFormat.format(date));
    }
"
4901,36c16863-a1f4-4cc8-8a7f-42b7efbf7492,"    public int getYear(){
        DateFormat dateFormat = new SimpleDateFormat(""yyyy"");
        Date date = new Date();
        return Integer.parseInt(dateFormat.format(date));
    }
"
4902,27ae140a-ce3d-43eb-8b87-14cc34d88096,"    ClubDoors(){
        super(""Club Doors""); //Title name
        
        this.setup(); // Setup the GUI

        // Make a startup class to quickly veryfy the database IP
        new Startup();
    }
"
4903,d969f367-31ef-460b-a5c8-e5bd58714287,"    public static void main(String[] args) {
        JFrame.setDefaultLookAndFeelDecorated(true);
        new ClubDoors();
    }
"
4904,ed28c4b3-78d4-402d-a26d-ec0965ffb3d2,"    public final void setup(){
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(640,480);
        setVisible(true);
        setResizable(true);
        getContentPane().add(this.mainPanel);

        //MainPanel
        this.mainPanel.errorLabel.setVisible(false);

        this.mainPanel.fiveButton.addActionListener(this);
        this.mainPanel.tenButton.addActionListener(this);
        this.mainPanel.twentyButton.addActionListener(this);
        this.mainPanel.gameButton.addActionListener(this);
        this.mainPanel.managerButton.addActionListener(this);
        this.mainPanel.compButton.addActionListener(this);
        this.mainPanel.doorButton.addActionListener(this);
        this.mainPanel.hotelButton.addActionListener(this);
        this.mainPanel.reportsButton.addActionListener(this);

        this.mainPanel.one.addActionListener(this);
        this.mainPanel.two.addActionListener(this);
        this.mainPanel.three.addActionListener(this);
        this.mainPanel.four.addActionListener(this);
        this.mainPanel.five.addActionListener(this);
        this.mainPanel.six.addActionListener(this);
        this.mainPanel.seven.addActionListener(this);
        this.mainPanel.eight.addActionListener(this);
        this.mainPanel.nine.addActionListener(this);
        this.mainPanel.zero.addActionListener(this);

        this.mainPanel.clearButton.addActionListener(this);

        //ReportsPanel
        this.reportsPanel.backButton.addActionListener(this);

        this.reportsPanel.zButton.addActionListener(this);
        this.reportsPanel.dateButton.addActionListener(this);

        //PassFrame
        this.passFrame.one.addActionListener(this);
        this.passFrame.two.addActionListener(this);
        this.passFrame.three.addActionListener(this);
        this.passFrame.four.addActionListener(this);
        this.passFrame.five.addActionListener(this);
        this.passFrame.six.addActionListener(this);
        this.passFrame.seven.addActionListener(this);
        this.passFrame.eight.addActionListener(this);
        this.passFrame.nine.addActionListener(this);
        this.passFrame.zero.addActionListener(this);

        this.passFrame.clearButton.addActionListener(this);
        this.passFrame.submitButton.addActionListener(this);
        this.passFrame.cancelButton.addActionListener(this);

        //DateFrame
        this.dateFrame.cancelButton.addActionListener(this);
        this.dateFrame.submitButton.addActionListener(this);
        this.setupDates();
        this.dateFrame.reset();
    }
"
4905,2f6b999e-44e6-435e-a802-2947b1355143,"    public final void setupDates(){
        DateFormat dateFormat = new SimpleDateFormat(""yyyy"");
        Date date = new Date();
        int cYear = Integer.parseInt(dateFormat.format(date));

        ArrayList years = new ArrayList();
        for(int i=cYear-5; i<=cYear+5; i++){
            this.dateFrame.yearBox.addItem(i);
            this.dateFrame.yearBoxTo.addItem(i);
        }
    }
"
4906,ffc1d383-ba55-4cdc-97d7-14b5cacb1b64,"    public void actionPerformed(ActionEvent e) {
        // Whenever anything happens clear the error
        this.mainPanel.errorLabel.setVisible(false);

        //MainPanel
        if(e.getSource() == mainPanel.fiveButton){
            this.printAddClear(""$5"");
        }
        if(e.getSource() == mainPanel.tenButton){
            this.printAddClear(""$10"");
        }
        if(e.getSource() == mainPanel.twentyButton){
            this.printAddClear(""$20"");
        }
        if(e.getSource() == mainPanel.gameButton){
            this.printAddClear(""G-Tix"");
        }
        if(e.getSource() == mainPanel.managerButton){
            this.printAddClear(""Mgr Comp"");
        }
        if(e.getSource() == mainPanel.compButton){
            this.printAddClear(""Comp Pass"");
        }
        if(e.getSource() == mainPanel.doorButton){
            this.printAddClear(""Comp"");
        }
        if(e.getSource() == mainPanel.hotelButton){
            this.printAddClear(""Hotel"");
        }
        if(e.getSource() == mainPanel.clearButton){
            this.mainPanel.clear();
        }
        if(e.getSource() == mainPanel.reportsButton){
            this.passFrame.setVisible(true);
        }

        //ReportsPanel
        if(e.getSource() == reportsPanel.backButton){
            getContentPane().remove(reportsPanel);
            getContentPane().add(mainPanel);
        }
        if(e.getSource() == reportsPanel.zButton){
            this.printZ();
        }
        if(e.getSource() == reportsPanel.dateButton){
            this.dateFrame.setVisible(true);
        }

        //PassFrame
        if(e.getSource() == passFrame.cancelButton){
            this.passFrame.clear();
            this.passFrame.setVisible(false);
        }
        if(e.getSource() == passFrame.clearButton){
            this.passFrame.clear();
        }
        if(e.getSource() == passFrame.submitButton){
            if(this.passFrame.checkPass()){
                this.passFrame.clear();
                this.passFrame.setVisible(false);
                getContentPane().remove(mainPanel);
                getContentPane().add(reportsPanel);
            }else{
                new ClubException(""Invalid Password"",
                        ""The password you entered is incorrect."");
                this.passFrame.clear();
            }
        }

        //DateFrame
        if(e.getSource() == dateFrame.cancelButton){
            this.dateFrame.reset();
            this.dateFrame.setVisible(false);
        }
        if(e.getSource() == dateFrame.submitButton){
            this.printDate();
        }

        //Numbers
        if(e.getSource() == mainPanel.one){this.mainPanel.add(1);}
        if(e.getSource() == mainPanel.two){this.mainPanel.add(2);}
        if(e.getSource() == mainPanel.three){this.mainPanel.add(3);}
        if(e.getSource() == mainPanel.four){this.mainPanel.add(4);}
        if(e.getSource() == mainPanel.five){this.mainPanel.add(5);}
        if(e.getSource() == mainPanel.six){this.mainPanel.add(6);}
        if(e.getSource() == mainPanel.seven){this.mainPanel.add(7);}
        if(e.getSource() == mainPanel.eight){this.mainPanel.add(8);}
        if(e.getSource() == mainPanel.nine){this.mainPanel.add(9);}
        if(e.getSource() == mainPanel.zero){this.mainPanel.add(0);}

        if(e.getSource() == passFrame.one){this.passFrame.add(1);}
        if(e.getSource() == passFrame.two){this.passFrame.add(2);}
        if(e.getSource() == passFrame.three){this.passFrame.add(3);}
        if(e.getSource() == passFrame.four){this.passFrame.add(4);}
        if(e.getSource() == passFrame.five){this.passFrame.add(5);}
        if(e.getSource() == passFrame.six){this.passFrame.add(6);}
        if(e.getSource() == passFrame.seven){this.passFrame.add(7);}
        if(e.getSource() == passFrame.eight){this.passFrame.add(8);}
        if(e.getSource() == passFrame.nine){this.passFrame.add(9);}
        if(e.getSource() == passFrame.zero){this.passFrame.add(0);}

        //Repaint and validate after everything, just to be safe
        getContentPane().repaint();
        getContentPane().validate();
    }
"
4907,f85e32d9-416d-4acf-9dfc-5a4fb4de0486,"    public void printReceipt(String s){
        try{
            for(int i=1; i<=this.mainPanel.getNum(); i++){
                this.receiptPrinter.print(s);
            }
        } catch(Exception ex){
            this.mainPanel.errorLabel.setVisible(true);
        }
    }
"
4908,5eb77df6-477c-4194-bf48-6250e3c76076,"    public void printZ(){
        try{
            this.zPrinter.print(
                    this.cons.mysql.getAdmissions(),
                    this.cons.mysql.lastZ());
            this.cons.mysql.resetZ();
        } catch(Exception ex){
            new ClubException(""Error Selecting from Database"",
                    ex.toString());
        }
    }
"
4909,ef04e830-6b7e-4ab5-a0a9-95a5672eb550,"    public void printDate(){
        try{
            this.datePrinter.print(
                    this.cons.mysql.getRangeAdmissions(
                        this.dateFrame.getFrom(),
                        this.dateFrame.getTo()),
                    this.dateFrame.getFromTo());
        } catch(Exception ex){
            new ClubException(""Error Selecting from Database"",
                    ex.toString());
        }
    }
"
4910,620ad992-4f7e-44a4-8783-68acb291fd97,"    public void addToDatabase(String s){
        try{
            for(int i=1; i<=this.mainPanel.getNum(); i++){
                this.cons.mysql.update(""INSERT INTO tbl_admissions ""
                        + ""(type, month, day, year, z, date) VALUES ""
                        + ""('"" + s // the given type
                        + ""', ""+ this.cons.mysql.getMonth() // month
                        + "", "" + this.cons.mysql.getDay() // day
                        + "", "" + this.cons.mysql.getYear() // year
                        + "", 0"" // has it been z'd yet (0=no)
                        + "", CURDATE())""); //The current date
            }
        } catch(Exception ex){
            this.mainPanel.errorLabel.setVisible(true);
        }
    }
"
4911,1eb3b8d7-e947-43a3-9220-148c0116614b,"    public void printAddClear(String s){
        this.printReceipt(s);
        this.addToDatabase(s);
        this.mainPanel.clear();
    }
"
4912,eda02ca9-4fc4-4aa4-9cbd-69353a725fa7,"    public ReportsPanel() {
        initComponents();
    }
"
4913,d71faa5b-d955-4169-8312-7244ec97cb1d,"    @SuppressWarnings(""unchecked"")
    // <editor-fold defaultstate=""collapsed"" desc=""Generated Code"">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        zButton = new javax.swing.JButton();
        dateButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(640, 480));
        setMinimumSize(new java.awt.Dimension(640, 480));
        setPreferredSize(new java.awt.Dimension(640, 480));

        backButton.setBackground(new java.awt.Color(0, 0, 0));
        backButton.setFont(new java.awt.Font(""Tahoma"", 0, 14));
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText(""Back"");
        backButton.setName(""backButton""); // NOI18N

        zButton.setBackground(new java.awt.Color(0, 0, 0));
        zButton.setFont(new java.awt.Font(""Tahoma"", 0, 18));
        zButton.setForeground(new java.awt.Color(255, 255, 255));
        zButton.setText(""Z"");
        zButton.setName(""zButton""); // NOI18N

        dateButton.setBackground(new java.awt.Color(0, 0, 0));
        dateButton.setFont(new java.awt.Font(""Tahoma"", 0, 12)); // NOI18N
        dateButton.setForeground(new java.awt.Color(255, 255, 255));
        dateButton.setText(""Date Range"");
        dateButton.setName(""dateButton""); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(zButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(347, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 289, Short.MAX_VALUE)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
"
4914,fcfffda0-5910-4368-ab32-8307b7348f5e,"    public PassFrame() {
        initComponents();
    }
"
4915,93d30065-0bba-492b-abb2-ec5f60b8a1f1,"    @SuppressWarnings(""unchecked"")
    // <editor-fold defaultstate=""collapsed"" desc=""Generated Code"">//GEN-BEGIN:initComponents
    private void initComponents() {

        one = new javax.swing.JButton();
        five = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        seven = new javax.swing.JButton();
        four = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        passField = new javax.swing.JPasswordField();
        passLebal = new javax.swing.JLabel();
        three = new javax.swing.JButton();
        two = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        six = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        one.setBackground(new java.awt.Color(0, 0, 0));
        one.setFont(new java.awt.Font(""Tahoma"", 0, 24));
        one.setForeground(new java.awt.Color(255, 255, 255));
        one.setText(""1"");
        one.setName(""one""); // NOI18N

        five.setBackground(new java.awt.Color(0, 0, 0));
        five.setFont(new java.awt.Font(""Tahoma"", 0, 24));
        five.setForeground(new java.awt.Color(255, 255, 255));
        five.setText(""5"");
        five.setName(""five""); // NOI18N

        cancelButton.setBackground(new java.awt.Color(0, 0, 0));
        cancelButton.setFont(new java.awt.Font(""Tahoma"", 0, 14));
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText(""Cancel"");
        cancelButton.setName(""cancelButton""); // NOI18N

        eight.setBackground(new java.awt.Color(0, 0, 0));
        eight.setFont(new java.awt.Font(""Tahoma"", 0, 24));
        eight.setForeground(new java.awt.Color(255, 255, 255));
        eight.setText(""8"");
        eight.setName(""eight""); // NOI18N

        submitButton.setBackground(new java.awt.Color(0, 0, 0));
        submitButton.setFont(new java.awt.Font(""Tahoma"", 0, 14)); // NOI18N
        submitButton.setForeground(new java.awt.Color(255, 255, 255));
        submitButton.setText(""Submit"");
        submitButton.setName(""submitButton""); // NOI18N

        seven.setBackground(new java.awt.Color(0, 0, 0));
        seven.setFont(new java.awt.Font(""Tahoma"", 0, 24));
        seven.setForeground(new java.awt.Color(255, 255, 255));
        seven.setText(""7"");
        seven.setName(""seven""); // NOI18N

        four.setBackground(new java.awt.Color(0, 0, 0));
        four.setFont(new java.awt.Font(""Tahoma"", 0, 24));
        four.setForeground(new java.awt.Color(255, 255, 255));
        four.setText(""4"");
        four.setName(""four""); // NOI18N

        clearButton.setBackground(new java.awt.Color(0, 0, 0));
        clearButton.setFont(new java.awt.Font(""Tahoma"", 0, 24));
        clearButton.setForeground(new java.awt.Color(255, 255, 255));
        clearButton.setText(""Clear"");
        clearButton.setName(""clearButton""); // NOI18N

        nine.setBackground(new java.awt.Color(0, 0, 0));
        nine.setFont(new java.awt.Font(""Tahoma"", 0, 24));
        nine.setForeground(new java.awt.Color(255, 255, 255));
        nine.setText(""9"");
        nine.setName(""nine""); // NOI18N

        passField.setFont(new java.awt.Font(""Tahoma"", 0, 24)); // NOI18N
        passField.setName(""passField""); // NOI18N

        passLebal.setFont(new java.awt.Font(""Tahoma"", 0, 14));
        passLebal.setText(""Please enter the manager password below:"");
        passLebal.setName(""passLebal""); // NOI18N

        three.setBackground(new java.awt.Color(0, 0, 0));
        three.setFont(new java.awt.Font(""Tahoma"", 0, 24)); // NOI18N
        three.setForeground(new java.awt.Color(255, 255, 255));
        three.setText(""3"");
        three.setName(""three""); // NOI18N

        two.setBackground(new java.awt.Color(0, 0, 0));
        two.setFont(new java.awt.Font(""Tahoma"", 0, 24));
        two.setForeground(new java.awt.Color(255, 255, 255));
        two.setText(""2"");
        two.setName(""two""); // NOI18N

        zero.setBackground(new java.awt.Color(0, 0, 0));
        zero.setFont(new java.awt.Font(""Tahoma"", 0, 24));
        zero.setForeground(new java.awt.Color(255, 255, 255));
        zero.setText(""0"");
        zero.setName(""zero""); // NOI18N

        six.setBackground(new java.awt.Color(0, 0, 0));
        six.setFont(new java.awt.Font(""Tahoma"", 0, 24));
        six.setForeground(new java.awt.Color(255, 255, 255));
        six.setText(""6"");
        six.setName(""six""); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(120, 120, 120)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(passLebal, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 303, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(passField, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(passLebal)
                        .addGap(18, 18, 18)
                        .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
"
4916,ab6ab5ef-fb29-47ce-9dde-d679f835ef39,"    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PassFrame().setVisible(true);
            }
        });
    }
"
4917,c3f2dd1a-66e2-4899-982f-76841bbb90b7,"            public void run() {
                new PassFrame().setVisible(true);
            }
"
4918,4b9d1e4f-a348-45c6-a650-66c341c4cb44,"    public void clear(){
        this.passField.setText("""");
    }
"
4919,6836f0fe-74fe-4e47-84d0-026aa72bf723,"    public boolean checkPass(){
        return this.get().equals(""8008""); //CURRENT PASSWORD
    }
"
4920,d59eb5aa-58b2-4320-8664-ab97ecaa9626,"    public void add(int i){
        this.passField.setText(this.get() + Integer.toString(i));
    }
"
4921,50d41c22-8ae0-4ee9-8e3c-b10641dc08ef,"    public String get(){
        return new String(this.passField.getPassword());
    }
"
4922,02aff542-a056-465f-a9ee-2eeb77032b23,"    public int print(Graphics g, PageFormat pf, int page)
            throws PrinterException {

        Graphics2D g2d = (Graphics2D)g;
        g2d.translate(pf.getImageableX(), pf.getImageableY());

        // Draw in the x boundaries of 10 and 190
        // Draw in the y boundaries of 10 and 990

        g2d.setFont(new Font(""Tahoma"", Font.PLAIN, 14));
        g.drawString(""Centerfolds Boston - Range"", 12, 14);

        g2d.setFont(new Font(""Tahoma"", Font.PLAIN, 12)); //Reset size
        g.drawString(""-----------------------------------------"", 10, 21);

        g.drawString(""Range: "" + this.fromTo, 10, 40);

        g.drawString(""Current Time: "" + this.geTime(), 10, 60);
        g.drawString(""Current Date: "" + this.getDate(), 10, 80);

        g.drawString(""-----------------------------------------"", 10, 100);

        g.drawString(""$5 Admissions:"", 10, 120);
        g.drawString(Integer.toString(this.five), 170, 120);

        g.drawString(""$10 Admissions:"", 10, 140);
        g.drawString(Integer.toString(this.ten), 170, 140);

        g.drawString(""$20 Admissions:"", 10, 160);
        g.drawString(Integer.toString(this.twenty), 170, 160);

        g.drawString(""Game Admissions:"", 10, 180);
        g.drawString(Integer.toString(this.game), 170, 180);

        g.drawString(""Mgr Admissions:"", 10, 200);
        g.drawString(Integer.toString(this.mgr), 170, 200);

        g.drawString(""Comp Pass Admissions:"", 10, 220);
        g.drawString(Integer.toString(this.comp), 170, 220);

        g.drawString(""Door Comp Admissions:"", 10, 240);
        g.drawString(Integer.toString(this.door), 170, 240);

        g.drawString(""Hotel Admissions:"", 10, 260);
        g.drawString(Integer.toString(this.hotel), 170, 260);

        g.drawString(""-----------------------------------------"", 10, 280);

        g.drawString(""Total $:"", 10, 300);
        g.drawString(""$"" + Integer.toString(this.calcTotal()), 165, 300);

        g.drawString(""Total Admissions:"", 10, 320);
        g.drawString(Integer.toString(this.calcAdmissions()), 170, 320);


        return PAGE_EXISTS;
    }
"
4923,0a4cf37e-d251-4399-87dd-3e607b546312,"    public void print(int[] adm, String fromTo){
        this.fromTo = fromTo;

        this.five = adm[0];
        this.ten = adm[1];
        this.twenty = adm[2];
        this.game = adm[3];
        this.mgr = adm[4];
        this.comp = adm[5];
        this.door = adm[6];
        this.hotel = adm[7];

        PrinterJob job = PrinterJob.getPrinterJob();
        PageFormat pf = new PageFormat();

        Paper paper = new Paper();
        paper.setImageableArea(0, 0, 200, 1000);

        pf.setPaper(paper);

        Book book = new Book();
        book.append(this, pf);

        job.setPageable(book);

        try {
            job.print();
        } catch (Exception ex) {
            new ClubException(""Error Printing"", ex.toString());
        }
    }
"
4924,81494269-a368-4c61-8062-c887bf56b772,"    public int getNumberOfPages() {
        throw new UnsupportedOperationException(""Not supported yet."");
    }
"
4925,004e0022-e288-4b6b-b6eb-ecd2bd8ab71d,"    public PageFormat getPageFormat(int pageIndex)
            throws IndexOutOfBoundsException {
        throw new UnsupportedOperationException(""Not supported yet."");
    }
"
4926,0e421665-5109-4703-b1b8-1c5705ea41cb,"    public Printable getPrintable(int pageIndex)
            throws IndexOutOfBoundsException {
        throw new UnsupportedOperationException(""Not supported yet."");
    }
"
4927,add258a5-a9d6-44a3-9c5a-19fbf3de9eb3,"    public int calcTotal(){
        int total = 0;
        for(int i=1; i<=this.five; i++){
            total+=5;
        }
        for(int i=1; i<=this.ten; i++){
            total+=10;
        }
        for(int i=1; i<=this.twenty; i++){
            total+=20;
        }
        return total;
    }
"
4928,4ba0ffd3-3c64-4d31-8021-794d150eb794,"    public int calcAdmissions(){
        return this.five + this.ten + this.twenty + this.game + this.mgr
                + this.comp + this.door + this.hotel;
    }
"
4929,fc562ff7-143c-40b9-8562-98487a550cb9,"    private String getDate() {
        DateFormat dateFormat = new SimpleDateFormat(""MM/dd/yyyy"");
        Date date = new Date();
        return dateFormat.format(date);
    }
"
4930,5cc9ca2d-f8c5-4910-bde5-cdf7fa6bfc00,"    private String geTime() {
        DateFormat dateFormat = new SimpleDateFormat(""hh:mm:ss a"");
        Date date = new Date();
        return dateFormat.format(date);
    }
"
4931,dcb66254-b250-41b7-95d5-9acb86b1356d,"    public Constants(){}
"
4932,cd0645c4-ed5e-45ca-aede-19f5fadea033,"    public String getIP(){
        return this.algos.getIP(this.startupURL);
    }
"
4933,587f0129-419e-4097-ab43-e292221eb195,"    public int print(Graphics g, PageFormat pf, int page)
            throws PrinterException {

        Graphics2D g2d = (Graphics2D)g;
        g2d.translate(pf.getImageableX(), pf.getImageableY());

        // Draw in the x boundaries of 10 and 190
        // Draw in the y boundaries of 10 and 990

        g2d.setFont(new Font(""Tahoma"", Font.PLAIN, 14));
        g.drawString(""Centerfolds Boston - Z"", 30, 14);

        g2d.setFont(new Font(""Tahoma"", Font.PLAIN, 12)); //Reset size
        g.drawString(""-----------------------------------------"", 10, 21);

        g.drawString(""Last: "" + this.time, 10, 40);

        g.drawString(""Current Time: "" + this.geTime(), 10, 60);
        g.drawString(""Current Date: "" + this.getDate(), 10, 80);

        g.drawString(""-----------------------------------------"", 10, 100);

        g.drawString(""$5 Admissions:"", 10, 120);
        g.drawString(Integer.toString(this.five), 170, 120);

        g.drawString(""$10 Admissions:"", 10, 140);
        g.drawString(Integer.toString(this.ten), 170, 140);

        g.drawString(""$20 Admissions:"", 10, 160);
        g.drawString(Integer.toString(this.twenty), 170, 160);

        g.drawString(""Game Admissions:"", 10, 180);
        g.drawString(Integer.toString(this.game), 170, 180);

        g.drawString(""Mgr Admissions:"", 10, 200);
        g.drawString(Integer.toString(this.mgr), 170, 200);

        g.drawString(""Comp Pass Admissions:"", 10, 220);
        g.drawString(Integer.toString(this.comp), 170, 220);

        g.drawString(""Door Comp Admissions:"", 10, 240);
        g.drawString(Integer.toString(this.door), 170, 240);

        g.drawString(""Hotel Admissions:"", 10, 260);
        g.drawString(Integer.toString(this.hotel), 170, 260);

        g.drawString(""-----------------------------------------"", 10, 280);

        g.drawString(""Total $:"", 10, 300);
        g.drawString(""$"" + Integer.toString(this.calcTotal()), 165, 300);

        g.drawString(""Total Admissions:"", 10, 320);
        g.drawString(Integer.toString(this.calcAdmissions()), 170, 320);


        return PAGE_EXISTS;
    }
"
4934,a544df38-7dac-40ba-b037-a9079258c8e0,"    public void print(int[] adm, String time){

        this.time = time;
        this.five = adm[0];
        this.ten = adm[1];
        this.twenty = adm[2];
        this.game = adm[3];
        this.mgr = adm[4];
        this.comp = adm[5];
        this.door = adm[6];
        this.hotel = adm[7];

        PrinterJob job = PrinterJob.getPrinterJob();
        PageFormat pf = new PageFormat();

        Paper paper = new Paper();
        paper.setImageableArea(0, 0, 200, 1000);

        pf.setPaper(paper);

        Book book = new Book();
        book.append(this, pf);

        job.setPageable(book);

        try {
            job.print();
        } catch (Exception ex) {
            new ClubException(""Error Printing"", ex.toString());
        }
    }
"
4935,ff5eeeea-6503-4e99-b4c5-628eb532ca2b,"    public int getNumberOfPages() {
        throw new UnsupportedOperationException(""Not supported yet."");
    }
"
4936,c5e4e087-2d83-4ad6-b6ba-7b2f604bc15f,"    public PageFormat getPageFormat(int pageIndex)
            throws IndexOutOfBoundsException {
        throw new UnsupportedOperationException(""Not supported yet."");
    }
"
4937,49875111-b3bb-4f78-8561-4ebf954fad95,"    public Printable getPrintable(int pageIndex)
            throws IndexOutOfBoundsException {
        throw new UnsupportedOperationException(""Not supported yet."");
    }
"
4938,ad886281-d6e3-4147-94f8-fa2616ae43b5,"    public int calcTotal(){
        int total = 0;
        for(int i=1; i<=this.five; i++){
            total+=5;
        }
        for(int i=1; i<=this.ten; i++){
            total+=10;
        }
        for(int i=1; i<=this.twenty; i++){
            total+=20;
        }
        return total;
    }
"
4939,ca7c072a-c341-444d-b032-66267ca55c36,"    public int calcAdmissions(){
        return this.five + this.ten + this.twenty + this.game + this.mgr
                + this.comp + this.door + this.hotel;
    }
"
4940,f748f61c-0457-4c51-bf9b-3983d76df045,"    private String getDate() {
        DateFormat dateFormat = new SimpleDateFormat(""MM/dd/yyyy"");
        Date date = new Date();
        return dateFormat.format(date);
    }
"
4941,d9e9f5b3-0848-4f92-89c8-1fe2cf554ec0,"    private String geTime() {
        DateFormat dateFormat = new SimpleDateFormat(""hh:mm:ss a"");
        Date date = new Date();
        return dateFormat.format(date);
    }
"
4942,a8cb9ed6-ed77-4161-8992-7bb7b100af7e,"    public DateFrame() {
        initComponents();
    }
"
4943,cb726458-0189-4456-9541-885648de2a24,"    @SuppressWarnings(""unchecked"")
    // <editor-fold defaultstate=""collapsed"" desc=""Generated Code"">//GEN-BEGIN:initComponents
    private void initComponents() {

        monthBox = new javax.swing.JComboBox();
        dayBox = new javax.swing.JComboBox();
        yearBox = new javax.swing.JComboBox();
        submitButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        yearBoxTo = new javax.swing.JComboBox();
        dayBoxTo = new javax.swing.JComboBox();
        monthBoxTo = new javax.swing.JComboBox();
        fromLabel = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        monthBox.setFont(new java.awt.Font(""Tahoma"", 0, 18));
        monthBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December"" }));
        monthBox.setName(""monthBox""); // NOI18N

        dayBox.setFont(new java.awt.Font(""Tahoma"", 0, 18));
        dayBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", ""19"", ""20"", ""21"", ""22"", ""23"", ""24"", ""25"", ""26"", ""27"", ""28"", ""29"", ""30"", ""31"" }));
        dayBox.setName(""dayBox""); // NOI18N

        yearBox.setFont(new java.awt.Font(""Tahoma"", 0, 18));
        yearBox.setName(""yearBox""); // NOI18N

        submitButton.setBackground(new java.awt.Color(0, 0, 0));
        submitButton.setFont(new java.awt.Font(""Tahoma"", 0, 14)); // NOI18N
        submitButton.setForeground(new java.awt.Color(255, 255, 255));
        submitButton.setText(""Sumbit"");
        submitButton.setName(""submitButton""); // NOI18N

        cancelButton.setBackground(new java.awt.Color(0, 0, 0));
        cancelButton.setFont(new java.awt.Font(""Tahoma"", 0, 14)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText(""Cancel"");
        cancelButton.setName(""cancelButton""); // NOI18N

        yearBoxTo.setFont(new java.awt.Font(""Tahoma"", 0, 18));
        yearBoxTo.setName(""yearBoxTo""); // NOI18N

        dayBoxTo.setFont(new java.awt.Font(""Tahoma"", 0, 18));
        dayBoxTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", ""19"", ""20"", ""21"", ""22"", ""23"", ""24"", ""25"", ""26"", ""27"", ""28"", ""29"", ""30"", ""31"" }));
        dayBoxTo.setName(""dayBoxTo""); // NOI18N

        monthBoxTo.setFont(new java.awt.Font(""Tahoma"", 0, 18));
        monthBoxTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December"" }));
        monthBoxTo.setName(""monthBoxTo""); // NOI18N

        fromLabel.setFont(new java.awt.Font(""Tahoma"", 0, 14));
        fromLabel.setText(""From:"");
        fromLabel.setName(""fromLabel""); // NOI18N

        toLabel.setFont(new java.awt.Font(""Tahoma"", 0, 14));
        toLabel.setText(""To:"");
        toLabel.setName(""toLabel""); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fromLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(yearBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(toLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(monthBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dayBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(yearBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(316, Short.MAX_VALUE)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromLabel))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monthBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearBoxTo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
"
4944,7a0fc3a4-7aa7-43fa-8c53-7016452e2ff0,"    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DateFrame().setVisible(true);
            }
        });
    }
"
4945,e2dc4ca5-7890-425b-bdcb-1645a07dacc8,"            public void run() {
                new DateFrame().setVisible(true);
            }
"
4946,fe749603-a803-4629-8545-9025a1d957a6,"    public void reset(){
        this.monthBox.setSelectedIndex(0);
        this.dayBox.setSelectedIndex(0);
        this.yearBox.setSelectedIndex(5);

        this.monthBoxTo.setSelectedIndex(0);
        this.dayBoxTo.setSelectedIndex(0);
        this.yearBoxTo.setSelectedIndex(5);
    }
"
4947,58bdc3f3-99f2-4e8b-b1b4-36d83a2c772c,"    public String getFromTo(){
        String fMonth =
                Integer.toString(this.monthBox.getSelectedIndex() + 1);
        String fDay = this.dayBox.getSelectedItem().toString();
        String fYear = this.yearBox.getSelectedItem().toString();

        String tMonth =
                Integer.toString(this.monthBoxTo.getSelectedIndex() + 1);
        String tDay = this.dayBoxTo.getSelectedItem().toString();
        String tYear = this.yearBoxTo.getSelectedItem().toString();

        return fMonth + ""/"" + fDay + ""/"" + fYear + "" - ""
                + tMonth + ""/"" + tDay + ""/"" + tYear;
    }
"
4948,5e916070-5bc6-4812-a88a-b3ee44fe66df,"    public int[] getFrom(){
        int month = this.monthBox.getSelectedIndex() + 1;
        int day =
                Integer.parseInt(this.dayBox.getSelectedItem().toString());
        int year =
                Integer.parseInt(this.yearBox.getSelectedItem().toString());

        return new int[]{month, day, year};
    }
"
4949,c0ca33c0-fc5b-47bb-860f-4fbc5864334c,"    public int[] getTo(){
        int month = this.monthBoxTo.getSelectedIndex() + 1;
        int day =
                Integer.parseInt(this.dayBoxTo.getSelectedItem().toString());
        int year =
                Integer.parseInt(this.yearBoxTo.getSelectedItem().toString());

        return new int[]{month, day, year};
    }
"
4950,192cfa4b-66f5-4d8b-95f9-8f8bc2c9bd1d,"    Algorithms(){}
"
4951,245f8838-9a58-43a5-8434-ebfba5d3845e,"    public boolean isIP(String s){
        // Make an ArrayList splitting the string up based off of . and :
        ArrayList<String> alist =
                new ArrayList<String>(Arrays.asList(s.split(""[.:]+"")));

        if(alist.size() != 5){ // If the string wasn't a long enough IP
            return false;
        }

        try{
            for(int i=0; i<alist.size(); i++){
                // Throws and error if it wasn't a number
                int n = Integer.parseInt(alist.get(i));
                // If the IP range is <0 or >255
                if((n < 0 || n > 255) && i != alist.size()-1){
                    return false;
                }
                // If the section is the last in the alist (the port)
                //   and is out of bounds
                if(i == alist.size()-1 && (n < 0 || n > 65535)){
                    return false;
                }
            }
        } catch(Exception ex){
            // Means the user put in letters not numbers
            return false;
        }

        return true;
    }
"
4952,cc15d384-b07e-44c1-a638-59b79b30e7a2,"    public String getIP(String s){
        String ip = """";
        try{
            File file = new File(s);
            BufferedReader reader = new BufferedReader(new FileReader(file));
            ip = reader.readLine(); // Only one line
        } catch(Exception ex){
            new ClubException(""Error Reading IP"", ex.toString());
        }
        return ip;
    }
"
4953,d55b2d43-d34d-4d0a-bfe4-d1edaeab26b2,"    public MainPanel() {
        initComponents();
    }
"
4954,475c84e6-fe74-4f6b-9f6b-3ce9a1eafe61,"    @SuppressWarnings(""unchecked"")
    // <editor-fold defaultstate=""collapsed"" desc=""Generated Code"">//GEN-BEGIN:initComponents
    private void initComponents() {

        fiveButton = new javax.swing.JButton();
        tenButton = new javax.swing.JButton();
        twentyButton = new javax.swing.JButton();
        gameButton = new javax.swing.JButton();
        managerButton = new javax.swing.JButton();
        compButton = new javax.swing.JButton();
        doorButton = new javax.swing.JButton();
        numField = new javax.swing.JTextField();
        reportsButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        seven = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        four = new javax.swing.JButton();
        five = new javax.swing.JButton();
        six = new javax.swing.JButton();
        one = new javax.swing.JButton();
        two = new javax.swing.JButton();
        three = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        numLabel = new javax.swing.JLabel();
        hotelButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(640, 480));
        setMinimumSize(new java.awt.Dimension(640, 480));

        fiveButton.setBackground(new java.awt.Color(0, 0, 0));
        fiveButton.setFont(new java.awt.Font(""Tahoma"", 1, 24)); // NOI18N
        fiveButton.setForeground(new java.awt.Color(255, 255, 255));
        fiveButton.setText(""$5"");
        fiveButton.setName(""fiveButton""); // NOI18N

        tenButton.setBackground(new java.awt.Color(0, 0, 0));
        tenButton.setFont(new java.awt.Font(""Tahoma"", 1, 24)); // NOI18N
        tenButton.setForeground(new java.awt.Color(255, 255, 255));
        tenButton.setText(""$10"");
        tenButton.setName(""tenButton""); // NOI18N

        twentyButton.setBackground(new java.awt.Color(0, 0, 0));
        twentyButton.setFont(new java.awt.Font(""Tahoma"", 1, 24)); // NOI18N
        twentyButton.setForeground(new java.awt.Color(255, 255, 255));
        twentyButton.setText(""$20"");
        twentyButton.setName(""twentyButton""); // NOI18N

        gameButton.setBackground(new java.awt.Color(0, 0, 0));
        gameButton.setFont(new java.awt.Font(""Tahoma"", 1, 18)); // NOI18N
        gameButton.setForeground(new java.awt.Color(255, 255, 255));
        gameButton.setText(""G-Tix"");
        gameButton.setName(""gameButton""); // NOI18N

        managerButton.setBackground(new java.awt.Color(0, 0, 0));
        managerButton.setFont(new java.awt.Font(""Tahoma"", 1, 18)); // NOI18N
        managerButton.setForeground(new java.awt.Color(255, 255, 255));
        managerButton.setText(""Mgr comp""); // NOI18N
        managerButton.setName(""managerButton""); // NOI18N

        compButton.setBackground(new java.awt.Color(0, 0, 0));
        compButton.setFont(new java.awt.Font(""Tahoma"", 1, 14)); // NOI18N
        compButton.setForeground(new java.awt.Color(255, 255, 255));
        compButton.setText(""Comp Pass""); // NOI18N
        compButton.setName(""compButton""); // NOI18N

        doorButton.setBackground(new java.awt.Color(0, 0, 0));
        doorButton.setFont(new java.awt.Font(""Tahoma"", 1, 18)); // NOI18N
        doorButton.setForeground(new java.awt.Color(255, 255, 255));
        doorButton.setText(""Comp"");
        doorButton.setName(""doorButton""); // NOI18N

        numField.setName(""numField""); // NOI18N

        reportsButton.setBackground(new java.awt.Color(0, 0, 0));
        reportsButton.setFont(new java.awt.Font(""Tahoma"", 3, 18)); // NOI18N
        reportsButton.setForeground(new java.awt.Color(255, 255, 255));
        reportsButton.setText(""Reports"");
        reportsButton.setName(""reportsButton""); // NOI18N

        errorLabel.setFont(new java.awt.Font(""Tahoma"", 0, 10));
        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setText(""Number of prints may not exceed 20"");
        errorLabel.setName(""errorLabel""); // NOI18N

        seven.setBackground(new java.awt.Color(0, 0, 0));
        seven.setForeground(new java.awt.Color(255, 255, 255));
        seven.setText(""7"");
        seven.setName(""seven""); // NOI18N

        eight.setBackground(new java.awt.Color(0, 0, 0));
        eight.setForeground(new java.awt.Color(255, 255, 255));
        eight.setText(""8"");
        eight.setName(""eight""); // NOI18N

        nine.setBackground(new java.awt.Color(0, 0, 0));
        nine.setForeground(new java.awt.Color(255, 255, 255));
        nine.setText(""9"");
        nine.setName(""nine""); // NOI18N

        four.setBackground(new java.awt.Color(0, 0, 0));
        four.setForeground(new java.awt.Color(255, 255, 255));
        four.setText(""4"");
        four.setName(""four""); // NOI18N

        five.setBackground(new java.awt.Color(0, 0, 0));
        five.setForeground(new java.awt.Color(255, 255, 255));
        five.setText(""5"");
        five.setName(""five""); // NOI18N

        six.setBackground(new java.awt.Color(0, 0, 0));
        six.setForeground(new java.awt.Color(255, 255, 255));
        six.setText(""6"");
        six.setName(""six""); // NOI18N

        one.setBackground(new java.awt.Color(0, 0, 0));
        one.setForeground(new java.awt.Color(255, 255, 255));
        one.setText(""1"");
        one.setName(""one""); // NOI18N

        two.setBackground(new java.awt.Color(0, 0, 0));
        two.setForeground(new java.awt.Color(255, 255, 255));
        two.setText(""2"");
        two.setName(""two""); // NOI18N

        three.setBackground(new java.awt.Color(0, 0, 0));
        three.setForeground(new java.awt.Color(255, 255, 255));
        three.setText(""3"");
        three.setName(""three""); // NOI18N

        zero.setBackground(new java.awt.Color(0, 0, 0));
        zero.setForeground(new java.awt.Color(255, 255, 255));
        zero.setText(""0"");
        zero.setName(""zero""); // NOI18N

        clearButton.setBackground(new java.awt.Color(0, 0, 0));
        clearButton.setForeground(new java.awt.Color(255, 255, 255));
        clearButton.setText(""Clear"");
        clearButton.setName(""clearButton""); // NOI18N

        numLabel.setFont(new java.awt.Font(""Tahoma"", 0, 14));
        numLabel.setText(""#"");
        numLabel.setName(""numLabel""); // NOI18N

        hotelButton.setBackground(new java.awt.Color(0, 0, 0));
        hotelButton.setFont(new java.awt.Font(""Tahoma"", 1, 18)); // NOI18N
        hotelButton.setForeground(new java.awt.Color(255, 255, 255));
        hotelButton.setText(""Hotel"");
        hotelButton.setName(""hotelButton""); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(errorLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(doorButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gameButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fiveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hotelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(managerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(reportsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(compButton, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE)
                            .addComponent(twentyButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(numLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(numField)))
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(numLabel)
                    .addComponent(numField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addComponent(errorLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)
                                .addComponent(gameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(twentyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(compButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(managerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hotelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reportsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(110, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
"
4955,fd01775e-a780-401b-a2f8-0dabfc1d736e,"    public void clear(){
        this.numField.setText("""");
    }
"
4956,74e9d1bf-2673-41c7-86a4-9cac2dd3cc9f,"    public void add(int i){
        this.numField.setText(this.get() + Integer.toString(i));
    }
"
4957,81f11a85-e42f-4099-82ba-d0f4281abe33,"    public String get(){
        return this.numField.getText();
    }
"
4958,cff26d8a-d516-4ab0-8b2f-1f4a9ece6b51,"    public int getNum() throws Exception{
        if(this.get().equals("""")){return 1;}
        int i = Integer.parseInt(this.get());
        if(i>20){
            throw new Exception();
        }else{
            return i;
        }
    }
"
4959,49a31316-923a-482f-b3f9-36fa0cff3dc2,"    public int print(Graphics g, PageFormat pf, int page)
            throws PrinterException {

        Graphics2D g2d = (Graphics2D)g;
        g2d.translate(pf.getImageableX(), pf.getImageableY());

        // Draw in the x boundaries of 10 and 190
        // Draw in the y boundaries of 10 and 990

        g2d.setFont(new Font(""Tahoma"", Font.PLAIN, 22));
        g.drawString(""Centerfolds Boston"", 10, 20);

        g2d.setFont(new Font(""Tahoma"", Font.PLAIN, 12)); //Reset size
        g.drawString(""-----------------------------------------"", 10, 35);

        g2d.setFont(new Font(""Tahoma"", Font.PLAIN, 14)); //Reset size
        g.drawString(""Time: "" + this.geTime(), 10, 75);
        g.drawString(""Date: "" + this.getDate(), 10, 115);

        g2d.setFont(new Font(""Tahoma"", Font.PLAIN, 12)); //Reset size
        g.drawString(""-----------------------------------------"", 10, 155);

        g2d.setFont(new Font(""Tahoma"", Font.PLAIN, 32)); //Reset size
        g.drawString(this.type, 10, 210);

        return PAGE_EXISTS;
    }
"
4960,6fd06137-974a-40df-9b40-ce41bf5e4e5e,"    public void print(String s){
        this.type = s;
        PrinterJob job = PrinterJob.getPrinterJob();
        PageFormat pf = new PageFormat();

        Paper paper = new Paper();
        paper.setImageableArea(0, 0, 200, 1000);

        pf.setPaper(paper);

        Book book = new Book();
        book.append(this, pf);

        job.setPageable(book);

        try {
            job.print();
        } catch (Exception ex) {
            new ClubException(""Error Printing"", ex.toString());
        }
    }
"
4961,887aaa1d-d0c1-407c-8c42-994dac500902,"    public int getNumberOfPages() {
        throw new UnsupportedOperationException(""Not supported yet."");
    }
"
4962,34fbb39a-a2b3-4dd1-bd50-cd6f1528c760,"    public PageFormat getPageFormat(int pageIndex)
            throws IndexOutOfBoundsException {
        throw new UnsupportedOperationException(""Not supported yet."");
    }
"
4963,ff4f8ee5-3bfe-4cc2-828c-09f9a2f6b0a9,"    public Printable getPrintable(int pageIndex)
            throws IndexOutOfBoundsException {
        throw new UnsupportedOperationException(""Not supported yet."");
    }
"
4964,0d620e9d-2254-4271-b86b-c0d1afd33e80,"    private String getDate() {
        DateFormat dateFormat = new SimpleDateFormat(""MM/dd/yyyy"");
        Date date = new Date();
        return dateFormat.format(date);
    }
"
4965,0a579bff-5c48-4443-9901-e4327da6f70a,"    private String geTime() {
        DateFormat dateFormat = new SimpleDateFormat(""hh:mm:ss a"");
        Date date = new Date();
        return dateFormat.format(date);
    }
"
4966,a93caf7b-d33c-4f92-9d79-f0af65720e8d,"    Startup(){
        if (Desktop.isDesktopSupported()) {
            this.desktop = Desktop.getDesktop();
        }

        this.verifyFile();
        // If the file is there, start connecting to the server
        this.connect();
    }
"
4967,44dfd5b7-cc6b-4661-956d-e978ae91b752,"    private void verifyFile(){
        if(this.file.exists()){
            // Move forwards...
        }else{
            // Tell the error and ask to setup the file
            this.setup();
        }
    }
"
4968,2432aa00-c0c6-41cc-92cf-295d64b04e05,"    public void setup(){

        Object[] options = {""Browse"", ""Build""};
        int i = JOptionPane.showOptionDialog(null,
                ""There has been an error locating the startup file.""
                + ""\nPlease select below either 'Browse' to navigate to""
                + "" the correct file""
                + ""\nor 'Build' to provide the program with information to""
                + "" rebuild the file."",
                ""Error locating startup file"",
                JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE,
                null, options, options[0]);

        switch(i){
            case 0:
                this.browse(); // Find the file
                break;

            case 1:
                this.rebuild(); // Rebuild the file
                break;

            case -1:
                // If the close button is pressed
                System.exit(0);
                break;

            default:
                // Should never really happen - defensive programming
                new ClubException(""Error setting up the startup file"",
                        ""This should never happen"");
                break;
        }

        this.verifyFile(); // Double check it's actually there
    }
"
4969,b0d80b19-ac4a-44a7-ae1b-63cdbaac7a46,"    public void browse(){
        JFileChooser fc = new JFileChooser();

        fc.showOpenDialog(null);
        File browse = fc.getSelectedFile();

        try{
            FileReader in = new FileReader(browse);
            FileWriter out = new FileWriter(this.file);
            int c;

            while((c=in.read()) != -1){
                out.write(c);
            }

            in.close();
            out.close();

        } catch(Exception ex){
            new ClubException(""Error Reading File"", ex.toString());
        }
    }
"
4970,aca82cc7-e633-4a9b-8575-6d51eec48371,"    public void rebuild(){
        try{
            String s = JOptionPane.showInputDialog(null,
                    ""What is the MySQL database IP address?""
                    + ""\nDefault: 127.0.0.1:3306"",
                    ""IP Address"",
                    JOptionPane.QUESTION_MESSAGE);
            if(this.cons.algos.isIP(s)){
                this.makeFile(s);
            }else{
                JOptionPane.showMessageDialog(null,
                        ""This is not a proper IP address.""
                        + ""\nPlease try the format: ###.###.###.###:####"");
                this.rebuild();
            }
        } catch(Exception ex){
            // If they click cancel, or there is another major error
            this.setup();
        }
    }
"
4971,b64e7587-3a93-4028-aafc-603e420c4bfb,"    public void makeFile(String s){
        Writer output;
        File outputFile = new File(this.cons.startupURL);
        try{
            output = new BufferedWriter(new FileWriter(outputFile));
            output.write(s);
            output.close();
            JOptionPane.showMessageDialog(null,
                    ""The file has been sucessfully made."");
        } catch(Exception ex){
            new ClubException(""Error Writing File"", ex.toString());
        }
    }
"
4972,2e3474b3-4c20-4dd6-8ca1-dfd7d2d31e1f,"    private void connect(){
        try{
            Class.forName(""com.mysql.jdbc.Driver"").newInstance();
            Connection con = DriverManager.getConnection(
                    ""jdbc:mysql://""+this.cons.getIP()+""/clubdoors"",
                    ""club_user"",""club_password"");
        } catch(Exception ex){
            new ClubException(""Error Connecting to Database"", ex.toString());
        }
    }
"
4973,4edcb522-d493-41c9-ae6c-1880d20a90ee,"    public ClubException(){
        this.type = """";
        this.msg = """";
        this.checkResponse(this.giveMessage());
    }
"
4974,3a70e77b-71ed-4ade-b2e6-18a2158f6b16,"    public ClubException(String type, String msg){
        this.type = type;
        this.msg = msg;

        this.checkResponse(this.giveMessage());
    }
"
4975,244cac68-68d6-459f-943e-09e627b17aaa,"    public int giveMessage(){
        JFrame frame = new JFrame();
        Object[] options = {""Ok""};
        return JOptionPane.showOptionDialog(null, ""Error Message:\n""+this.msg,
                type,
                JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE,
                null, options, options[0]);
    }
"
4976,4e96197d-2a71-4705-9096-729d6eaba0ad,"    public void checkResponse(int i){
        switch(i){
            case 0:
                break; // Moves on...
            case -1:
                // If the close button is pressed
                System.exit(0);
                break;

            default:
                // Should never really happen - defensive programming
                new ClubException(""Error during startup file setup"",
                        ""This should never happen"");
                break;
        }
    }
"
4977,e778a8b3-c625-46a7-8d51-c16c1f26139c,"    @Test
    public void testCreateUndoManager() throws Exception {

        UndoManagerFactory undoManagerFactory = new UndoManagerFactoryImpl();
        undoManagerFactory.createUndoManager(new DocumentImpl(), 1);
    }
"
4978,8f20ae05-9c2a-4f56-a9fb-7cae25e5aa4a,"    @Test(expected = IllegalArgumentException.class)
    public void testCreateUndoManagerNullDocument() throws Exception {

        UndoManagerFactory undoManagerFactory = new UndoManagerFactoryImpl();
        undoManagerFactory.createUndoManager(null, 1);
    }
"
4979,b8b39978-b539-4a0f-ae34-2575a6a4d7ac,"    @Test(expected = IllegalArgumentException.class)
    public void testCreateUndoManagerZeroBuffer() throws Exception {

        UndoManagerFactory undoManagerFactory = new UndoManagerFactoryImpl();
        undoManagerFactory.createUndoManager(new DocumentImpl(), 0);
    }
"
4980,659b6fbc-493f-4c72-8e8f-603f5df75ed2,"    @Test
    public void testDocumentChange() throws Exception {
        UndoManagerFactory undoManagerFactory = new UndoManagerFactoryImpl();
        ChangeFactory changeFactory = new ChangeFactoryImpl();
        Document document = new DocumentImpl();
        UndoManager undoManager = undoManagerFactory.createUndoManager(document, 2);
        Assert.assertFalse(undoManager.canUndo());
        Assert.assertFalse(undoManager.canRedo());
        Change change1 = changeFactory.createInsertion(1, ""Test Change1"", 0, 1);
        change1.apply(document);
        Change change2 = changeFactory.createInsertion(2, ""Test Change2"", 1, 2);
        change2.apply(document);

        undoManager.registerChange(change1);
        undoManager.registerChange(change2);

        Assert.assertTrue(undoManager.canUndo());
        Assert.assertFalse(undoManager.canRedo());

        System.out.println(""Undoing and redoing starts here----------------------------------------------"");
        undoManager.undo();
        Assert.assertTrue(undoManager.canRedo());
        undoManager.undo();
        undoManager.redo();
        undoManager.redo();

        System.out.println(""Registering new change ------------------------------------------------------"");
        Change change3 = changeFactory.createInsertion(3, ""Test Change3"", 2, 3);
        change3.apply(document);
        undoManager.registerChange(change3);
        Assert.assertTrue(undoManager.canUndo());

        Assert.assertTrue(undoManager.canUndo());
        Assert.assertFalse(undoManager.canRedo());

        System.out.println(""Undoing and redoing starts here----------------------------------------------"");
        undoManager.undo();
        Assert.assertTrue(undoManager.canRedo());
        undoManager.undo();
        undoManager.redo();
        undoManager.redo();
    }
"
4981,263788b4-cd77-441d-ad83-90cb5c989412,"    public void delete(int pos, String s);
"
4982,2d594767-dbe6-432d-b541-759ac554e261,"    public void insert(int pos, String s);
"
4983,47bf9363-ac36-4d0b-b7ff-5bd4bd2df35a,"    public void setDot(int pos);
"
4984,677c942c-7eb1-496f-8e4c-c05ef08413d5,"    private ChangeType(final String changeType) {
        type = changeType;
    }
"
4985,e2b82102-80bc-4727-a63d-3f2ac9d3383a,"    public String getType() {
        return type;
    }
"
4986,f80b758d-45cb-415b-929f-3c7853ba2ac3,"    public void registerChange(Change change);
"
4987,b5842f95-04c2-4189-a87f-c973a79a0d1c,"    public boolean canUndo();
"
4988,d75b88c7-025b-4efa-89c9-27d3e98ef00e,"    public void undo();
"
4989,f5842755-7ae2-422b-805d-68c71343bc3c,"    public boolean canRedo();
"
4990,81a8365c-17b2-4f7c-8056-0d83f68aeb6d,"    public void redo();
"
4991,207bdbad-f01f-4b4e-b158-96503cae2696,"    public Change createDeletion(int pos, String s, int oldDot, int newDot);
"
4992,ade43d6e-5ec7-4517-b391-c595043dc55d,"    public Change createInsertion(int pos, String s, int oldDot, int newDot);
"
4993,f7be6d84-8270-46a7-ae60-157c185090b2,"    public String getType();
"
4994,541d19b1-22ce-4952-80f3-839110f2f366,"    public void apply(Document doc);
"
4995,8b13bd70-767f-4f60-a825-1cca9f8e4d4f,"    public void revert(Document doc);
"
4996,5e1db082-2fc1-4e7f-b5a5-d341bda0b883,"    public UndoManager createUndoManager(Document doc, int bufferSize);
"
4997,7c632e7a-6b27-4a88-8a9a-2817e763c291,"    @Override
    public void delete(final int pos, final String s) {
        System.out.println(""Deleting in document: "" + s);
    }
"
4998,e623b6e0-76c2-48b0-988d-1110df312ea0,"    @Override
    public void insert(final int pos, final String s) {
        System.out.println(""Inserting in document: "" + s);
    }
"
4999,122d8a4b-7dfc-41b4-9810-ba1cba6b3e74,"    @Override
    public void setDot(final int pos) {
        System.out.println(""Setting dot at: "" + pos);
    }
"
